
Final_Orthosynx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  0800d6b8  0800d6b8  0000e6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e064  0800e064  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e064  0800e064  0000f064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e06c  0800e06c  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e06c  0800e06c  0000f06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e070  0800e070  0000f070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e074  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  200001d8  0800e24c  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800e24c  00010624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019608  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002792  00000000  00000000  00029810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  0002bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000151a  00000000  00000000  0002d998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025693  00000000  00000000  0002eeb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2b6  00000000  00000000  00054545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4125  00000000  00000000  000717fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089a0  00000000  00000000  00155964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015e304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d69c 	.word	0x0800d69c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800d69c 	.word	0x0800d69c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001068:	23ff      	movs	r3, #255	@ 0xff
 800106a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 800106c:	2300      	movs	r3, #0
 800106e:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8001070:	2300      	movs	r3, #0
 8001072:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001074:	2300      	movs	r3, #0
 8001076:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8001078:	4a58      	ldr	r2, [pc, #352]	@ (80011dc <bno055_init+0x17c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800107e:	4b57      	ldr	r3, [pc, #348]	@ (80011dc <bno055_init+0x17c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68dc      	ldr	r4, [r3, #12]
 8001084:	4b55      	ldr	r3, [pc, #340]	@ (80011dc <bno055_init+0x17c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	7a58      	ldrb	r0, [r3, #9]
 800108a:	f107 020d 	add.w	r2, r7, #13
 800108e:	2301      	movs	r3, #1
 8001090:	2107      	movs	r1, #7
 8001092:	47a0      	blx	r4
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001098:	4b50      	ldr	r3, [pc, #320]	@ (80011dc <bno055_init+0x17c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	691c      	ldr	r4, [r3, #16]
 800109e:	4b4f      	ldr	r3, [pc, #316]	@ (80011dc <bno055_init+0x17c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	7a58      	ldrb	r0, [r3, #9]
 80010a4:	f107 020e 	add.w	r2, r7, #14
 80010a8:	2301      	movs	r3, #1
 80010aa:	2100      	movs	r1, #0
 80010ac:	47a0      	blx	r4
 80010ae:	4603      	mov	r3, r0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	4413      	add	r3, r2
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 80010ba:	4b48      	ldr	r3, [pc, #288]	@ (80011dc <bno055_init+0x17c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	7bba      	ldrb	r2, [r7, #14]
 80010c0:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010c2:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <bno055_init+0x17c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	691c      	ldr	r4, [r3, #16]
 80010c8:	4b44      	ldr	r3, [pc, #272]	@ (80011dc <bno055_init+0x17c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7a58      	ldrb	r0, [r3, #9]
 80010ce:	f107 020e 	add.w	r2, r7, #14
 80010d2:	2301      	movs	r3, #1
 80010d4:	2101      	movs	r1, #1
 80010d6:	47a0      	blx	r4
 80010d8:	4603      	mov	r3, r0
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	4413      	add	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80010e4:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <bno055_init+0x17c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	7bba      	ldrb	r2, [r7, #14]
 80010ea:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010ec:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <bno055_init+0x17c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	691c      	ldr	r4, [r3, #16]
 80010f2:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <bno055_init+0x17c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	7a58      	ldrb	r0, [r3, #9]
 80010f8:	f107 020e 	add.w	r2, r7, #14
 80010fc:	2301      	movs	r3, #1
 80010fe:	2102      	movs	r1, #2
 8001100:	47a0      	blx	r4
 8001102:	4603      	mov	r3, r0
 8001104:	b2da      	uxtb	r2, r3
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	4413      	add	r3, r2
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 800110e:	4b33      	ldr	r3, [pc, #204]	@ (80011dc <bno055_init+0x17c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	7bba      	ldrb	r2, [r7, #14]
 8001114:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <bno055_init+0x17c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691c      	ldr	r4, [r3, #16]
 800111c:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <bno055_init+0x17c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	7a58      	ldrb	r0, [r3, #9]
 8001122:	f107 020e 	add.w	r2, r7, #14
 8001126:	2301      	movs	r3, #1
 8001128:	2103      	movs	r1, #3
 800112a:	47a0      	blx	r4
 800112c:	4603      	mov	r3, r0
 800112e:	b2da      	uxtb	r2, r3
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4413      	add	r3, r2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8001138:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <bno055_init+0x17c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	7bba      	ldrb	r2, [r7, #14]
 800113e:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <bno055_init+0x17c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	691c      	ldr	r4, [r3, #16]
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <bno055_init+0x17c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	7a58      	ldrb	r0, [r3, #9]
 800114c:	f107 020e 	add.w	r2, r7, #14
 8001150:	2301      	movs	r3, #1
 8001152:	2106      	movs	r1, #6
 8001154:	47a0      	blx	r4
 8001156:	4603      	mov	r3, r0
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	4413      	add	r3, r2
 800115e:	b2db      	uxtb	r3, r3
 8001160:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8001162:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <bno055_init+0x17c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	7bba      	ldrb	r2, [r7, #14]
 8001168:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <bno055_init+0x17c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	691c      	ldr	r4, [r3, #16]
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <bno055_init+0x17c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	7a58      	ldrb	r0, [r3, #9]
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	2302      	movs	r3, #2
 800117c:	2104      	movs	r1, #4
 800117e:	47a0      	blx	r4
 8001180:	4603      	mov	r3, r0
 8001182:	b2da      	uxtb	r2, r3
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	4413      	add	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 800118c:	7a3b      	ldrb	r3, [r7, #8]
 800118e:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b29a      	uxth	r2, r3
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <bno055_init+0x17c>)
 800119c:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 800119e:	430a      	orrs	r2, r1
 80011a0:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 80011a2:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011a4:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <bno055_init+0x17c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691c      	ldr	r4, [r3, #16]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <bno055_init+0x17c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	7a58      	ldrb	r0, [r3, #9]
 80011b0:	f107 020e 	add.w	r2, r7, #14
 80011b4:	2301      	movs	r3, #1
 80011b6:	2107      	movs	r1, #7
 80011b8:	47a0      	blx	r4
 80011ba:	4603      	mov	r3, r0
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4413      	add	r3, r2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 80011c6:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <bno055_init+0x17c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	7bba      	ldrb	r2, [r7, #14]
 80011cc:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001f4 	.word	0x200001f4

080011e0 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80011f0:	23ff      	movs	r3, #255	@ 0xff
 80011f2:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <bno055_write_register+0x48>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 80011fc:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001200:	e00d      	b.n	800121e <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <bno055_write_register+0x48>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68dc      	ldr	r4, [r3, #12]
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <bno055_write_register+0x48>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7a58      	ldrb	r0, [r3, #9]
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	79f9      	ldrb	r1, [r7, #7]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	200001f4 	.word	0x200001f4

0800122c <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001236:	23ff      	movs	r3, #255	@ 0xff
 8001238:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800123a:	2300      	movs	r3, #0
 800123c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <bno055_write_page_id+0x8c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8001246:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800124a:	e030      	b.n	80012ae <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800124c:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <bno055_write_page_id+0x8c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691c      	ldr	r4, [r3, #16]
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <bno055_write_page_id+0x8c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	7a58      	ldrb	r0, [r3, #9]
 8001258:	f107 020e 	add.w	r2, r7, #14
 800125c:	2301      	movs	r3, #1
 800125e:	2107      	movs	r1, #7
 8001260:	47a0      	blx	r4
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d11b      	bne.n	80012a6 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <bno055_write_page_id+0x8c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68dc      	ldr	r4, [r3, #12]
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <bno055_write_page_id+0x8c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	7a58      	ldrb	r0, [r3, #9]
 800127e:	f107 020e 	add.w	r2, r7, #14
 8001282:	2301      	movs	r3, #1
 8001284:	2107      	movs	r1, #7
 8001286:	47a0      	blx	r4
 8001288:	4603      	mov	r3, r0
 800128a:	b2da      	uxtb	r2, r3
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	4413      	add	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8001294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d106      	bne.n	80012aa <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <bno055_write_page_id+0x8c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	711a      	strb	r2, [r3, #4]
 80012a4:	e001      	b.n	80012aa <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80012a6:	23ff      	movs	r3, #255	@ 0xff
 80012a8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001f4 	.word	0x200001f4

080012bc <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80012c4:	23ff      	movs	r3, #255	@ 0xff
 80012c6:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80012cc:	23ff      	movs	r3, #255	@ 0xff
 80012ce:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <bno055_get_operation_mode+0x80>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80012d8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80012dc:	e02a      	b.n	8001334 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80012de:	4b17      	ldr	r3, [pc, #92]	@ (800133c <bno055_get_operation_mode+0x80>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	791b      	ldrb	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff ff9f 	bl	800122c <bno055_write_page_id>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80012f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <bno055_get_operation_mode+0x48>
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <bno055_get_operation_mode+0x80>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d113      	bne.n	800132c <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <bno055_get_operation_mode+0x80>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	691c      	ldr	r4, [r3, #16]
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <bno055_get_operation_mode+0x80>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	7a58      	ldrb	r0, [r3, #9]
 8001310:	f107 020d 	add.w	r2, r7, #13
 8001314:	2301      	movs	r3, #1
 8001316:	213d      	movs	r1, #61	@ 0x3d
 8001318:	47a0      	blx	r4
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e001      	b.n	8001330 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800132c:	23ff      	movs	r3, #255	@ 0xff
 800132e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	200001f4 	.word	0x200001f4

08001340 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800134a:	23ff      	movs	r3, #255	@ 0xff
 800134c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800134e:	2300      	movs	r3, #0
 8001350:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001352:	2300      	movs	r3, #0
 8001354:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001356:	23ff      	movs	r3, #255	@ 0xff
 8001358:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800135a:	4b5c      	ldr	r3, [pc, #368]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001362:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001366:	e0ac      	b.n	80014c2 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ffa5 	bl	80012bc <bno055_get_operation_mode>
 8001372:	4603      	mov	r3, r0
 8001374:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 809d 	bne.w	80014ba <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d137      	bne.n	80013f6 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001386:	4b51      	ldr	r3, [pc, #324]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	691c      	ldr	r4, [r3, #16]
 800138c:	4b4f      	ldr	r3, [pc, #316]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	7a58      	ldrb	r0, [r3, #9]
 8001392:	f107 020d 	add.w	r2, r7, #13
 8001396:	2301      	movs	r3, #1
 8001398:	213d      	movs	r1, #61	@ 0x3d
 800139a:	47a0      	blx	r4
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 808a 	bne.w	80014be <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80013aa:	7b7b      	ldrb	r3, [r7, #13]
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	f023 030f 	bic.w	r3, r3, #15
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80013c6:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68dc      	ldr	r4, [r3, #12]
 80013cc:	4b3f      	ldr	r3, [pc, #252]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	7a58      	ldrb	r0, [r3, #9]
 80013d2:	f107 020d 	add.w	r2, r7, #13
 80013d6:	2301      	movs	r3, #1
 80013d8:	213d      	movs	r1, #61	@ 0x3d
 80013da:	47a0      	blx	r4
 80013dc:	4603      	mov	r3, r0
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	4413      	add	r3, r2
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80013e8:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80013f2:	4798      	blx	r3
 80013f4:	e063      	b.n	80014be <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80013f6:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	691c      	ldr	r4, [r3, #16]
 80013fc:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	7a58      	ldrb	r0, [r3, #9]
 8001402:	f107 020d 	add.w	r2, r7, #13
 8001406:	2301      	movs	r3, #1
 8001408:	213d      	movs	r1, #61	@ 0x3d
 800140a:	47a0      	blx	r4
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d116      	bne.n	8001446 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8001418:	7b7b      	ldrb	r3, [r7, #13]
 800141a:	f023 030f 	bic.w	r3, r3, #15
 800141e:	b2db      	uxtb	r3, r3
 8001420:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8001422:	f107 030d 	add.w	r3, r7, #13
 8001426:	2201      	movs	r2, #1
 8001428:	4619      	mov	r1, r3
 800142a:	203d      	movs	r0, #61	@ 0x3d
 800142c:	f7ff fed8 	bl	80011e0 <bno055_write_register>
 8001430:	4603      	mov	r3, r0
 8001432:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	4413      	add	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 800143c:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2014      	movs	r0, #20
 8001444:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d038      	beq.n	80014be <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691c      	ldr	r4, [r3, #16]
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	7a58      	ldrb	r0, [r3, #9]
 8001458:	f107 020d 	add.w	r2, r7, #13
 800145c:	2301      	movs	r3, #1
 800145e:	213d      	movs	r1, #61	@ 0x3d
 8001460:	47a0      	blx	r4
 8001462:	4603      	mov	r3, r0
 8001464:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d127      	bne.n	80014be <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	b25b      	sxtb	r3, r3
 8001472:	f023 030f 	bic.w	r3, r3, #15
 8001476:	b25a      	sxtb	r2, r3
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	b25b      	sxtb	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b25b      	sxtb	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68dc      	ldr	r4, [r3, #12]
 8001490:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	7a58      	ldrb	r0, [r3, #9]
 8001496:	f107 020d 	add.w	r2, r7, #13
 800149a:	2301      	movs	r3, #1
 800149c:	213d      	movs	r1, #61	@ 0x3d
 800149e:	47a0      	blx	r4
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80014b6:	4798      	blx	r3
 80014b8:	e001      	b.n	80014be <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80014ba:	23ff      	movs	r3, #255	@ 0xff
 80014bc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd90      	pop	{r4, r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200001f4 	.word	0x200001f4

080014d0 <__io_putchar>:
	#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
	#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#endif
	PUTCHAR_PROTOTYPE {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80014d8:	1d39      	adds	r1, r7, #4
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	2201      	movs	r2, #1
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <__io_putchar+0x20>)
 80014e2:	f006 fc7f 	bl	8007de4 <HAL_UART_Transmit>
	  return ch;
 80014e6:	687b      	ldr	r3, [r7, #4]
	}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200003a8 	.word	0x200003a8

080014f4 <BNO055_Delay>:

	void BNO055_Delay(u32 ms)
	{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
		HAL_Delay(ms);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f001 fc67 	bl	8002dd0 <HAL_Delay>
		//REFRESH_WATCHDOG();
	}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <main>:
	/**
	  * @brief  The application entry point.
	  * @retval int
	  */
	int main(void)
	{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN 1 */
	  /* USER CODE END 1 */
		  /* MCU Configuration--------------------------------------------------------*/
		  HAL_Init();
 8001512:	f001 fbeb 	bl	8002cec <HAL_Init>
		  SystemClock_Config();
 8001516:	f000 f959 	bl	80017cc <SystemClock_Config>
		  MX_GPIO_Init();
 800151a:	f000 fac7 	bl	8001aac <MX_GPIO_Init>
		  MX_USART2_UART_Init();
 800151e:	f000 fa6b 	bl	80019f8 <MX_USART2_UART_Init>
		  MX_DMA_Init();
 8001522:	f000 fa93 	bl	8001a4c <MX_DMA_Init>
		  MX_I2C1_Init();
 8001526:	f000 f9bf 	bl	80018a8 <MX_I2C1_Init>
		  MX_I2C2_Init();
 800152a:	f000 f9eb 	bl	8001904 <MX_I2C2_Init>
		  MX_TIM3_Init();
 800152e:	f000 fa17 	bl	8001960 <MX_TIM3_Init>
		  ///to here*/


	  /* USER CODE BEGIN 2 */
	  // Configure interrupt priorities
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0); // I2C1 Event
 8001532:	2200      	movs	r2, #0
 8001534:	2101      	movs	r1, #1
 8001536:	201f      	movs	r0, #31
 8001538:	f001 fd49 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0); // I2C1 Error (highest priority)
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2020      	movs	r0, #32
 8001542:	f001 fd44 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0); // I2C2 Event
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	2021      	movs	r0, #33	@ 0x21
 800154c:	f001 fd3f 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0); // I2C2 Error (highest priority)
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2022      	movs	r0, #34	@ 0x22
 8001556:	f001 fd3a 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(USART2_IRQn, 1, 0); // USART2 global interrupt
 800155a:	2200      	movs	r2, #0
 800155c:	2101      	movs	r1, #1
 800155e:	2026      	movs	r0, #38	@ 0x26
 8001560:	f001 fd35 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0); // Timer3 (lower priority)
 8001564:	2200      	movs	r2, #0
 8001566:	2102      	movs	r1, #2
 8001568:	201d      	movs	r0, #29
 800156a:	f001 fd30 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(WWDG_IRQn, 0, 0); // Watchdog (highest priority)
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2000      	movs	r0, #0
 8001574:	f001 fd2b 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0); // User Button
 8001578:	2200      	movs	r2, #0
 800157a:	2102      	movs	r1, #2
 800157c:	2028      	movs	r0, #40	@ 0x28
 800157e:	f001 fd26 	bl	8002fce <HAL_NVIC_SetPriority>
	  // Configure DMA interrupt priorities
	  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0); // I2C2_RX
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	200d      	movs	r0, #13
 8001588:	f001 fd21 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0); // I2C2_TX
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	202f      	movs	r0, #47	@ 0x2f
 8001592:	f001 fd1c 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0); // USART2_TX
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2011      	movs	r0, #17
 800159c:	f001 fd17 	bl	8002fce <HAL_NVIC_SetPriority>
	  // Configure I2C noise filtering
	  HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 80015a0:	2100      	movs	r1, #0
 80015a2:	486d      	ldr	r0, [pc, #436]	@ (8001758 <main+0x24c>)
 80015a4:	f005 f8fb 	bl	800679e <HAL_I2CEx_ConfigAnalogFilter>
	  HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 3);
 80015a8:	2103      	movs	r1, #3
 80015aa:	486b      	ldr	r0, [pc, #428]	@ (8001758 <main+0x24c>)
 80015ac:	f005 f933 	bl	8006816 <HAL_I2CEx_ConfigDigitalFilter>
	  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 80015b0:	2100      	movs	r1, #0
 80015b2:	486a      	ldr	r0, [pc, #424]	@ (800175c <main+0x250>)
 80015b4:	f005 f8f3 	bl	800679e <HAL_I2CEx_ConfigAnalogFilter>
	  HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 3);
 80015b8:	2103      	movs	r1, #3
 80015ba:	4868      	ldr	r0, [pc, #416]	@ (800175c <main+0x250>)
 80015bc:	f005 f92b 	bl	8006816 <HAL_I2CEx_ConfigDigitalFilter>
	  // Configure printf buffering
	  setbuf(stdout, NULL); // Disable buffering for immediate output
 80015c0:	4b67      	ldr	r3, [pc, #412]	@ (8001760 <main+0x254>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f008 fb69 	bl	8009ca0 <setbuf>
	  // Initialize Debug LED to OFF
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015d4:	4863      	ldr	r0, [pc, #396]	@ (8001764 <main+0x258>)
 80015d6:	f002 fa4f 	bl	8003a78 <HAL_GPIO_WritePin>
	  // Print startup message
	  printf("\r\n=== Prosthetic Knee Controller (BNO055 IMUPLUS) ===\r\n");
 80015da:	4863      	ldr	r0, [pc, #396]	@ (8001768 <main+0x25c>)
 80015dc:	f008 fb58 	bl	8009c90 <puts>
	  printf("System Clock: %lu Hz\r\n", HAL_RCC_GetSysClockFreq());
 80015e0:	f005 fa72 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4619      	mov	r1, r3
 80015e8:	4860      	ldr	r0, [pc, #384]	@ (800176c <main+0x260>)
 80015ea:	f008 fae9 	bl	8009bc0 <iprintf>
	  printf("Build: %s %s\r\n", __DATE__, __TIME__);
 80015ee:	4a60      	ldr	r2, [pc, #384]	@ (8001770 <main+0x264>)
 80015f0:	4960      	ldr	r1, [pc, #384]	@ (8001774 <main+0x268>)
 80015f2:	4861      	ldr	r0, [pc, #388]	@ (8001778 <main+0x26c>)
 80015f4:	f008 fae4 	bl	8009bc0 <iprintf>

	  // Initialize IMU data structures
	  memset(&thigh_imu, 0, sizeof(IMU_Data_t));
 80015f8:	2218      	movs	r2, #24
 80015fa:	2100      	movs	r1, #0
 80015fc:	485f      	ldr	r0, [pc, #380]	@ (800177c <main+0x270>)
 80015fe:	f008 fd05 	bl	800a00c <memset>
	  memset(&shank_imu, 0, sizeof(IMU_Data_t));
 8001602:	2218      	movs	r2, #24
 8001604:	2100      	movs	r1, #0
 8001606:	485e      	ldr	r0, [pc, #376]	@ (8001780 <main+0x274>)
 8001608:	f008 fd00 	bl	800a00c <memset>

	  // LED startup sequence
	  printf("Starting initialization sequence...\r\n");
 800160c:	485d      	ldr	r0, [pc, #372]	@ (8001784 <main+0x278>)
 800160e:	f008 fb3f 	bl	8009c90 <puts>
	  for(int i = 0; i < 3; i++)
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e009      	b.n	800162c <main+0x120>
	  {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001618:	2120      	movs	r1, #32
 800161a:	485b      	ldr	r0, [pc, #364]	@ (8001788 <main+0x27c>)
 800161c:	f002 fa45 	bl	8003aaa <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001620:	20c8      	movs	r0, #200	@ 0xc8
 8001622:	f001 fbd5 	bl	8002dd0 <HAL_Delay>
	  for(int i = 0; i < 3; i++)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b02      	cmp	r3, #2
 8001630:	ddf2      	ble.n	8001618 <main+0x10c>
	//	REFRESH_WATCHDOG();
	  }
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2120      	movs	r1, #32
 8001636:	4854      	ldr	r0, [pc, #336]	@ (8001788 <main+0x27c>)
 8001638:	f002 fa1e 	bl	8003a78 <HAL_GPIO_WritePin>

	  // Wait for IMU power-up (BNO055 requires ~650ms)
	  printf("Waiting for IMU power-up...\r\n");
 800163c:	4853      	ldr	r0, [pc, #332]	@ (800178c <main+0x280>)
 800163e:	f008 fb27 	bl	8009c90 <puts>
	  BNO055_Delay(700);
 8001642:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001646:	f7ff ff55 	bl	80014f4 <BNO055_Delay>

	  // Scan I2C bus and assign addresses
	  I2C_Scan_And_Assign();
 800164a:	f000 fb2f 	bl	8001cac <I2C_Scan_And_Assign>

	  // Initialize both sensors
	  BNO055_Init_Dual();
 800164e:	f000 fbd7 	bl	8001e00 <BNO055_Init_Dual>

	  // Start calibration process
	  printf("\r\nStarting calibration process...\r\n");
 8001652:	484f      	ldr	r0, [pc, #316]	@ (8001790 <main+0x284>)
 8001654:	f008 fb1c 	bl	8009c90 <puts>
	  printf("Keep the prosthetic stationary during calibration!\r\n");
 8001658:	484e      	ldr	r0, [pc, #312]	@ (8001794 <main+0x288>)
 800165a:	f008 fb19 	bl	8009c90 <puts>

	  uint32_t calibration_start = HAL_GetTick();
 800165e:	f001 fbab 	bl	8002db8 <HAL_GetTick>
 8001662:	6078      	str	r0, [r7, #4]
	  uint32_t last_status_print = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]

	  while (!calibration_complete && (HAL_GetTick() - calibration_start < CALIBRATION_TIMEOUT_MS))
 8001668:	e027      	b.n	80016ba <main+0x1ae>
	  {
		Read_Dual_Calibration();
 800166a:	f000 fc73 	bl	8001f54 <Read_Dual_Calibration>

		// Print status every second
		if (HAL_GetTick() - last_status_print >= 1000)
 800166e:	f001 fba3 	bl	8002db8 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800167c:	d304      	bcc.n	8001688 <main+0x17c>
		{
		  print_calibration_status();
 800167e:	f000 fca1 	bl	8001fc4 <print_calibration_status>
		  last_status_print = HAL_GetTick();
 8001682:	f001 fb99 	bl	8002db8 <HAL_GetTick>
 8001686:	60b8      	str	r0, [r7, #8]
		}

		// Check if both sensors are calibrated
		if (is_sensor_calibrated(thigh_imu.calib_status) &&
 8001688:	4843      	ldr	r0, [pc, #268]	@ (8001798 <main+0x28c>)
 800168a:	f000 fc49 	bl	8001f20 <is_sensor_calibrated>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00f      	beq.n	80016b4 <main+0x1a8>
			is_sensor_calibrated(shank_imu.calib_status))
 8001694:	4841      	ldr	r0, [pc, #260]	@ (800179c <main+0x290>)
 8001696:	f000 fc43 	bl	8001f20 <is_sensor_calibrated>
 800169a:	4603      	mov	r3, r0
		if (is_sensor_calibrated(thigh_imu.calib_status) &&
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <main+0x1a8>
		{
		  calibration_complete = true;
 80016a0:	4b3f      	ldr	r3, [pc, #252]	@ (80017a0 <main+0x294>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
		  printf("\r\n*** CALIBRATION COMPLETE! ***\r\n");
 80016a6:	483f      	ldr	r0, [pc, #252]	@ (80017a4 <main+0x298>)
 80016a8:	f008 faf2 	bl	8009c90 <puts>
		  system_status = SENSOR_OK;
 80016ac:	4b3e      	ldr	r3, [pc, #248]	@ (80017a8 <main+0x29c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		  break;
 80016b2:	e012      	b.n	80016da <main+0x1ce>
		}

		BNO055_Delay(100);
 80016b4:	2064      	movs	r0, #100	@ 0x64
 80016b6:	f7ff ff1d 	bl	80014f4 <BNO055_Delay>
	  while (!calibration_complete && (HAL_GetTick() - calibration_start < CALIBRATION_TIMEOUT_MS))
 80016ba:	4b39      	ldr	r3, [pc, #228]	@ (80017a0 <main+0x294>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	f083 0301 	eor.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <main+0x1ce>
 80016c8:	f001 fb76 	bl	8002db8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d9c7      	bls.n	800166a <main+0x15e>
	//	REFRESH_WATCHDOG();
	  }

	  if (!calibration_complete)
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <main+0x294>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f083 0301 	eor.w	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <main+0x1e8>
	  {
		printf("\r\nWARNING: Calibration timeout! Proceeding with partial calibration.\r\n");
 80016e8:	4830      	ldr	r0, [pc, #192]	@ (80017ac <main+0x2a0>)
 80016ea:	f008 fad1 	bl	8009c90 <puts>
		system_status = SENSOR_NOT_CALIBRATED;
 80016ee:	4b2e      	ldr	r3, [pc, #184]	@ (80017a8 <main+0x29c>)
 80016f0:	2202      	movs	r2, #2
 80016f2:	701a      	strb	r2, [r3, #0]
	  }

	  // Start timer for 100Hz updates
	  HAL_TIM_Base_Start_IT(&htim3);
 80016f4:	482e      	ldr	r0, [pc, #184]	@ (80017b0 <main+0x2a4>)
 80016f6:	f005 ff05 	bl	8007504 <HAL_TIM_Base_Start_IT>
	  last_orientation_update = HAL_GetTick();
 80016fa:	f001 fb5d 	bl	8002db8 <HAL_GetTick>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a2c      	ldr	r2, [pc, #176]	@ (80017b4 <main+0x2a8>)
 8001702:	6013      	str	r3, [r2, #0]

	  printf("\r\nStarting orientation tracking at 100Hz...\r\n");
 8001704:	482c      	ldr	r0, [pc, #176]	@ (80017b8 <main+0x2ac>)
 8001706:	f008 fac3 	bl	8009c90 <puts>
	  printf("Format: Knee_Angle(°) | Angular_Velocity(°/s)\r\n");
 800170a:	482c      	ldr	r0, [pc, #176]	@ (80017bc <main+0x2b0>)
 800170c:	f008 fac0 	bl	8009c90 <puts>
	  printf("----------------------------------------\r\n");
 8001710:	482b      	ldr	r0, [pc, #172]	@ (80017c0 <main+0x2b4>)
 8001712:	f008 fabd 	bl	8009c90 <puts>
	  /* USER CODE BEGIN WHILE */
	  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
	    // Process sensor data when timer flag is set (100Hz)
	    if (timer_flag)
 8001716:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <main+0x2b8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d017      	beq.n	8001750 <main+0x244>
	    {
	      timer_flag = false;
 8001720:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <main+0x2b8>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
	      Read_Dual_Orientation();
 8001726:	f000 fd2b 	bl	8002180 <Read_Dual_Orientation>
	      calculate_knee_kinematics();
 800172a:	f000 fd9d 	bl	8002268 <calculate_knee_kinematics>

	      // Periodic system health check (every 5 seconds)
	      static uint32_t last_health_check = 0;
	      if (HAL_GetTick() - last_health_check >= 5000)
 800172e:	f001 fb43 	bl	8002db8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	4b24      	ldr	r3, [pc, #144]	@ (80017c8 <main+0x2bc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800173e:	4293      	cmp	r3, r2
 8001740:	d906      	bls.n	8001750 <main+0x244>
	      {
	        system_health_check();
 8001742:	f000 fe93 	bl	800246c <system_health_check>
	        last_health_check = HAL_GetTick();
 8001746:	f001 fb37 	bl	8002db8 <HAL_GetTick>
 800174a:	4603      	mov	r3, r0
 800174c:	4a1e      	ldr	r2, [pc, #120]	@ (80017c8 <main+0x2bc>)
 800174e:	6013      	str	r3, [r2, #0]
	      }
	    }

	    // Short delay to prevent CPU overload
	    HAL_Delay(1);
 8001750:	2001      	movs	r0, #1
 8001752:	f001 fb3d 	bl	8002dd0 <HAL_Delay>
	    if (timer_flag)
 8001756:	e7de      	b.n	8001716 <main+0x20a>
 8001758:	200001f8 	.word	0x200001f8
 800175c:	2000024c 	.word	0x2000024c
 8001760:	2000001c 	.word	0x2000001c
 8001764:	40020400 	.word	0x40020400
 8001768:	0800d6b8 	.word	0x0800d6b8
 800176c:	0800d6f0 	.word	0x0800d6f0
 8001770:	0800d708 	.word	0x0800d708
 8001774:	0800d714 	.word	0x0800d714
 8001778:	0800d720 	.word	0x0800d720
 800177c:	20000480 	.word	0x20000480
 8001780:	20000498 	.word	0x20000498
 8001784:	0800d730 	.word	0x0800d730
 8001788:	40020000 	.word	0x40020000
 800178c:	0800d758 	.word	0x0800d758
 8001790:	0800d778 	.word	0x0800d778
 8001794:	0800d79c 	.word	0x0800d79c
 8001798:	20000494 	.word	0x20000494
 800179c:	200004ac 	.word	0x200004ac
 80017a0:	200004c9 	.word	0x200004c9
 80017a4:	0800d7d0 	.word	0x0800d7d0
 80017a8:	20000000 	.word	0x20000000
 80017ac:	0800d7f4 	.word	0x0800d7f4
 80017b0:	20000360 	.word	0x20000360
 80017b4:	200004bc 	.word	0x200004bc
 80017b8:	0800d83c 	.word	0x0800d83c
 80017bc:	0800d86c 	.word	0x0800d86c
 80017c0:	0800d8a0 	.word	0x0800d8a0
 80017c4:	200004c0 	.word	0x200004c0
 80017c8:	200004cc 	.word	0x200004cc

080017cc <SystemClock_Config>:
	/**
	  * @brief System Clock Configuration
	  * @retval None
	  */
	void SystemClock_Config(void)
	{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	@ 0x50
 80017d0:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	2234      	movs	r2, #52	@ 0x34
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f008 fc16 	bl	800a00c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <SystemClock_Config+0xd4>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a29      	ldr	r2, [pc, #164]	@ (80018a0 <SystemClock_Config+0xd4>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <SystemClock_Config+0xd4>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800180c:	2300      	movs	r3, #0
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	4b24      	ldr	r3, [pc, #144]	@ (80018a4 <SystemClock_Config+0xd8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001818:	4a22      	ldr	r2, [pc, #136]	@ (80018a4 <SystemClock_Config+0xd8>)
 800181a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b20      	ldr	r3, [pc, #128]	@ (80018a4 <SystemClock_Config+0xd8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182c:	2302      	movs	r3, #2
 800182e:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	2301      	movs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	@ 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001834:	2310      	movs	r3, #16
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001838:	2302      	movs	r3, #2
 800183a:	637b      	str	r3, [r7, #52]	@ 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800183c:	2300      	movs	r3, #0
 800183e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 8001840:	2310      	movs	r3, #16
 8001842:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 8001844:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001848:	643b      	str	r3, [r7, #64]	@ 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800184a:	2304      	movs	r3, #4
 800184c:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 800184e:	2302      	movs	r3, #2
 8001850:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8001852:	2302      	movs	r3, #2
 8001854:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4618      	mov	r0, r3
 800185c:	f005 fb64 	bl	8006f28 <HAL_RCC_OscConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x9e>
	  {
	    Error_Handler();
 8001866:	f000 fea5 	bl	80025b4 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186a:	230f      	movs	r3, #15
 800186c:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186e:	2302      	movs	r3, #2
 8001870:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187a:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	2102      	movs	r1, #2
 8001886:	4618      	mov	r0, r3
 8001888:	f005 f804 	bl	8006894 <HAL_RCC_ClockConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 8001892:	f000 fe8f 	bl	80025b4 <Error_Handler>
	  }
	}
 8001896:	bf00      	nop
 8001898:	3750      	adds	r7, #80	@ 0x50
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000

080018a8 <MX_I2C1_Init>:
	  * @brief I2C1 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_I2C1_Init(void)
	{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018ae:	4a13      	ldr	r2, [pc, #76]	@ (80018fc <MX_I2C1_Init+0x54>)
 80018b0:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018b4:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <MX_I2C1_Init+0x58>)
 80018b6:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018ca:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <MX_I2C1_Init+0x50>)
 80018e6:	f002 f8fb 	bl	8003ae0 <HAL_I2C_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2C1_Init+0x4c>
	  {
	    Error_Handler();
 80018f0:	f000 fe60 	bl	80025b4 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */

	}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200001f8 	.word	0x200001f8
 80018fc:	40005400 	.word	0x40005400
 8001900:	000186a0 	.word	0x000186a0

08001904 <MX_I2C2_Init>:
	  * @brief I2C2 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_I2C2_Init(void)
	{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C2_Init 0 */

	  /* USER CODE BEGIN I2C2_Init 1 */

	  /* USER CODE END I2C2_Init 1 */
	  hi2c2.Instance = I2C2;
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <MX_I2C2_Init+0x50>)
 800190a:	4a13      	ldr	r2, [pc, #76]	@ (8001958 <MX_I2C2_Init+0x54>)
 800190c:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_I2C2_Init+0x50>)
 8001910:	4a12      	ldr	r2, [pc, #72]	@ (800195c <MX_I2C2_Init+0x58>)
 8001912:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_I2C2_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_I2C2_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_I2C2_Init+0x50>)
 8001922:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001926:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <MX_I2C2_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_I2C2_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <MX_I2C2_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_I2C2_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	@ (8001954 <MX_I2C2_Init+0x50>)
 8001942:	f002 f8cd 	bl	8003ae0 <HAL_I2C_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2C2_Init+0x4c>
	  {
	    Error_Handler();
 800194c:	f000 fe32 	bl	80025b4 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C2_Init 2 */

	  /* USER CODE END I2C2_Init 2 */

	}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000024c 	.word	0x2000024c
 8001958:	40005800 	.word	0x40005800
 800195c:	000186a0 	.word	0x000186a0

08001960 <MX_TIM3_Init>:
	  * @brief TIM3 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_TIM3_Init(void)
	{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN TIM3_Init 0 */

	  /* USER CODE END TIM3_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <MX_TIM3_Init+0x90>)
 800197e:	4a1d      	ldr	r2, [pc, #116]	@ (80019f4 <MX_TIM3_Init+0x94>)
 8001980:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 0;
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <MX_TIM3_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <MX_TIM3_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 99;
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <MX_TIM3_Init+0x90>)
 8001990:	2263      	movs	r2, #99	@ 0x63
 8001992:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <MX_TIM3_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <MX_TIM3_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019a0:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <MX_TIM3_Init+0x90>)
 80019a2:	f005 fd5f 	bl	8007464 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM3_Init+0x50>
	  {
	    Error_Handler();
 80019ac:	f000 fe02 	bl	80025b4 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b4:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	4619      	mov	r1, r3
 80019bc:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <MX_TIM3_Init+0x90>)
 80019be:	f005 ff01 	bl	80077c4 <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM3_Init+0x6c>
	  {
	    Error_Handler();
 80019c8:	f000 fdf4 	bl	80025b4 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	603b      	str	r3, [r7, #0]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_TIM3_Init+0x90>)
 80019da:	f006 f923 	bl	8007c24 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0x88>
	  {
	    Error_Handler();
 80019e4:	f000 fde6 	bl	80025b4 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */

	}
 80019e8:	bf00      	nop
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000360 	.word	0x20000360
 80019f4:	40000400 	.word	0x40000400

080019f8 <MX_USART2_UART_Init>:
	  * @brief USART2 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_USART2_UART_Init(void)
	{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	  /* USER CODE END USART2_Init 0 */

	  /* USER CODE BEGIN USART2_Init 1 */

	  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <MX_USART2_UART_Init+0x4c>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <MX_USART2_UART_Init+0x50>)
 8001a00:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a08:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a2a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a2e:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a30:	4804      	ldr	r0, [pc, #16]	@ (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a32:	f006 f987 	bl	8007d44 <HAL_UART_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_USART2_UART_Init+0x48>
	  {
	    Error_Handler();
 8001a3c:	f000 fdba 	bl	80025b4 <Error_Handler>
	  }
	  /* USER CODE BEGIN USART2_Init 2 */

	  /* USER CODE END USART2_Init 2 */

	}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200003a8 	.word	0x200003a8
 8001a48:	40004400 	.word	0x40004400

08001a4c <MX_DMA_Init>:

	/**
	  * Enable DMA controller clock
	  */
	static void MX_DMA_Init(void)
	{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <MX_DMA_Init+0x5c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <MX_DMA_Init+0x5c>)
 8001a5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_DMA_Init+0x5c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	200d      	movs	r0, #13
 8001a74:	f001 faab 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a78:	200d      	movs	r0, #13
 8001a7a:	f001 fac4 	bl	8003006 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Stream6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2011      	movs	r0, #17
 8001a84:	f001 faa3 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a88:	2011      	movs	r0, #17
 8001a8a:	f001 fabc 	bl	8003006 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Stream7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	202f      	movs	r0, #47	@ 0x2f
 8001a94:	f001 fa9b 	bl	8002fce <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001a98:	202f      	movs	r0, #47	@ 0x2f
 8001a9a:	f001 fab4 	bl	8003006 <HAL_NVIC_EnableIRQ>

	}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <MX_GPIO_Init>:
	  * @brief GPIO Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_GPIO_Init(void)
	{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
	  /* USER CODE BEGIN MX_GPIO_Init_1 */

	  /* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b39      	ldr	r3, [pc, #228]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a38      	ldr	r2, [pc, #224]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b36      	ldr	r3, [pc, #216]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b32      	ldr	r3, [pc, #200]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a31      	ldr	r2, [pc, #196]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a2a      	ldr	r2, [pc, #168]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a23      	ldr	r2, [pc, #140]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <MX_GPIO_Init+0x100>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_STEP_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001b38:	481d      	ldr	r0, [pc, #116]	@ (8001bb0 <MX_GPIO_Init+0x104>)
 8001b3a:	f001 ff9d 	bl	8003a78 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR_Pin|MOTOR_ENG_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f244 0103 	movw	r1, #16387	@ 0x4003
 8001b44:	481b      	ldr	r0, [pc, #108]	@ (8001bb4 <MX_GPIO_Init+0x108>)
 8001b46:	f001 ff97 	bl	8003a78 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 8001b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b4e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b50:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b54:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4815      	ldr	r0, [pc, #84]	@ (8001bb8 <MX_GPIO_Init+0x10c>)
 8001b62:	f001 fdf5 	bl	8003750 <HAL_GPIO_Init>

	  /*Configure GPIO pins : LD2_Pin MOTOR_STEP_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_STEP_Pin;
 8001b66:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001b6a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <MX_GPIO_Init+0x104>)
 8001b80:	f001 fde6 	bl	8003750 <HAL_GPIO_Init>

	  /*Configure GPIO pins : MOTOR_DIR_Pin MOTOR_ENG_Pin DEBUG_LED_Pin */
	  GPIO_InitStruct.Pin = MOTOR_DIR_Pin|MOTOR_ENG_Pin|DEBUG_LED_Pin;
 8001b84:	f244 0303 	movw	r3, #16387	@ 0x4003
 8001b88:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_GPIO_Init+0x108>)
 8001b9e:	f001 fdd7 	bl	8003750 <HAL_GPIO_Init>

	  /* USER CODE BEGIN MX_GPIO_Init_2 */

	  /* USER CODE END MX_GPIO_Init_2 */
	}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	@ 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40020800 	.word	0x40020800

08001bbc <BNO055_I2C_bus_read>:


	/* USER CODE BEGIN 4 */
	// ==== BNO055 I2C INTERFACE FUNCTIONS ====
	s8 BNO055_I2C_bus_read(u8 dev, u8 reg, u8 *data, u8 len)
	{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	603a      	str	r2, [r7, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	71bb      	strb	r3, [r7, #6]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	717b      	strb	r3, [r7, #5]
	  for (int retry = 0; retry < MAX_I2C_RETRIES; retry++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e020      	b.n	8001c1a <BNO055_I2C_bus_read+0x5e>
	  {
		HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, dev << 1, reg,
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b299      	uxth	r1, r3
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	797b      	ldrb	r3, [r7, #5]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2064      	movs	r0, #100	@ 0x64
 8001bea:	9002      	str	r0, [sp, #8]
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <BNO055_I2C_bus_read+0x70>)
 8001bf6:	f002 f9c7 	bl	8003f88 <HAL_I2C_Mem_Read>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	72fb      	strb	r3, [r7, #11]
													I2C_MEMADD_SIZE_8BIT, data, len, I2C_TIMEOUT_MS);
		if (status == HAL_OK)
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <BNO055_I2C_bus_read+0x4c>
		  return BNO055_SUCCESS;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e00d      	b.n	8001c24 <BNO055_I2C_bus_read+0x68>

		if (retry < MAX_I2C_RETRIES - 1)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	dc02      	bgt.n	8001c14 <BNO055_I2C_bus_read+0x58>
		  HAL_Delay(1); // Short delay before retry
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f001 f8de 	bl	8002dd0 <HAL_Delay>
	  for (int retry = 0; retry < MAX_I2C_RETRIES; retry++)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3301      	adds	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	dddb      	ble.n	8001bd8 <BNO055_I2C_bus_read+0x1c>
	  }
	  return BNO055_ERROR;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000024c 	.word	0x2000024c

08001c30 <BNO055_I2C_bus_write>:

	s8 BNO055_I2C_bus_write(u8 dev, u8 reg, u8 *data, u8 len)
	{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af04      	add	r7, sp, #16
 8001c36:	603a      	str	r2, [r7, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	71bb      	strb	r3, [r7, #6]
 8001c42:	4613      	mov	r3, r2
 8001c44:	717b      	strb	r3, [r7, #5]
	  for (int retry = 0; retry < MAX_I2C_RETRIES; retry++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e023      	b.n	8001c94 <BNO055_I2C_bus_write+0x64>
	  {
		HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c2, dev << 1, reg,
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	b299      	uxth	r1, r3
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	797b      	ldrb	r3, [r7, #5]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2064      	movs	r0, #100	@ 0x64
 8001c5e:	9002      	str	r0, [sp, #8]
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2301      	movs	r3, #1
 8001c68:	480f      	ldr	r0, [pc, #60]	@ (8001ca8 <BNO055_I2C_bus_write+0x78>)
 8001c6a:	f002 f893 	bl	8003d94 <HAL_I2C_Mem_Write>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	72fb      	strb	r3, [r7, #11]
													 I2C_MEMADD_SIZE_8BIT, data, len, I2C_TIMEOUT_MS);
		if (status == HAL_OK)
 8001c72:	7afb      	ldrb	r3, [r7, #11]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <BNO055_I2C_bus_write+0x52>
		{
		  HAL_Delay(1); // Small delay after write as per BNO055 datasheet
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f001 f8a9 	bl	8002dd0 <HAL_Delay>
		  return BNO055_SUCCESS;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e00d      	b.n	8001c9e <BNO055_I2C_bus_write+0x6e>
		}

		if (retry < MAX_I2C_RETRIES - 1)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	dc02      	bgt.n	8001c8e <BNO055_I2C_bus_write+0x5e>
		  HAL_Delay(1); // Short delay before retry
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f001 f8a1 	bl	8002dd0 <HAL_Delay>
	  for (int retry = 0; retry < MAX_I2C_RETRIES; retry++)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	ddd8      	ble.n	8001c4c <BNO055_I2C_bus_write+0x1c>
	  }
	  return BNO055_ERROR;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000024c 	.word	0x2000024c

08001cac <I2C_Scan_And_Assign>:

	// ==== INITIALIZATION FUNCTIONS ====
	void I2C_Scan_And_Assign(void)
	{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
	  printf("Scanning I2C2 bus...\r\n");
 8001cb2:	482b      	ldr	r0, [pc, #172]	@ (8001d60 <I2C_Scan_And_Assign+0xb4>)
 8001cb4:	f007 ffec 	bl	8009c90 <puts>
	  uint8_t found_addresses[2] = {0};
 8001cb8:	2300      	movs	r3, #0
 8001cba:	803b      	strh	r3, [r7, #0]
	  int found_count = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]

	  for (uint8_t addr = 0x08; addr < 0x78; addr++)
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	70fb      	strb	r3, [r7, #3]
 8001cc4:	e01e      	b.n	8001d04 <I2C_Scan_And_Assign+0x58>
	  {
		if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 2, 100) == HAL_OK)
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	b299      	uxth	r1, r3
 8001cce:	2364      	movs	r3, #100	@ 0x64
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4824      	ldr	r0, [pc, #144]	@ (8001d64 <I2C_Scan_And_Assign+0xb8>)
 8001cd4:	f002 fb8a 	bl	80043ec <HAL_I2C_IsDeviceReady>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10f      	bne.n	8001cfe <I2C_Scan_And_Assign+0x52>
		{
		  printf("Found device at 0x%02X\r\n", addr);
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4821      	ldr	r0, [pc, #132]	@ (8001d68 <I2C_Scan_And_Assign+0xbc>)
 8001ce4:	f007 ff6c 	bl	8009bc0 <iprintf>
		  if (found_count < 2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	dc07      	bgt.n	8001cfe <I2C_Scan_And_Assign+0x52>
		  {
			found_addresses[found_count] = addr;
 8001cee:	463a      	mov	r2, r7
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	701a      	strb	r2, [r3, #0]
			found_count++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	607b      	str	r3, [r7, #4]
	  for (uint8_t addr = 0x08; addr < 0x78; addr++)
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	3301      	adds	r3, #1
 8001d02:	70fb      	strb	r3, [r7, #3]
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	2b77      	cmp	r3, #119	@ 0x77
 8001d08:	d9dd      	bls.n	8001cc6 <I2C_Scan_And_Assign+0x1a>
		  }
		}
	  }

	  // Assign addresses or use defaults
	  if (found_count >= 2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	dd0a      	ble.n	8001d26 <I2C_Scan_And_Assign+0x7a>
	  {
		thigh_sensor.dev_addr = found_addresses[0];
 8001d10:	783a      	ldrb	r2, [r7, #0]
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <I2C_Scan_And_Assign+0xc0>)
 8001d14:	725a      	strb	r2, [r3, #9]
		shank_sensor.dev_addr = found_addresses[1];
 8001d16:	787a      	ldrb	r2, [r7, #1]
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <I2C_Scan_And_Assign+0xc4>)
 8001d1a:	725a      	strb	r2, [r3, #9]
		sensors_found = found_count;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <I2C_Scan_And_Assign+0xc8>)
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e00f      	b.n	8001d46 <I2C_Scan_And_Assign+0x9a>
	  }
	  else
	  {
		printf("WARNING: Expected 2 BNO055 sensors, found %d\r\n", found_count);
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4813      	ldr	r0, [pc, #76]	@ (8001d78 <I2C_Scan_And_Assign+0xcc>)
 8001d2a:	f007 ff49 	bl	8009bc0 <iprintf>
		printf("Using default addresses...\r\n");
 8001d2e:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <I2C_Scan_And_Assign+0xd0>)
 8001d30:	f007 ffae 	bl	8009c90 <puts>
		thigh_sensor.dev_addr = THIGH_SENSOR_ADDR; // 0x28
 8001d34:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <I2C_Scan_And_Assign+0xc0>)
 8001d36:	2228      	movs	r2, #40	@ 0x28
 8001d38:	725a      	strb	r2, [r3, #9]
		shank_sensor.dev_addr = SHANK_SENSOR_ADDR; // 0x29
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <I2C_Scan_And_Assign+0xc4>)
 8001d3c:	2229      	movs	r2, #41	@ 0x29
 8001d3e:	725a      	strb	r2, [r3, #9]
		sensors_found = 2; // Assume they're there
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <I2C_Scan_And_Assign+0xc8>)
 8001d42:	2202      	movs	r2, #2
 8001d44:	701a      	strb	r2, [r3, #0]
	  }

	  printf("Assigned - Thigh: 0x%02X, Shank: 0x%02X\r\n",
			 thigh_sensor.dev_addr, shank_sensor.dev_addr);
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <I2C_Scan_And_Assign+0xc0>)
 8001d48:	7a5b      	ldrb	r3, [r3, #9]
	  printf("Assigned - Thigh: 0x%02X, Shank: 0x%02X\r\n",
 8001d4a:	4619      	mov	r1, r3
			 thigh_sensor.dev_addr, shank_sensor.dev_addr);
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <I2C_Scan_And_Assign+0xc4>)
 8001d4e:	7a5b      	ldrb	r3, [r3, #9]
	  printf("Assigned - Thigh: 0x%02X, Shank: 0x%02X\r\n",
 8001d50:	461a      	mov	r2, r3
 8001d52:	480b      	ldr	r0, [pc, #44]	@ (8001d80 <I2C_Scan_And_Assign+0xd4>)
 8001d54:	f007 ff34 	bl	8009bc0 <iprintf>
	}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	0800d8cc 	.word	0x0800d8cc
 8001d64:	2000024c 	.word	0x2000024c
 8001d68:	0800d8e4 	.word	0x0800d8e4
 8001d6c:	20000450 	.word	0x20000450
 8001d70:	20000468 	.word	0x20000468
 8001d74:	200004c8 	.word	0x200004c8
 8001d78:	0800d900 	.word	0x0800d900
 8001d7c:	0800d930 	.word	0x0800d930
 8001d80:	0800d94c 	.word	0x0800d94c

08001d84 <BNO055_Init_Sensor>:

	SensorStatus BNO055_Init_Sensor(struct bno055_t *sensor, const char* name)
	{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
	  // Setup sensor structure
	  sensor->bus_read = BNO055_I2C_bus_read;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a15      	ldr	r2, [pc, #84]	@ (8001de8 <BNO055_Init_Sensor+0x64>)
 8001d92:	611a      	str	r2, [r3, #16]
	  sensor->bus_write = BNO055_I2C_bus_write;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a15      	ldr	r2, [pc, #84]	@ (8001dec <BNO055_Init_Sensor+0x68>)
 8001d98:	60da      	str	r2, [r3, #12]
	  sensor->delay_msec = BNO055_Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a14      	ldr	r2, [pc, #80]	@ (8001df0 <BNO055_Init_Sensor+0x6c>)
 8001d9e:	615a      	str	r2, [r3, #20]

	  // Initialize sensor
	  if (bno055_init(sensor) != BNO055_SUCCESS)
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff f95d 	bl	8001060 <bno055_init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <BNO055_Init_Sensor+0x34>
	  {
		printf("ERROR: %s sensor init failed!\r\n", name);
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	4811      	ldr	r0, [pc, #68]	@ (8001df4 <BNO055_Init_Sensor+0x70>)
 8001db0:	f007 ff06 	bl	8009bc0 <iprintf>
		return SENSOR_INIT_ERROR;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e013      	b.n	8001de0 <BNO055_Init_Sensor+0x5c>
	  }

	  // Set to IMUPLUS mode (IMU + Magnetometer)
	  if (bno055_set_operation_mode(IMUPLUS_MODE) != BNO055_SUCCESS)
 8001db8:	2008      	movs	r0, #8
 8001dba:	f7ff fac1 	bl	8001340 <bno055_set_operation_mode>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <BNO055_Init_Sensor+0x4c>
	  {
		printf("ERROR: %s failed to set IMUPLUS mode!\r\n", name);
 8001dc4:	6839      	ldr	r1, [r7, #0]
 8001dc6:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <BNO055_Init_Sensor+0x74>)
 8001dc8:	f007 fefa 	bl	8009bc0 <iprintf>
		return SENSOR_INIT_ERROR;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e007      	b.n	8001de0 <BNO055_Init_Sensor+0x5c>
	  }

	  // Wait for mode change
	  BNO055_Delay(100);
 8001dd0:	2064      	movs	r0, #100	@ 0x64
 8001dd2:	f7ff fb8f 	bl	80014f4 <BNO055_Delay>

	  printf("%s sensor initialized in IMUPLUS mode\r\n", name);
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	4808      	ldr	r0, [pc, #32]	@ (8001dfc <BNO055_Init_Sensor+0x78>)
 8001dda:	f007 fef1 	bl	8009bc0 <iprintf>
	  return SENSOR_OK;
 8001dde:	2300      	movs	r3, #0
	}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	08001bbd 	.word	0x08001bbd
 8001dec:	08001c31 	.word	0x08001c31
 8001df0:	080014f5 	.word	0x080014f5
 8001df4:	0800d978 	.word	0x0800d978
 8001df8:	0800d998 	.word	0x0800d998
 8001dfc:	0800d9c0 	.word	0x0800d9c0

08001e00 <BNO055_Init_Dual>:

	void BNO055_Init_Dual(void)
	{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
	  printf("\r\nInitializing BNO055 sensors...\r\n");
 8001e06:	481f      	ldr	r0, [pc, #124]	@ (8001e84 <BNO055_Init_Dual+0x84>)
 8001e08:	f007 ff42 	bl	8009c90 <puts>

	  // Initialize thigh sensor
	  SensorStatus thigh_init = BNO055_Init_Sensor(&thigh_sensor, "Thigh");
 8001e0c:	491e      	ldr	r1, [pc, #120]	@ (8001e88 <BNO055_Init_Dual+0x88>)
 8001e0e:	481f      	ldr	r0, [pc, #124]	@ (8001e8c <BNO055_Init_Dual+0x8c>)
 8001e10:	f7ff ffb8 	bl	8001d84 <BNO055_Init_Sensor>
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
	  if (thigh_init == SENSOR_OK)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <BNO055_Init_Dual+0x2c>
	  {
		thigh_imu.initialized = true;
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <BNO055_Init_Dual+0x90>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
		printf("✓ Thigh sensor ready\r\n");
 8001e24:	481b      	ldr	r0, [pc, #108]	@ (8001e94 <BNO055_Init_Dual+0x94>)
 8001e26:	f007 ff33 	bl	8009c90 <puts>
 8001e2a:	e003      	b.n	8001e34 <BNO055_Init_Dual+0x34>
	  }
	  else
	  {
		handle_sensor_error("Thigh", "initialization failed");
 8001e2c:	491a      	ldr	r1, [pc, #104]	@ (8001e98 <BNO055_Init_Dual+0x98>)
 8001e2e:	4816      	ldr	r0, [pc, #88]	@ (8001e88 <BNO055_Init_Dual+0x88>)
 8001e30:	f000 fafe 	bl	8002430 <handle_sensor_error>
	  }

	  // Initialize shank sensor
	  SensorStatus shank_init = BNO055_Init_Sensor(&shank_sensor, "Shank");
 8001e34:	4919      	ldr	r1, [pc, #100]	@ (8001e9c <BNO055_Init_Dual+0x9c>)
 8001e36:	481a      	ldr	r0, [pc, #104]	@ (8001ea0 <BNO055_Init_Dual+0xa0>)
 8001e38:	f7ff ffa4 	bl	8001d84 <BNO055_Init_Sensor>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71bb      	strb	r3, [r7, #6]
	  if (shank_init == SENSOR_OK)
 8001e40:	79bb      	ldrb	r3, [r7, #6]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <BNO055_Init_Dual+0x54>
	  {
		shank_imu.initialized = true;
 8001e46:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <BNO055_Init_Dual+0xa4>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
		printf("✓ Shank sensor ready\r\n");
 8001e4c:	4816      	ldr	r0, [pc, #88]	@ (8001ea8 <BNO055_Init_Dual+0xa8>)
 8001e4e:	f007 ff1f 	bl	8009c90 <puts>
 8001e52:	e003      	b.n	8001e5c <BNO055_Init_Dual+0x5c>
	  }
	  else
	  {
		handle_sensor_error("Shank", "initialization failed");
 8001e54:	4910      	ldr	r1, [pc, #64]	@ (8001e98 <BNO055_Init_Dual+0x98>)
 8001e56:	4811      	ldr	r0, [pc, #68]	@ (8001e9c <BNO055_Init_Dual+0x9c>)
 8001e58:	f000 faea 	bl	8002430 <handle_sensor_error>
	  }

	  if (thigh_imu.initialized && shank_imu.initialized)
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <BNO055_Init_Dual+0x90>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <BNO055_Init_Dual+0x74>
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <BNO055_Init_Dual+0xa4>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <BNO055_Init_Dual+0x74>
	  {
		printf("Both sensors initialized successfully!\r\n");
 8001e6c:	480f      	ldr	r0, [pc, #60]	@ (8001eac <BNO055_Init_Dual+0xac>)
 8001e6e:	f007 ff0f 	bl	8009c90 <puts>
 8001e72:	e003      	b.n	8001e7c <BNO055_Init_Dual+0x7c>
	  }
	  else
	  {
		printf("WARNING: One or more sensors failed to initialize!\r\n");
 8001e74:	480e      	ldr	r0, [pc, #56]	@ (8001eb0 <BNO055_Init_Dual+0xb0>)
 8001e76:	f007 ff0b 	bl	8009c90 <puts>
	  }
	}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	0800d9e8 	.word	0x0800d9e8
 8001e88:	0800da0c 	.word	0x0800da0c
 8001e8c:	20000450 	.word	0x20000450
 8001e90:	20000480 	.word	0x20000480
 8001e94:	0800da14 	.word	0x0800da14
 8001e98:	0800da2c 	.word	0x0800da2c
 8001e9c:	0800da44 	.word	0x0800da44
 8001ea0:	20000468 	.word	0x20000468
 8001ea4:	20000498 	.word	0x20000498
 8001ea8:	0800da4c 	.word	0x0800da4c
 8001eac:	0800da64 	.word	0x0800da64
 8001eb0:	0800da8c 	.word	0x0800da8c

08001eb4 <read_calibration_status>:

	// ==== CALIBRATION FUNCTIONS ====
	s8 read_calibration_status(u8 dev, u8 *calib_array)
	{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
	  uint8_t calib_status_reg;

	  if (BNO055_I2C_bus_read(dev, BNO055_CALIB_STAT_ADDR, &calib_status_reg, 1) != BNO055_SUCCESS)
 8001ec0:	f107 020f 	add.w	r2, r7, #15
 8001ec4:	79f8      	ldrb	r0, [r7, #7]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	2135      	movs	r1, #53	@ 0x35
 8001eca:	f7ff fe77 	bl	8001bbc <BNO055_I2C_bus_read>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <read_calibration_status+0x26>
	  {
		return BNO055_ERROR;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	e01e      	b.n	8001f18 <read_calibration_status+0x64>
	  }

	  // Extract individual calibration statuses
	  calib_array[0] = (calib_status_reg >> 6) & 0x03; // System
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	701a      	strb	r2, [r3, #0]
	  calib_array[1] = (calib_status_reg >> 4) & 0x03; // Gyroscope
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	f002 0203 	and.w	r2, r2, #3
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]
	  calib_array[2] = (calib_status_reg >> 2) & 0x03; // Accelerometer
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	3302      	adds	r3, #2
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]
	  calib_array[3] = calib_status_reg & 0x03;         // Magnetometer
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3303      	adds	r3, #3
 8001f0e:	f002 0203 	and.w	r2, r2, #3
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

	  return BNO055_SUCCESS;
 8001f16:	2300      	movs	r3, #0
	}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <is_sensor_calibrated>:

	bool is_sensor_calibrated(uint8_t *calib_status)
	{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	  // For prosthetic knee application, prioritize gyro and accel calibration
	  return (calib_status[1] >= GYRO_CALIB_THRESHOLD &&
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d906      	bls.n	8001f40 <is_sensor_calibrated+0x20>
			  calib_status[2] >= ACCEL_CALIB_THRESHOLD);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3302      	adds	r3, #2
 8001f36:	781b      	ldrb	r3, [r3, #0]
	  return (calib_status[1] >= GYRO_CALIB_THRESHOLD &&
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d901      	bls.n	8001f40 <is_sensor_calibrated+0x20>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <is_sensor_calibrated+0x22>
 8001f40:	2300      	movs	r3, #0
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
	}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <Read_Dual_Calibration>:

	void Read_Dual_Calibration(void)
	{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	  if (thigh_imu.initialized)
 8001f58:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <Read_Dual_Calibration+0x58>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00f      	beq.n	8001f80 <Read_Dual_Calibration+0x2c>
	  {
		if (read_calibration_status(thigh_sensor.dev_addr, thigh_imu.calib_status) == BNO055_SUCCESS)
 8001f60:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <Read_Dual_Calibration+0x5c>)
 8001f62:	7a5b      	ldrb	r3, [r3, #9]
 8001f64:	4913      	ldr	r1, [pc, #76]	@ (8001fb4 <Read_Dual_Calibration+0x60>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ffa4 	bl	8001eb4 <read_calibration_status>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <Read_Dual_Calibration+0x2c>
		{
		  thigh_imu.calibrated = is_sensor_calibrated(thigh_imu.calib_status);
 8001f72:	4810      	ldr	r0, [pc, #64]	@ (8001fb4 <Read_Dual_Calibration+0x60>)
 8001f74:	f7ff ffd4 	bl	8001f20 <is_sensor_calibrated>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <Read_Dual_Calibration+0x58>)
 8001f7e:	705a      	strb	r2, [r3, #1]
		}
	  }

	  if (shank_imu.initialized)
 8001f80:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <Read_Dual_Calibration+0x64>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00f      	beq.n	8001fa8 <Read_Dual_Calibration+0x54>
	  {
		if (read_calibration_status(shank_sensor.dev_addr, shank_imu.calib_status) == BNO055_SUCCESS)
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <Read_Dual_Calibration+0x68>)
 8001f8a:	7a5b      	ldrb	r3, [r3, #9]
 8001f8c:	490c      	ldr	r1, [pc, #48]	@ (8001fc0 <Read_Dual_Calibration+0x6c>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff90 	bl	8001eb4 <read_calibration_status>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <Read_Dual_Calibration+0x54>
		{
		  shank_imu.calibrated = is_sensor_calibrated(shank_imu.calib_status);
 8001f9a:	4809      	ldr	r0, [pc, #36]	@ (8001fc0 <Read_Dual_Calibration+0x6c>)
 8001f9c:	f7ff ffc0 	bl	8001f20 <is_sensor_calibrated>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <Read_Dual_Calibration+0x64>)
 8001fa6:	705a      	strb	r2, [r3, #1]
		}
	  }
	}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000480 	.word	0x20000480
 8001fb0:	20000450 	.word	0x20000450
 8001fb4:	20000494 	.word	0x20000494
 8001fb8:	20000498 	.word	0x20000498
 8001fbc:	20000468 	.word	0x20000468
 8001fc0:	200004ac 	.word	0x200004ac

08001fc4 <print_calibration_status>:

	void print_calibration_status(void)
	{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af02      	add	r7, sp, #8
	  printf("Calibration Status:\r\n");
 8001fca:	481d      	ldr	r0, [pc, #116]	@ (8002040 <print_calibration_status+0x7c>)
 8001fcc:	f007 fe60 	bl	8009c90 <puts>
	  printf("  Thigh - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
			 thigh_imu.calib_status[0], thigh_imu.calib_status[1],
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <print_calibration_status+0x80>)
 8001fd2:	7d1b      	ldrb	r3, [r3, #20]
	  printf("  Thigh - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 8001fd4:	4619      	mov	r1, r3
			 thigh_imu.calib_status[0], thigh_imu.calib_status[1],
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <print_calibration_status+0x80>)
 8001fd8:	7d5b      	ldrb	r3, [r3, #21]
	  printf("  Thigh - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 8001fda:	4618      	mov	r0, r3
			 thigh_imu.calib_status[2], thigh_imu.calib_status[3],
 8001fdc:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <print_calibration_status+0x80>)
 8001fde:	7d9b      	ldrb	r3, [r3, #22]
	  printf("  Thigh - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 8001fe0:	461c      	mov	r4, r3
			 thigh_imu.calib_status[2], thigh_imu.calib_status[3],
 8001fe2:	4b18      	ldr	r3, [pc, #96]	@ (8002044 <print_calibration_status+0x80>)
 8001fe4:	7ddb      	ldrb	r3, [r3, #23]
	  printf("  Thigh - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 8001fe6:	461a      	mov	r2, r3
			 thigh_imu.calibrated ? "[OK]" : "[PENDING]");
 8001fe8:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <print_calibration_status+0x80>)
 8001fea:	785b      	ldrb	r3, [r3, #1]
	  printf("  Thigh - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <print_calibration_status+0x30>
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <print_calibration_status+0x84>)
 8001ff2:	e000      	b.n	8001ff6 <print_calibration_status+0x32>
 8001ff4:	4b15      	ldr	r3, [pc, #84]	@ (800204c <print_calibration_status+0x88>)
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	9200      	str	r2, [sp, #0]
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4814      	ldr	r0, [pc, #80]	@ (8002050 <print_calibration_status+0x8c>)
 8002000:	f007 fdde 	bl	8009bc0 <iprintf>
	  printf("  Shank - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
			 shank_imu.calib_status[0], shank_imu.calib_status[1],
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <print_calibration_status+0x90>)
 8002006:	7d1b      	ldrb	r3, [r3, #20]
	  printf("  Shank - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 8002008:	4619      	mov	r1, r3
			 shank_imu.calib_status[0], shank_imu.calib_status[1],
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <print_calibration_status+0x90>)
 800200c:	7d5b      	ldrb	r3, [r3, #21]
	  printf("  Shank - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 800200e:	4618      	mov	r0, r3
			 shank_imu.calib_status[2], shank_imu.calib_status[3],
 8002010:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <print_calibration_status+0x90>)
 8002012:	7d9b      	ldrb	r3, [r3, #22]
	  printf("  Shank - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 8002014:	461c      	mov	r4, r3
			 shank_imu.calib_status[2], shank_imu.calib_status[3],
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <print_calibration_status+0x90>)
 8002018:	7ddb      	ldrb	r3, [r3, #23]
	  printf("  Shank - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 800201a:	461a      	mov	r2, r3
			 shank_imu.calibrated ? "[OK]" : "[PENDING]");
 800201c:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <print_calibration_status+0x90>)
 800201e:	785b      	ldrb	r3, [r3, #1]
	  printf("  Shank - Sys:%d Gyr:%d Acc:%d Mag:%d %s\r\n",
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <print_calibration_status+0x64>
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <print_calibration_status+0x84>)
 8002026:	e000      	b.n	800202a <print_calibration_status+0x66>
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <print_calibration_status+0x88>)
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	9200      	str	r2, [sp, #0]
 800202e:	4623      	mov	r3, r4
 8002030:	4602      	mov	r2, r0
 8002032:	4809      	ldr	r0, [pc, #36]	@ (8002058 <print_calibration_status+0x94>)
 8002034:	f007 fdc4 	bl	8009bc0 <iprintf>
	}
 8002038:	bf00      	nop
 800203a:	3704      	adds	r7, #4
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	0800dac0 	.word	0x0800dac0
 8002044:	20000480 	.word	0x20000480
 8002048:	0800dad8 	.word	0x0800dad8
 800204c:	0800dae0 	.word	0x0800dae0
 8002050:	0800daec 	.word	0x0800daec
 8002054:	20000498 	.word	0x20000498
 8002058:	0800db18 	.word	0x0800db18

0800205c <read_euler_angles_safe>:

	// ==== ORIENTATION AND DATA PROCESSING ====
	s8 read_euler_angles_safe(u8 dev, struct bno055_euler_float_t *euler)
	{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]
	  uint8_t euler_data[6];

	  if (BNO055_I2C_bus_read(dev, BNO055_EULER_H_LSB_ADDR, euler_data, 6) != BNO055_SUCCESS)
 8002068:	f107 020c 	add.w	r2, r7, #12
 800206c:	79f8      	ldrb	r0, [r7, #7]
 800206e:	2306      	movs	r3, #6
 8002070:	211a      	movs	r1, #26
 8002072:	f7ff fda3 	bl	8001bbc <BNO055_I2C_bus_read>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <read_euler_angles_safe+0x26>
	  {
		return BNO055_ERROR;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	e03f      	b.n	8002102 <read_euler_angles_safe+0xa6>
	  }

	  // Convert raw data to euler angles (16-bit signed, LSB first)
	  int16_t heading = (int16_t)((euler_data[1] << 8) | euler_data[0]);
 8002082:	7b7b      	ldrb	r3, [r7, #13]
 8002084:	b21b      	sxth	r3, r3
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	b21a      	sxth	r2, r3
 800208a:	7b3b      	ldrb	r3, [r7, #12]
 800208c:	b21b      	sxth	r3, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	82fb      	strh	r3, [r7, #22]
	  int16_t roll    = (int16_t)((euler_data[3] << 8) | euler_data[2]);
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	b21b      	sxth	r3, r3
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b21a      	sxth	r2, r3
 800209a:	7bbb      	ldrb	r3, [r7, #14]
 800209c:	b21b      	sxth	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	82bb      	strh	r3, [r7, #20]
	  int16_t pitch   = (int16_t)((euler_data[5] << 8) | euler_data[4]);
 80020a2:	7c7b      	ldrb	r3, [r7, #17]
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	7c3b      	ldrb	r3, [r7, #16]
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	827b      	strh	r3, [r7, #18]

	  // Scale to degrees (1 degree = 16 LSB)
	  euler->h = heading / 16.0f;
 80020b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020be:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80020c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	edc3 7a00 	vstr	s15, [r3]
	  euler->r = roll / 16.0f;
 80020cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80020dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	edc3 7a01 	vstr	s15, [r3, #4]
	  euler->p = pitch / 16.0f;
 80020e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80020f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	edc3 7a02 	vstr	s15, [r3, #8]

	  return BNO055_SUCCESS;
 8002100:	2300      	movs	r3, #0
	}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <normalize_angle>:

	float normalize_angle(float angle)
	{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	ed87 0a01 	vstr	s0, [r7, #4]
	  while (angle > 180.0f) angle -= 360.0f;
 8002116:	e007      	b.n	8002128 <normalize_angle+0x1c>
 8002118:	edd7 7a01 	vldr	s15, [r7, #4]
 800211c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002174 <normalize_angle+0x68>
 8002120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002124:	edc7 7a01 	vstr	s15, [r7, #4]
 8002128:	edd7 7a01 	vldr	s15, [r7, #4]
 800212c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002178 <normalize_angle+0x6c>
 8002130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	dcee      	bgt.n	8002118 <normalize_angle+0xc>
	  while (angle < -180.0f) angle += 360.0f;
 800213a:	e007      	b.n	800214c <normalize_angle+0x40>
 800213c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002140:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002174 <normalize_angle+0x68>
 8002144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002148:	edc7 7a01 	vstr	s15, [r7, #4]
 800214c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002150:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800217c <normalize_angle+0x70>
 8002154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	d4ee      	bmi.n	800213c <normalize_angle+0x30>
	  return angle;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	ee07 3a90 	vmov	s15, r3
	}
 8002164:	eeb0 0a67 	vmov.f32	s0, s15
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	43b40000 	.word	0x43b40000
 8002178:	43340000 	.word	0x43340000
 800217c:	c3340000 	.word	0xc3340000

08002180 <Read_Dual_Orientation>:

	void Read_Dual_Orientation(void)
	{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
	  uint32_t current_time = HAL_GetTick();
 8002186:	f000 fe17 	bl	8002db8 <HAL_GetTick>
 800218a:	61f8      	str	r0, [r7, #28]

	  // Read thigh IMU
	  if (thigh_imu.initialized)
 800218c:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <Read_Dual_Orientation+0xc4>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d027      	beq.n	80021e4 <Read_Dual_Orientation+0x64>
	  {
	    struct bno055_euler_float_t temp_euler;
	    if (read_euler_angles_safe(thigh_sensor.dev_addr, &temp_euler) == BNO055_SUCCESS)
 8002194:	4b2c      	ldr	r3, [pc, #176]	@ (8002248 <Read_Dual_Orientation+0xc8>)
 8002196:	7a5b      	ldrb	r3, [r3, #9]
 8002198:	f107 0210 	add.w	r2, r7, #16
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff5c 	bl	800205c <read_euler_angles_safe>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d117      	bne.n	80021da <Read_Dual_Orientation+0x5a>
	    {
	      if (validate_sensor_data(&temp_euler))
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f9a6 	bl	8002500 <validate_sensor_data>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <Read_Dual_Orientation+0x50>
	      {
	        thigh_imu.euler = temp_euler;
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <Read_Dual_Orientation+0xc4>)
 80021bc:	3308      	adds	r3, #8
 80021be:	f107 0210 	add.w	r2, r7, #16
 80021c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80021c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        thigh_imu.last_read_time = current_time;
 80021c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <Read_Dual_Orientation+0xc4>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	6053      	str	r3, [r2, #4]
 80021ce:	e009      	b.n	80021e4 <Read_Dual_Orientation+0x64>
	      }
	      else
	      {
	        handle_sensor_error("Thigh", "invalid data range");
 80021d0:	491e      	ldr	r1, [pc, #120]	@ (800224c <Read_Dual_Orientation+0xcc>)
 80021d2:	481f      	ldr	r0, [pc, #124]	@ (8002250 <Read_Dual_Orientation+0xd0>)
 80021d4:	f000 f92c 	bl	8002430 <handle_sensor_error>
	        return;
 80021d8:	e030      	b.n	800223c <Read_Dual_Orientation+0xbc>
	      }
	    }
	    else
	    {
	      handle_sensor_error("Thigh", "orientation read failed");
 80021da:	491e      	ldr	r1, [pc, #120]	@ (8002254 <Read_Dual_Orientation+0xd4>)
 80021dc:	481c      	ldr	r0, [pc, #112]	@ (8002250 <Read_Dual_Orientation+0xd0>)
 80021de:	f000 f927 	bl	8002430 <handle_sensor_error>
	      return;
 80021e2:	e02b      	b.n	800223c <Read_Dual_Orientation+0xbc>
	    }
	  }

	  // Read shank IMU
	  if (shank_imu.initialized)
 80021e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <Read_Dual_Orientation+0xd8>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d024      	beq.n	8002236 <Read_Dual_Orientation+0xb6>
	  {
	    struct bno055_euler_float_t temp_euler;
	    if (read_euler_angles_safe(shank_sensor.dev_addr, &temp_euler) == BNO055_SUCCESS)
 80021ec:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <Read_Dual_Orientation+0xdc>)
 80021ee:	7a5b      	ldrb	r3, [r3, #9]
 80021f0:	1d3a      	adds	r2, r7, #4
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff31 	bl	800205c <read_euler_angles_safe>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d115      	bne.n	800222c <Read_Dual_Orientation+0xac>
	    {
	      if (validate_sensor_data(&temp_euler))
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f97c 	bl	8002500 <validate_sensor_data>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <Read_Dual_Orientation+0xa2>
	      {
	        shank_imu.euler = temp_euler;
 800220e:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <Read_Dual_Orientation+0xd8>)
 8002210:	3308      	adds	r3, #8
 8002212:	1d3a      	adds	r2, r7, #4
 8002214:	ca07      	ldmia	r2, {r0, r1, r2}
 8002216:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        shank_imu.last_read_time = current_time;
 800221a:	4a0f      	ldr	r2, [pc, #60]	@ (8002258 <Read_Dual_Orientation+0xd8>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	6053      	str	r3, [r2, #4]
 8002220:	e009      	b.n	8002236 <Read_Dual_Orientation+0xb6>
	      }
	      else
	      {
	        handle_sensor_error("Shank", "invalid data range");
 8002222:	490a      	ldr	r1, [pc, #40]	@ (800224c <Read_Dual_Orientation+0xcc>)
 8002224:	480e      	ldr	r0, [pc, #56]	@ (8002260 <Read_Dual_Orientation+0xe0>)
 8002226:	f000 f903 	bl	8002430 <handle_sensor_error>
	        return;
 800222a:	e007      	b.n	800223c <Read_Dual_Orientation+0xbc>
	      }
	    }
	    else
	    {
	      handle_sensor_error("Shank", "orientation read failed");
 800222c:	4909      	ldr	r1, [pc, #36]	@ (8002254 <Read_Dual_Orientation+0xd4>)
 800222e:	480c      	ldr	r0, [pc, #48]	@ (8002260 <Read_Dual_Orientation+0xe0>)
 8002230:	f000 f8fe 	bl	8002430 <handle_sensor_error>
	      return;
 8002234:	e002      	b.n	800223c <Read_Dual_Orientation+0xbc>
	    }
	  }

	  // Update timing after successful reads
	  last_orientation_update = current_time;
 8002236:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <Read_Dual_Orientation+0xe4>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	6013      	str	r3, [r2, #0]
	}
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000480 	.word	0x20000480
 8002248:	20000450 	.word	0x20000450
 800224c:	0800db44 	.word	0x0800db44
 8002250:	0800da0c 	.word	0x0800da0c
 8002254:	0800db58 	.word	0x0800db58
 8002258:	20000498 	.word	0x20000498
 800225c:	20000468 	.word	0x20000468
 8002260:	0800da44 	.word	0x0800da44
 8002264:	200004bc 	.word	0x200004bc

08002268 <calculate_knee_kinematics>:

	void calculate_knee_kinematics(void)
	{
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b08a      	sub	sp, #40	@ 0x28
 800226e:	af06      	add	r7, sp, #24
	  // Only calculate if both sensors have recent data
	  if (!thigh_imu.initialized || !shank_imu.initialized)
 8002270:	4b60      	ldr	r3, [pc, #384]	@ (80023f4 <calculate_knee_kinematics+0x18c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 80b0 	bne.w	80023e0 <calculate_knee_kinematics+0x178>
 8002280:	4b5d      	ldr	r3, [pc, #372]	@ (80023f8 <calculate_knee_kinematics+0x190>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	f083 0301 	eor.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 80a8 	bne.w	80023e0 <calculate_knee_kinematics+0x178>
	    return;

	  uint32_t current_time = HAL_GetTick();
 8002290:	f000 fd92 	bl	8002db8 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]

	  // Check for sensor timeouts
	  if ((current_time - thigh_imu.last_read_time > 100) ||
 8002296:	4b57      	ldr	r3, [pc, #348]	@ (80023f4 <calculate_knee_kinematics+0x18c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	@ 0x64
 80022a0:	f200 80a0 	bhi.w	80023e4 <calculate_knee_kinematics+0x17c>
	      (current_time - shank_imu.last_read_time > 100))
 80022a4:	4b54      	ldr	r3, [pc, #336]	@ (80023f8 <calculate_knee_kinematics+0x190>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	1ad3      	subs	r3, r2, r3
	  if ((current_time - thigh_imu.last_read_time > 100) ||
 80022ac:	2b64      	cmp	r3, #100	@ 0x64
 80022ae:	f200 8099 	bhi.w	80023e4 <calculate_knee_kinematics+0x17c>
	  {
	    return; // Skip calculation if data is stale
	  }

	  float dt = (current_time - last_orientation_update) / 1000.0f;
 80022b2:	4b52      	ldr	r3, [pc, #328]	@ (80023fc <calculate_knee_kinematics+0x194>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002400 <calculate_knee_kinematics+0x198>
 80022c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ca:	edc7 7a01 	vstr	s15, [r7, #4]

	  // Prevent division by zero and handle very small time steps
	  if (dt <= 0.001f) return;
 80022ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d2:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002404 <calculate_knee_kinematics+0x19c>
 80022d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	f240 8083 	bls.w	80023e8 <calculate_knee_kinematics+0x180>

	  // Store previous angle for velocity calculation
	  prev_knee_angle = knee_angle;
 80022e2:	4b49      	ldr	r3, [pc, #292]	@ (8002408 <calculate_knee_kinematics+0x1a0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a49      	ldr	r2, [pc, #292]	@ (800240c <calculate_knee_kinematics+0x1a4>)
 80022e8:	6013      	str	r3, [r2, #0]

	  // Calculate knee flexion angle from pitch difference
	  float pitch_difference = normalize_angle(shank_imu.euler.p - thigh_imu.euler.p);
 80022ea:	4b43      	ldr	r3, [pc, #268]	@ (80023f8 <calculate_knee_kinematics+0x190>)
 80022ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80022f0:	4b40      	ldr	r3, [pc, #256]	@ (80023f4 <calculate_knee_kinematics+0x18c>)
 80022f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80022f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fa:	eeb0 0a67 	vmov.f32	s0, s15
 80022fe:	f7ff ff05 	bl	800210c <normalize_angle>
 8002302:	ed87 0a00 	vstr	s0, [r7]
	  knee_angle = -pitch_difference; // Negative to make flexion positive
 8002306:	edd7 7a00 	vldr	s15, [r7]
 800230a:	eef1 7a67 	vneg.f32	s15, s15
 800230e:	4b3e      	ldr	r3, [pc, #248]	@ (8002408 <calculate_knee_kinematics+0x1a0>)
 8002310:	edc3 7a00 	vstr	s15, [r3]

	  // Calculate angular velocity with bounds checking
	  float raw_velocity = (knee_angle - prev_knee_angle) / dt;
 8002314:	4b3c      	ldr	r3, [pc, #240]	@ (8002408 <calculate_knee_kinematics+0x1a0>)
 8002316:	ed93 7a00 	vldr	s14, [r3]
 800231a:	4b3c      	ldr	r3, [pc, #240]	@ (800240c <calculate_knee_kinematics+0x1a4>)
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002324:	ed97 7a01 	vldr	s14, [r7, #4]
 8002328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800232c:	edc7 7a03 	vstr	s15, [r7, #12]

	  // Limit velocity to reasonable range (±500°/s)
	  if (raw_velocity > 500.0f) raw_velocity = 500.0f;
 8002330:	edd7 7a03 	vldr	s15, [r7, #12]
 8002334:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8002410 <calculate_knee_kinematics+0x1a8>
 8002338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002340:	dd01      	ble.n	8002346 <calculate_knee_kinematics+0xde>
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <calculate_knee_kinematics+0x1ac>)
 8002344:	60fb      	str	r3, [r7, #12]
	  if (raw_velocity < -500.0f) raw_velocity = -500.0f;
 8002346:	edd7 7a03 	vldr	s15, [r7, #12]
 800234a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002418 <calculate_knee_kinematics+0x1b0>
 800234e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002356:	d501      	bpl.n	800235c <calculate_knee_kinematics+0xf4>
 8002358:	4b30      	ldr	r3, [pc, #192]	@ (800241c <calculate_knee_kinematics+0x1b4>)
 800235a:	60fb      	str	r3, [r7, #12]

	  knee_velocity = raw_velocity;
 800235c:	4a30      	ldr	r2, [pc, #192]	@ (8002420 <calculate_knee_kinematics+0x1b8>)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6013      	str	r3, [r2, #0]

	  // Apply low-pass filter to reduce noise
	  filtered_velocity = velocity_filter_alpha * knee_velocity + (1.0f - velocity_filter_alpha) * filtered_velocity;
 8002362:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002424 <calculate_knee_kinematics+0x1bc>
 8002366:	4b2e      	ldr	r3, [pc, #184]	@ (8002420 <calculate_knee_kinematics+0x1b8>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002370:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8002424 <calculate_knee_kinematics+0x1bc>
 8002374:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002378:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800237c:	4b2a      	ldr	r3, [pc, #168]	@ (8002428 <calculate_knee_kinematics+0x1c0>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238a:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <calculate_knee_kinematics+0x1c0>)
 800238c:	edc3 7a00 	vstr	s15, [r3]

	  // Print results (formatted for easy monitoring)
	  printf("Knee: %6.1f° | Vel: %6.1f°/s | T_p:%.1f S_p:%.1f\r\n",
 8002390:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <calculate_knee_kinematics+0x1a0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f8f7 	bl	8000588 <__aeabi_f2d>
 800239a:	4682      	mov	sl, r0
 800239c:	468b      	mov	fp, r1
 800239e:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <calculate_knee_kinematics+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f8f0 	bl	8000588 <__aeabi_f2d>
 80023a8:	4604      	mov	r4, r0
 80023aa:	460d      	mov	r5, r1
	         knee_angle, filtered_velocity, thigh_imu.euler.p, shank_imu.euler.p);
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <calculate_knee_kinematics+0x18c>)
 80023ae:	691b      	ldr	r3, [r3, #16]
	  printf("Knee: %6.1f° | Vel: %6.1f°/s | T_p:%.1f S_p:%.1f\r\n",
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f8e9 	bl	8000588 <__aeabi_f2d>
 80023b6:	4680      	mov	r8, r0
 80023b8:	4689      	mov	r9, r1
	         knee_angle, filtered_velocity, thigh_imu.euler.p, shank_imu.euler.p);
 80023ba:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <calculate_knee_kinematics+0x190>)
 80023bc:	691b      	ldr	r3, [r3, #16]
	  printf("Knee: %6.1f° | Vel: %6.1f°/s | T_p:%.1f S_p:%.1f\r\n",
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f8e2 	bl	8000588 <__aeabi_f2d>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023cc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023d0:	e9cd 4500 	strd	r4, r5, [sp]
 80023d4:	4652      	mov	r2, sl
 80023d6:	465b      	mov	r3, fp
 80023d8:	4814      	ldr	r0, [pc, #80]	@ (800242c <calculate_knee_kinematics+0x1c4>)
 80023da:	f007 fbf1 	bl	8009bc0 <iprintf>
 80023de:	e004      	b.n	80023ea <calculate_knee_kinematics+0x182>
	    return;
 80023e0:	bf00      	nop
 80023e2:	e002      	b.n	80023ea <calculate_knee_kinematics+0x182>
	    return; // Skip calculation if data is stale
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <calculate_knee_kinematics+0x182>
	  if (dt <= 0.001f) return;
 80023e8:	bf00      	nop
	}
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f2:	bf00      	nop
 80023f4:	20000480 	.word	0x20000480
 80023f8:	20000498 	.word	0x20000498
 80023fc:	200004bc 	.word	0x200004bc
 8002400:	447a0000 	.word	0x447a0000
 8002404:	3a83126f 	.word	0x3a83126f
 8002408:	200004b0 	.word	0x200004b0
 800240c:	200004b8 	.word	0x200004b8
 8002410:	43fa0000 	.word	0x43fa0000
 8002414:	43fa0000 	.word	0x43fa0000
 8002418:	c3fa0000 	.word	0xc3fa0000
 800241c:	c3fa0000 	.word	0xc3fa0000
 8002420:	200004b4 	.word	0x200004b4
 8002424:	3e99999a 	.word	0x3e99999a
 8002428:	200004c4 	.word	0x200004c4
 800242c:	0800db70 	.word	0x0800db70

08002430 <handle_sensor_error>:

	// ==== UTILITY FUNCTIONS ====
	void handle_sensor_error(const char* sensor_name, const char* error_msg)
	{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	  printf("ERROR: %s - %s\r\n", sensor_name, error_msg);
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4808      	ldr	r0, [pc, #32]	@ (8002460 <handle_sensor_error+0x30>)
 8002440:	f007 fbbe 	bl	8009bc0 <iprintf>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Turn on debug LED
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800244a:	4806      	ldr	r0, [pc, #24]	@ (8002464 <handle_sensor_error+0x34>)
 800244c:	f001 fb14 	bl	8003a78 <HAL_GPIO_WritePin>
	  system_status = SENSOR_COMM_ERROR;
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <handle_sensor_error+0x38>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
	}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	0800dba8 	.word	0x0800dba8
 8002464:	40020400 	.word	0x40020400
 8002468:	20000000 	.word	0x20000000

0800246c <system_health_check>:

	void system_health_check(void)
	{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	  uint32_t current_time = HAL_GetTick();
 8002472:	f000 fca1 	bl	8002db8 <HAL_GetTick>
 8002476:	6038      	str	r0, [r7, #0]
	  bool system_healthy = true;
 8002478:	2301      	movs	r3, #1
 800247a:	71fb      	strb	r3, [r7, #7]

	  // Check if sensors are responding
	  if (thigh_imu.initialized && (current_time - thigh_imu.last_read_time > 1000))
 800247c:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <system_health_check+0x78>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00c      	beq.n	800249e <system_health_check+0x32>
 8002484:	4b17      	ldr	r3, [pc, #92]	@ (80024e4 <system_health_check+0x78>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002490:	d905      	bls.n	800249e <system_health_check+0x32>
	  {
		handle_sensor_error("Thigh", "communication timeout");
 8002492:	4915      	ldr	r1, [pc, #84]	@ (80024e8 <system_health_check+0x7c>)
 8002494:	4815      	ldr	r0, [pc, #84]	@ (80024ec <system_health_check+0x80>)
 8002496:	f7ff ffcb 	bl	8002430 <handle_sensor_error>
		system_healthy = false;
 800249a:	2300      	movs	r3, #0
 800249c:	71fb      	strb	r3, [r7, #7]
	  }

	  if (shank_imu.initialized && (current_time - shank_imu.last_read_time > 1000))
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <system_health_check+0x84>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <system_health_check+0x54>
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <system_health_check+0x84>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b2:	d905      	bls.n	80024c0 <system_health_check+0x54>
	  {
		handle_sensor_error("Shank", "communication timeout");
 80024b4:	490c      	ldr	r1, [pc, #48]	@ (80024e8 <system_health_check+0x7c>)
 80024b6:	480f      	ldr	r0, [pc, #60]	@ (80024f4 <system_health_check+0x88>)
 80024b8:	f7ff ffba 	bl	8002430 <handle_sensor_error>
		system_healthy = false;
 80024bc:	2300      	movs	r3, #0
 80024be:	71fb      	strb	r3, [r7, #7]
	  }

	  // Update system status LED
	  if (system_healthy && system_status == SENSOR_OK)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <system_health_check+0x6e>
 80024c6:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <system_health_check+0x8c>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d105      	bne.n	80024da <system_health_check+0x6e>
	  {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Turn off debug LED
 80024ce:	2200      	movs	r2, #0
 80024d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024d4:	4809      	ldr	r0, [pc, #36]	@ (80024fc <system_health_check+0x90>)
 80024d6:	f001 facf 	bl	8003a78 <HAL_GPIO_WritePin>
	  }
	}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000480 	.word	0x20000480
 80024e8:	0800dbbc 	.word	0x0800dbbc
 80024ec:	0800da0c 	.word	0x0800da0c
 80024f0:	20000498 	.word	0x20000498
 80024f4:	0800da44 	.word	0x0800da44
 80024f8:	20000000 	.word	0x20000000
 80024fc:	40020400 	.word	0x40020400

08002500 <validate_sensor_data>:

	// ==== DATA VALIDATION ====
	bool validate_sensor_data(struct bno055_euler_float_t *euler)
	{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	  // Check for reasonable angle ranges
	  return (euler->h >= -180.0f && euler->h <= 180.0f &&
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	edd3 7a00 	vldr	s15, [r3]
	          euler->r >= -180.0f && euler->r <= 180.0f &&
	          euler->p >= -180.0f && euler->p <= 180.0f);
 800250e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002598 <validate_sensor_data+0x98>
 8002512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	db33      	blt.n	8002584 <validate_sensor_data+0x84>
	  return (euler->h >= -180.0f && euler->h <= 180.0f &&
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800259c <validate_sensor_data+0x9c>
 8002526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252e:	d829      	bhi.n	8002584 <validate_sensor_data+0x84>
	          euler->r >= -180.0f && euler->r <= 180.0f &&
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	edd3 7a01 	vldr	s15, [r3, #4]
	  return (euler->h >= -180.0f && euler->h <= 180.0f &&
 8002536:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002598 <validate_sensor_data+0x98>
 800253a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	db1f      	blt.n	8002584 <validate_sensor_data+0x84>
	          euler->r >= -180.0f && euler->r <= 180.0f &&
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	edd3 7a01 	vldr	s15, [r3, #4]
 800254a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800259c <validate_sensor_data+0x9c>
 800254e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d815      	bhi.n	8002584 <validate_sensor_data+0x84>
	          euler->p >= -180.0f && euler->p <= 180.0f);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	edd3 7a02 	vldr	s15, [r3, #8]
	          euler->r >= -180.0f && euler->r <= 180.0f &&
 800255e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002598 <validate_sensor_data+0x98>
 8002562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	db0b      	blt.n	8002584 <validate_sensor_data+0x84>
	          euler->p >= -180.0f && euler->p <= 180.0f);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002572:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800259c <validate_sensor_data+0x9c>
 8002576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257e:	d801      	bhi.n	8002584 <validate_sensor_data+0x84>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <validate_sensor_data+0x86>
 8002584:	2300      	movs	r3, #0
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
	}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	c3340000 	.word	0xc3340000
 800259c:	43340000 	.word	0x43340000

080025a0 <HAL_TIM_PeriodElapsedCallback>:
		printf("Button pressed - Debug LED toggled\r\n");
	  }
	}

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM3)
	  {
		// 100Hz timer tick - can be used for precise timing if needed
		// Currently using HAL_GetTick() for simplicity
	  }
	}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <Error_Handler>:
	/**
	  * @brief  This function is executed in case of error occurrence.
	  * @retval None
	  */
	void Error_Handler(void)
	{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
	  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Turn on debug LED
 80025bc:	2201      	movs	r2, #1
 80025be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025c2:	4808      	ldr	r0, [pc, #32]	@ (80025e4 <Error_Handler+0x30>)
 80025c4:	f001 fa58 	bl	8003a78 <HAL_GPIO_WritePin>
	  printf("FATAL ERROR: System halted!\r\n");
 80025c8:	4807      	ldr	r0, [pc, #28]	@ (80025e8 <Error_Handler+0x34>)
 80025ca:	f007 fb61 	bl	8009c90 <puts>
	  while (1)
	  {
		// Blink debug LED rapidly to indicate error
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80025ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025d2:	4804      	ldr	r0, [pc, #16]	@ (80025e4 <Error_Handler+0x30>)
 80025d4:	f001 fa69 	bl	8003aaa <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80025d8:	2064      	movs	r0, #100	@ 0x64
 80025da:	f000 fbf9 	bl	8002dd0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80025de:	bf00      	nop
 80025e0:	e7f5      	b.n	80025ce <Error_Handler+0x1a>
 80025e2:	bf00      	nop
 80025e4:	40020400 	.word	0x40020400
 80025e8:	0800dbf8 	.word	0x0800dbf8

080025ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_MspInit+0x4c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002638 <HAL_MspInit+0x4c>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002600:	6453      	str	r3, [r2, #68]	@ 0x44
 8002602:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <HAL_MspInit+0x4c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_MspInit+0x4c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <HAL_MspInit+0x4c>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	@ 0x40
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_MspInit+0x4c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800262a:	2007      	movs	r0, #7
 800262c:	f000 fcc4 	bl	8002fb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800

0800263c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	@ 0x30
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a80      	ldr	r2, [pc, #512]	@ (800285c <HAL_I2C_MspInit+0x220>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d13c      	bne.n	80026d8 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	4b7f      	ldr	r3, [pc, #508]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	4a7e      	ldr	r2, [pc, #504]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	6313      	str	r3, [r2, #48]	@ 0x30
 800266e:	4b7c      	ldr	r3, [pc, #496]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800267a:	23c0      	movs	r3, #192	@ 0xc0
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800267e:	2312      	movs	r3, #18
 8002680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002686:	2303      	movs	r3, #3
 8002688:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800268a:	2304      	movs	r3, #4
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	4619      	mov	r1, r3
 8002694:	4873      	ldr	r0, [pc, #460]	@ (8002864 <HAL_I2C_MspInit+0x228>)
 8002696:	f001 f85b 	bl	8003750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	4b70      	ldr	r3, [pc, #448]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 80026a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	201f      	movs	r0, #31
 80026bc:	f000 fc87 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026c0:	201f      	movs	r0, #31
 80026c2:	f000 fca0 	bl	8003006 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	2020      	movs	r0, #32
 80026cc:	f000 fc7f 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80026d0:	2020      	movs	r0, #32
 80026d2:	f000 fc98 	bl	8003006 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026d6:	e0bd      	b.n	8002854 <HAL_I2C_MspInit+0x218>
  else if(hi2c->Instance==I2C2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a62      	ldr	r2, [pc, #392]	@ (8002868 <HAL_I2C_MspInit+0x22c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	f040 80b8 	bne.w	8002854 <HAL_I2C_MspInit+0x218>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	4a5c      	ldr	r2, [pc, #368]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 80026ee:	f043 0302 	orr.w	r3, r3, #2
 80026f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	4b56      	ldr	r3, [pc, #344]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	4a55      	ldr	r2, [pc, #340]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002710:	4b53      	ldr	r3, [pc, #332]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800271c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002722:	2312      	movs	r3, #18
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800272e:	2304      	movs	r3, #4
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002732:	f107 031c 	add.w	r3, r7, #28
 8002736:	4619      	mov	r1, r3
 8002738:	484a      	ldr	r0, [pc, #296]	@ (8002864 <HAL_I2C_MspInit+0x228>)
 800273a:	f001 f809 	bl	8003750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800273e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002744:	2312      	movs	r3, #18
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002750:	2304      	movs	r3, #4
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	4844      	ldr	r0, [pc, #272]	@ (800286c <HAL_I2C_MspInit+0x230>)
 800275c:	f000 fff8 	bl	8003750 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	4b3e      	ldr	r3, [pc, #248]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	4a3d      	ldr	r2, [pc, #244]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 800276a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800276e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002770:	4b3b      	ldr	r3, [pc, #236]	@ (8002860 <HAL_I2C_MspInit+0x224>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800277c:	4b3c      	ldr	r3, [pc, #240]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 800277e:	4a3d      	ldr	r2, [pc, #244]	@ (8002874 <HAL_I2C_MspInit+0x238>)
 8002780:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002782:	4b3b      	ldr	r3, [pc, #236]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 8002784:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002788:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800278a:	4b39      	ldr	r3, [pc, #228]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002790:	4b37      	ldr	r3, [pc, #220]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002796:	4b36      	ldr	r3, [pc, #216]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 8002798:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800279c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800279e:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a4:	4b32      	ldr	r3, [pc, #200]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80027aa:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80027bc:	482c      	ldr	r0, [pc, #176]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 80027be:	f000 fc3d 	bl	800303c <HAL_DMA_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_MspInit+0x190>
      Error_Handler();
 80027c8:	f7ff fef4 	bl	80025b4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a28      	ldr	r2, [pc, #160]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 80027d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80027d2:	4a27      	ldr	r2, [pc, #156]	@ (8002870 <HAL_I2C_MspInit+0x234>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80027d8:	4b27      	ldr	r3, [pc, #156]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 80027da:	4a28      	ldr	r2, [pc, #160]	@ (800287c <HAL_I2C_MspInit+0x240>)
 80027dc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80027de:	4b26      	ldr	r3, [pc, #152]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 80027e0:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80027e4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027e6:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 80027e8:	2240      	movs	r2, #64	@ 0x40
 80027ea:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ec:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027f2:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 80027f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027f8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002800:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002806:	4b1c      	ldr	r3, [pc, #112]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 8002808:	2200      	movs	r2, #0
 800280a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800280c:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 800280e:	2200      	movs	r2, #0
 8002810:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002812:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002818:	4817      	ldr	r0, [pc, #92]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 800281a:	f000 fc0f 	bl	800303c <HAL_DMA_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_MspInit+0x1ec>
      Error_Handler();
 8002824:	f7ff fec6 	bl	80025b4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a13      	ldr	r2, [pc, #76]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 800282c:	635a      	str	r2, [r3, #52]	@ 0x34
 800282e:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <HAL_I2C_MspInit+0x23c>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	2021      	movs	r0, #33	@ 0x21
 800283a:	f000 fbc8 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800283e:	2021      	movs	r0, #33	@ 0x21
 8002840:	f000 fbe1 	bl	8003006 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	2022      	movs	r0, #34	@ 0x22
 800284a:	f000 fbc0 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800284e:	2022      	movs	r0, #34	@ 0x22
 8002850:	f000 fbd9 	bl	8003006 <HAL_NVIC_EnableIRQ>
}
 8002854:	bf00      	nop
 8002856:	3730      	adds	r7, #48	@ 0x30
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40005400 	.word	0x40005400
 8002860:	40023800 	.word	0x40023800
 8002864:	40020400 	.word	0x40020400
 8002868:	40005800 	.word	0x40005800
 800286c:	40020800 	.word	0x40020800
 8002870:	200002a0 	.word	0x200002a0
 8002874:	40026040 	.word	0x40026040
 8002878:	20000300 	.word	0x20000300
 800287c:	400260b8 	.word	0x400260b8

08002880 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0e      	ldr	r2, [pc, #56]	@ (80028c8 <HAL_TIM_Base_MspInit+0x48>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d115      	bne.n	80028be <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <HAL_TIM_Base_MspInit+0x4c>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	4a0c      	ldr	r2, [pc, #48]	@ (80028cc <HAL_TIM_Base_MspInit+0x4c>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <HAL_TIM_Base_MspInit+0x4c>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	201d      	movs	r0, #29
 80028b4:	f000 fb8b 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028b8:	201d      	movs	r0, #29
 80028ba:	f000 fba4 	bl	8003006 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	@ 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a34      	ldr	r2, [pc, #208]	@ (80029c0 <HAL_UART_MspInit+0xf0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d161      	bne.n	80029b6 <HAL_UART_MspInit+0xe6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b33      	ldr	r3, [pc, #204]	@ (80029c4 <HAL_UART_MspInit+0xf4>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_UART_MspInit+0xf4>)
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002900:	6413      	str	r3, [r2, #64]	@ 0x40
 8002902:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_UART_MspInit+0xf4>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b2c      	ldr	r3, [pc, #176]	@ (80029c4 <HAL_UART_MspInit+0xf4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	4a2b      	ldr	r2, [pc, #172]	@ (80029c4 <HAL_UART_MspInit+0xf4>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6313      	str	r3, [r2, #48]	@ 0x30
 800291e:	4b29      	ldr	r3, [pc, #164]	@ (80029c4 <HAL_UART_MspInit+0xf4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800292a:	230c      	movs	r3, #12
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800293a:	2307      	movs	r3, #7
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4820      	ldr	r0, [pc, #128]	@ (80029c8 <HAL_UART_MspInit+0xf8>)
 8002946:	f000 ff03 	bl	8003750 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800294a:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 800294c:	4a20      	ldr	r2, [pc, #128]	@ (80029d0 <HAL_UART_MspInit+0x100>)
 800294e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002950:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 8002952:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002956:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002958:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 800295a:	2240      	movs	r2, #64	@ 0x40
 800295c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800295e:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 8002960:	2200      	movs	r2, #0
 8002962:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002964:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 8002966:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800296a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800296c:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 800296e:	2200      	movs	r2, #0
 8002970:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002972:	4b16      	ldr	r3, [pc, #88]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002978:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800297e:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 8002986:	2200      	movs	r2, #0
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800298a:	4810      	ldr	r0, [pc, #64]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 800298c:	f000 fb56 	bl	800303c <HAL_DMA_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002996:	f7ff fe0d 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a0b      	ldr	r2, [pc, #44]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 800299e:	639a      	str	r2, [r3, #56]	@ 0x38
 80029a0:	4a0a      	ldr	r2, [pc, #40]	@ (80029cc <HAL_UART_MspInit+0xfc>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2026      	movs	r0, #38	@ 0x26
 80029ac:	f000 fb0f 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029b0:	2026      	movs	r0, #38	@ 0x26
 80029b2:	f000 fb28 	bl	8003006 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	@ 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40004400 	.word	0x40004400
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	200003f0 	.word	0x200003f0
 80029d0:	400260a0 	.word	0x400260a0

080029d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <NMI_Handler+0x4>

080029dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <HardFault_Handler+0x4>

080029e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <MemManage_Handler+0x4>

080029ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <BusFault_Handler+0x4>

080029f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <UsageFault_Handler+0x4>

080029fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a2a:	f000 f9b1 	bl	8002d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002a38:	4802      	ldr	r0, [pc, #8]	@ (8002a44 <DMA1_Stream2_IRQHandler+0x10>)
 8002a3a:	f000 fc3f 	bl	80032bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200002a0 	.word	0x200002a0

08002a48 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <DMA1_Stream6_IRQHandler+0x10>)
 8002a4e:	f000 fc35 	bl	80032bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200003f0 	.word	0x200003f0

08002a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <TIM3_IRQHandler+0x10>)
 8002a62:	f004 fdbf 	bl	80075e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000360 	.word	0x20000360

08002a70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a74:	4802      	ldr	r0, [pc, #8]	@ (8002a80 <I2C1_EV_IRQHandler+0x10>)
 8002a76:	f001 fde7 	bl	8004648 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200001f8 	.word	0x200001f8

08002a84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a88:	4802      	ldr	r0, [pc, #8]	@ (8002a94 <I2C1_ER_IRQHandler+0x10>)
 8002a8a:	f001 ff4e 	bl	800492a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200001f8 	.word	0x200001f8

08002a98 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002a9c:	4802      	ldr	r0, [pc, #8]	@ (8002aa8 <I2C2_EV_IRQHandler+0x10>)
 8002a9e:	f001 fdd3 	bl	8004648 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000024c 	.word	0x2000024c

08002aac <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002ab0:	4802      	ldr	r0, [pc, #8]	@ (8002abc <I2C2_ER_IRQHandler+0x10>)
 8002ab2:	f001 ff3a 	bl	800492a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000024c 	.word	0x2000024c

08002ac0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ac4:	4802      	ldr	r0, [pc, #8]	@ (8002ad0 <USART2_IRQHandler+0x10>)
 8002ac6:	f005 fa19 	bl	8007efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200003a8 	.word	0x200003a8

08002ad4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002ad8:	4802      	ldr	r0, [pc, #8]	@ (8002ae4 <DMA1_Stream7_IRQHandler+0x10>)
 8002ada:	f000 fbef 	bl	80032bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000300 	.word	0x20000300

08002ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return 1;
 8002aec:	2301      	movs	r3, #1
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_kill>:

int _kill(int pid, int sig)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b02:	f007 fad5 	bl	800a0b0 <__errno>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2216      	movs	r2, #22
 8002b0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_exit>:

void _exit (int status)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ffe7 	bl	8002af8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b2a:	bf00      	nop
 8002b2c:	e7fd      	b.n	8002b2a <_exit+0x12>

08002b2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e00a      	b.n	8002b56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b40:	f3af 8000 	nop.w
 8002b44:	4601      	mov	r1, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	60ba      	str	r2, [r7, #8]
 8002b4c:	b2ca      	uxtb	r2, r1
 8002b4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3301      	adds	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	dbf0      	blt.n	8002b40 <_read+0x12>
  }

  return len;
 8002b5e:	687b      	ldr	r3, [r7, #4]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e009      	b.n	8002b8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	60ba      	str	r2, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fca4 	bl	80014d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	dbf1      	blt.n	8002b7a <_write+0x12>
  }
  return len;
 8002b96:	687b      	ldr	r3, [r7, #4]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_close>:

int _close(int file)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bc8:	605a      	str	r2, [r3, #4]
  return 0;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_isatty>:

int _isatty(int file)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c10:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <_sbrk+0x5c>)
 8002c12:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <_sbrk+0x60>)
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c1c:	4b13      	ldr	r3, [pc, #76]	@ (8002c6c <_sbrk+0x64>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c24:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <_sbrk+0x64>)
 8002c26:	4a12      	ldr	r2, [pc, #72]	@ (8002c70 <_sbrk+0x68>)
 8002c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <_sbrk+0x64>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d207      	bcs.n	8002c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c38:	f007 fa3a 	bl	800a0b0 <__errno>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	220c      	movs	r2, #12
 8002c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c42:	f04f 33ff 	mov.w	r3, #4294967295
 8002c46:	e009      	b.n	8002c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c48:	4b08      	ldr	r3, [pc, #32]	@ (8002c6c <_sbrk+0x64>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c4e:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <_sbrk+0x64>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	4a05      	ldr	r2, [pc, #20]	@ (8002c6c <_sbrk+0x64>)
 8002c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20020000 	.word	0x20020000
 8002c68:	00000400 	.word	0x00000400
 8002c6c:	200004d0 	.word	0x200004d0
 8002c70:	20000628 	.word	0x20000628

08002c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <SystemInit+0x20>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	4a05      	ldr	r2, [pc, #20]	@ (8002c94 <SystemInit+0x20>)
 8002c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c9c:	f7ff ffea 	bl	8002c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ca0:	480c      	ldr	r0, [pc, #48]	@ (8002cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ca2:	490d      	ldr	r1, [pc, #52]	@ (8002cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca8:	e002      	b.n	8002cb0 <LoopCopyDataInit>

08002caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cae:	3304      	adds	r3, #4

08002cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb4:	d3f9      	bcc.n	8002caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cbc:	e001      	b.n	8002cc2 <LoopFillZerobss>

08002cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc0:	3204      	adds	r2, #4

08002cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc4:	d3fb      	bcc.n	8002cbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002cc6:	f007 f9f9 	bl	800a0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cca:	f7fe fc1f 	bl	800150c <main>
  bx  lr    
 8002cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002cdc:	0800e074 	.word	0x0800e074
  ldr r2, =_sbss
 8002ce0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002ce4:	20000624 	.word	0x20000624

08002ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce8:	e7fe      	b.n	8002ce8 <ADC_IRQHandler>
	...

08002cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <HAL_Init+0x40>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d2c <HAL_Init+0x40>)
 8002cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <HAL_Init+0x40>)
 8002d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <HAL_Init+0x40>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d14:	2003      	movs	r0, #3
 8002d16:	f000 f94f 	bl	8002fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f000 f808 	bl	8002d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d20:	f7ff fc64 	bl	80025ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_InitTick+0x54>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <HAL_InitTick+0x58>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f967 	bl	8003022 <HAL_SYSTICK_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00e      	b.n	8002d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d80a      	bhi.n	8002d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d64:	2200      	movs	r2, #0
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f000 f92f 	bl	8002fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d70:	4a06      	ldr	r2, [pc, #24]	@ (8002d8c <HAL_InitTick+0x5c>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000004 	.word	0x20000004
 8002d88:	2000000c 	.word	0x2000000c
 8002d8c:	20000008 	.word	0x20000008

08002d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_IncTick+0x20>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_IncTick+0x24>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <HAL_IncTick+0x24>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000000c 	.word	0x2000000c
 8002db4:	200004d4 	.word	0x200004d4

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200004d4 	.word	0x200004d4

08002dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d005      	beq.n	8002df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <HAL_Delay+0x44>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002df6:	bf00      	nop
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8f7      	bhi.n	8002df8 <HAL_Delay+0x28>
  {
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000000c 	.word	0x2000000c

08002e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e28:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e34:	4013      	ands	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4a:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	60d3      	str	r3, [r2, #12]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <__NVIC_GetPriorityGrouping+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 0307 	and.w	r3, r3, #7
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db0b      	blt.n	8002ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4907      	ldr	r1, [pc, #28]	@ (8002eb4 <__NVIC_EnableIRQ+0x38>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e100 	.word	0xe000e100

08002eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	@ (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	@ (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
         );
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	@ 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f84:	d301      	bcc.n	8002f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00f      	b.n	8002faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <SysTick_Config+0x40>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f92:	210f      	movs	r1, #15
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f7ff ff8e 	bl	8002eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <SysTick_Config+0x40>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa2:	4b04      	ldr	r3, [pc, #16]	@ (8002fb4 <SysTick_Config+0x40>)
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	e000e010 	.word	0xe000e010

08002fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff29 	bl	8002e18 <__NVIC_SetPriorityGrouping>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe0:	f7ff ff3e 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 8002fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7ff ff8e 	bl	8002f0c <NVIC_EncodePriority>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff5d 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff31 	bl	8002e7c <__NVIC_EnableIRQ>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ffa2 	bl	8002f74 <SysTick_Config>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7ff feb6 	bl	8002db8 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e099      	b.n	800318c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003078:	e00f      	b.n	800309a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800307a:	f7ff fe9d 	bl	8002db8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b05      	cmp	r3, #5
 8003086:	d908      	bls.n	800309a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2203      	movs	r2, #3
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e078      	b.n	800318c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e8      	bne.n	800307a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4b38      	ldr	r3, [pc, #224]	@ (8003194 <HAL_DMA_Init+0x158>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d107      	bne.n	8003104 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	4313      	orrs	r3, r2
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0307 	bic.w	r3, r3, #7
 800311a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	2b04      	cmp	r3, #4
 800312c:	d117      	bne.n	800315e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00e      	beq.n	800315e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa89 	bl	8003658 <DMA_CheckFifoParam>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800315a:	2301      	movs	r3, #1
 800315c:	e016      	b.n	800318c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fa40 	bl	80035ec <DMA_CalcBaseAndBitshift>
 800316c:	4603      	mov	r3, r0
 800316e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003174:	223f      	movs	r2, #63	@ 0x3f
 8003176:	409a      	lsls	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	f010803f 	.word	0xf010803f

08003198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031a6:	f7ff fe07 	bl	8002db8 <HAL_GetTick>
 80031aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d008      	beq.n	80031ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e052      	b.n	8003270 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0216 	bic.w	r2, r2, #22
 80031d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <HAL_DMA_Abort+0x62>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0208 	bic.w	r2, r2, #8
 8003208:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800321a:	e013      	b.n	8003244 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800321c:	f7ff fdcc 	bl	8002db8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b05      	cmp	r3, #5
 8003228:	d90c      	bls.n	8003244 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2203      	movs	r2, #3
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e015      	b.n	8003270 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e4      	bne.n	800321c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003256:	223f      	movs	r2, #63	@ 0x3f
 8003258:	409a      	lsls	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d004      	beq.n	8003296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2280      	movs	r2, #128	@ 0x80
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e00c      	b.n	80032b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2205      	movs	r2, #5
 800329a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003504 <HAL_DMA_IRQHandler+0x248>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003508 <HAL_DMA_IRQHandler+0x24c>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0a9b      	lsrs	r3, r3, #10
 80032d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e6:	2208      	movs	r2, #8
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01a      	beq.n	8003328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0204 	bic.w	r2, r2, #4
 800330e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	2208      	movs	r2, #8
 8003316:	409a      	lsls	r2, r3
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332c:	2201      	movs	r2, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d012      	beq.n	800335e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334a:	2201      	movs	r2, #1
 800334c:	409a      	lsls	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	f043 0202 	orr.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	2204      	movs	r2, #4
 8003364:	409a      	lsls	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d012      	beq.n	8003394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00b      	beq.n	8003394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003380:	2204      	movs	r2, #4
 8003382:	409a      	lsls	r2, r3
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338c:	f043 0204 	orr.w	r2, r3, #4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003398:	2210      	movs	r2, #16
 800339a:	409a      	lsls	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d043      	beq.n	800342c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d03c      	beq.n	800342c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b6:	2210      	movs	r2, #16
 80033b8:	409a      	lsls	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d018      	beq.n	80033fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d024      	beq.n	800342c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
 80033ea:	e01f      	b.n	800342c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01b      	beq.n	800342c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
 80033fc:	e016      	b.n	800342c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0208 	bic.w	r2, r2, #8
 800341a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	2220      	movs	r2, #32
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 808f 	beq.w	800355c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8087 	beq.w	800355c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003452:	2220      	movs	r2, #32
 8003454:	409a      	lsls	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b05      	cmp	r3, #5
 8003464:	d136      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0216 	bic.w	r2, r2, #22
 8003474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <HAL_DMA_IRQHandler+0x1da>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0208 	bic.w	r2, r2, #8
 80034a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034aa:	223f      	movs	r2, #63	@ 0x3f
 80034ac:	409a      	lsls	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d07e      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
        }
        return;
 80034d2:	e079      	b.n	80035c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01d      	beq.n	800351e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10d      	bne.n	800350c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d031      	beq.n	800355c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
 8003500:	e02c      	b.n	800355c <HAL_DMA_IRQHandler+0x2a0>
 8003502:	bf00      	nop
 8003504:	20000004 	.word	0x20000004
 8003508:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d023      	beq.n	800355c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
 800351c:	e01e      	b.n	800355c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10f      	bne.n	800354c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0210 	bic.w	r2, r2, #16
 800353a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	2b00      	cmp	r3, #0
 8003562:	d032      	beq.n	80035ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d022      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2205      	movs	r2, #5
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	3301      	adds	r3, #1
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	429a      	cmp	r2, r3
 8003592:	d307      	bcc.n	80035a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f2      	bne.n	8003588 <HAL_DMA_IRQHandler+0x2cc>
 80035a2:	e000      	b.n	80035a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
 80035c6:	e000      	b.n	80035ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80035c8:	bf00      	nop
    }
  }
}
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035de:	b2db      	uxtb	r3, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3b10      	subs	r3, #16
 80035fc:	4a14      	ldr	r2, [pc, #80]	@ (8003650 <DMA_CalcBaseAndBitshift+0x64>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003606:	4a13      	ldr	r2, [pc, #76]	@ (8003654 <DMA_CalcBaseAndBitshift+0x68>)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d909      	bls.n	800362e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003622:	f023 0303 	bic.w	r3, r3, #3
 8003626:	1d1a      	adds	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	659a      	str	r2, [r3, #88]	@ 0x58
 800362c:	e007      	b.n	800363e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	aaaaaaab 	.word	0xaaaaaaab
 8003654:	0800dc30 	.word	0x0800dc30

08003658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11f      	bne.n	80036b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d856      	bhi.n	8003726 <DMA_CheckFifoParam+0xce>
 8003678:	a201      	add	r2, pc, #4	@ (adr r2, 8003680 <DMA_CheckFifoParam+0x28>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	08003691 	.word	0x08003691
 8003684:	080036a3 	.word	0x080036a3
 8003688:	08003691 	.word	0x08003691
 800368c:	08003727 	.word	0x08003727
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d046      	beq.n	800372a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a0:	e043      	b.n	800372a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036aa:	d140      	bne.n	800372e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b0:	e03d      	b.n	800372e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ba:	d121      	bne.n	8003700 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d837      	bhi.n	8003732 <DMA_CheckFifoParam+0xda>
 80036c2:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <DMA_CheckFifoParam+0x70>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036df 	.word	0x080036df
 80036d0:	080036d9 	.word	0x080036d9
 80036d4:	080036f1 	.word	0x080036f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      break;
 80036dc:	e030      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d025      	beq.n	8003736 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ee:	e022      	b.n	8003736 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036f8:	d11f      	bne.n	800373a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036fe:	e01c      	b.n	800373a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d903      	bls.n	800370e <DMA_CheckFifoParam+0xb6>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d003      	beq.n	8003714 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800370c:	e018      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
      break;
 8003712:	e015      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e00b      	b.n	800373e <DMA_CheckFifoParam+0xe6>
      break;
 8003726:	bf00      	nop
 8003728:	e00a      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 800372a:	bf00      	nop
 800372c:	e008      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e006      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e004      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;   
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
    }
  } 
  
  return status; 
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	@ 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	e165      	b.n	8003a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	429a      	cmp	r2, r3
 8003786:	f040 8154 	bne.w	8003a32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d005      	beq.n	80037a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d130      	bne.n	8003804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	2203      	movs	r2, #3
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d8:	2201      	movs	r2, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 0201 	and.w	r2, r3, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b03      	cmp	r3, #3
 800380e:	d017      	beq.n	8003840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	2203      	movs	r2, #3
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d123      	bne.n	8003894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	08da      	lsrs	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3208      	adds	r2, #8
 8003854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	220f      	movs	r2, #15
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	08da      	lsrs	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3208      	adds	r2, #8
 800388e:	69b9      	ldr	r1, [r7, #24]
 8003890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2203      	movs	r2, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0203 	and.w	r2, r3, #3
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80ae 	beq.w	8003a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	4b5d      	ldr	r3, [pc, #372]	@ (8003a50 <HAL_GPIO_Init+0x300>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	4a5c      	ldr	r2, [pc, #368]	@ (8003a50 <HAL_GPIO_Init+0x300>)
 80038e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003a50 <HAL_GPIO_Init+0x300>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f2:	4a58      	ldr	r2, [pc, #352]	@ (8003a54 <HAL_GPIO_Init+0x304>)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a4f      	ldr	r2, [pc, #316]	@ (8003a58 <HAL_GPIO_Init+0x308>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d025      	beq.n	800396a <HAL_GPIO_Init+0x21a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4e      	ldr	r2, [pc, #312]	@ (8003a5c <HAL_GPIO_Init+0x30c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <HAL_GPIO_Init+0x216>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4d      	ldr	r2, [pc, #308]	@ (8003a60 <HAL_GPIO_Init+0x310>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x212>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4c      	ldr	r2, [pc, #304]	@ (8003a64 <HAL_GPIO_Init+0x314>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x20e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4b      	ldr	r2, [pc, #300]	@ (8003a68 <HAL_GPIO_Init+0x318>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x20a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4a      	ldr	r2, [pc, #296]	@ (8003a6c <HAL_GPIO_Init+0x31c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x206>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a49      	ldr	r2, [pc, #292]	@ (8003a70 <HAL_GPIO_Init+0x320>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x202>
 800394e:	2306      	movs	r3, #6
 8003950:	e00c      	b.n	800396c <HAL_GPIO_Init+0x21c>
 8003952:	2307      	movs	r3, #7
 8003954:	e00a      	b.n	800396c <HAL_GPIO_Init+0x21c>
 8003956:	2305      	movs	r3, #5
 8003958:	e008      	b.n	800396c <HAL_GPIO_Init+0x21c>
 800395a:	2304      	movs	r3, #4
 800395c:	e006      	b.n	800396c <HAL_GPIO_Init+0x21c>
 800395e:	2303      	movs	r3, #3
 8003960:	e004      	b.n	800396c <HAL_GPIO_Init+0x21c>
 8003962:	2302      	movs	r3, #2
 8003964:	e002      	b.n	800396c <HAL_GPIO_Init+0x21c>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_GPIO_Init+0x21c>
 800396a:	2300      	movs	r3, #0
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	f002 0203 	and.w	r2, r2, #3
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	4093      	lsls	r3, r2
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800397c:	4935      	ldr	r1, [pc, #212]	@ (8003a54 <HAL_GPIO_Init+0x304>)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	3302      	adds	r3, #2
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800398a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a74 <HAL_GPIO_Init+0x324>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ae:	4a31      	ldr	r2, [pc, #196]	@ (8003a74 <HAL_GPIO_Init+0x324>)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003a74 <HAL_GPIO_Init+0x324>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039d8:	4a26      	ldr	r2, [pc, #152]	@ (8003a74 <HAL_GPIO_Init+0x324>)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039de:	4b25      	ldr	r3, [pc, #148]	@ (8003a74 <HAL_GPIO_Init+0x324>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a02:	4a1c      	ldr	r2, [pc, #112]	@ (8003a74 <HAL_GPIO_Init+0x324>)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a08:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <HAL_GPIO_Init+0x324>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a2c:	4a11      	ldr	r2, [pc, #68]	@ (8003a74 <HAL_GPIO_Init+0x324>)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3301      	adds	r3, #1
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	f67f ae96 	bls.w	800376c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	3724      	adds	r7, #36	@ 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40013800 	.word	0x40013800
 8003a58:	40020000 	.word	0x40020000
 8003a5c:	40020400 	.word	0x40020400
 8003a60:	40020800 	.word	0x40020800
 8003a64:	40020c00 	.word	0x40020c00
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40021400 	.word	0x40021400
 8003a70:	40021800 	.word	0x40021800
 8003a74:	40013c00 	.word	0x40013c00

08003a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
 8003a84:	4613      	mov	r3, r2
 8003a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a88:	787b      	ldrb	r3, [r7, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a94:	e003      	b.n	8003a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	041a      	lsls	r2, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	619a      	str	r2, [r3, #24]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003abc:	887a      	ldrh	r2, [r7, #2]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	041a      	lsls	r2, r3, #16
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43d9      	mvns	r1, r3
 8003ac8:	887b      	ldrh	r3, [r7, #2]
 8003aca:	400b      	ands	r3, r1
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	619a      	str	r2, [r3, #24]
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e12b      	b.n	8003d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fe fd98 	bl	800263c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	@ 0x24
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b44:	f002 ff98 	bl	8006a78 <HAL_RCC_GetPCLK1Freq>
 8003b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4a81      	ldr	r2, [pc, #516]	@ (8003d54 <HAL_I2C_Init+0x274>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d807      	bhi.n	8003b64 <HAL_I2C_Init+0x84>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a80      	ldr	r2, [pc, #512]	@ (8003d58 <HAL_I2C_Init+0x278>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bf94      	ite	ls
 8003b5c:	2301      	movls	r3, #1
 8003b5e:	2300      	movhi	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e006      	b.n	8003b72 <HAL_I2C_Init+0x92>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a7d      	ldr	r2, [pc, #500]	@ (8003d5c <HAL_I2C_Init+0x27c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	bf94      	ite	ls
 8003b6c:	2301      	movls	r3, #1
 8003b6e:	2300      	movhi	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0e7      	b.n	8003d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a78      	ldr	r2, [pc, #480]	@ (8003d60 <HAL_I2C_Init+0x280>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	0c9b      	lsrs	r3, r3, #18
 8003b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d54 <HAL_I2C_Init+0x274>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d802      	bhi.n	8003bb4 <HAL_I2C_Init+0xd4>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	e009      	b.n	8003bc8 <HAL_I2C_Init+0xe8>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	4a69      	ldr	r2, [pc, #420]	@ (8003d64 <HAL_I2C_Init+0x284>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	495c      	ldr	r1, [pc, #368]	@ (8003d54 <HAL_I2C_Init+0x274>)
 8003be4:	428b      	cmp	r3, r1
 8003be6:	d819      	bhi.n	8003c1c <HAL_I2C_Init+0x13c>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1e59      	subs	r1, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_I2C_Init+0x138>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1e59      	subs	r1, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c10:	3301      	adds	r3, #1
 8003c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c16:	e051      	b.n	8003cbc <HAL_I2C_Init+0x1dc>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	e04f      	b.n	8003cbc <HAL_I2C_Init+0x1dc>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d111      	bne.n	8003c48 <HAL_I2C_Init+0x168>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	440b      	add	r3, r1
 8003c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c36:	3301      	adds	r3, #1
 8003c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e012      	b.n	8003c6e <HAL_I2C_Init+0x18e>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	0099      	lsls	r1, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Init+0x196>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e022      	b.n	8003cbc <HAL_I2C_Init+0x1dc>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10e      	bne.n	8003c9c <HAL_I2C_Init+0x1bc>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1e58      	subs	r0, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	440b      	add	r3, r1
 8003c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c90:	3301      	adds	r3, #1
 8003c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c9a:	e00f      	b.n	8003cbc <HAL_I2C_Init+0x1dc>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e58      	subs	r0, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	0099      	lsls	r1, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	6809      	ldr	r1, [r1, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6911      	ldr	r1, [r2, #16]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68d2      	ldr	r2, [r2, #12]
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	000186a0 	.word	0x000186a0
 8003d58:	001e847f 	.word	0x001e847f
 8003d5c:	003d08ff 	.word	0x003d08ff
 8003d60:	431bde83 	.word	0x431bde83
 8003d64:	10624dd3 	.word	0x10624dd3

08003d68 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7a:	2b80      	cmp	r3, #128	@ 0x80
 8003d7c:	d103      	bne.n	8003d86 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
  }
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	817b      	strh	r3, [r7, #10]
 8003da6:	460b      	mov	r3, r1
 8003da8:	813b      	strh	r3, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dae:	f7ff f803 	bl	8002db8 <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	f040 80d9 	bne.w	8003f74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2319      	movs	r3, #25
 8003dc8:	2201      	movs	r2, #1
 8003dca:	496d      	ldr	r1, [pc, #436]	@ (8003f80 <HAL_I2C_Mem_Write+0x1ec>)
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f002 fa63 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0cc      	b.n	8003f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Mem_Write+0x56>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0c5      	b.n	8003f76 <HAL_I2C_Mem_Write+0x1e2>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d007      	beq.n	8003e10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2221      	movs	r2, #33	@ 0x21
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2240      	movs	r2, #64	@ 0x40
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a4d      	ldr	r2, [pc, #308]	@ (8003f84 <HAL_I2C_Mem_Write+0x1f0>)
 8003e50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e52:	88f8      	ldrh	r0, [r7, #6]
 8003e54:	893a      	ldrh	r2, [r7, #8]
 8003e56:	8979      	ldrh	r1, [r7, #10]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	4603      	mov	r3, r0
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f001 fff2 	bl	8005e4c <I2C_RequestMemoryWrite>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d052      	beq.n	8003f14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e081      	b.n	8003f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f002 fb28 	bl	80064cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d107      	bne.n	8003e9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e06b      	b.n	8003f76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	781a      	ldrb	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d11b      	bne.n	8003f14 <HAL_I2C_Mem_Write+0x180>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d017      	beq.n	8003f14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1aa      	bne.n	8003e72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f002 fb1b 	bl	800655c <I2C_WaitOnBTFFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d107      	bne.n	8003f44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e016      	b.n	8003f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	00100002 	.word	0x00100002
 8003f84:	ffff0000 	.word	0xffff0000

08003f88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08c      	sub	sp, #48	@ 0x30
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	817b      	strh	r3, [r7, #10]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	813b      	strh	r3, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa2:	f7fe ff09 	bl	8002db8 <HAL_GetTick>
 8003fa6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	f040 8214 	bne.w	80043de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	2319      	movs	r3, #25
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	497b      	ldr	r1, [pc, #492]	@ (80041ac <HAL_I2C_Mem_Read+0x224>)
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f002 f969 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e207      	b.n	80043e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_I2C_Mem_Read+0x56>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e200      	b.n	80043e0 <HAL_I2C_Mem_Read+0x458>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d007      	beq.n	8004004 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004012:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2222      	movs	r2, #34	@ 0x22
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2240      	movs	r2, #64	@ 0x40
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004034:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a5b      	ldr	r2, [pc, #364]	@ (80041b0 <HAL_I2C_Mem_Read+0x228>)
 8004044:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004046:	88f8      	ldrh	r0, [r7, #6]
 8004048:	893a      	ldrh	r2, [r7, #8]
 800404a:	8979      	ldrh	r1, [r7, #10]
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	4603      	mov	r3, r0
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f001 ff8e 	bl	8005f78 <I2C_RequestMemoryRead>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e1bc      	b.n	80043e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d113      	bne.n	8004096 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	623b      	str	r3, [r7, #32]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e190      	b.n	80043b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409a:	2b01      	cmp	r3, #1
 800409c:	d11b      	bne.n	80040d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e170      	b.n	80043b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d11b      	bne.n	8004116 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	e150      	b.n	80043b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800412c:	e144      	b.n	80043b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004132:	2b03      	cmp	r3, #3
 8004134:	f200 80f1 	bhi.w	800431a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413c:	2b01      	cmp	r3, #1
 800413e:	d123      	bne.n	8004188 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004142:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f002 fa83 	bl	8006650 <I2C_WaitOnRXNEFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e145      	b.n	80043e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004186:	e117      	b.n	80043b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418c:	2b02      	cmp	r3, #2
 800418e:	d14e      	bne.n	800422e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004196:	2200      	movs	r2, #0
 8004198:	4906      	ldr	r1, [pc, #24]	@ (80041b4 <HAL_I2C_Mem_Read+0x22c>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f002 f87c 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e11a      	b.n	80043e0 <HAL_I2C_Mem_Read+0x458>
 80041aa:	bf00      	nop
 80041ac:	00100002 	.word	0x00100002
 80041b0:	ffff0000 	.word	0xffff0000
 80041b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800422c:	e0c4      	b.n	80043b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004234:	2200      	movs	r2, #0
 8004236:	496c      	ldr	r1, [pc, #432]	@ (80043e8 <HAL_I2C_Mem_Read+0x460>)
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f002 f82d 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0cb      	b.n	80043e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004290:	2200      	movs	r2, #0
 8004292:	4955      	ldr	r1, [pc, #340]	@ (80043e8 <HAL_I2C_Mem_Read+0x460>)
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f001 ffff 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e09d      	b.n	80043e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004318:	e04e      	b.n	80043b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f002 f996 	bl	8006650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e058      	b.n	80043e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d124      	bne.n	80043b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004372:	2b03      	cmp	r3, #3
 8004374:	d107      	bne.n	8004386 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004384:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f47f aeb6 	bne.w	800412e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3728      	adds	r7, #40	@ 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	00010004 	.word	0x00010004

080043ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	460b      	mov	r3, r1
 80043fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80043fc:	f7fe fcdc 	bl	8002db8 <HAL_GetTick>
 8004400:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b20      	cmp	r3, #32
 8004410:	f040 8111 	bne.w	8004636 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2319      	movs	r3, #25
 800441a:	2201      	movs	r2, #1
 800441c:	4988      	ldr	r1, [pc, #544]	@ (8004640 <HAL_I2C_IsDeviceReady+0x254>)
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f001 ff3a 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800442a:	2302      	movs	r3, #2
 800442c:	e104      	b.n	8004638 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_I2C_IsDeviceReady+0x50>
 8004438:	2302      	movs	r3, #2
 800443a:	e0fd      	b.n	8004638 <HAL_I2C_IsDeviceReady+0x24c>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d007      	beq.n	8004462 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0201 	orr.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2224      	movs	r2, #36	@ 0x24
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a70      	ldr	r2, [pc, #448]	@ (8004644 <HAL_I2C_IsDeviceReady+0x258>)
 8004484:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004494:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2200      	movs	r2, #0
 800449e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f001 fef8 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044bc:	d103      	bne.n	80044c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0b6      	b.n	8004638 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80044da:	f7fe fc6d 	bl	8002db8 <HAL_GetTick>
 80044de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800450e:	e025      	b.n	800455c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004510:	f7fe fc52 	bl	8002db8 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d302      	bcc.n	8004526 <HAL_I2C_IsDeviceReady+0x13a>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	22a0      	movs	r2, #160	@ 0xa0
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b02      	cmp	r3, #2
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2ba0      	cmp	r3, #160	@ 0xa0
 8004566:	d005      	beq.n	8004574 <HAL_I2C_IsDeviceReady+0x188>
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <HAL_I2C_IsDeviceReady+0x188>
 800456e:	7dbb      	ldrb	r3, [r7, #22]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0cd      	beq.n	8004510 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b02      	cmp	r3, #2
 8004588:	d129      	bne.n	80045de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004598:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	2319      	movs	r3, #25
 80045b6:	2201      	movs	r2, #1
 80045b8:	4921      	ldr	r1, [pc, #132]	@ (8004640 <HAL_I2C_IsDeviceReady+0x254>)
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f001 fe6c 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e036      	b.n	8004638 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e02c      	b.n	8004638 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2319      	movs	r3, #25
 80045fe:	2201      	movs	r2, #1
 8004600:	490f      	ldr	r1, [pc, #60]	@ (8004640 <HAL_I2C_IsDeviceReady+0x254>)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f001 fe48 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e012      	b.n	8004638 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	3301      	adds	r3, #1
 8004616:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	f4ff af32 	bcc.w	8004486 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004636:	2302      	movs	r3, #2
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	00100002 	.word	0x00100002
 8004644:	ffff0000 	.word	0xffff0000

08004648 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004668:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004670:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b10      	cmp	r3, #16
 8004676:	d003      	beq.n	8004680 <HAL_I2C_EV_IRQHandler+0x38>
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b40      	cmp	r3, #64	@ 0x40
 800467c:	f040 80c1 	bne.w	8004802 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10d      	bne.n	80046b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80046a0:	d003      	beq.n	80046aa <HAL_I2C_EV_IRQHandler+0x62>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80046a8:	d101      	bne.n	80046ae <HAL_I2C_EV_IRQHandler+0x66>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_I2C_EV_IRQHandler+0x68>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	f000 8132 	beq.w	800491a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00c      	beq.n	80046da <HAL_I2C_EV_IRQHandler+0x92>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	0a5b      	lsrs	r3, r3, #9
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d006      	beq.n	80046da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f002 f84b 	bl	8006768 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fd9b 	bl	800520e <I2C_Master_SB>
 80046d8:	e092      	b.n	8004800 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <HAL_I2C_EV_IRQHandler+0xb2>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	0a5b      	lsrs	r3, r3, #9
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fe11 	bl	800531a <I2C_Master_ADD10>
 80046f8:	e082      	b.n	8004800 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_I2C_EV_IRQHandler+0xd2>
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	0a5b      	lsrs	r3, r3, #9
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fe2b 	bl	800536e <I2C_Master_ADDR>
 8004718:	e072      	b.n	8004800 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d03b      	beq.n	800479e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004734:	f000 80f3 	beq.w	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	09db      	lsrs	r3, r3, #7
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00f      	beq.n	8004764 <HAL_I2C_EV_IRQHandler+0x11c>
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	0a9b      	lsrs	r3, r3, #10
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <HAL_I2C_EV_IRQHandler+0x11c>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d103      	bne.n	8004764 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f9f3 	bl	8004b48 <I2C_MasterTransmit_TXE>
 8004762:	e04d      	b.n	8004800 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80d6 	beq.w	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	0a5b      	lsrs	r3, r3, #9
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80cf 	beq.w	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004780:	7bbb      	ldrb	r3, [r7, #14]
 8004782:	2b21      	cmp	r3, #33	@ 0x21
 8004784:	d103      	bne.n	800478e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa7a 	bl	8004c80 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800478c:	e0c7      	b.n	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b40      	cmp	r3, #64	@ 0x40
 8004792:	f040 80c4 	bne.w	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fae8 	bl	8004d6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800479c:	e0bf      	b.n	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ac:	f000 80b7 	beq.w	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	099b      	lsrs	r3, r3, #6
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00f      	beq.n	80047dc <HAL_I2C_EV_IRQHandler+0x194>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HAL_I2C_EV_IRQHandler+0x194>
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d103      	bne.n	80047dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fb61 	bl	8004e9c <I2C_MasterReceive_RXNE>
 80047da:	e011      	b.n	8004800 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 809a 	beq.w	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	0a5b      	lsrs	r3, r3, #9
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8093 	beq.w	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fc17 	bl	800502c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047fe:	e08e      	b.n	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004800:	e08d      	b.n	800491e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d004      	beq.n	8004814 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	e007      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d012      	beq.n	8004856 <HAL_I2C_EV_IRQHandler+0x20e>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	0a5b      	lsrs	r3, r3, #9
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00c      	beq.n	8004856 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 ffdc 	bl	800580c <I2C_Slave_ADDR>
 8004854:	e066      	b.n	8004924 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_I2C_EV_IRQHandler+0x22e>
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	0a5b      	lsrs	r3, r3, #9
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f001 f816 	bl	80058a0 <I2C_Slave_STOPF>
 8004874:	e056      	b.n	8004924 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004876:	7bbb      	ldrb	r3, [r7, #14]
 8004878:	2b21      	cmp	r3, #33	@ 0x21
 800487a:	d002      	beq.n	8004882 <HAL_I2C_EV_IRQHandler+0x23a>
 800487c:	7bbb      	ldrb	r3, [r7, #14]
 800487e:	2b29      	cmp	r3, #41	@ 0x29
 8004880:	d125      	bne.n	80048ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	09db      	lsrs	r3, r3, #7
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00f      	beq.n	80048ae <HAL_I2C_EV_IRQHandler+0x266>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	0a9b      	lsrs	r3, r3, #10
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_I2C_EV_IRQHandler+0x266>
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fef2 	bl	8005690 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ac:	e039      	b.n	8004922 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d033      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0x2da>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0a5b      	lsrs	r3, r3, #9
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d02d      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 ff1f 	bl	800570a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048cc:	e029      	b.n	8004922 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00f      	beq.n	80048fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	0a9b      	lsrs	r3, r3, #10
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 ff2a 	bl	800574c <I2C_SlaveReceive_RXNE>
 80048f8:	e014      	b.n	8004924 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00e      	beq.n	8004924 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	0a5b      	lsrs	r3, r3, #9
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 ff58 	bl	80057c8 <I2C_SlaveReceive_BTF>
 8004918:	e004      	b.n	8004924 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004922:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b08a      	sub	sp, #40	@ 0x28
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800494c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00e      	beq.n	8004978 <HAL_I2C_ER_IRQHandler+0x4e>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004976:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	0a5b      	lsrs	r3, r3, #9
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <HAL_I2C_ER_IRQHandler+0x78>
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	f043 0302 	orr.w	r3, r3, #2
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80049a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	0a9b      	lsrs	r3, r3, #10
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d03f      	beq.n	8004a2e <HAL_I2C_ER_IRQHandler+0x104>
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d039      	beq.n	8004a2e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80049ba:	7efb      	ldrb	r3, [r7, #27]
 80049bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80049d4:	7ebb      	ldrb	r3, [r7, #26]
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d112      	bne.n	8004a00 <HAL_I2C_ER_IRQHandler+0xd6>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10f      	bne.n	8004a00 <HAL_I2C_ER_IRQHandler+0xd6>
 80049e0:	7cfb      	ldrb	r3, [r7, #19]
 80049e2:	2b21      	cmp	r3, #33	@ 0x21
 80049e4:	d008      	beq.n	80049f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80049e6:	7cfb      	ldrb	r3, [r7, #19]
 80049e8:	2b29      	cmp	r3, #41	@ 0x29
 80049ea:	d005      	beq.n	80049f8 <HAL_I2C_ER_IRQHandler+0xce>
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	2b28      	cmp	r3, #40	@ 0x28
 80049f0:	d106      	bne.n	8004a00 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b21      	cmp	r3, #33	@ 0x21
 80049f6:	d103      	bne.n	8004a00 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f001 f881 	bl	8005b00 <I2C_Slave_AF>
 80049fe:	e016      	b.n	8004a2e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a08:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	f043 0304 	orr.w	r3, r3, #4
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a12:	7efb      	ldrb	r3, [r7, #27]
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d002      	beq.n	8004a1e <HAL_I2C_ER_IRQHandler+0xf4>
 8004a18:	7efb      	ldrb	r3, [r7, #27]
 8004a1a:	2b40      	cmp	r3, #64	@ 0x40
 8004a1c:	d107      	bne.n	8004a2e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a2c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	0adb      	lsrs	r3, r3, #11
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00e      	beq.n	8004a58 <HAL_I2C_ER_IRQHandler+0x12e>
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	f043 0308 	orr.w	r3, r3, #8
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004a56:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f001 f8bc 	bl	8005be8 <I2C_ITError>
  }
}
 8004a70:	bf00      	nop
 8004a72:	3728      	adds	r7, #40	@ 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d150      	bne.n	8004c10 <I2C_MasterTransmit_TXE+0xc8>
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b21      	cmp	r3, #33	@ 0x21
 8004b72:	d14d      	bne.n	8004c10 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d01d      	beq.n	8004bb6 <I2C_MasterTransmit_TXE+0x6e>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d01a      	beq.n	8004bb6 <I2C_MasterTransmit_TXE+0x6e>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b86:	d016      	beq.n	8004bb6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b96:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2211      	movs	r2, #17
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ff62 	bl	8004a78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bb4:	e060      	b.n	8004c78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bc4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	d107      	bne.n	8004c00 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ff7d 	bl	8004af8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bfe:	e03b      	b.n	8004c78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff35 	bl	8004a78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c0e:	e033      	b.n	8004c78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b21      	cmp	r3, #33	@ 0x21
 8004c14:	d005      	beq.n	8004c22 <I2C_MasterTransmit_TXE+0xda>
 8004c16:	7bbb      	ldrb	r3, [r7, #14]
 8004c18:	2b40      	cmp	r3, #64	@ 0x40
 8004c1a:	d12d      	bne.n	8004c78 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b22      	cmp	r3, #34	@ 0x22
 8004c20:	d12a      	bne.n	8004c78 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c3c:	e01c      	b.n	8004c78 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b40      	cmp	r3, #64	@ 0x40
 8004c48:	d103      	bne.n	8004c52 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f88e 	bl	8004d6c <I2C_MemoryTransmit_TXE_BTF>
}
 8004c50:	e012      	b.n	8004c78 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c76:	e7ff      	b.n	8004c78 <I2C_MasterTransmit_TXE+0x130>
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b21      	cmp	r3, #33	@ 0x21
 8004c98:	d164      	bne.n	8004d64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d012      	beq.n	8004cca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004cc8:	e04c      	b.n	8004d64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d01d      	beq.n	8004d0c <I2C_MasterTransmit_BTF+0x8c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d01a      	beq.n	8004d0c <I2C_MasterTransmit_BTF+0x8c>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cdc:	d016      	beq.n	8004d0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2211      	movs	r2, #17
 8004cf2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff feb7 	bl	8004a78 <HAL_I2C_MasterTxCpltCallback>
}
 8004d0a:	e02b      	b.n	8004d64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b40      	cmp	r3, #64	@ 0x40
 8004d44:	d107      	bne.n	8004d56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fed2 	bl	8004af8 <HAL_I2C_MemTxCpltCallback>
}
 8004d54:	e006      	b.n	8004d64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fe8a 	bl	8004a78 <HAL_I2C_MasterTxCpltCallback>
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d11d      	bne.n	8004dc0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d10b      	bne.n	8004da4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9c:	1c9a      	adds	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004da2:	e077      	b.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	121b      	asrs	r3, r3, #8
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004dbe:	e069      	b.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d10b      	bne.n	8004de0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004dde:	e059      	b.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d152      	bne.n	8004e8e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b22      	cmp	r3, #34	@ 0x22
 8004dec:	d10d      	bne.n	8004e0a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dfc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e08:	e044      	b.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d015      	beq.n	8004e40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b21      	cmp	r3, #33	@ 0x21
 8004e18:	d112      	bne.n	8004e40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e3e:	e029      	b.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d124      	bne.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b21      	cmp	r3, #33	@ 0x21
 8004e4e:	d121      	bne.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e5e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fe36 	bl	8004af8 <HAL_I2C_MemTxCpltCallback>
}
 8004e8c:	e002      	b.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fe ff6a 	bl	8003d68 <I2C_Flush_DR>
}
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b22      	cmp	r3, #34	@ 0x22
 8004eae:	f040 80b9 	bne.w	8005024 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d921      	bls.n	8004f0a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	f040 8096 	bne.w	8005024 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f06:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f08:	e08c      	b.n	8005024 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d07f      	beq.n	8005012 <I2C_MasterReceive_RXNE+0x176>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d002      	beq.n	8004f1e <I2C_MasterReceive_RXNE+0x82>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d179      	bne.n	8005012 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 fb64 	bl	80065ec <I2C_WaitOnSTOPRequestThroughIT>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d14c      	bne.n	8004fc4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f38:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f48:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b40      	cmp	r3, #64	@ 0x40
 8004f82:	d10a      	bne.n	8004f9a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff fdba 	bl	8004b0c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f98:	e044      	b.n	8005024 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d002      	beq.n	8004fae <I2C_MasterReceive_RXNE+0x112>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d103      	bne.n	8004fb6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fb4:	e002      	b.n	8004fbc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2212      	movs	r2, #18
 8004fba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff fd65 	bl	8004a8c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fc2:	e02f      	b.n	8005024 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004fd2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fd88 	bl	8004b20 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005010:	e008      	b.n	8005024 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005020:	605a      	str	r2, [r3, #4]
}
 8005022:	e7ff      	b.n	8005024 <I2C_MasterReceive_RXNE+0x188>
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b04      	cmp	r3, #4
 8005042:	d11b      	bne.n	800507c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005052:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800507a:	e0c4      	b.n	8005206 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b03      	cmp	r3, #3
 8005084:	d129      	bne.n	80050da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005094:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d00a      	beq.n	80050b2 <I2C_MasterReceive_BTF+0x86>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d007      	beq.n	80050b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80050d8:	e095      	b.n	8005206 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d17d      	bne.n	80051e0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d002      	beq.n	80050f0 <I2C_MasterReceive_BTF+0xc4>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d108      	bne.n	8005102 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e016      	b.n	8005130 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d002      	beq.n	800510e <I2C_MasterReceive_BTF+0xe2>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d108      	bne.n	8005120 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e007      	b.n	8005130 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800512e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800518a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b40      	cmp	r3, #64	@ 0x40
 800519e:	d10a      	bne.n	80051b6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fcac 	bl	8004b0c <HAL_I2C_MemRxCpltCallback>
}
 80051b4:	e027      	b.n	8005206 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d002      	beq.n	80051ca <I2C_MasterReceive_BTF+0x19e>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d103      	bne.n	80051d2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80051d0:	e002      	b.n	80051d8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2212      	movs	r2, #18
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff fc57 	bl	8004a8c <HAL_I2C_MasterRxCpltCallback>
}
 80051de:	e012      	b.n	8005206 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005206:	bf00      	nop
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b40      	cmp	r3, #64	@ 0x40
 8005220:	d117      	bne.n	8005252 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800523a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800523c:	e067      	b.n	800530e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	b2da      	uxtb	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]
}
 8005250:	e05d      	b.n	800530e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800525a:	d133      	bne.n	80052c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b21      	cmp	r3, #33	@ 0x21
 8005266:	d109      	bne.n	800527c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526c:	b2db      	uxtb	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005278:	611a      	str	r2, [r3, #16]
 800527a:	e008      	b.n	800528e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	b2da      	uxtb	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <I2C_Master_SB+0x92>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d108      	bne.n	80052b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d032      	beq.n	800530e <I2C_Master_SB+0x100>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d02d      	beq.n	800530e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052c0:	605a      	str	r2, [r3, #4]
}
 80052c2:	e024      	b.n	800530e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10e      	bne.n	80052ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	11db      	asrs	r3, r3, #7
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f003 0306 	and.w	r3, r3, #6
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f063 030f 	orn	r3, r3, #15
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	611a      	str	r2, [r3, #16]
}
 80052e8:	e011      	b.n	800530e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d10d      	bne.n	800530e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	11db      	asrs	r3, r3, #7
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 0306 	and.w	r3, r3, #6
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f063 030e 	orn	r3, r3, #14
 8005306:	b2da      	uxtb	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	611a      	str	r2, [r3, #16]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	b2da      	uxtb	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <I2C_Master_ADD10+0x26>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d108      	bne.n	8005352 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00c      	beq.n	8005362 <I2C_Master_ADD10+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005360:	605a      	str	r2, [r3, #4]
  }
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800536e:	b480      	push	{r7}
 8005370:	b091      	sub	sp, #68	@ 0x44
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800537c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b22      	cmp	r3, #34	@ 0x22
 8005396:	f040 8169 	bne.w	800566c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <I2C_Master_ADDR+0x54>
 80053a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	d10b      	bne.n	80053c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053aa:	2300      	movs	r3, #0
 80053ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	e160      	b.n	8005684 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d11d      	bne.n	8005406 <I2C_Master_ADDR+0x98>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80053d2:	d118      	bne.n	8005406 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d4:	2300      	movs	r3, #0
 80053d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	651a      	str	r2, [r3, #80]	@ 0x50
 8005404:	e13e      	b.n	8005684 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d113      	bne.n	8005438 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005410:	2300      	movs	r3, #0
 8005412:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e115      	b.n	8005664 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	f040 808a 	bne.w	8005558 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005446:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800544a:	d137      	bne.n	80054bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800545a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800546a:	d113      	bne.n	8005494 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	e0e7      	b.n	8005664 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005494:	2300      	movs	r3, #0
 8005496:	623b      	str	r3, [r7, #32]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	623b      	str	r3, [r7, #32]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	623b      	str	r3, [r7, #32]
 80054a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e0d3      	b.n	8005664 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d02e      	beq.n	8005520 <I2C_Master_ADDR+0x1b2>
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d02b      	beq.n	8005520 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ca:	2b12      	cmp	r3, #18
 80054cc:	d102      	bne.n	80054d4 <I2C_Master_ADDR+0x166>
 80054ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d125      	bne.n	8005520 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d00e      	beq.n	80054f8 <I2C_Master_ADDR+0x18a>
 80054da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d00b      	beq.n	80054f8 <I2C_Master_ADDR+0x18a>
 80054e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d008      	beq.n	80054f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e007      	b.n	8005508 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005506:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	e0a1      	b.n	8005664 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800552e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e085      	b.n	8005664 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d14d      	bne.n	80055fe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	2b04      	cmp	r3, #4
 8005566:	d016      	beq.n	8005596 <I2C_Master_ADDR+0x228>
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	2b02      	cmp	r3, #2
 800556c:	d013      	beq.n	8005596 <I2C_Master_ADDR+0x228>
 800556e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005570:	2b10      	cmp	r3, #16
 8005572:	d010      	beq.n	8005596 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005582:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e007      	b.n	80055a6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055a4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b4:	d117      	bne.n	80055e6 <I2C_Master_ADDR+0x278>
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055bc:	d00b      	beq.n	80055d6 <I2C_Master_ADDR+0x268>
 80055be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d008      	beq.n	80055d6 <I2C_Master_ADDR+0x268>
 80055c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d005      	beq.n	80055d6 <I2C_Master_ADDR+0x268>
 80055ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d002      	beq.n	80055d6 <I2C_Master_ADDR+0x268>
 80055d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d107      	bne.n	80055e6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	e032      	b.n	8005664 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800560c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800561c:	d117      	bne.n	800564e <I2C_Master_ADDR+0x2e0>
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005624:	d00b      	beq.n	800563e <I2C_Master_ADDR+0x2d0>
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	2b01      	cmp	r3, #1
 800562a:	d008      	beq.n	800563e <I2C_Master_ADDR+0x2d0>
 800562c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562e:	2b08      	cmp	r3, #8
 8005630:	d005      	beq.n	800563e <I2C_Master_ADDR+0x2d0>
 8005632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005634:	2b10      	cmp	r3, #16
 8005636:	d002      	beq.n	800563e <I2C_Master_ADDR+0x2d0>
 8005638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563a:	2b20      	cmp	r3, #32
 800563c:	d107      	bne.n	800564e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800564c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800566a:	e00b      	b.n	8005684 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
}
 8005682:	e7ff      	b.n	8005684 <I2C_Master_ADDR+0x316>
 8005684:	bf00      	nop
 8005686:	3744      	adds	r7, #68	@ 0x44
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800569e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d02b      	beq.n	8005702 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	781a      	ldrb	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d114      	bne.n	8005702 <I2C_SlaveTransmit_TXE+0x72>
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b29      	cmp	r3, #41	@ 0x29
 80056dc:	d111      	bne.n	8005702 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2221      	movs	r2, #33	@ 0x21
 80056f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2228      	movs	r2, #40	@ 0x28
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff f9cf 	bl	8004aa0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d011      	beq.n	8005740 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d02c      	beq.n	80057c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d114      	bne.n	80057c0 <I2C_SlaveReceive_RXNE+0x74>
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b2a      	cmp	r3, #42	@ 0x2a
 800579a:	d111      	bne.n	80057c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2222      	movs	r2, #34	@ 0x22
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2228      	movs	r2, #40	@ 0x28
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff f97a 	bl	8004ab4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d012      	beq.n	8005800 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005826:	2b28      	cmp	r3, #40	@ 0x28
 8005828:	d127      	bne.n	800587a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005838:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	089b      	lsrs	r3, r3, #2
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005846:	2301      	movs	r3, #1
 8005848:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	09db      	lsrs	r3, r3, #7
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	81bb      	strh	r3, [r7, #12]
 800585c:	e002      	b.n	8005864 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800586c:	89ba      	ldrh	r2, [r7, #12]
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff f928 	bl	8004ac8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005878:	e00e      	b.n	8005898 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058fc:	d172      	bne.n	80059e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b22      	cmp	r3, #34	@ 0x22
 8005902:	d002      	beq.n	800590a <I2C_Slave_STOPF+0x6a>
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b2a      	cmp	r3, #42	@ 0x2a
 8005908:	d135      	bne.n	8005976 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b29a      	uxth	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005926:	f043 0204 	orr.w	r2, r3, #4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800593c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005942:	4618      	mov	r0, r3
 8005944:	f7fd fe44 	bl	80035d0 <HAL_DMA_GetState>
 8005948:	4603      	mov	r3, r0
 800594a:	2b01      	cmp	r3, #1
 800594c:	d049      	beq.n	80059e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005952:	4a69      	ldr	r2, [pc, #420]	@ (8005af8 <I2C_Slave_STOPF+0x258>)
 8005954:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd fc8c 	bl	8003278 <HAL_DMA_Abort_IT>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d03d      	beq.n	80059e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005970:	4610      	mov	r0, r2
 8005972:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005974:	e035      	b.n	80059e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	b29a      	uxth	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	f043 0204 	orr.w	r2, r3, #4
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fd fe0e 	bl	80035d0 <HAL_DMA_GetState>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d014      	beq.n	80059e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059be:	4a4e      	ldr	r2, [pc, #312]	@ (8005af8 <I2C_Slave_STOPF+0x258>)
 80059c0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fd fc56 	bl	8003278 <HAL_DMA_Abort_IT>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d008      	beq.n	80059e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	e000      	b.n	80059e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d03e      	beq.n	8005a6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d112      	bne.n	8005a22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	d112      	bne.n	8005a56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691a      	ldr	r2, [r3, #16]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	f043 0204 	orr.w	r2, r3, #4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f8b7 	bl	8005be8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a7a:	e039      	b.n	8005af0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a80:	d109      	bne.n	8005a96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2228      	movs	r2, #40	@ 0x28
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff f80f 	bl	8004ab4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b28      	cmp	r3, #40	@ 0x28
 8005aa0:	d111      	bne.n	8005ac6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a15      	ldr	r2, [pc, #84]	@ (8005afc <I2C_Slave_STOPF+0x25c>)
 8005aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff f810 	bl	8004ae4 <HAL_I2C_ListenCpltCallback>
}
 8005ac4:	e014      	b.n	8005af0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aca:	2b22      	cmp	r3, #34	@ 0x22
 8005acc:	d002      	beq.n	8005ad4 <I2C_Slave_STOPF+0x234>
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	2b22      	cmp	r3, #34	@ 0x22
 8005ad2:	d10d      	bne.n	8005af0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fe ffe2 	bl	8004ab4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	08006149 	.word	0x08006149
 8005afc:	ffff0000 	.word	0xffff0000

08005b00 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b14:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d002      	beq.n	8005b22 <I2C_Slave_AF+0x22>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d129      	bne.n	8005b76 <I2C_Slave_AF+0x76>
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b28      	cmp	r3, #40	@ 0x28
 8005b26:	d126      	bne.n	8005b76 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8005be4 <I2C_Slave_AF+0xe4>)
 8005b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b3c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b46:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b56:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fe ffb8 	bl	8004ae4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b74:	e031      	b.n	8005bda <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b21      	cmp	r3, #33	@ 0x21
 8005b7a:	d129      	bne.n	8005bd0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a19      	ldr	r2, [pc, #100]	@ (8005be4 <I2C_Slave_AF+0xe4>)
 8005b80:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2221      	movs	r2, #33	@ 0x21
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ba6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bb0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bc0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fe f8d0 	bl	8003d68 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7fe ff69 	bl	8004aa0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005bce:	e004      	b.n	8005bda <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bd8:	615a      	str	r2, [r3, #20]
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	ffff0000 	.word	0xffff0000

08005be8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d002      	beq.n	8005c0c <I2C_ITError+0x24>
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	2b40      	cmp	r3, #64	@ 0x40
 8005c0a:	d10a      	bne.n	8005c22 <I2C_ITError+0x3a>
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b22      	cmp	r3, #34	@ 0x22
 8005c10:	d107      	bne.n	8005c22 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c20:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c28:	2b28      	cmp	r3, #40	@ 0x28
 8005c2a:	d107      	bne.n	8005c3c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2228      	movs	r2, #40	@ 0x28
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005c3a:	e015      	b.n	8005c68 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c4a:	d00a      	beq.n	8005c62 <I2C_ITError+0x7a>
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b60      	cmp	r3, #96	@ 0x60
 8005c50:	d007      	beq.n	8005c62 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c76:	d162      	bne.n	8005d3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c86:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d020      	beq.n	8005cd8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9a:	4a6a      	ldr	r2, [pc, #424]	@ (8005e44 <I2C_ITError+0x25c>)
 8005c9c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fd fae8 	bl	8003278 <HAL_DMA_Abort_IT>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8089 	beq.w	8005dc2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	4798      	blx	r3
 8005cd6:	e074      	b.n	8005dc2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	4a59      	ldr	r2, [pc, #356]	@ (8005e44 <I2C_ITError+0x25c>)
 8005cde:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fd fac7 	bl	8003278 <HAL_DMA_Abort_IT>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d068      	beq.n	8005dc2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d10b      	bne.n	8005d16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4798      	blx	r3
 8005d3c:	e041      	b.n	8005dc2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b60      	cmp	r3, #96	@ 0x60
 8005d48:	d125      	bne.n	8005d96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d10b      	bne.n	8005d7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0201 	bic.w	r2, r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fe fed0 	bl	8004b34 <HAL_I2C_AbortCpltCallback>
 8005d94:	e015      	b.n	8005dc2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da0:	2b40      	cmp	r3, #64	@ 0x40
 8005da2:	d10b      	bne.n	8005dbc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7fe feaf 	bl	8004b20 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10e      	bne.n	8005df0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d109      	bne.n	8005df0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005dfe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e06:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d113      	bne.n	8005e3c <I2C_ITError+0x254>
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b28      	cmp	r3, #40	@ 0x28
 8005e18:	d110      	bne.n	8005e3c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e48 <I2C_ITError+0x260>)
 8005e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fe fe54 	bl	8004ae4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	08006149 	.word	0x08006149
 8005e48:	ffff0000 	.word	0xffff0000

08005e4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	4608      	mov	r0, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	817b      	strh	r3, [r7, #10]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	813b      	strh	r3, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 fa08 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e9c:	d103      	bne.n	8005ea6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e05f      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005eb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	492d      	ldr	r1, [pc, #180]	@ (8005f74 <I2C_RequestMemoryWrite+0x128>)
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fa63 	bl	800638c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e04c      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee8:	6a39      	ldr	r1, [r7, #32]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 faee 	bl	80064cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00d      	beq.n	8005f12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d107      	bne.n	8005f0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e02b      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d105      	bne.n	8005f24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	611a      	str	r2, [r3, #16]
 8005f22:	e021      	b.n	8005f68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f24:	893b      	ldrh	r3, [r7, #8]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f34:	6a39      	ldr	r1, [r7, #32]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fac8 	bl	80064cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d107      	bne.n	8005f5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e005      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f5e:	893b      	ldrh	r3, [r7, #8]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	00010002 	.word	0x00010002

08005f78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	817b      	strh	r3, [r7, #10]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	813b      	strh	r3, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f96a 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd8:	d103      	bne.n	8005fe2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e0aa      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fe6:	897b      	ldrh	r3, [r7, #10]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ff4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	4952      	ldr	r1, [pc, #328]	@ (8006144 <I2C_RequestMemoryRead+0x1cc>)
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f9c5 	bl	800638c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e097      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006024:	6a39      	ldr	r1, [r7, #32]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fa50 	bl	80064cc <I2C_WaitOnTXEFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00d      	beq.n	800604e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	2b04      	cmp	r3, #4
 8006038:	d107      	bne.n	800604a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006048:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e076      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d105      	bne.n	8006060 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006054:	893b      	ldrh	r3, [r7, #8]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	611a      	str	r2, [r3, #16]
 800605e:	e021      	b.n	80060a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006060:	893b      	ldrh	r3, [r7, #8]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	b29b      	uxth	r3, r3
 8006066:	b2da      	uxtb	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800606e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006070:	6a39      	ldr	r1, [r7, #32]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fa2a 	bl	80064cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	2b04      	cmp	r3, #4
 8006084:	d107      	bne.n	8006096 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006094:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e050      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800609a:	893b      	ldrh	r3, [r7, #8]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a6:	6a39      	ldr	r1, [r7, #32]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fa0f 	bl	80064cc <I2C_WaitOnTXEFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00d      	beq.n	80060d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d107      	bne.n	80060cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e035      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f8d3 	bl	8006298 <I2C_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00d      	beq.n	8006114 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006106:	d103      	bne.n	8006110 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800610e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e013      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006114:	897b      	ldrh	r3, [r7, #10]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	6a3a      	ldr	r2, [r7, #32]
 8006128:	4906      	ldr	r1, [pc, #24]	@ (8006144 <I2C_RequestMemoryRead+0x1cc>)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f92e 	bl	800638c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	00010002 	.word	0x00010002

08006148 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006158:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006160:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006162:	4b4b      	ldr	r3, [pc, #300]	@ (8006290 <I2C_DMAAbort+0x148>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	08db      	lsrs	r3, r3, #3
 8006168:	4a4a      	ldr	r2, [pc, #296]	@ (8006294 <I2C_DMAAbort+0x14c>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	0a1a      	lsrs	r2, r3, #8
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	00da      	lsls	r2, r3, #3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f043 0220 	orr.w	r2, r3, #32
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800618e:	e00a      	b.n	80061a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3b01      	subs	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a4:	d0ea      	beq.n	800617c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b2:	2200      	movs	r2, #0
 80061b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c2:	2200      	movs	r2, #0
 80061c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e8:	2200      	movs	r2, #0
 80061ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f8:	2200      	movs	r2, #0
 80061fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b60      	cmp	r3, #96	@ 0x60
 8006216:	d10e      	bne.n	8006236 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2200      	movs	r2, #0
 800622c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800622e:	6978      	ldr	r0, [r7, #20]
 8006230:	f7fe fc80 	bl	8004b34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006234:	e027      	b.n	8006286 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006236:	7cfb      	ldrb	r3, [r7, #19]
 8006238:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800623c:	2b28      	cmp	r3, #40	@ 0x28
 800623e:	d117      	bne.n	8006270 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800625e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2200      	movs	r2, #0
 8006264:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2228      	movs	r2, #40	@ 0x28
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800626e:	e007      	b.n	8006280 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006280:	6978      	ldr	r0, [r7, #20]
 8006282:	f7fe fc4d 	bl	8004b20 <HAL_I2C_ErrorCallback>
}
 8006286:	bf00      	nop
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000004 	.word	0x20000004
 8006294:	14f8b589 	.word	0x14f8b589

08006298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062a8:	e048      	b.n	800633c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b0:	d044      	beq.n	800633c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b2:	f7fc fd81 	bl	8002db8 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d302      	bcc.n	80062c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d139      	bne.n	800633c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d10d      	bne.n	80062ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	43da      	mvns	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4013      	ands	r3, r2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bf0c      	ite	eq
 80062e4:	2301      	moveq	r3, #1
 80062e6:	2300      	movne	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	e00c      	b.n	8006308 <I2C_WaitOnFlagUntilTimeout+0x70>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	43da      	mvns	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	4013      	ands	r3, r2
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	bf0c      	ite	eq
 8006300:	2301      	moveq	r3, #1
 8006302:	2300      	movne	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	429a      	cmp	r2, r3
 800630c:	d116      	bne.n	800633c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e023      	b.n	8006384 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	0c1b      	lsrs	r3, r3, #16
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b01      	cmp	r3, #1
 8006344:	d10d      	bne.n	8006362 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	43da      	mvns	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4013      	ands	r3, r2
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	bf0c      	ite	eq
 8006358:	2301      	moveq	r3, #1
 800635a:	2300      	movne	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	e00c      	b.n	800637c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	43da      	mvns	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4013      	ands	r3, r2
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	bf0c      	ite	eq
 8006374:	2301      	moveq	r3, #1
 8006376:	2300      	movne	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	429a      	cmp	r2, r3
 8006380:	d093      	beq.n	80062aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800639a:	e071      	b.n	8006480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063aa:	d123      	bne.n	80063f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	f043 0204 	orr.w	r2, r3, #4
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e067      	b.n	80064c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d041      	beq.n	8006480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fc:	f7fc fcdc 	bl	8002db8 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d136      	bne.n	8006480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	0c1b      	lsrs	r3, r3, #16
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d10c      	bne.n	8006436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	43da      	mvns	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4013      	ands	r3, r2
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	bf14      	ite	ne
 800642e:	2301      	movne	r3, #1
 8006430:	2300      	moveq	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	e00b      	b.n	800644e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	43da      	mvns	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	4013      	ands	r3, r2
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	bf14      	ite	ne
 8006448:	2301      	movne	r3, #1
 800644a:	2300      	moveq	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d016      	beq.n	8006480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e021      	b.n	80064c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b01      	cmp	r3, #1
 8006488:	d10c      	bne.n	80064a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	43da      	mvns	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf14      	ite	ne
 800649c:	2301      	movne	r3, #1
 800649e:	2300      	moveq	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	e00b      	b.n	80064bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	43da      	mvns	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4013      	ands	r3, r2
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	bf14      	ite	ne
 80064b6:	2301      	movne	r3, #1
 80064b8:	2300      	moveq	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f47f af6d 	bne.w	800639c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064d8:	e034      	b.n	8006544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f915 	bl	800670a <I2C_IsAcknowledgeFailed>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e034      	b.n	8006554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d028      	beq.n	8006544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f2:	f7fc fc61 	bl	8002db8 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11d      	bne.n	8006544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006512:	2b80      	cmp	r3, #128	@ 0x80
 8006514:	d016      	beq.n	8006544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006530:	f043 0220 	orr.w	r2, r3, #32
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e007      	b.n	8006554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654e:	2b80      	cmp	r3, #128	@ 0x80
 8006550:	d1c3      	bne.n	80064da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006568:	e034      	b.n	80065d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f8cd 	bl	800670a <I2C_IsAcknowledgeFailed>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e034      	b.n	80065e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d028      	beq.n	80065d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006582:	f7fc fc19 	bl	8002db8 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	d302      	bcc.n	8006598 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d11d      	bne.n	80065d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d016      	beq.n	80065d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c0:	f043 0220 	orr.w	r2, r3, #32
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e007      	b.n	80065e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d1c3      	bne.n	800656a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80065f8:	4b13      	ldr	r3, [pc, #76]	@ (8006648 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	4a13      	ldr	r2, [pc, #76]	@ (800664c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006600:	fba2 2303 	umull	r2, r3, r2, r3
 8006604:	0a1a      	lsrs	r2, r3, #8
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b01      	subs	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d107      	bne.n	800662a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661e:	f043 0220 	orr.w	r2, r3, #32
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e008      	b.n	800663c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006638:	d0e9      	beq.n	800660e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	20000004 	.word	0x20000004
 800664c:	14f8b589 	.word	0x14f8b589

08006650 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800665c:	e049      	b.n	80066f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b10      	cmp	r3, #16
 800666a:	d119      	bne.n	80066a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0210 	mvn.w	r2, #16
 8006674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e030      	b.n	8006702 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a0:	f7fc fb8a 	bl	8002db8 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d11d      	bne.n	80066f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c0:	2b40      	cmp	r3, #64	@ 0x40
 80066c2:	d016      	beq.n	80066f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066de:	f043 0220 	orr.w	r2, r3, #32
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e007      	b.n	8006702 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b40      	cmp	r3, #64	@ 0x40
 80066fe:	d1ae      	bne.n	800665e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006720:	d11b      	bne.n	800675a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800672a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006746:	f043 0204 	orr.w	r2, r3, #4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006778:	d103      	bne.n	8006782 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006780:	e007      	b.n	8006792 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006786:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800678a:	d102      	bne.n	8006792 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2208      	movs	r2, #8
 8006790:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d129      	bne.n	8006808 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2224      	movs	r2, #36	@ 0x24
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0210 	bic.w	r2, r2, #16
 80067da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	e000      	b.n	800680a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006808:	2302      	movs	r3, #2
  }
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b20      	cmp	r3, #32
 800682e:	d12a      	bne.n	8006886 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2224      	movs	r2, #36	@ 0x24
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0201 	bic.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	f023 030f 	bic.w	r3, r3, #15
 8006856:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	b29a      	uxth	r2, r3
 800685c:	89fb      	ldrh	r3, [r7, #14]
 800685e:	4313      	orrs	r3, r2
 8006860:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	89fa      	ldrh	r2, [r7, #14]
 8006868:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0201 	orr.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	e000      	b.n	8006888 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006886:	2302      	movs	r3, #2
  }
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0cc      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068a8:	4b68      	ldr	r3, [pc, #416]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d90c      	bls.n	80068d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b65      	ldr	r3, [pc, #404]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068be:	4b63      	ldr	r3, [pc, #396]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d001      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e0b8      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d020      	beq.n	800691e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068e8:	4b59      	ldr	r3, [pc, #356]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	4a58      	ldr	r2, [pc, #352]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80068f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006900:	4b53      	ldr	r3, [pc, #332]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	4a52      	ldr	r2, [pc, #328]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006906:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800690a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800690c:	4b50      	ldr	r3, [pc, #320]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	494d      	ldr	r1, [pc, #308]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	4313      	orrs	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d044      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d107      	bne.n	8006942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006932:	4b47      	ldr	r3, [pc, #284]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d119      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e07f      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d003      	beq.n	8006952 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800694e:	2b03      	cmp	r3, #3
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006952:	4b3f      	ldr	r3, [pc, #252]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e06f      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006962:	4b3b      	ldr	r3, [pc, #236]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e067      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006972:	4b37      	ldr	r3, [pc, #220]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f023 0203 	bic.w	r2, r3, #3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4934      	ldr	r1, [pc, #208]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006980:	4313      	orrs	r3, r2
 8006982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006984:	f7fc fa18 	bl	8002db8 <HAL_GetTick>
 8006988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698a:	e00a      	b.n	80069a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698c:	f7fc fa14 	bl	8002db8 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e04f      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 020c 	and.w	r2, r3, #12
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d1eb      	bne.n	800698c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069b4:	4b25      	ldr	r3, [pc, #148]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d20c      	bcs.n	80069dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b22      	ldr	r3, [pc, #136]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ca:	4b20      	ldr	r3, [pc, #128]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d001      	beq.n	80069dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e032      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069e8:	4b19      	ldr	r3, [pc, #100]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4916      	ldr	r1, [pc, #88]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a06:	4b12      	ldr	r3, [pc, #72]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	490e      	ldr	r1, [pc, #56]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a1a:	f000 f855 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	4b0b      	ldr	r3, [pc, #44]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	091b      	lsrs	r3, r3, #4
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	490a      	ldr	r1, [pc, #40]	@ (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 8006a2c:	5ccb      	ldrb	r3, [r1, r3]
 8006a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a32:	4a09      	ldr	r2, [pc, #36]	@ (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a36:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <HAL_RCC_ClockConfig+0x1c8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fc f978 	bl	8002d30 <HAL_InitTick>

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40023c00 	.word	0x40023c00
 8006a50:	40023800 	.word	0x40023800
 8006a54:	0800dc18 	.word	0x0800dc18
 8006a58:	20000004 	.word	0x20000004
 8006a5c:	20000008 	.word	0x20000008

08006a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a64:	4b03      	ldr	r3, [pc, #12]	@ (8006a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a66:	681b      	ldr	r3, [r3, #0]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000004 	.word	0x20000004

08006a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a7c:	f7ff fff0 	bl	8006a60 <HAL_RCC_GetHCLKFreq>
 8006a80:	4602      	mov	r2, r0
 8006a82:	4b05      	ldr	r3, [pc, #20]	@ (8006a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	0a9b      	lsrs	r3, r3, #10
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	4903      	ldr	r1, [pc, #12]	@ (8006a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a8e:	5ccb      	ldrb	r3, [r1, r3]
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	0800dc28 	.word	0x0800dc28

08006aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006aa4:	f7ff ffdc 	bl	8006a60 <HAL_RCC_GetHCLKFreq>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	0b5b      	lsrs	r3, r3, #13
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	4903      	ldr	r1, [pc, #12]	@ (8006ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ab6:	5ccb      	ldrb	r3, [r1, r3]
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	0800dc28 	.word	0x0800dc28

08006ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006acc:	b0ae      	sub	sp, #184	@ 0xb8
 8006ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aee:	4bcb      	ldr	r3, [pc, #812]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b0c      	cmp	r3, #12
 8006af8:	f200 8206 	bhi.w	8006f08 <HAL_RCC_GetSysClockFreq+0x440>
 8006afc:	a201      	add	r2, pc, #4	@ (adr r2, 8006b04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b39 	.word	0x08006b39
 8006b08:	08006f09 	.word	0x08006f09
 8006b0c:	08006f09 	.word	0x08006f09
 8006b10:	08006f09 	.word	0x08006f09
 8006b14:	08006b41 	.word	0x08006b41
 8006b18:	08006f09 	.word	0x08006f09
 8006b1c:	08006f09 	.word	0x08006f09
 8006b20:	08006f09 	.word	0x08006f09
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006f09 	.word	0x08006f09
 8006b2c:	08006f09 	.word	0x08006f09
 8006b30:	08006f09 	.word	0x08006f09
 8006b34:	08006d39 	.word	0x08006d39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b38:	4bb9      	ldr	r3, [pc, #740]	@ (8006e20 <HAL_RCC_GetSysClockFreq+0x358>)
 8006b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b3e:	e1e7      	b.n	8006f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b40:	4bb8      	ldr	r3, [pc, #736]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b46:	e1e3      	b.n	8006f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b48:	4bb4      	ldr	r3, [pc, #720]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b54:	4bb1      	ldr	r3, [pc, #708]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d071      	beq.n	8006c44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b60:	4bae      	ldr	r3, [pc, #696]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	099b      	lsrs	r3, r3, #6
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b86:	4622      	mov	r2, r4
 8006b88:	462b      	mov	r3, r5
 8006b8a:	f04f 0000 	mov.w	r0, #0
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	0159      	lsls	r1, r3, #5
 8006b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b98:	0150      	lsls	r0, r2, #5
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	1a51      	subs	r1, r2, r1
 8006ba2:	6439      	str	r1, [r7, #64]	@ 0x40
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8006baa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006bb8:	4649      	mov	r1, r9
 8006bba:	018b      	lsls	r3, r1, #6
 8006bbc:	4641      	mov	r1, r8
 8006bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	018a      	lsls	r2, r1, #6
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	1a51      	subs	r1, r2, r1
 8006bca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bcc:	4649      	mov	r1, r9
 8006bce:	eb63 0301 	sbc.w	r3, r3, r1
 8006bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006be0:	4649      	mov	r1, r9
 8006be2:	00cb      	lsls	r3, r1, #3
 8006be4:	4641      	mov	r1, r8
 8006be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bea:	4641      	mov	r1, r8
 8006bec:	00ca      	lsls	r2, r1, #3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bfa:	462b      	mov	r3, r5
 8006bfc:	460a      	mov	r2, r1
 8006bfe:	eb42 0303 	adc.w	r3, r2, r3
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c10:	4629      	mov	r1, r5
 8006c12:	024b      	lsls	r3, r1, #9
 8006c14:	4621      	mov	r1, r4
 8006c16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	024a      	lsls	r2, r1, #9
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006c34:	f7fa f848 	bl	8000cc8 <__aeabi_uldivmod>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c42:	e067      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c44:	4b75      	ldr	r3, [pc, #468]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	099b      	lsrs	r3, r3, #6
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c5e:	2300      	movs	r3, #0
 8006c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006c66:	4622      	mov	r2, r4
 8006c68:	462b      	mov	r3, r5
 8006c6a:	f04f 0000 	mov.w	r0, #0
 8006c6e:	f04f 0100 	mov.w	r1, #0
 8006c72:	0159      	lsls	r1, r3, #5
 8006c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c78:	0150      	lsls	r0, r2, #5
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4621      	mov	r1, r4
 8006c80:	1a51      	subs	r1, r2, r1
 8006c82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c84:	4629      	mov	r1, r5
 8006c86:	eb63 0301 	sbc.w	r3, r3, r1
 8006c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006c98:	4649      	mov	r1, r9
 8006c9a:	018b      	lsls	r3, r1, #6
 8006c9c:	4641      	mov	r1, r8
 8006c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	018a      	lsls	r2, r1, #6
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	ebb2 0a01 	subs.w	sl, r2, r1
 8006cac:	4649      	mov	r1, r9
 8006cae:	eb63 0b01 	sbc.w	fp, r3, r1
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	f04f 0300 	mov.w	r3, #0
 8006cba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cc6:	4692      	mov	sl, r2
 8006cc8:	469b      	mov	fp, r3
 8006cca:	4623      	mov	r3, r4
 8006ccc:	eb1a 0303 	adds.w	r3, sl, r3
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	462b      	mov	r3, r5
 8006cd4:	eb4b 0303 	adc.w	r3, fp, r3
 8006cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	028b      	lsls	r3, r1, #10
 8006cea:	4621      	mov	r1, r4
 8006cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	028a      	lsls	r2, r1, #10
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d00:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006d06:	f7f9 ffdf 	bl	8000cc8 <__aeabi_uldivmod>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4613      	mov	r3, r2
 8006d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d14:	4b41      	ldr	r3, [pc, #260]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	3301      	adds	r3, #1
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006d36:	e0eb      	b.n	8006f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d38:	4b38      	ldr	r3, [pc, #224]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d44:	4b35      	ldr	r3, [pc, #212]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d06b      	beq.n	8006e28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d50:	4b32      	ldr	r3, [pc, #200]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	099b      	lsrs	r3, r3, #6
 8006d56:	2200      	movs	r2, #0
 8006d58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d62:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d64:	2300      	movs	r3, #0
 8006d66:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	462b      	mov	r3, r5
 8006d70:	f04f 0000 	mov.w	r0, #0
 8006d74:	f04f 0100 	mov.w	r1, #0
 8006d78:	0159      	lsls	r1, r3, #5
 8006d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d7e:	0150      	lsls	r0, r2, #5
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4621      	mov	r1, r4
 8006d86:	1a51      	subs	r1, r2, r1
 8006d88:	61b9      	str	r1, [r7, #24]
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	eb63 0301 	sbc.w	r3, r3, r1
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	f04f 0200 	mov.w	r2, #0
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006d9e:	4659      	mov	r1, fp
 8006da0:	018b      	lsls	r3, r1, #6
 8006da2:	4651      	mov	r1, sl
 8006da4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006da8:	4651      	mov	r1, sl
 8006daa:	018a      	lsls	r2, r1, #6
 8006dac:	4651      	mov	r1, sl
 8006dae:	ebb2 0801 	subs.w	r8, r2, r1
 8006db2:	4659      	mov	r1, fp
 8006db4:	eb63 0901 	sbc.w	r9, r3, r1
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dcc:	4690      	mov	r8, r2
 8006dce:	4699      	mov	r9, r3
 8006dd0:	4623      	mov	r3, r4
 8006dd2:	eb18 0303 	adds.w	r3, r8, r3
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	462b      	mov	r3, r5
 8006dda:	eb49 0303 	adc.w	r3, r9, r3
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006dec:	4629      	mov	r1, r5
 8006dee:	024b      	lsls	r3, r1, #9
 8006df0:	4621      	mov	r1, r4
 8006df2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006df6:	4621      	mov	r1, r4
 8006df8:	024a      	lsls	r2, r1, #9
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e02:	2200      	movs	r2, #0
 8006e04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e06:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006e08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e0c:	f7f9 ff5c 	bl	8000cc8 <__aeabi_uldivmod>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4613      	mov	r3, r2
 8006e16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e1a:	e065      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x420>
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	00f42400 	.word	0x00f42400
 8006e24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e28:	4b3d      	ldr	r3, [pc, #244]	@ (8006f20 <HAL_RCC_GetSysClockFreq+0x458>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	099b      	lsrs	r3, r3, #6
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	4611      	mov	r1, r2
 8006e34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e38:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006e42:	4642      	mov	r2, r8
 8006e44:	464b      	mov	r3, r9
 8006e46:	f04f 0000 	mov.w	r0, #0
 8006e4a:	f04f 0100 	mov.w	r1, #0
 8006e4e:	0159      	lsls	r1, r3, #5
 8006e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e54:	0150      	lsls	r0, r2, #5
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4641      	mov	r1, r8
 8006e5c:	1a51      	subs	r1, r2, r1
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	4649      	mov	r1, r9
 8006e62:	eb63 0301 	sbc.w	r3, r3, r1
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006e74:	4659      	mov	r1, fp
 8006e76:	018b      	lsls	r3, r1, #6
 8006e78:	4651      	mov	r1, sl
 8006e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e7e:	4651      	mov	r1, sl
 8006e80:	018a      	lsls	r2, r1, #6
 8006e82:	4651      	mov	r1, sl
 8006e84:	1a54      	subs	r4, r2, r1
 8006e86:	4659      	mov	r1, fp
 8006e88:	eb63 0501 	sbc.w	r5, r3, r1
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	00eb      	lsls	r3, r5, #3
 8006e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e9a:	00e2      	lsls	r2, r4, #3
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	461d      	mov	r5, r3
 8006ea0:	4643      	mov	r3, r8
 8006ea2:	18e3      	adds	r3, r4, r3
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	eb45 0303 	adc.w	r3, r5, r3
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eba:	4629      	mov	r1, r5
 8006ebc:	028b      	lsls	r3, r1, #10
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	028a      	lsls	r2, r1, #10
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ed4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ed6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006eda:	f7f9 fef5 	bl	8000cc8 <__aeabi_uldivmod>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8006f20 <HAL_RCC_GetSysClockFreq+0x458>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	0f1b      	lsrs	r3, r3, #28
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f06:	e003      	b.n	8006f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f08:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	37b8      	adds	r7, #184	@ 0xb8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f1e:	bf00      	nop
 8006f20:	40023800 	.word	0x40023800
 8006f24:	00f42400 	.word	0x00f42400

08006f28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e28d      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 8083 	beq.w	800704e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006f48:	4b94      	ldr	r3, [pc, #592]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 030c 	and.w	r3, r3, #12
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d019      	beq.n	8006f88 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006f54:	4b91      	ldr	r3, [pc, #580]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 030c 	and.w	r3, r3, #12
        || \
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d106      	bne.n	8006f6e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006f60:	4b8e      	ldr	r3, [pc, #568]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f6c:	d00c      	beq.n	8006f88 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f6e:	4b8b      	ldr	r3, [pc, #556]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006f76:	2b0c      	cmp	r3, #12
 8006f78:	d112      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f7a:	4b88      	ldr	r3, [pc, #544]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f86:	d10b      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f88:	4b84      	ldr	r3, [pc, #528]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d05b      	beq.n	800704c <HAL_RCC_OscConfig+0x124>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d157      	bne.n	800704c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e25a      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa8:	d106      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x90>
 8006faa:	4b7c      	ldr	r3, [pc, #496]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a7b      	ldr	r2, [pc, #492]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e01d      	b.n	8006ff4 <HAL_RCC_OscConfig+0xcc>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fc0:	d10c      	bne.n	8006fdc <HAL_RCC_OscConfig+0xb4>
 8006fc2:	4b76      	ldr	r3, [pc, #472]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a75      	ldr	r2, [pc, #468]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	4b73      	ldr	r3, [pc, #460]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a72      	ldr	r2, [pc, #456]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e00b      	b.n	8006ff4 <HAL_RCC_OscConfig+0xcc>
 8006fdc:	4b6f      	ldr	r3, [pc, #444]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a6b      	ldr	r2, [pc, #428]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8006fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d013      	beq.n	8007024 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffc:	f7fb fedc 	bl	8002db8 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007004:	f7fb fed8 	bl	8002db8 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b64      	cmp	r3, #100	@ 0x64
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e21f      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007016:	4b61      	ldr	r3, [pc, #388]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0f0      	beq.n	8007004 <HAL_RCC_OscConfig+0xdc>
 8007022:	e014      	b.n	800704e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007024:	f7fb fec8 	bl	8002db8 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800702c:	f7fb fec4 	bl	8002db8 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b64      	cmp	r3, #100	@ 0x64
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e20b      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800703e:	4b57      	ldr	r3, [pc, #348]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f0      	bne.n	800702c <HAL_RCC_OscConfig+0x104>
 800704a:	e000      	b.n	800704e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800704c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d06f      	beq.n	800713a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800705a:	4b50      	ldr	r3, [pc, #320]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 030c 	and.w	r3, r3, #12
 8007062:	2b00      	cmp	r3, #0
 8007064:	d017      	beq.n	8007096 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007066:	4b4d      	ldr	r3, [pc, #308]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 030c 	and.w	r3, r3, #12
        || \
 800706e:	2b08      	cmp	r3, #8
 8007070:	d105      	bne.n	800707e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007072:	4b4a      	ldr	r3, [pc, #296]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800707e:	4b47      	ldr	r3, [pc, #284]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007086:	2b0c      	cmp	r3, #12
 8007088:	d11c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800708a:	4b44      	ldr	r3, [pc, #272]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d116      	bne.n	80070c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007096:	4b41      	ldr	r3, [pc, #260]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <HAL_RCC_OscConfig+0x186>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d001      	beq.n	80070ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e1d3      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ae:	4b3b      	ldr	r3, [pc, #236]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4937      	ldr	r1, [pc, #220]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070c2:	e03a      	b.n	800713a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d020      	beq.n	800710e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070cc:	4b34      	ldr	r3, [pc, #208]	@ (80071a0 <HAL_RCC_OscConfig+0x278>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d2:	f7fb fe71 	bl	8002db8 <HAL_GetTick>
 80070d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070da:	f7fb fe6d 	bl	8002db8 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e1b4      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ec:	4b2b      	ldr	r3, [pc, #172]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f8:	4b28      	ldr	r3, [pc, #160]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	4925      	ldr	r1, [pc, #148]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8007108:	4313      	orrs	r3, r2
 800710a:	600b      	str	r3, [r1, #0]
 800710c:	e015      	b.n	800713a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800710e:	4b24      	ldr	r3, [pc, #144]	@ (80071a0 <HAL_RCC_OscConfig+0x278>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007114:	f7fb fe50 	bl	8002db8 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800711c:	f7fb fe4c 	bl	8002db8 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e193      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712e:	4b1b      	ldr	r3, [pc, #108]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1f0      	bne.n	800711c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d036      	beq.n	80071b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d016      	beq.n	800717c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800714e:	4b15      	ldr	r3, [pc, #84]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 8007150:	2201      	movs	r2, #1
 8007152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007154:	f7fb fe30 	bl	8002db8 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800715c:	f7fb fe2c 	bl	8002db8 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e173      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800716e:	4b0b      	ldr	r3, [pc, #44]	@ (800719c <HAL_RCC_OscConfig+0x274>)
 8007170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0x234>
 800717a:	e01b      	b.n	80071b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800717c:	4b09      	ldr	r3, [pc, #36]	@ (80071a4 <HAL_RCC_OscConfig+0x27c>)
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007182:	f7fb fe19 	bl	8002db8 <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007188:	e00e      	b.n	80071a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800718a:	f7fb fe15 	bl	8002db8 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d907      	bls.n	80071a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e15c      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
 800719c:	40023800 	.word	0x40023800
 80071a0:	42470000 	.word	0x42470000
 80071a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a8:	4b8a      	ldr	r3, [pc, #552]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80071aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1ea      	bne.n	800718a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8097 	beq.w	80072f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071c6:	4b83      	ldr	r3, [pc, #524]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10f      	bne.n	80071f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]
 80071d6:	4b7f      	ldr	r3, [pc, #508]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071da:	4a7e      	ldr	r2, [pc, #504]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80071dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80071e2:	4b7c      	ldr	r3, [pc, #496]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ee:	2301      	movs	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f2:	4b79      	ldr	r3, [pc, #484]	@ (80073d8 <HAL_RCC_OscConfig+0x4b0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d118      	bne.n	8007230 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071fe:	4b76      	ldr	r3, [pc, #472]	@ (80073d8 <HAL_RCC_OscConfig+0x4b0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a75      	ldr	r2, [pc, #468]	@ (80073d8 <HAL_RCC_OscConfig+0x4b0>)
 8007204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800720a:	f7fb fdd5 	bl	8002db8 <HAL_GetTick>
 800720e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007210:	e008      	b.n	8007224 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007212:	f7fb fdd1 	bl	8002db8 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e118      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007224:	4b6c      	ldr	r3, [pc, #432]	@ (80073d8 <HAL_RCC_OscConfig+0x4b0>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0f0      	beq.n	8007212 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d106      	bne.n	8007246 <HAL_RCC_OscConfig+0x31e>
 8007238:	4b66      	ldr	r3, [pc, #408]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 800723a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800723c:	4a65      	ldr	r2, [pc, #404]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 800723e:	f043 0301 	orr.w	r3, r3, #1
 8007242:	6713      	str	r3, [r2, #112]	@ 0x70
 8007244:	e01c      	b.n	8007280 <HAL_RCC_OscConfig+0x358>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	2b05      	cmp	r3, #5
 800724c:	d10c      	bne.n	8007268 <HAL_RCC_OscConfig+0x340>
 800724e:	4b61      	ldr	r3, [pc, #388]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007252:	4a60      	ldr	r2, [pc, #384]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 8007254:	f043 0304 	orr.w	r3, r3, #4
 8007258:	6713      	str	r3, [r2, #112]	@ 0x70
 800725a:	4b5e      	ldr	r3, [pc, #376]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725e:	4a5d      	ldr	r2, [pc, #372]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	6713      	str	r3, [r2, #112]	@ 0x70
 8007266:	e00b      	b.n	8007280 <HAL_RCC_OscConfig+0x358>
 8007268:	4b5a      	ldr	r3, [pc, #360]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 800726a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726c:	4a59      	ldr	r2, [pc, #356]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 800726e:	f023 0301 	bic.w	r3, r3, #1
 8007272:	6713      	str	r3, [r2, #112]	@ 0x70
 8007274:	4b57      	ldr	r3, [pc, #348]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 8007276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007278:	4a56      	ldr	r2, [pc, #344]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 800727a:	f023 0304 	bic.w	r3, r3, #4
 800727e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d015      	beq.n	80072b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007288:	f7fb fd96 	bl	8002db8 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728e:	e00a      	b.n	80072a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007290:	f7fb fd92 	bl	8002db8 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800729e:	4293      	cmp	r3, r2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e0d7      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a6:	4b4b      	ldr	r3, [pc, #300]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0ee      	beq.n	8007290 <HAL_RCC_OscConfig+0x368>
 80072b2:	e014      	b.n	80072de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b4:	f7fb fd80 	bl	8002db8 <HAL_GetTick>
 80072b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ba:	e00a      	b.n	80072d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072bc:	f7fb fd7c 	bl	8002db8 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e0c1      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072d2:	4b40      	ldr	r3, [pc, #256]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1ee      	bne.n	80072bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d105      	bne.n	80072f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072e4:	4b3b      	ldr	r3, [pc, #236]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	4a3a      	ldr	r2, [pc, #232]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80072ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80ad 	beq.w	8007454 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072fa:	4b36      	ldr	r3, [pc, #216]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 030c 	and.w	r3, r3, #12
 8007302:	2b08      	cmp	r3, #8
 8007304:	d060      	beq.n	80073c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d145      	bne.n	800739a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730e:	4b33      	ldr	r3, [pc, #204]	@ (80073dc <HAL_RCC_OscConfig+0x4b4>)
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007314:	f7fb fd50 	bl	8002db8 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800731c:	f7fb fd4c 	bl	8002db8 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e093      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800732e:	4b29      	ldr	r3, [pc, #164]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f0      	bne.n	800731c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69da      	ldr	r2, [r3, #28]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007348:	019b      	lsls	r3, r3, #6
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	085b      	lsrs	r3, r3, #1
 8007352:	3b01      	subs	r3, #1
 8007354:	041b      	lsls	r3, r3, #16
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	061b      	lsls	r3, r3, #24
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007364:	071b      	lsls	r3, r3, #28
 8007366:	491b      	ldr	r1, [pc, #108]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 8007368:	4313      	orrs	r3, r2
 800736a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800736c:	4b1b      	ldr	r3, [pc, #108]	@ (80073dc <HAL_RCC_OscConfig+0x4b4>)
 800736e:	2201      	movs	r2, #1
 8007370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007372:	f7fb fd21 	bl	8002db8 <HAL_GetTick>
 8007376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800737a:	f7fb fd1d 	bl	8002db8 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e064      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800738c:	4b11      	ldr	r3, [pc, #68]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d0f0      	beq.n	800737a <HAL_RCC_OscConfig+0x452>
 8007398:	e05c      	b.n	8007454 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800739a:	4b10      	ldr	r3, [pc, #64]	@ (80073dc <HAL_RCC_OscConfig+0x4b4>)
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a0:	f7fb fd0a 	bl	8002db8 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a8:	f7fb fd06 	bl	8002db8 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e04d      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ba:	4b06      	ldr	r3, [pc, #24]	@ (80073d4 <HAL_RCC_OscConfig+0x4ac>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0x480>
 80073c6:	e045      	b.n	8007454 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d107      	bne.n	80073e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e040      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
 80073d4:	40023800 	.word	0x40023800
 80073d8:	40007000 	.word	0x40007000
 80073dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007460 <HAL_RCC_OscConfig+0x538>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d030      	beq.n	8007450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d129      	bne.n	8007450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007406:	429a      	cmp	r2, r3
 8007408:	d122      	bne.n	8007450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007410:	4013      	ands	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007418:	4293      	cmp	r3, r2
 800741a:	d119      	bne.n	8007450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	3b01      	subs	r3, #1
 800742a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800742c:	429a      	cmp	r2, r3
 800742e:	d10f      	bne.n	8007450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800743c:	429a      	cmp	r2, r3
 800743e:	d107      	bne.n	8007450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800744c:	429a      	cmp	r2, r3
 800744e:	d001      	beq.n	8007454 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e000      	b.n	8007456 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40023800 	.word	0x40023800

08007464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e041      	b.n	80074fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fb f9f8 	bl	8002880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f000 fa7e 	bl	80079a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b01      	cmp	r3, #1
 8007516:	d001      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e04e      	b.n	80075ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a23      	ldr	r2, [pc, #140]	@ (80075c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d022      	beq.n	8007584 <HAL_TIM_Base_Start_IT+0x80>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007546:	d01d      	beq.n	8007584 <HAL_TIM_Base_Start_IT+0x80>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a1f      	ldr	r2, [pc, #124]	@ (80075cc <HAL_TIM_Base_Start_IT+0xc8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d018      	beq.n	8007584 <HAL_TIM_Base_Start_IT+0x80>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a1e      	ldr	r2, [pc, #120]	@ (80075d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <HAL_TIM_Base_Start_IT+0x80>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1c      	ldr	r2, [pc, #112]	@ (80075d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00e      	beq.n	8007584 <HAL_TIM_Base_Start_IT+0x80>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a1b      	ldr	r2, [pc, #108]	@ (80075d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d009      	beq.n	8007584 <HAL_TIM_Base_Start_IT+0x80>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a19      	ldr	r2, [pc, #100]	@ (80075dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_TIM_Base_Start_IT+0x80>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a18      	ldr	r2, [pc, #96]	@ (80075e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d111      	bne.n	80075a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b06      	cmp	r3, #6
 8007594:	d010      	beq.n	80075b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0201 	orr.w	r2, r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a6:	e007      	b.n	80075b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40010000 	.word	0x40010000
 80075cc:	40000400 	.word	0x40000400
 80075d0:	40000800 	.word	0x40000800
 80075d4:	40000c00 	.word	0x40000c00
 80075d8:	40010400 	.word	0x40010400
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40001800 	.word	0x40001800

080075e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d020      	beq.n	8007648 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01b      	beq.n	8007648 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0202 	mvn.w	r2, #2
 8007618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f999 	bl	8007966 <HAL_TIM_IC_CaptureCallback>
 8007634:	e005      	b.n	8007642 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f98b 	bl	8007952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f99c 	bl	800797a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 0304 	and.w	r3, r3, #4
 800764e:	2b00      	cmp	r3, #0
 8007650:	d020      	beq.n	8007694 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01b      	beq.n	8007694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f06f 0204 	mvn.w	r2, #4
 8007664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2202      	movs	r2, #2
 800766a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f973 	bl	8007966 <HAL_TIM_IC_CaptureCallback>
 8007680:	e005      	b.n	800768e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f965 	bl	8007952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f976 	bl	800797a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d020      	beq.n	80076e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01b      	beq.n	80076e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0208 	mvn.w	r2, #8
 80076b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2204      	movs	r2, #4
 80076b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f94d 	bl	8007966 <HAL_TIM_IC_CaptureCallback>
 80076cc:	e005      	b.n	80076da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f93f 	bl	8007952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f950 	bl	800797a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d020      	beq.n	800772c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f003 0310 	and.w	r3, r3, #16
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01b      	beq.n	800772c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0210 	mvn.w	r2, #16
 80076fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2208      	movs	r2, #8
 8007702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f927 	bl	8007966 <HAL_TIM_IC_CaptureCallback>
 8007718:	e005      	b.n	8007726 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f919 	bl	8007952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f92a 	bl	800797a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00c      	beq.n	8007750 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d007      	beq.n	8007750 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f06f 0201 	mvn.w	r2, #1
 8007748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fa ff28 	bl	80025a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00c      	beq.n	8007774 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800776c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fade 	bl	8007d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00c      	beq.n	8007798 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f8fb 	bl	800798e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00c      	beq.n	80077bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d007      	beq.n	80077bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0220 	mvn.w	r2, #32
 80077b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fab0 	bl	8007d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_TIM_ConfigClockSource+0x1c>
 80077dc:	2302      	movs	r3, #2
 80077de:	e0b4      	b.n	800794a <HAL_TIM_ConfigClockSource+0x186>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007818:	d03e      	beq.n	8007898 <HAL_TIM_ConfigClockSource+0xd4>
 800781a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800781e:	f200 8087 	bhi.w	8007930 <HAL_TIM_ConfigClockSource+0x16c>
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007826:	f000 8086 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x172>
 800782a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800782e:	d87f      	bhi.n	8007930 <HAL_TIM_ConfigClockSource+0x16c>
 8007830:	2b70      	cmp	r3, #112	@ 0x70
 8007832:	d01a      	beq.n	800786a <HAL_TIM_ConfigClockSource+0xa6>
 8007834:	2b70      	cmp	r3, #112	@ 0x70
 8007836:	d87b      	bhi.n	8007930 <HAL_TIM_ConfigClockSource+0x16c>
 8007838:	2b60      	cmp	r3, #96	@ 0x60
 800783a:	d050      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x11a>
 800783c:	2b60      	cmp	r3, #96	@ 0x60
 800783e:	d877      	bhi.n	8007930 <HAL_TIM_ConfigClockSource+0x16c>
 8007840:	2b50      	cmp	r3, #80	@ 0x50
 8007842:	d03c      	beq.n	80078be <HAL_TIM_ConfigClockSource+0xfa>
 8007844:	2b50      	cmp	r3, #80	@ 0x50
 8007846:	d873      	bhi.n	8007930 <HAL_TIM_ConfigClockSource+0x16c>
 8007848:	2b40      	cmp	r3, #64	@ 0x40
 800784a:	d058      	beq.n	80078fe <HAL_TIM_ConfigClockSource+0x13a>
 800784c:	2b40      	cmp	r3, #64	@ 0x40
 800784e:	d86f      	bhi.n	8007930 <HAL_TIM_ConfigClockSource+0x16c>
 8007850:	2b30      	cmp	r3, #48	@ 0x30
 8007852:	d064      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x15a>
 8007854:	2b30      	cmp	r3, #48	@ 0x30
 8007856:	d86b      	bhi.n	8007930 <HAL_TIM_ConfigClockSource+0x16c>
 8007858:	2b20      	cmp	r3, #32
 800785a:	d060      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x15a>
 800785c:	2b20      	cmp	r3, #32
 800785e:	d867      	bhi.n	8007930 <HAL_TIM_ConfigClockSource+0x16c>
 8007860:	2b00      	cmp	r3, #0
 8007862:	d05c      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x15a>
 8007864:	2b10      	cmp	r3, #16
 8007866:	d05a      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x15a>
 8007868:	e062      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800787a:	f000 f9b3 	bl	8007be4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800788c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	609a      	str	r2, [r3, #8]
      break;
 8007896:	e04f      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078a8:	f000 f99c 	bl	8007be4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689a      	ldr	r2, [r3, #8]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078ba:	609a      	str	r2, [r3, #8]
      break;
 80078bc:	e03c      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ca:	461a      	mov	r2, r3
 80078cc:	f000 f910 	bl	8007af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2150      	movs	r1, #80	@ 0x50
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f969 	bl	8007bae <TIM_ITRx_SetConfig>
      break;
 80078dc:	e02c      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078ea:	461a      	mov	r2, r3
 80078ec:	f000 f92f 	bl	8007b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2160      	movs	r1, #96	@ 0x60
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 f959 	bl	8007bae <TIM_ITRx_SetConfig>
      break;
 80078fc:	e01c      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800790a:	461a      	mov	r2, r3
 800790c:	f000 f8f0 	bl	8007af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2140      	movs	r1, #64	@ 0x40
 8007916:	4618      	mov	r0, r3
 8007918:	f000 f949 	bl	8007bae <TIM_ITRx_SetConfig>
      break;
 800791c:	e00c      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4619      	mov	r1, r3
 8007928:	4610      	mov	r0, r2
 800792a:	f000 f940 	bl	8007bae <TIM_ITRx_SetConfig>
      break;
 800792e:	e003      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	73fb      	strb	r3, [r7, #15]
      break;
 8007934:	e000      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
	...

080079a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a43      	ldr	r2, [pc, #268]	@ (8007ac4 <TIM_Base_SetConfig+0x120>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c2:	d00f      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a40      	ldr	r2, [pc, #256]	@ (8007ac8 <TIM_Base_SetConfig+0x124>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a3f      	ldr	r2, [pc, #252]	@ (8007acc <TIM_Base_SetConfig+0x128>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a3e      	ldr	r2, [pc, #248]	@ (8007ad0 <TIM_Base_SetConfig+0x12c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a3d      	ldr	r2, [pc, #244]	@ (8007ad4 <TIM_Base_SetConfig+0x130>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d108      	bne.n	80079f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a32      	ldr	r2, [pc, #200]	@ (8007ac4 <TIM_Base_SetConfig+0x120>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d02b      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a04:	d027      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2f      	ldr	r2, [pc, #188]	@ (8007ac8 <TIM_Base_SetConfig+0x124>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d023      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2e      	ldr	r2, [pc, #184]	@ (8007acc <TIM_Base_SetConfig+0x128>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01f      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a2d      	ldr	r2, [pc, #180]	@ (8007ad0 <TIM_Base_SetConfig+0x12c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d01b      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2c      	ldr	r2, [pc, #176]	@ (8007ad4 <TIM_Base_SetConfig+0x130>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d017      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a2b      	ldr	r2, [pc, #172]	@ (8007ad8 <TIM_Base_SetConfig+0x134>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d013      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a2a      	ldr	r2, [pc, #168]	@ (8007adc <TIM_Base_SetConfig+0x138>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00f      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a29      	ldr	r2, [pc, #164]	@ (8007ae0 <TIM_Base_SetConfig+0x13c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00b      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a28      	ldr	r2, [pc, #160]	@ (8007ae4 <TIM_Base_SetConfig+0x140>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d007      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a27      	ldr	r2, [pc, #156]	@ (8007ae8 <TIM_Base_SetConfig+0x144>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d003      	beq.n	8007a56 <TIM_Base_SetConfig+0xb2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a26      	ldr	r2, [pc, #152]	@ (8007aec <TIM_Base_SetConfig+0x148>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d108      	bne.n	8007a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a0e      	ldr	r2, [pc, #56]	@ (8007ac4 <TIM_Base_SetConfig+0x120>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_Base_SetConfig+0xf2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a10      	ldr	r2, [pc, #64]	@ (8007ad4 <TIM_Base_SetConfig+0x130>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d103      	bne.n	8007a9e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f043 0204 	orr.w	r2, r3, #4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800
 8007ad0:	40000c00 	.word	0x40000c00
 8007ad4:	40010400 	.word	0x40010400
 8007ad8:	40014000 	.word	0x40014000
 8007adc:	40014400 	.word	0x40014400
 8007ae0:	40014800 	.word	0x40014800
 8007ae4:	40001800 	.word	0x40001800
 8007ae8:	40001c00 	.word	0x40001c00
 8007aec:	40002000 	.word	0x40002000

08007af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	f023 0201 	bic.w	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f023 030a 	bic.w	r3, r3, #10
 8007b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	621a      	str	r2, [r3, #32]
}
 8007b42:	bf00      	nop
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b087      	sub	sp, #28
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f023 0210 	bic.w	r2, r3, #16
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	031b      	lsls	r3, r3, #12
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	621a      	str	r2, [r3, #32]
}
 8007ba2:	bf00      	nop
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f043 0307 	orr.w	r3, r3, #7
 8007bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	609a      	str	r2, [r3, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	021a      	lsls	r2, r3, #8
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	609a      	str	r2, [r3, #8]
}
 8007c18:	bf00      	nop
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e05a      	b.n	8007cf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a21      	ldr	r2, [pc, #132]	@ (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d022      	beq.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c88:	d01d      	beq.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d018      	beq.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1b      	ldr	r2, [pc, #108]	@ (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d013      	beq.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a18      	ldr	r2, [pc, #96]	@ (8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d009      	beq.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a17      	ldr	r2, [pc, #92]	@ (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d004      	beq.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a15      	ldr	r2, [pc, #84]	@ (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d10c      	bne.n	8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	40010000 	.word	0x40010000
 8007d04:	40000400 	.word	0x40000400
 8007d08:	40000800 	.word	0x40000800
 8007d0c:	40000c00 	.word	0x40000c00
 8007d10:	40010400 	.word	0x40010400
 8007d14:	40014000 	.word	0x40014000
 8007d18:	40001800 	.word	0x40001800

08007d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e042      	b.n	8007ddc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fa fdb0 	bl	80028d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2224      	movs	r2, #36	@ 0x24
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fd7f 	bl	800888c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	695a      	ldr	r2, [r3, #20]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68da      	ldr	r2, [r3, #12]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08a      	sub	sp, #40	@ 0x28
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	4613      	mov	r3, r2
 8007df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d175      	bne.n	8007ef0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <HAL_UART_Transmit+0x2c>
 8007e0a:	88fb      	ldrh	r3, [r7, #6]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e06e      	b.n	8007ef2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2221      	movs	r2, #33	@ 0x21
 8007e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e22:	f7fa ffc9 	bl	8002db8 <HAL_GetTick>
 8007e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	88fa      	ldrh	r2, [r7, #6]
 8007e2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	88fa      	ldrh	r2, [r7, #6]
 8007e32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e3c:	d108      	bne.n	8007e50 <HAL_UART_Transmit+0x6c>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d104      	bne.n	8007e50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	e003      	b.n	8007e58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e58:	e02e      	b.n	8007eb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2200      	movs	r2, #0
 8007e62:	2180      	movs	r1, #128	@ 0x80
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 fb1d 	bl	80084a4 <UART_WaitOnFlagUntilTimeout>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e03a      	b.n	8007ef2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	3302      	adds	r3, #2
 8007e96:	61bb      	str	r3, [r7, #24]
 8007e98:	e007      	b.n	8007eaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1cb      	bne.n	8007e5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2140      	movs	r1, #64	@ 0x40
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fae9 	bl	80084a4 <UART_WaitOnFlagUntilTimeout>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e006      	b.n	8007ef2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	e000      	b.n	8007ef2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007ef0:	2302      	movs	r3, #2
  }
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3720      	adds	r7, #32
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b0ba      	sub	sp, #232	@ 0xe8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10f      	bne.n	8007f62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d009      	beq.n	8007f62 <HAL_UART_IRQHandler+0x66>
 8007f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fbd7 	bl	800870e <UART_Receive_IT>
      return;
 8007f60:	e273      	b.n	800844a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 80de 	beq.w	8008128 <HAL_UART_IRQHandler+0x22c>
 8007f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80d1 	beq.w	8008128 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00b      	beq.n	8007faa <HAL_UART_IRQHandler+0xae>
 8007f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d005      	beq.n	8007faa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa2:	f043 0201 	orr.w	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00b      	beq.n	8007fce <HAL_UART_IRQHandler+0xd2>
 8007fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc6:	f043 0202 	orr.w	r2, r3, #2
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <HAL_UART_IRQHandler+0xf6>
 8007fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fea:	f043 0204 	orr.w	r2, r3, #4
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d011      	beq.n	8008022 <HAL_UART_IRQHandler+0x126>
 8007ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800800a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800801a:	f043 0208 	orr.w	r2, r3, #8
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 820a 	beq.w	8008440 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800802c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d008      	beq.n	800804a <HAL_UART_IRQHandler+0x14e>
 8008038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fb62 	bl	800870e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008054:	2b40      	cmp	r3, #64	@ 0x40
 8008056:	bf0c      	ite	eq
 8008058:	2301      	moveq	r3, #1
 800805a:	2300      	movne	r3, #0
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d103      	bne.n	8008076 <HAL_UART_IRQHandler+0x17a>
 800806e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008072:	2b00      	cmp	r3, #0
 8008074:	d04f      	beq.n	8008116 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa6d 	bl	8008556 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008086:	2b40      	cmp	r3, #64	@ 0x40
 8008088:	d141      	bne.n	800810e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3314      	adds	r3, #20
 8008090:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80080a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3314      	adds	r3, #20
 80080b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80080b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80080ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80080c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80080ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1d9      	bne.n	800808a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d013      	beq.n	8008106 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e2:	4a8a      	ldr	r2, [pc, #552]	@ (800830c <HAL_UART_IRQHandler+0x410>)
 80080e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fb f8c4 	bl	8003278 <HAL_DMA_Abort_IT>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d016      	beq.n	8008124 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008104:	e00e      	b.n	8008124 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f9b6 	bl	8008478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810c:	e00a      	b.n	8008124 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9b2 	bl	8008478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008114:	e006      	b.n	8008124 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f9ae 	bl	8008478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008122:	e18d      	b.n	8008440 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008124:	bf00      	nop
    return;
 8008126:	e18b      	b.n	8008440 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800812c:	2b01      	cmp	r3, #1
 800812e:	f040 8167 	bne.w	8008400 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008136:	f003 0310 	and.w	r3, r3, #16
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 8160 	beq.w	8008400 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008144:	f003 0310 	and.w	r3, r3, #16
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8159 	beq.w	8008400 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800814e:	2300      	movs	r3, #0
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816e:	2b40      	cmp	r3, #64	@ 0x40
 8008170:	f040 80ce 	bne.w	8008310 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008180:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 80a9 	beq.w	80082dc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800818e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008192:	429a      	cmp	r2, r3
 8008194:	f080 80a2 	bcs.w	80082dc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800819e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081aa:	f000 8088 	beq.w	80082be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	330c      	adds	r3, #12
 80081b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80081da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80081de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80081f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1d9      	bne.n	80081ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3314      	adds	r3, #20
 8008200:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800820a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800820c:	f023 0301 	bic.w	r3, r3, #1
 8008210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3314      	adds	r3, #20
 800821a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800821e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008222:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008226:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e1      	bne.n	80081fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3314      	adds	r3, #20
 800823c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800824c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3314      	adds	r3, #20
 8008256:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800825a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800825c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008260:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e3      	bne.n	8008236 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	330c      	adds	r3, #12
 8008282:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800828c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800828e:	f023 0310 	bic.w	r3, r3, #16
 8008292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	330c      	adds	r3, #12
 800829c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80082a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80082a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e3      	bne.n	800827c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fa ff6d 	bl	8003198 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f8d9 	bl	800848c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80082da:	e0b3      	b.n	8008444 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082e4:	429a      	cmp	r2, r3
 80082e6:	f040 80ad 	bne.w	8008444 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082f4:	f040 80a6 	bne.w	8008444 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f8c1 	bl	800848c <HAL_UARTEx_RxEventCallback>
      return;
 800830a:	e09b      	b.n	8008444 <HAL_UART_IRQHandler+0x548>
 800830c:	0800861d 	.word	0x0800861d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008318:	b29b      	uxth	r3, r3
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 808e 	beq.w	8008448 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800832c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8089 	beq.w	8008448 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	330c      	adds	r3, #12
 800833c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800834c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	330c      	adds	r3, #12
 8008356:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800835a:	647a      	str	r2, [r7, #68]	@ 0x44
 800835c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008360:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e3      	bne.n	8008336 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3314      	adds	r3, #20
 8008374:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	623b      	str	r3, [r7, #32]
   return(result);
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	f023 0301 	bic.w	r3, r3, #1
 8008384:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3314      	adds	r3, #20
 800838e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008392:	633a      	str	r2, [r7, #48]	@ 0x30
 8008394:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e3      	bne.n	800836e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	330c      	adds	r3, #12
 80083ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0310 	bic.w	r3, r3, #16
 80083ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80083d8:	61fa      	str	r2, [r7, #28]
 80083da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	69b9      	ldr	r1, [r7, #24]
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	617b      	str	r3, [r7, #20]
   return(result);
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e3      	bne.n	80083b4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f847 	bl	800848c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083fe:	e023      	b.n	8008448 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <HAL_UART_IRQHandler+0x524>
 800840c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f910 	bl	800863e <UART_Transmit_IT>
    return;
 800841e:	e014      	b.n	800844a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00e      	beq.n	800844a <HAL_UART_IRQHandler+0x54e>
 800842c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f950 	bl	80086de <UART_EndTransmit_IT>
    return;
 800843e:	e004      	b.n	800844a <HAL_UART_IRQHandler+0x54e>
    return;
 8008440:	bf00      	nop
 8008442:	e002      	b.n	800844a <HAL_UART_IRQHandler+0x54e>
      return;
 8008444:	bf00      	nop
 8008446:	e000      	b.n	800844a <HAL_UART_IRQHandler+0x54e>
      return;
 8008448:	bf00      	nop
  }
}
 800844a:	37e8      	adds	r7, #232	@ 0xe8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	4613      	mov	r3, r2
 80084b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b4:	e03b      	b.n	800852e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084bc:	d037      	beq.n	800852e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084be:	f7fa fc7b 	bl	8002db8 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	6a3a      	ldr	r2, [r7, #32]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d302      	bcc.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e03a      	b.n	800854e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f003 0304 	and.w	r3, r3, #4
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d023      	beq.n	800852e <UART_WaitOnFlagUntilTimeout+0x8a>
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b80      	cmp	r3, #128	@ 0x80
 80084ea:	d020      	beq.n	800852e <UART_WaitOnFlagUntilTimeout+0x8a>
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b40      	cmp	r3, #64	@ 0x40
 80084f0:	d01d      	beq.n	800852e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d116      	bne.n	800852e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008500:	2300      	movs	r3, #0
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 f81d 	bl	8008556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2208      	movs	r2, #8
 8008520:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e00f      	b.n	800854e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4013      	ands	r3, r2
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	429a      	cmp	r2, r3
 800853c:	bf0c      	ite	eq
 800853e:	2301      	moveq	r3, #1
 8008540:	2300      	movne	r3, #0
 8008542:	b2db      	uxtb	r3, r3
 8008544:	461a      	mov	r2, r3
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	429a      	cmp	r2, r3
 800854a:	d0b4      	beq.n	80084b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008556:	b480      	push	{r7}
 8008558:	b095      	sub	sp, #84	@ 0x54
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	330c      	adds	r3, #12
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	330c      	adds	r3, #12
 800857c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800857e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e5      	bne.n	800855e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3314      	adds	r3, #20
 8008598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3314      	adds	r3, #20
 80085b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e5      	bne.n	8008592 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d119      	bne.n	8008602 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	330c      	adds	r3, #12
 80085d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f023 0310 	bic.w	r3, r3, #16
 80085e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085ee:	61ba      	str	r2, [r7, #24]
 80085f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6979      	ldr	r1, [r7, #20]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	613b      	str	r3, [r7, #16]
   return(result);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008610:	bf00      	nop
 8008612:	3754      	adds	r7, #84	@ 0x54
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008628:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff ff21 	bl	8008478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008636:	bf00      	nop
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b21      	cmp	r3, #33	@ 0x21
 8008650:	d13e      	bne.n	80086d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800865a:	d114      	bne.n	8008686 <UART_Transmit_IT+0x48>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d110      	bne.n	8008686 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008678:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	1c9a      	adds	r2, r3, #2
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	621a      	str	r2, [r3, #32]
 8008684:	e008      	b.n	8008698 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	1c59      	adds	r1, r3, #1
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6211      	str	r1, [r2, #32]
 8008690:	781a      	ldrb	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4619      	mov	r1, r3
 80086a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10f      	bne.n	80086cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e000      	b.n	80086d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086d0:	2302      	movs	r3, #2
  }
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fea6 	bl	8008450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b08c      	sub	sp, #48	@ 0x30
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800871a:	2300      	movs	r3, #0
 800871c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b22      	cmp	r3, #34	@ 0x22
 8008728:	f040 80aa 	bne.w	8008880 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008734:	d115      	bne.n	8008762 <UART_Receive_IT+0x54>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d111      	bne.n	8008762 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008742:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	b29b      	uxth	r3, r3
 800874c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008750:	b29a      	uxth	r2, r3
 8008752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875a:	1c9a      	adds	r2, r3, #2
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008760:	e024      	b.n	80087ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008766:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008770:	d007      	beq.n	8008782 <UART_Receive_IT+0x74>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <UART_Receive_IT+0x82>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d106      	bne.n	8008790 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878c:	701a      	strb	r2, [r3, #0]
 800878e:	e008      	b.n	80087a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800879c:	b2da      	uxtb	r2, r3
 800879e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	4619      	mov	r1, r3
 80087ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d15d      	bne.n	800887c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0220 	bic.w	r2, r2, #32
 80087ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695a      	ldr	r2, [r3, #20]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f022 0201 	bic.w	r2, r2, #1
 80087ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008802:	2b01      	cmp	r3, #1
 8008804:	d135      	bne.n	8008872 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	330c      	adds	r3, #12
 8008812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	613b      	str	r3, [r7, #16]
   return(result);
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f023 0310 	bic.w	r3, r3, #16
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	330c      	adds	r3, #12
 800882a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882c:	623a      	str	r2, [r7, #32]
 800882e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	69f9      	ldr	r1, [r7, #28]
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	61bb      	str	r3, [r7, #24]
   return(result);
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e5      	bne.n	800880c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b10      	cmp	r3, #16
 800884c:	d10a      	bne.n	8008864 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7ff fe0e 	bl	800848c <HAL_UARTEx_RxEventCallback>
 8008870:	e002      	b.n	8008878 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fdf6 	bl	8008464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	e002      	b.n	8008882 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	e000      	b.n	8008882 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008880:	2302      	movs	r3, #2
  }
}
 8008882:	4618      	mov	r0, r3
 8008884:	3730      	adds	r7, #48	@ 0x30
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800888c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008890:	b0c0      	sub	sp, #256	@ 0x100
 8008892:	af00      	add	r7, sp, #0
 8008894:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a8:	68d9      	ldr	r1, [r3, #12]
 80088aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	ea40 0301 	orr.w	r3, r0, r1
 80088b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	431a      	orrs	r2, r3
 80088c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	431a      	orrs	r2, r3
 80088cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80088e4:	f021 010c 	bic.w	r1, r1, #12
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088f2:	430b      	orrs	r3, r1
 80088f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008906:	6999      	ldr	r1, [r3, #24]
 8008908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	ea40 0301 	orr.w	r3, r0, r1
 8008912:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	4b8f      	ldr	r3, [pc, #572]	@ (8008b58 <UART_SetConfig+0x2cc>)
 800891c:	429a      	cmp	r2, r3
 800891e:	d005      	beq.n	800892c <UART_SetConfig+0xa0>
 8008920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4b8d      	ldr	r3, [pc, #564]	@ (8008b5c <UART_SetConfig+0x2d0>)
 8008928:	429a      	cmp	r2, r3
 800892a:	d104      	bne.n	8008936 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800892c:	f7fe f8b8 	bl	8006aa0 <HAL_RCC_GetPCLK2Freq>
 8008930:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008934:	e003      	b.n	800893e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008936:	f7fe f89f 	bl	8006a78 <HAL_RCC_GetPCLK1Freq>
 800893a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800893e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008948:	f040 810c 	bne.w	8008b64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800894c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008950:	2200      	movs	r2, #0
 8008952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008956:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800895a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800895e:	4622      	mov	r2, r4
 8008960:	462b      	mov	r3, r5
 8008962:	1891      	adds	r1, r2, r2
 8008964:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008966:	415b      	adcs	r3, r3
 8008968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800896a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800896e:	4621      	mov	r1, r4
 8008970:	eb12 0801 	adds.w	r8, r2, r1
 8008974:	4629      	mov	r1, r5
 8008976:	eb43 0901 	adc.w	r9, r3, r1
 800897a:	f04f 0200 	mov.w	r2, #0
 800897e:	f04f 0300 	mov.w	r3, #0
 8008982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800898a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800898e:	4690      	mov	r8, r2
 8008990:	4699      	mov	r9, r3
 8008992:	4623      	mov	r3, r4
 8008994:	eb18 0303 	adds.w	r3, r8, r3
 8008998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800899c:	462b      	mov	r3, r5
 800899e:	eb49 0303 	adc.w	r3, r9, r3
 80089a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80089b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80089ba:	460b      	mov	r3, r1
 80089bc:	18db      	adds	r3, r3, r3
 80089be:	653b      	str	r3, [r7, #80]	@ 0x50
 80089c0:	4613      	mov	r3, r2
 80089c2:	eb42 0303 	adc.w	r3, r2, r3
 80089c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80089c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80089d0:	f7f8 f97a 	bl	8000cc8 <__aeabi_uldivmod>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4b61      	ldr	r3, [pc, #388]	@ (8008b60 <UART_SetConfig+0x2d4>)
 80089da:	fba3 2302 	umull	r2, r3, r3, r2
 80089de:	095b      	lsrs	r3, r3, #5
 80089e0:	011c      	lsls	r4, r3, #4
 80089e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80089f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80089f4:	4642      	mov	r2, r8
 80089f6:	464b      	mov	r3, r9
 80089f8:	1891      	adds	r1, r2, r2
 80089fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80089fc:	415b      	adcs	r3, r3
 80089fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a04:	4641      	mov	r1, r8
 8008a06:	eb12 0a01 	adds.w	sl, r2, r1
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	eb43 0b01 	adc.w	fp, r3, r1
 8008a10:	f04f 0200 	mov.w	r2, #0
 8008a14:	f04f 0300 	mov.w	r3, #0
 8008a18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a24:	4692      	mov	sl, r2
 8008a26:	469b      	mov	fp, r3
 8008a28:	4643      	mov	r3, r8
 8008a2a:	eb1a 0303 	adds.w	r3, sl, r3
 8008a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a32:	464b      	mov	r3, r9
 8008a34:	eb4b 0303 	adc.w	r3, fp, r3
 8008a38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a50:	460b      	mov	r3, r1
 8008a52:	18db      	adds	r3, r3, r3
 8008a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a56:	4613      	mov	r3, r2
 8008a58:	eb42 0303 	adc.w	r3, r2, r3
 8008a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a66:	f7f8 f92f 	bl	8000cc8 <__aeabi_uldivmod>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	4611      	mov	r1, r2
 8008a70:	4b3b      	ldr	r3, [pc, #236]	@ (8008b60 <UART_SetConfig+0x2d4>)
 8008a72:	fba3 2301 	umull	r2, r3, r3, r1
 8008a76:	095b      	lsrs	r3, r3, #5
 8008a78:	2264      	movs	r2, #100	@ 0x64
 8008a7a:	fb02 f303 	mul.w	r3, r2, r3
 8008a7e:	1acb      	subs	r3, r1, r3
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a86:	4b36      	ldr	r3, [pc, #216]	@ (8008b60 <UART_SetConfig+0x2d4>)
 8008a88:	fba3 2302 	umull	r2, r3, r3, r2
 8008a8c:	095b      	lsrs	r3, r3, #5
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a94:	441c      	add	r4, r3
 8008a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008aa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	464b      	mov	r3, r9
 8008aac:	1891      	adds	r1, r2, r2
 8008aae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008ab0:	415b      	adcs	r3, r3
 8008ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ab8:	4641      	mov	r1, r8
 8008aba:	1851      	adds	r1, r2, r1
 8008abc:	6339      	str	r1, [r7, #48]	@ 0x30
 8008abe:	4649      	mov	r1, r9
 8008ac0:	414b      	adcs	r3, r1
 8008ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	f04f 0300 	mov.w	r3, #0
 8008acc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ad0:	4659      	mov	r1, fp
 8008ad2:	00cb      	lsls	r3, r1, #3
 8008ad4:	4651      	mov	r1, sl
 8008ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ada:	4651      	mov	r1, sl
 8008adc:	00ca      	lsls	r2, r1, #3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	4642      	mov	r2, r8
 8008ae6:	189b      	adds	r3, r3, r2
 8008ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008aec:	464b      	mov	r3, r9
 8008aee:	460a      	mov	r2, r1
 8008af0:	eb42 0303 	adc.w	r3, r2, r3
 8008af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008b08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	18db      	adds	r3, r3, r3
 8008b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b12:	4613      	mov	r3, r2
 8008b14:	eb42 0303 	adc.w	r3, r2, r3
 8008b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b22:	f7f8 f8d1 	bl	8000cc8 <__aeabi_uldivmod>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b60 <UART_SetConfig+0x2d4>)
 8008b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	2164      	movs	r1, #100	@ 0x64
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	3332      	adds	r3, #50	@ 0x32
 8008b3e:	4a08      	ldr	r2, [pc, #32]	@ (8008b60 <UART_SetConfig+0x2d4>)
 8008b40:	fba2 2303 	umull	r2, r3, r2, r3
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	f003 0207 	and.w	r2, r3, #7
 8008b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4422      	add	r2, r4
 8008b52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b54:	e106      	b.n	8008d64 <UART_SetConfig+0x4d8>
 8008b56:	bf00      	nop
 8008b58:	40011000 	.word	0x40011000
 8008b5c:	40011400 	.word	0x40011400
 8008b60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b76:	4642      	mov	r2, r8
 8008b78:	464b      	mov	r3, r9
 8008b7a:	1891      	adds	r1, r2, r2
 8008b7c:	6239      	str	r1, [r7, #32]
 8008b7e:	415b      	adcs	r3, r3
 8008b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b86:	4641      	mov	r1, r8
 8008b88:	1854      	adds	r4, r2, r1
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	eb43 0501 	adc.w	r5, r3, r1
 8008b90:	f04f 0200 	mov.w	r2, #0
 8008b94:	f04f 0300 	mov.w	r3, #0
 8008b98:	00eb      	lsls	r3, r5, #3
 8008b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b9e:	00e2      	lsls	r2, r4, #3
 8008ba0:	4614      	mov	r4, r2
 8008ba2:	461d      	mov	r5, r3
 8008ba4:	4643      	mov	r3, r8
 8008ba6:	18e3      	adds	r3, r4, r3
 8008ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bac:	464b      	mov	r3, r9
 8008bae:	eb45 0303 	adc.w	r3, r5, r3
 8008bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008bc6:	f04f 0200 	mov.w	r2, #0
 8008bca:	f04f 0300 	mov.w	r3, #0
 8008bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	008b      	lsls	r3, r1, #2
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bdc:	4621      	mov	r1, r4
 8008bde:	008a      	lsls	r2, r1, #2
 8008be0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008be4:	f7f8 f870 	bl	8000cc8 <__aeabi_uldivmod>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4b60      	ldr	r3, [pc, #384]	@ (8008d70 <UART_SetConfig+0x4e4>)
 8008bee:	fba3 2302 	umull	r2, r3, r3, r2
 8008bf2:	095b      	lsrs	r3, r3, #5
 8008bf4:	011c      	lsls	r4, r3, #4
 8008bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008c08:	4642      	mov	r2, r8
 8008c0a:	464b      	mov	r3, r9
 8008c0c:	1891      	adds	r1, r2, r2
 8008c0e:	61b9      	str	r1, [r7, #24]
 8008c10:	415b      	adcs	r3, r3
 8008c12:	61fb      	str	r3, [r7, #28]
 8008c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c18:	4641      	mov	r1, r8
 8008c1a:	1851      	adds	r1, r2, r1
 8008c1c:	6139      	str	r1, [r7, #16]
 8008c1e:	4649      	mov	r1, r9
 8008c20:	414b      	adcs	r3, r1
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	f04f 0300 	mov.w	r3, #0
 8008c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c30:	4659      	mov	r1, fp
 8008c32:	00cb      	lsls	r3, r1, #3
 8008c34:	4651      	mov	r1, sl
 8008c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c3a:	4651      	mov	r1, sl
 8008c3c:	00ca      	lsls	r2, r1, #3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	4619      	mov	r1, r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	4642      	mov	r2, r8
 8008c46:	189b      	adds	r3, r3, r2
 8008c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c4c:	464b      	mov	r3, r9
 8008c4e:	460a      	mov	r2, r1
 8008c50:	eb42 0303 	adc.w	r3, r2, r3
 8008c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c64:	f04f 0200 	mov.w	r2, #0
 8008c68:	f04f 0300 	mov.w	r3, #0
 8008c6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c70:	4649      	mov	r1, r9
 8008c72:	008b      	lsls	r3, r1, #2
 8008c74:	4641      	mov	r1, r8
 8008c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c7a:	4641      	mov	r1, r8
 8008c7c:	008a      	lsls	r2, r1, #2
 8008c7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c82:	f7f8 f821 	bl	8000cc8 <__aeabi_uldivmod>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4b38      	ldr	r3, [pc, #224]	@ (8008d70 <UART_SetConfig+0x4e4>)
 8008c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	2264      	movs	r2, #100	@ 0x64
 8008c96:	fb02 f303 	mul.w	r3, r2, r3
 8008c9a:	1acb      	subs	r3, r1, r3
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	3332      	adds	r3, #50	@ 0x32
 8008ca0:	4a33      	ldr	r2, [pc, #204]	@ (8008d70 <UART_SetConfig+0x4e4>)
 8008ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca6:	095b      	lsrs	r3, r3, #5
 8008ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008cac:	441c      	add	r4, r3
 8008cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8008cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	1891      	adds	r1, r2, r2
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	415b      	adcs	r3, r3
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ccc:	4641      	mov	r1, r8
 8008cce:	1851      	adds	r1, r2, r1
 8008cd0:	6039      	str	r1, [r7, #0]
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	414b      	adcs	r3, r1
 8008cd6:	607b      	str	r3, [r7, #4]
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	00cb      	lsls	r3, r1, #3
 8008ce8:	4651      	mov	r1, sl
 8008cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cee:	4651      	mov	r1, sl
 8008cf0:	00ca      	lsls	r2, r1, #3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	189b      	adds	r3, r3, r2
 8008cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cfe:	464b      	mov	r3, r9
 8008d00:	460a      	mov	r2, r1
 8008d02:	eb42 0303 	adc.w	r3, r2, r3
 8008d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d12:	667a      	str	r2, [r7, #100]	@ 0x64
 8008d14:	f04f 0200 	mov.w	r2, #0
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d20:	4649      	mov	r1, r9
 8008d22:	008b      	lsls	r3, r1, #2
 8008d24:	4641      	mov	r1, r8
 8008d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d2a:	4641      	mov	r1, r8
 8008d2c:	008a      	lsls	r2, r1, #2
 8008d2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d32:	f7f7 ffc9 	bl	8000cc8 <__aeabi_uldivmod>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d70 <UART_SetConfig+0x4e4>)
 8008d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d40:	095b      	lsrs	r3, r3, #5
 8008d42:	2164      	movs	r1, #100	@ 0x64
 8008d44:	fb01 f303 	mul.w	r3, r1, r3
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	3332      	adds	r3, #50	@ 0x32
 8008d4e:	4a08      	ldr	r2, [pc, #32]	@ (8008d70 <UART_SetConfig+0x4e4>)
 8008d50:	fba2 2303 	umull	r2, r3, r2, r3
 8008d54:	095b      	lsrs	r3, r3, #5
 8008d56:	f003 020f 	and.w	r2, r3, #15
 8008d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4422      	add	r2, r4
 8008d62:	609a      	str	r2, [r3, #8]
}
 8008d64:	bf00      	nop
 8008d66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d70:	51eb851f 	.word	0x51eb851f

08008d74 <__cvt>:
 8008d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d78:	ec57 6b10 	vmov	r6, r7, d0
 8008d7c:	2f00      	cmp	r7, #0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	4619      	mov	r1, r3
 8008d82:	463b      	mov	r3, r7
 8008d84:	bfbb      	ittet	lt
 8008d86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008d8a:	461f      	movlt	r7, r3
 8008d8c:	2300      	movge	r3, #0
 8008d8e:	232d      	movlt	r3, #45	@ 0x2d
 8008d90:	700b      	strb	r3, [r1, #0]
 8008d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008d98:	4691      	mov	r9, r2
 8008d9a:	f023 0820 	bic.w	r8, r3, #32
 8008d9e:	bfbc      	itt	lt
 8008da0:	4632      	movlt	r2, r6
 8008da2:	4616      	movlt	r6, r2
 8008da4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008da8:	d005      	beq.n	8008db6 <__cvt+0x42>
 8008daa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008dae:	d100      	bne.n	8008db2 <__cvt+0x3e>
 8008db0:	3401      	adds	r4, #1
 8008db2:	2102      	movs	r1, #2
 8008db4:	e000      	b.n	8008db8 <__cvt+0x44>
 8008db6:	2103      	movs	r1, #3
 8008db8:	ab03      	add	r3, sp, #12
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	ab02      	add	r3, sp, #8
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	ec47 6b10 	vmov	d0, r6, r7
 8008dc4:	4653      	mov	r3, sl
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	f001 fa2e 	bl	800a228 <_dtoa_r>
 8008dcc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	d119      	bne.n	8008e08 <__cvt+0x94>
 8008dd4:	f019 0f01 	tst.w	r9, #1
 8008dd8:	d00e      	beq.n	8008df8 <__cvt+0x84>
 8008dda:	eb00 0904 	add.w	r9, r0, r4
 8008dde:	2200      	movs	r2, #0
 8008de0:	2300      	movs	r3, #0
 8008de2:	4630      	mov	r0, r6
 8008de4:	4639      	mov	r1, r7
 8008de6:	f7f7 fe8f 	bl	8000b08 <__aeabi_dcmpeq>
 8008dea:	b108      	cbz	r0, 8008df0 <__cvt+0x7c>
 8008dec:	f8cd 900c 	str.w	r9, [sp, #12]
 8008df0:	2230      	movs	r2, #48	@ 0x30
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	454b      	cmp	r3, r9
 8008df6:	d31e      	bcc.n	8008e36 <__cvt+0xc2>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dfc:	1b5b      	subs	r3, r3, r5
 8008dfe:	4628      	mov	r0, r5
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	b004      	add	sp, #16
 8008e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e0c:	eb00 0904 	add.w	r9, r0, r4
 8008e10:	d1e5      	bne.n	8008dde <__cvt+0x6a>
 8008e12:	7803      	ldrb	r3, [r0, #0]
 8008e14:	2b30      	cmp	r3, #48	@ 0x30
 8008e16:	d10a      	bne.n	8008e2e <__cvt+0xba>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 fe72 	bl	8000b08 <__aeabi_dcmpeq>
 8008e24:	b918      	cbnz	r0, 8008e2e <__cvt+0xba>
 8008e26:	f1c4 0401 	rsb	r4, r4, #1
 8008e2a:	f8ca 4000 	str.w	r4, [sl]
 8008e2e:	f8da 3000 	ldr.w	r3, [sl]
 8008e32:	4499      	add	r9, r3
 8008e34:	e7d3      	b.n	8008dde <__cvt+0x6a>
 8008e36:	1c59      	adds	r1, r3, #1
 8008e38:	9103      	str	r1, [sp, #12]
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	e7d9      	b.n	8008df2 <__cvt+0x7e>

08008e3e <__exponent>:
 8008e3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e40:	2900      	cmp	r1, #0
 8008e42:	bfba      	itte	lt
 8008e44:	4249      	neglt	r1, r1
 8008e46:	232d      	movlt	r3, #45	@ 0x2d
 8008e48:	232b      	movge	r3, #43	@ 0x2b
 8008e4a:	2909      	cmp	r1, #9
 8008e4c:	7002      	strb	r2, [r0, #0]
 8008e4e:	7043      	strb	r3, [r0, #1]
 8008e50:	dd29      	ble.n	8008ea6 <__exponent+0x68>
 8008e52:	f10d 0307 	add.w	r3, sp, #7
 8008e56:	461d      	mov	r5, r3
 8008e58:	270a      	movs	r7, #10
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008e60:	fb07 1416 	mls	r4, r7, r6, r1
 8008e64:	3430      	adds	r4, #48	@ 0x30
 8008e66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	2c63      	cmp	r4, #99	@ 0x63
 8008e6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e72:	4631      	mov	r1, r6
 8008e74:	dcf1      	bgt.n	8008e5a <__exponent+0x1c>
 8008e76:	3130      	adds	r1, #48	@ 0x30
 8008e78:	1e94      	subs	r4, r2, #2
 8008e7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e7e:	1c41      	adds	r1, r0, #1
 8008e80:	4623      	mov	r3, r4
 8008e82:	42ab      	cmp	r3, r5
 8008e84:	d30a      	bcc.n	8008e9c <__exponent+0x5e>
 8008e86:	f10d 0309 	add.w	r3, sp, #9
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	42ac      	cmp	r4, r5
 8008e8e:	bf88      	it	hi
 8008e90:	2300      	movhi	r3, #0
 8008e92:	3302      	adds	r3, #2
 8008e94:	4403      	add	r3, r0
 8008e96:	1a18      	subs	r0, r3, r0
 8008e98:	b003      	add	sp, #12
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ea0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ea4:	e7ed      	b.n	8008e82 <__exponent+0x44>
 8008ea6:	2330      	movs	r3, #48	@ 0x30
 8008ea8:	3130      	adds	r1, #48	@ 0x30
 8008eaa:	7083      	strb	r3, [r0, #2]
 8008eac:	70c1      	strb	r1, [r0, #3]
 8008eae:	1d03      	adds	r3, r0, #4
 8008eb0:	e7f1      	b.n	8008e96 <__exponent+0x58>
	...

08008eb4 <_printf_float>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	b08d      	sub	sp, #52	@ 0x34
 8008eba:	460c      	mov	r4, r1
 8008ebc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	461f      	mov	r7, r3
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	f001 f8a9 	bl	800a01c <_localeconv_r>
 8008eca:	6803      	ldr	r3, [r0, #0]
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f7 f9ee 	bl	80002b0 <strlen>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8008edc:	9005      	str	r0, [sp, #20]
 8008ede:	3307      	adds	r3, #7
 8008ee0:	f023 0307 	bic.w	r3, r3, #7
 8008ee4:	f103 0208 	add.w	r2, r3, #8
 8008ee8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008eec:	f8d4 b000 	ldr.w	fp, [r4]
 8008ef0:	f8c8 2000 	str.w	r2, [r8]
 8008ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ef8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008efc:	9307      	str	r3, [sp, #28]
 8008efe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f0a:	4b9c      	ldr	r3, [pc, #624]	@ (800917c <_printf_float+0x2c8>)
 8008f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f10:	f7f7 fe2c 	bl	8000b6c <__aeabi_dcmpun>
 8008f14:	bb70      	cbnz	r0, 8008f74 <_printf_float+0xc0>
 8008f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f1a:	4b98      	ldr	r3, [pc, #608]	@ (800917c <_printf_float+0x2c8>)
 8008f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f20:	f7f7 fe06 	bl	8000b30 <__aeabi_dcmple>
 8008f24:	bb30      	cbnz	r0, 8008f74 <_printf_float+0xc0>
 8008f26:	2200      	movs	r2, #0
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	f7f7 fdf5 	bl	8000b1c <__aeabi_dcmplt>
 8008f32:	b110      	cbz	r0, 8008f3a <_printf_float+0x86>
 8008f34:	232d      	movs	r3, #45	@ 0x2d
 8008f36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f3a:	4a91      	ldr	r2, [pc, #580]	@ (8009180 <_printf_float+0x2cc>)
 8008f3c:	4b91      	ldr	r3, [pc, #580]	@ (8009184 <_printf_float+0x2d0>)
 8008f3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f42:	bf8c      	ite	hi
 8008f44:	4690      	movhi	r8, r2
 8008f46:	4698      	movls	r8, r3
 8008f48:	2303      	movs	r3, #3
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	f02b 0304 	bic.w	r3, fp, #4
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	f04f 0900 	mov.w	r9, #0
 8008f56:	9700      	str	r7, [sp, #0]
 8008f58:	4633      	mov	r3, r6
 8008f5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 f9d2 	bl	8009308 <_printf_common>
 8008f64:	3001      	adds	r0, #1
 8008f66:	f040 808d 	bne.w	8009084 <_printf_float+0x1d0>
 8008f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6e:	b00d      	add	sp, #52	@ 0x34
 8008f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f74:	4642      	mov	r2, r8
 8008f76:	464b      	mov	r3, r9
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f7f7 fdf6 	bl	8000b6c <__aeabi_dcmpun>
 8008f80:	b140      	cbz	r0, 8008f94 <_printf_float+0xe0>
 8008f82:	464b      	mov	r3, r9
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bfbc      	itt	lt
 8008f88:	232d      	movlt	r3, #45	@ 0x2d
 8008f8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8009188 <_printf_float+0x2d4>)
 8008f90:	4b7e      	ldr	r3, [pc, #504]	@ (800918c <_printf_float+0x2d8>)
 8008f92:	e7d4      	b.n	8008f3e <_printf_float+0x8a>
 8008f94:	6863      	ldr	r3, [r4, #4]
 8008f96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008f9a:	9206      	str	r2, [sp, #24]
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	d13b      	bne.n	8009018 <_printf_float+0x164>
 8008fa0:	2306      	movs	r3, #6
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008fa8:	2300      	movs	r3, #0
 8008faa:	6022      	str	r2, [r4, #0]
 8008fac:	9303      	str	r3, [sp, #12]
 8008fae:	ab0a      	add	r3, sp, #40	@ 0x28
 8008fb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008fb4:	ab09      	add	r3, sp, #36	@ 0x24
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	6861      	ldr	r1, [r4, #4]
 8008fba:	ec49 8b10 	vmov	d0, r8, r9
 8008fbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f7ff fed6 	bl	8008d74 <__cvt>
 8008fc8:	9b06      	ldr	r3, [sp, #24]
 8008fca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fcc:	2b47      	cmp	r3, #71	@ 0x47
 8008fce:	4680      	mov	r8, r0
 8008fd0:	d129      	bne.n	8009026 <_printf_float+0x172>
 8008fd2:	1cc8      	adds	r0, r1, #3
 8008fd4:	db02      	blt.n	8008fdc <_printf_float+0x128>
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	4299      	cmp	r1, r3
 8008fda:	dd41      	ble.n	8009060 <_printf_float+0x1ac>
 8008fdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008fe0:	fa5f fa8a 	uxtb.w	sl, sl
 8008fe4:	3901      	subs	r1, #1
 8008fe6:	4652      	mov	r2, sl
 8008fe8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008fec:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fee:	f7ff ff26 	bl	8008e3e <__exponent>
 8008ff2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ff4:	1813      	adds	r3, r2, r0
 8008ff6:	2a01      	cmp	r2, #1
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	6123      	str	r3, [r4, #16]
 8008ffc:	dc02      	bgt.n	8009004 <_printf_float+0x150>
 8008ffe:	6822      	ldr	r2, [r4, #0]
 8009000:	07d2      	lsls	r2, r2, #31
 8009002:	d501      	bpl.n	8009008 <_printf_float+0x154>
 8009004:	3301      	adds	r3, #1
 8009006:	6123      	str	r3, [r4, #16]
 8009008:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0a2      	beq.n	8008f56 <_printf_float+0xa2>
 8009010:	232d      	movs	r3, #45	@ 0x2d
 8009012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009016:	e79e      	b.n	8008f56 <_printf_float+0xa2>
 8009018:	9a06      	ldr	r2, [sp, #24]
 800901a:	2a47      	cmp	r2, #71	@ 0x47
 800901c:	d1c2      	bne.n	8008fa4 <_printf_float+0xf0>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1c0      	bne.n	8008fa4 <_printf_float+0xf0>
 8009022:	2301      	movs	r3, #1
 8009024:	e7bd      	b.n	8008fa2 <_printf_float+0xee>
 8009026:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800902a:	d9db      	bls.n	8008fe4 <_printf_float+0x130>
 800902c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009030:	d118      	bne.n	8009064 <_printf_float+0x1b0>
 8009032:	2900      	cmp	r1, #0
 8009034:	6863      	ldr	r3, [r4, #4]
 8009036:	dd0b      	ble.n	8009050 <_printf_float+0x19c>
 8009038:	6121      	str	r1, [r4, #16]
 800903a:	b913      	cbnz	r3, 8009042 <_printf_float+0x18e>
 800903c:	6822      	ldr	r2, [r4, #0]
 800903e:	07d0      	lsls	r0, r2, #31
 8009040:	d502      	bpl.n	8009048 <_printf_float+0x194>
 8009042:	3301      	adds	r3, #1
 8009044:	440b      	add	r3, r1
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	65a1      	str	r1, [r4, #88]	@ 0x58
 800904a:	f04f 0900 	mov.w	r9, #0
 800904e:	e7db      	b.n	8009008 <_printf_float+0x154>
 8009050:	b913      	cbnz	r3, 8009058 <_printf_float+0x1a4>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	07d2      	lsls	r2, r2, #31
 8009056:	d501      	bpl.n	800905c <_printf_float+0x1a8>
 8009058:	3302      	adds	r3, #2
 800905a:	e7f4      	b.n	8009046 <_printf_float+0x192>
 800905c:	2301      	movs	r3, #1
 800905e:	e7f2      	b.n	8009046 <_printf_float+0x192>
 8009060:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009066:	4299      	cmp	r1, r3
 8009068:	db05      	blt.n	8009076 <_printf_float+0x1c2>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	6121      	str	r1, [r4, #16]
 800906e:	07d8      	lsls	r0, r3, #31
 8009070:	d5ea      	bpl.n	8009048 <_printf_float+0x194>
 8009072:	1c4b      	adds	r3, r1, #1
 8009074:	e7e7      	b.n	8009046 <_printf_float+0x192>
 8009076:	2900      	cmp	r1, #0
 8009078:	bfd4      	ite	le
 800907a:	f1c1 0202 	rsble	r2, r1, #2
 800907e:	2201      	movgt	r2, #1
 8009080:	4413      	add	r3, r2
 8009082:	e7e0      	b.n	8009046 <_printf_float+0x192>
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	055a      	lsls	r2, r3, #21
 8009088:	d407      	bmi.n	800909a <_printf_float+0x1e6>
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	4642      	mov	r2, r8
 800908e:	4631      	mov	r1, r6
 8009090:	4628      	mov	r0, r5
 8009092:	47b8      	blx	r7
 8009094:	3001      	adds	r0, #1
 8009096:	d12b      	bne.n	80090f0 <_printf_float+0x23c>
 8009098:	e767      	b.n	8008f6a <_printf_float+0xb6>
 800909a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800909e:	f240 80dd 	bls.w	800925c <_printf_float+0x3a8>
 80090a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090a6:	2200      	movs	r2, #0
 80090a8:	2300      	movs	r3, #0
 80090aa:	f7f7 fd2d 	bl	8000b08 <__aeabi_dcmpeq>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d033      	beq.n	800911a <_printf_float+0x266>
 80090b2:	4a37      	ldr	r2, [pc, #220]	@ (8009190 <_printf_float+0x2dc>)
 80090b4:	2301      	movs	r3, #1
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	f43f af54 	beq.w	8008f6a <_printf_float+0xb6>
 80090c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80090c6:	4543      	cmp	r3, r8
 80090c8:	db02      	blt.n	80090d0 <_printf_float+0x21c>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	07d8      	lsls	r0, r3, #31
 80090ce:	d50f      	bpl.n	80090f0 <_printf_float+0x23c>
 80090d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090d4:	4631      	mov	r1, r6
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b8      	blx	r7
 80090da:	3001      	adds	r0, #1
 80090dc:	f43f af45 	beq.w	8008f6a <_printf_float+0xb6>
 80090e0:	f04f 0900 	mov.w	r9, #0
 80090e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80090e8:	f104 0a1a 	add.w	sl, r4, #26
 80090ec:	45c8      	cmp	r8, r9
 80090ee:	dc09      	bgt.n	8009104 <_printf_float+0x250>
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	079b      	lsls	r3, r3, #30
 80090f4:	f100 8103 	bmi.w	80092fe <_printf_float+0x44a>
 80090f8:	68e0      	ldr	r0, [r4, #12]
 80090fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090fc:	4298      	cmp	r0, r3
 80090fe:	bfb8      	it	lt
 8009100:	4618      	movlt	r0, r3
 8009102:	e734      	b.n	8008f6e <_printf_float+0xba>
 8009104:	2301      	movs	r3, #1
 8009106:	4652      	mov	r2, sl
 8009108:	4631      	mov	r1, r6
 800910a:	4628      	mov	r0, r5
 800910c:	47b8      	blx	r7
 800910e:	3001      	adds	r0, #1
 8009110:	f43f af2b 	beq.w	8008f6a <_printf_float+0xb6>
 8009114:	f109 0901 	add.w	r9, r9, #1
 8009118:	e7e8      	b.n	80090ec <_printf_float+0x238>
 800911a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911c:	2b00      	cmp	r3, #0
 800911e:	dc39      	bgt.n	8009194 <_printf_float+0x2e0>
 8009120:	4a1b      	ldr	r2, [pc, #108]	@ (8009190 <_printf_float+0x2dc>)
 8009122:	2301      	movs	r3, #1
 8009124:	4631      	mov	r1, r6
 8009126:	4628      	mov	r0, r5
 8009128:	47b8      	blx	r7
 800912a:	3001      	adds	r0, #1
 800912c:	f43f af1d 	beq.w	8008f6a <_printf_float+0xb6>
 8009130:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009134:	ea59 0303 	orrs.w	r3, r9, r3
 8009138:	d102      	bne.n	8009140 <_printf_float+0x28c>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	07d9      	lsls	r1, r3, #31
 800913e:	d5d7      	bpl.n	80090f0 <_printf_float+0x23c>
 8009140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009144:	4631      	mov	r1, r6
 8009146:	4628      	mov	r0, r5
 8009148:	47b8      	blx	r7
 800914a:	3001      	adds	r0, #1
 800914c:	f43f af0d 	beq.w	8008f6a <_printf_float+0xb6>
 8009150:	f04f 0a00 	mov.w	sl, #0
 8009154:	f104 0b1a 	add.w	fp, r4, #26
 8009158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915a:	425b      	negs	r3, r3
 800915c:	4553      	cmp	r3, sl
 800915e:	dc01      	bgt.n	8009164 <_printf_float+0x2b0>
 8009160:	464b      	mov	r3, r9
 8009162:	e793      	b.n	800908c <_printf_float+0x1d8>
 8009164:	2301      	movs	r3, #1
 8009166:	465a      	mov	r2, fp
 8009168:	4631      	mov	r1, r6
 800916a:	4628      	mov	r0, r5
 800916c:	47b8      	blx	r7
 800916e:	3001      	adds	r0, #1
 8009170:	f43f aefb 	beq.w	8008f6a <_printf_float+0xb6>
 8009174:	f10a 0a01 	add.w	sl, sl, #1
 8009178:	e7ee      	b.n	8009158 <_printf_float+0x2a4>
 800917a:	bf00      	nop
 800917c:	7fefffff 	.word	0x7fefffff
 8009180:	0800dc3c 	.word	0x0800dc3c
 8009184:	0800dc38 	.word	0x0800dc38
 8009188:	0800dc44 	.word	0x0800dc44
 800918c:	0800dc40 	.word	0x0800dc40
 8009190:	0800dc48 	.word	0x0800dc48
 8009194:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009196:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800919a:	4553      	cmp	r3, sl
 800919c:	bfa8      	it	ge
 800919e:	4653      	movge	r3, sl
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	4699      	mov	r9, r3
 80091a4:	dc36      	bgt.n	8009214 <_printf_float+0x360>
 80091a6:	f04f 0b00 	mov.w	fp, #0
 80091aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ae:	f104 021a 	add.w	r2, r4, #26
 80091b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091b4:	9306      	str	r3, [sp, #24]
 80091b6:	eba3 0309 	sub.w	r3, r3, r9
 80091ba:	455b      	cmp	r3, fp
 80091bc:	dc31      	bgt.n	8009222 <_printf_float+0x36e>
 80091be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c0:	459a      	cmp	sl, r3
 80091c2:	dc3a      	bgt.n	800923a <_printf_float+0x386>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	07da      	lsls	r2, r3, #31
 80091c8:	d437      	bmi.n	800923a <_printf_float+0x386>
 80091ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091cc:	ebaa 0903 	sub.w	r9, sl, r3
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	ebaa 0303 	sub.w	r3, sl, r3
 80091d6:	4599      	cmp	r9, r3
 80091d8:	bfa8      	it	ge
 80091da:	4699      	movge	r9, r3
 80091dc:	f1b9 0f00 	cmp.w	r9, #0
 80091e0:	dc33      	bgt.n	800924a <_printf_float+0x396>
 80091e2:	f04f 0800 	mov.w	r8, #0
 80091e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ea:	f104 0b1a 	add.w	fp, r4, #26
 80091ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f0:	ebaa 0303 	sub.w	r3, sl, r3
 80091f4:	eba3 0309 	sub.w	r3, r3, r9
 80091f8:	4543      	cmp	r3, r8
 80091fa:	f77f af79 	ble.w	80090f0 <_printf_float+0x23c>
 80091fe:	2301      	movs	r3, #1
 8009200:	465a      	mov	r2, fp
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	f43f aeae 	beq.w	8008f6a <_printf_float+0xb6>
 800920e:	f108 0801 	add.w	r8, r8, #1
 8009212:	e7ec      	b.n	80091ee <_printf_float+0x33a>
 8009214:	4642      	mov	r2, r8
 8009216:	4631      	mov	r1, r6
 8009218:	4628      	mov	r0, r5
 800921a:	47b8      	blx	r7
 800921c:	3001      	adds	r0, #1
 800921e:	d1c2      	bne.n	80091a6 <_printf_float+0x2f2>
 8009220:	e6a3      	b.n	8008f6a <_printf_float+0xb6>
 8009222:	2301      	movs	r3, #1
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	9206      	str	r2, [sp, #24]
 800922a:	47b8      	blx	r7
 800922c:	3001      	adds	r0, #1
 800922e:	f43f ae9c 	beq.w	8008f6a <_printf_float+0xb6>
 8009232:	9a06      	ldr	r2, [sp, #24]
 8009234:	f10b 0b01 	add.w	fp, fp, #1
 8009238:	e7bb      	b.n	80091b2 <_printf_float+0x2fe>
 800923a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800923e:	4631      	mov	r1, r6
 8009240:	4628      	mov	r0, r5
 8009242:	47b8      	blx	r7
 8009244:	3001      	adds	r0, #1
 8009246:	d1c0      	bne.n	80091ca <_printf_float+0x316>
 8009248:	e68f      	b.n	8008f6a <_printf_float+0xb6>
 800924a:	9a06      	ldr	r2, [sp, #24]
 800924c:	464b      	mov	r3, r9
 800924e:	4442      	add	r2, r8
 8009250:	4631      	mov	r1, r6
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	d1c3      	bne.n	80091e2 <_printf_float+0x32e>
 800925a:	e686      	b.n	8008f6a <_printf_float+0xb6>
 800925c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009260:	f1ba 0f01 	cmp.w	sl, #1
 8009264:	dc01      	bgt.n	800926a <_printf_float+0x3b6>
 8009266:	07db      	lsls	r3, r3, #31
 8009268:	d536      	bpl.n	80092d8 <_printf_float+0x424>
 800926a:	2301      	movs	r3, #1
 800926c:	4642      	mov	r2, r8
 800926e:	4631      	mov	r1, r6
 8009270:	4628      	mov	r0, r5
 8009272:	47b8      	blx	r7
 8009274:	3001      	adds	r0, #1
 8009276:	f43f ae78 	beq.w	8008f6a <_printf_float+0xb6>
 800927a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	f43f ae70 	beq.w	8008f6a <_printf_float+0xb6>
 800928a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800928e:	2200      	movs	r2, #0
 8009290:	2300      	movs	r3, #0
 8009292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009296:	f7f7 fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800929a:	b9c0      	cbnz	r0, 80092ce <_printf_float+0x41a>
 800929c:	4653      	mov	r3, sl
 800929e:	f108 0201 	add.w	r2, r8, #1
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	d10c      	bne.n	80092c6 <_printf_float+0x412>
 80092ac:	e65d      	b.n	8008f6a <_printf_float+0xb6>
 80092ae:	2301      	movs	r3, #1
 80092b0:	465a      	mov	r2, fp
 80092b2:	4631      	mov	r1, r6
 80092b4:	4628      	mov	r0, r5
 80092b6:	47b8      	blx	r7
 80092b8:	3001      	adds	r0, #1
 80092ba:	f43f ae56 	beq.w	8008f6a <_printf_float+0xb6>
 80092be:	f108 0801 	add.w	r8, r8, #1
 80092c2:	45d0      	cmp	r8, sl
 80092c4:	dbf3      	blt.n	80092ae <_printf_float+0x3fa>
 80092c6:	464b      	mov	r3, r9
 80092c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80092cc:	e6df      	b.n	800908e <_printf_float+0x1da>
 80092ce:	f04f 0800 	mov.w	r8, #0
 80092d2:	f104 0b1a 	add.w	fp, r4, #26
 80092d6:	e7f4      	b.n	80092c2 <_printf_float+0x40e>
 80092d8:	2301      	movs	r3, #1
 80092da:	4642      	mov	r2, r8
 80092dc:	e7e1      	b.n	80092a2 <_printf_float+0x3ee>
 80092de:	2301      	movs	r3, #1
 80092e0:	464a      	mov	r2, r9
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f ae3e 	beq.w	8008f6a <_printf_float+0xb6>
 80092ee:	f108 0801 	add.w	r8, r8, #1
 80092f2:	68e3      	ldr	r3, [r4, #12]
 80092f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092f6:	1a5b      	subs	r3, r3, r1
 80092f8:	4543      	cmp	r3, r8
 80092fa:	dcf0      	bgt.n	80092de <_printf_float+0x42a>
 80092fc:	e6fc      	b.n	80090f8 <_printf_float+0x244>
 80092fe:	f04f 0800 	mov.w	r8, #0
 8009302:	f104 0919 	add.w	r9, r4, #25
 8009306:	e7f4      	b.n	80092f2 <_printf_float+0x43e>

08009308 <_printf_common>:
 8009308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800930c:	4616      	mov	r6, r2
 800930e:	4698      	mov	r8, r3
 8009310:	688a      	ldr	r2, [r1, #8]
 8009312:	690b      	ldr	r3, [r1, #16]
 8009314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009318:	4293      	cmp	r3, r2
 800931a:	bfb8      	it	lt
 800931c:	4613      	movlt	r3, r2
 800931e:	6033      	str	r3, [r6, #0]
 8009320:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009324:	4607      	mov	r7, r0
 8009326:	460c      	mov	r4, r1
 8009328:	b10a      	cbz	r2, 800932e <_printf_common+0x26>
 800932a:	3301      	adds	r3, #1
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	0699      	lsls	r1, r3, #26
 8009332:	bf42      	ittt	mi
 8009334:	6833      	ldrmi	r3, [r6, #0]
 8009336:	3302      	addmi	r3, #2
 8009338:	6033      	strmi	r3, [r6, #0]
 800933a:	6825      	ldr	r5, [r4, #0]
 800933c:	f015 0506 	ands.w	r5, r5, #6
 8009340:	d106      	bne.n	8009350 <_printf_common+0x48>
 8009342:	f104 0a19 	add.w	sl, r4, #25
 8009346:	68e3      	ldr	r3, [r4, #12]
 8009348:	6832      	ldr	r2, [r6, #0]
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	42ab      	cmp	r3, r5
 800934e:	dc26      	bgt.n	800939e <_printf_common+0x96>
 8009350:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009354:	6822      	ldr	r2, [r4, #0]
 8009356:	3b00      	subs	r3, #0
 8009358:	bf18      	it	ne
 800935a:	2301      	movne	r3, #1
 800935c:	0692      	lsls	r2, r2, #26
 800935e:	d42b      	bmi.n	80093b8 <_printf_common+0xb0>
 8009360:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009364:	4641      	mov	r1, r8
 8009366:	4638      	mov	r0, r7
 8009368:	47c8      	blx	r9
 800936a:	3001      	adds	r0, #1
 800936c:	d01e      	beq.n	80093ac <_printf_common+0xa4>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	6922      	ldr	r2, [r4, #16]
 8009372:	f003 0306 	and.w	r3, r3, #6
 8009376:	2b04      	cmp	r3, #4
 8009378:	bf02      	ittt	eq
 800937a:	68e5      	ldreq	r5, [r4, #12]
 800937c:	6833      	ldreq	r3, [r6, #0]
 800937e:	1aed      	subeq	r5, r5, r3
 8009380:	68a3      	ldr	r3, [r4, #8]
 8009382:	bf0c      	ite	eq
 8009384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009388:	2500      	movne	r5, #0
 800938a:	4293      	cmp	r3, r2
 800938c:	bfc4      	itt	gt
 800938e:	1a9b      	subgt	r3, r3, r2
 8009390:	18ed      	addgt	r5, r5, r3
 8009392:	2600      	movs	r6, #0
 8009394:	341a      	adds	r4, #26
 8009396:	42b5      	cmp	r5, r6
 8009398:	d11a      	bne.n	80093d0 <_printf_common+0xc8>
 800939a:	2000      	movs	r0, #0
 800939c:	e008      	b.n	80093b0 <_printf_common+0xa8>
 800939e:	2301      	movs	r3, #1
 80093a0:	4652      	mov	r2, sl
 80093a2:	4641      	mov	r1, r8
 80093a4:	4638      	mov	r0, r7
 80093a6:	47c8      	blx	r9
 80093a8:	3001      	adds	r0, #1
 80093aa:	d103      	bne.n	80093b4 <_printf_common+0xac>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b4:	3501      	adds	r5, #1
 80093b6:	e7c6      	b.n	8009346 <_printf_common+0x3e>
 80093b8:	18e1      	adds	r1, r4, r3
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	2030      	movs	r0, #48	@ 0x30
 80093be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093c2:	4422      	add	r2, r4
 80093c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093cc:	3302      	adds	r3, #2
 80093ce:	e7c7      	b.n	8009360 <_printf_common+0x58>
 80093d0:	2301      	movs	r3, #1
 80093d2:	4622      	mov	r2, r4
 80093d4:	4641      	mov	r1, r8
 80093d6:	4638      	mov	r0, r7
 80093d8:	47c8      	blx	r9
 80093da:	3001      	adds	r0, #1
 80093dc:	d0e6      	beq.n	80093ac <_printf_common+0xa4>
 80093de:	3601      	adds	r6, #1
 80093e0:	e7d9      	b.n	8009396 <_printf_common+0x8e>
	...

080093e4 <_printf_i>:
 80093e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	7e0f      	ldrb	r7, [r1, #24]
 80093ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093ec:	2f78      	cmp	r7, #120	@ 0x78
 80093ee:	4691      	mov	r9, r2
 80093f0:	4680      	mov	r8, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	469a      	mov	sl, r3
 80093f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093fa:	d807      	bhi.n	800940c <_printf_i+0x28>
 80093fc:	2f62      	cmp	r7, #98	@ 0x62
 80093fe:	d80a      	bhi.n	8009416 <_printf_i+0x32>
 8009400:	2f00      	cmp	r7, #0
 8009402:	f000 80d1 	beq.w	80095a8 <_printf_i+0x1c4>
 8009406:	2f58      	cmp	r7, #88	@ 0x58
 8009408:	f000 80b8 	beq.w	800957c <_printf_i+0x198>
 800940c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009414:	e03a      	b.n	800948c <_printf_i+0xa8>
 8009416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800941a:	2b15      	cmp	r3, #21
 800941c:	d8f6      	bhi.n	800940c <_printf_i+0x28>
 800941e:	a101      	add	r1, pc, #4	@ (adr r1, 8009424 <_printf_i+0x40>)
 8009420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009424:	0800947d 	.word	0x0800947d
 8009428:	08009491 	.word	0x08009491
 800942c:	0800940d 	.word	0x0800940d
 8009430:	0800940d 	.word	0x0800940d
 8009434:	0800940d 	.word	0x0800940d
 8009438:	0800940d 	.word	0x0800940d
 800943c:	08009491 	.word	0x08009491
 8009440:	0800940d 	.word	0x0800940d
 8009444:	0800940d 	.word	0x0800940d
 8009448:	0800940d 	.word	0x0800940d
 800944c:	0800940d 	.word	0x0800940d
 8009450:	0800958f 	.word	0x0800958f
 8009454:	080094bb 	.word	0x080094bb
 8009458:	08009549 	.word	0x08009549
 800945c:	0800940d 	.word	0x0800940d
 8009460:	0800940d 	.word	0x0800940d
 8009464:	080095b1 	.word	0x080095b1
 8009468:	0800940d 	.word	0x0800940d
 800946c:	080094bb 	.word	0x080094bb
 8009470:	0800940d 	.word	0x0800940d
 8009474:	0800940d 	.word	0x0800940d
 8009478:	08009551 	.word	0x08009551
 800947c:	6833      	ldr	r3, [r6, #0]
 800947e:	1d1a      	adds	r2, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	6032      	str	r2, [r6, #0]
 8009484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800948c:	2301      	movs	r3, #1
 800948e:	e09c      	b.n	80095ca <_printf_i+0x1e6>
 8009490:	6833      	ldr	r3, [r6, #0]
 8009492:	6820      	ldr	r0, [r4, #0]
 8009494:	1d19      	adds	r1, r3, #4
 8009496:	6031      	str	r1, [r6, #0]
 8009498:	0606      	lsls	r6, r0, #24
 800949a:	d501      	bpl.n	80094a0 <_printf_i+0xbc>
 800949c:	681d      	ldr	r5, [r3, #0]
 800949e:	e003      	b.n	80094a8 <_printf_i+0xc4>
 80094a0:	0645      	lsls	r5, r0, #25
 80094a2:	d5fb      	bpl.n	800949c <_printf_i+0xb8>
 80094a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	da03      	bge.n	80094b4 <_printf_i+0xd0>
 80094ac:	232d      	movs	r3, #45	@ 0x2d
 80094ae:	426d      	negs	r5, r5
 80094b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094b4:	4858      	ldr	r0, [pc, #352]	@ (8009618 <_printf_i+0x234>)
 80094b6:	230a      	movs	r3, #10
 80094b8:	e011      	b.n	80094de <_printf_i+0xfa>
 80094ba:	6821      	ldr	r1, [r4, #0]
 80094bc:	6833      	ldr	r3, [r6, #0]
 80094be:	0608      	lsls	r0, r1, #24
 80094c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80094c4:	d402      	bmi.n	80094cc <_printf_i+0xe8>
 80094c6:	0649      	lsls	r1, r1, #25
 80094c8:	bf48      	it	mi
 80094ca:	b2ad      	uxthmi	r5, r5
 80094cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80094ce:	4852      	ldr	r0, [pc, #328]	@ (8009618 <_printf_i+0x234>)
 80094d0:	6033      	str	r3, [r6, #0]
 80094d2:	bf14      	ite	ne
 80094d4:	230a      	movne	r3, #10
 80094d6:	2308      	moveq	r3, #8
 80094d8:	2100      	movs	r1, #0
 80094da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094de:	6866      	ldr	r6, [r4, #4]
 80094e0:	60a6      	str	r6, [r4, #8]
 80094e2:	2e00      	cmp	r6, #0
 80094e4:	db05      	blt.n	80094f2 <_printf_i+0x10e>
 80094e6:	6821      	ldr	r1, [r4, #0]
 80094e8:	432e      	orrs	r6, r5
 80094ea:	f021 0104 	bic.w	r1, r1, #4
 80094ee:	6021      	str	r1, [r4, #0]
 80094f0:	d04b      	beq.n	800958a <_printf_i+0x1a6>
 80094f2:	4616      	mov	r6, r2
 80094f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80094f8:	fb03 5711 	mls	r7, r3, r1, r5
 80094fc:	5dc7      	ldrb	r7, [r0, r7]
 80094fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009502:	462f      	mov	r7, r5
 8009504:	42bb      	cmp	r3, r7
 8009506:	460d      	mov	r5, r1
 8009508:	d9f4      	bls.n	80094f4 <_printf_i+0x110>
 800950a:	2b08      	cmp	r3, #8
 800950c:	d10b      	bne.n	8009526 <_printf_i+0x142>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	07df      	lsls	r7, r3, #31
 8009512:	d508      	bpl.n	8009526 <_printf_i+0x142>
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	6861      	ldr	r1, [r4, #4]
 8009518:	4299      	cmp	r1, r3
 800951a:	bfde      	ittt	le
 800951c:	2330      	movle	r3, #48	@ 0x30
 800951e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009522:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009526:	1b92      	subs	r2, r2, r6
 8009528:	6122      	str	r2, [r4, #16]
 800952a:	f8cd a000 	str.w	sl, [sp]
 800952e:	464b      	mov	r3, r9
 8009530:	aa03      	add	r2, sp, #12
 8009532:	4621      	mov	r1, r4
 8009534:	4640      	mov	r0, r8
 8009536:	f7ff fee7 	bl	8009308 <_printf_common>
 800953a:	3001      	adds	r0, #1
 800953c:	d14a      	bne.n	80095d4 <_printf_i+0x1f0>
 800953e:	f04f 30ff 	mov.w	r0, #4294967295
 8009542:	b004      	add	sp, #16
 8009544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	f043 0320 	orr.w	r3, r3, #32
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	4832      	ldr	r0, [pc, #200]	@ (800961c <_printf_i+0x238>)
 8009552:	2778      	movs	r7, #120	@ 0x78
 8009554:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	6831      	ldr	r1, [r6, #0]
 800955c:	061f      	lsls	r7, r3, #24
 800955e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009562:	d402      	bmi.n	800956a <_printf_i+0x186>
 8009564:	065f      	lsls	r7, r3, #25
 8009566:	bf48      	it	mi
 8009568:	b2ad      	uxthmi	r5, r5
 800956a:	6031      	str	r1, [r6, #0]
 800956c:	07d9      	lsls	r1, r3, #31
 800956e:	bf44      	itt	mi
 8009570:	f043 0320 	orrmi.w	r3, r3, #32
 8009574:	6023      	strmi	r3, [r4, #0]
 8009576:	b11d      	cbz	r5, 8009580 <_printf_i+0x19c>
 8009578:	2310      	movs	r3, #16
 800957a:	e7ad      	b.n	80094d8 <_printf_i+0xf4>
 800957c:	4826      	ldr	r0, [pc, #152]	@ (8009618 <_printf_i+0x234>)
 800957e:	e7e9      	b.n	8009554 <_printf_i+0x170>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	f023 0320 	bic.w	r3, r3, #32
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	e7f6      	b.n	8009578 <_printf_i+0x194>
 800958a:	4616      	mov	r6, r2
 800958c:	e7bd      	b.n	800950a <_printf_i+0x126>
 800958e:	6833      	ldr	r3, [r6, #0]
 8009590:	6825      	ldr	r5, [r4, #0]
 8009592:	6961      	ldr	r1, [r4, #20]
 8009594:	1d18      	adds	r0, r3, #4
 8009596:	6030      	str	r0, [r6, #0]
 8009598:	062e      	lsls	r6, r5, #24
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	d501      	bpl.n	80095a2 <_printf_i+0x1be>
 800959e:	6019      	str	r1, [r3, #0]
 80095a0:	e002      	b.n	80095a8 <_printf_i+0x1c4>
 80095a2:	0668      	lsls	r0, r5, #25
 80095a4:	d5fb      	bpl.n	800959e <_printf_i+0x1ba>
 80095a6:	8019      	strh	r1, [r3, #0]
 80095a8:	2300      	movs	r3, #0
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	4616      	mov	r6, r2
 80095ae:	e7bc      	b.n	800952a <_printf_i+0x146>
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	6032      	str	r2, [r6, #0]
 80095b6:	681e      	ldr	r6, [r3, #0]
 80095b8:	6862      	ldr	r2, [r4, #4]
 80095ba:	2100      	movs	r1, #0
 80095bc:	4630      	mov	r0, r6
 80095be:	f7f6 fe27 	bl	8000210 <memchr>
 80095c2:	b108      	cbz	r0, 80095c8 <_printf_i+0x1e4>
 80095c4:	1b80      	subs	r0, r0, r6
 80095c6:	6060      	str	r0, [r4, #4]
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	6123      	str	r3, [r4, #16]
 80095cc:	2300      	movs	r3, #0
 80095ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095d2:	e7aa      	b.n	800952a <_printf_i+0x146>
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	4632      	mov	r2, r6
 80095d8:	4649      	mov	r1, r9
 80095da:	4640      	mov	r0, r8
 80095dc:	47d0      	blx	sl
 80095de:	3001      	adds	r0, #1
 80095e0:	d0ad      	beq.n	800953e <_printf_i+0x15a>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	079b      	lsls	r3, r3, #30
 80095e6:	d413      	bmi.n	8009610 <_printf_i+0x22c>
 80095e8:	68e0      	ldr	r0, [r4, #12]
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	4298      	cmp	r0, r3
 80095ee:	bfb8      	it	lt
 80095f0:	4618      	movlt	r0, r3
 80095f2:	e7a6      	b.n	8009542 <_printf_i+0x15e>
 80095f4:	2301      	movs	r3, #1
 80095f6:	4632      	mov	r2, r6
 80095f8:	4649      	mov	r1, r9
 80095fa:	4640      	mov	r0, r8
 80095fc:	47d0      	blx	sl
 80095fe:	3001      	adds	r0, #1
 8009600:	d09d      	beq.n	800953e <_printf_i+0x15a>
 8009602:	3501      	adds	r5, #1
 8009604:	68e3      	ldr	r3, [r4, #12]
 8009606:	9903      	ldr	r1, [sp, #12]
 8009608:	1a5b      	subs	r3, r3, r1
 800960a:	42ab      	cmp	r3, r5
 800960c:	dcf2      	bgt.n	80095f4 <_printf_i+0x210>
 800960e:	e7eb      	b.n	80095e8 <_printf_i+0x204>
 8009610:	2500      	movs	r5, #0
 8009612:	f104 0619 	add.w	r6, r4, #25
 8009616:	e7f5      	b.n	8009604 <_printf_i+0x220>
 8009618:	0800dc4a 	.word	0x0800dc4a
 800961c:	0800dc5b 	.word	0x0800dc5b

08009620 <_scanf_float>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	b087      	sub	sp, #28
 8009626:	4691      	mov	r9, r2
 8009628:	9303      	str	r3, [sp, #12]
 800962a:	688b      	ldr	r3, [r1, #8]
 800962c:	1e5a      	subs	r2, r3, #1
 800962e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009632:	bf81      	itttt	hi
 8009634:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009638:	eb03 0b05 	addhi.w	fp, r3, r5
 800963c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009640:	608b      	strhi	r3, [r1, #8]
 8009642:	680b      	ldr	r3, [r1, #0]
 8009644:	460a      	mov	r2, r1
 8009646:	f04f 0500 	mov.w	r5, #0
 800964a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800964e:	f842 3b1c 	str.w	r3, [r2], #28
 8009652:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009656:	4680      	mov	r8, r0
 8009658:	460c      	mov	r4, r1
 800965a:	bf98      	it	ls
 800965c:	f04f 0b00 	movls.w	fp, #0
 8009660:	9201      	str	r2, [sp, #4]
 8009662:	4616      	mov	r6, r2
 8009664:	46aa      	mov	sl, r5
 8009666:	462f      	mov	r7, r5
 8009668:	9502      	str	r5, [sp, #8]
 800966a:	68a2      	ldr	r2, [r4, #8]
 800966c:	b15a      	cbz	r2, 8009686 <_scanf_float+0x66>
 800966e:	f8d9 3000 	ldr.w	r3, [r9]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b4e      	cmp	r3, #78	@ 0x4e
 8009676:	d863      	bhi.n	8009740 <_scanf_float+0x120>
 8009678:	2b40      	cmp	r3, #64	@ 0x40
 800967a:	d83b      	bhi.n	80096f4 <_scanf_float+0xd4>
 800967c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009680:	b2c8      	uxtb	r0, r1
 8009682:	280e      	cmp	r0, #14
 8009684:	d939      	bls.n	80096fa <_scanf_float+0xda>
 8009686:	b11f      	cbz	r7, 8009690 <_scanf_float+0x70>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009694:	f1ba 0f01 	cmp.w	sl, #1
 8009698:	f200 8114 	bhi.w	80098c4 <_scanf_float+0x2a4>
 800969c:	9b01      	ldr	r3, [sp, #4]
 800969e:	429e      	cmp	r6, r3
 80096a0:	f200 8105 	bhi.w	80098ae <_scanf_float+0x28e>
 80096a4:	2001      	movs	r0, #1
 80096a6:	b007      	add	sp, #28
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ac:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80096b0:	2a0d      	cmp	r2, #13
 80096b2:	d8e8      	bhi.n	8009686 <_scanf_float+0x66>
 80096b4:	a101      	add	r1, pc, #4	@ (adr r1, 80096bc <_scanf_float+0x9c>)
 80096b6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096ba:	bf00      	nop
 80096bc:	08009805 	.word	0x08009805
 80096c0:	08009687 	.word	0x08009687
 80096c4:	08009687 	.word	0x08009687
 80096c8:	08009687 	.word	0x08009687
 80096cc:	08009861 	.word	0x08009861
 80096d0:	0800983b 	.word	0x0800983b
 80096d4:	08009687 	.word	0x08009687
 80096d8:	08009687 	.word	0x08009687
 80096dc:	08009813 	.word	0x08009813
 80096e0:	08009687 	.word	0x08009687
 80096e4:	08009687 	.word	0x08009687
 80096e8:	08009687 	.word	0x08009687
 80096ec:	08009687 	.word	0x08009687
 80096f0:	080097cf 	.word	0x080097cf
 80096f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80096f8:	e7da      	b.n	80096b0 <_scanf_float+0x90>
 80096fa:	290e      	cmp	r1, #14
 80096fc:	d8c3      	bhi.n	8009686 <_scanf_float+0x66>
 80096fe:	a001      	add	r0, pc, #4	@ (adr r0, 8009704 <_scanf_float+0xe4>)
 8009700:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009704:	080097bf 	.word	0x080097bf
 8009708:	08009687 	.word	0x08009687
 800970c:	080097bf 	.word	0x080097bf
 8009710:	0800984f 	.word	0x0800984f
 8009714:	08009687 	.word	0x08009687
 8009718:	08009761 	.word	0x08009761
 800971c:	080097a5 	.word	0x080097a5
 8009720:	080097a5 	.word	0x080097a5
 8009724:	080097a5 	.word	0x080097a5
 8009728:	080097a5 	.word	0x080097a5
 800972c:	080097a5 	.word	0x080097a5
 8009730:	080097a5 	.word	0x080097a5
 8009734:	080097a5 	.word	0x080097a5
 8009738:	080097a5 	.word	0x080097a5
 800973c:	080097a5 	.word	0x080097a5
 8009740:	2b6e      	cmp	r3, #110	@ 0x6e
 8009742:	d809      	bhi.n	8009758 <_scanf_float+0x138>
 8009744:	2b60      	cmp	r3, #96	@ 0x60
 8009746:	d8b1      	bhi.n	80096ac <_scanf_float+0x8c>
 8009748:	2b54      	cmp	r3, #84	@ 0x54
 800974a:	d07b      	beq.n	8009844 <_scanf_float+0x224>
 800974c:	2b59      	cmp	r3, #89	@ 0x59
 800974e:	d19a      	bne.n	8009686 <_scanf_float+0x66>
 8009750:	2d07      	cmp	r5, #7
 8009752:	d198      	bne.n	8009686 <_scanf_float+0x66>
 8009754:	2508      	movs	r5, #8
 8009756:	e02f      	b.n	80097b8 <_scanf_float+0x198>
 8009758:	2b74      	cmp	r3, #116	@ 0x74
 800975a:	d073      	beq.n	8009844 <_scanf_float+0x224>
 800975c:	2b79      	cmp	r3, #121	@ 0x79
 800975e:	e7f6      	b.n	800974e <_scanf_float+0x12e>
 8009760:	6821      	ldr	r1, [r4, #0]
 8009762:	05c8      	lsls	r0, r1, #23
 8009764:	d51e      	bpl.n	80097a4 <_scanf_float+0x184>
 8009766:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800976a:	6021      	str	r1, [r4, #0]
 800976c:	3701      	adds	r7, #1
 800976e:	f1bb 0f00 	cmp.w	fp, #0
 8009772:	d003      	beq.n	800977c <_scanf_float+0x15c>
 8009774:	3201      	adds	r2, #1
 8009776:	f10b 3bff 	add.w	fp, fp, #4294967295
 800977a:	60a2      	str	r2, [r4, #8]
 800977c:	68a3      	ldr	r3, [r4, #8]
 800977e:	3b01      	subs	r3, #1
 8009780:	60a3      	str	r3, [r4, #8]
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	3301      	adds	r3, #1
 8009786:	6123      	str	r3, [r4, #16]
 8009788:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800978c:	3b01      	subs	r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	f8c9 3004 	str.w	r3, [r9, #4]
 8009794:	f340 8082 	ble.w	800989c <_scanf_float+0x27c>
 8009798:	f8d9 3000 	ldr.w	r3, [r9]
 800979c:	3301      	adds	r3, #1
 800979e:	f8c9 3000 	str.w	r3, [r9]
 80097a2:	e762      	b.n	800966a <_scanf_float+0x4a>
 80097a4:	eb1a 0105 	adds.w	r1, sl, r5
 80097a8:	f47f af6d 	bne.w	8009686 <_scanf_float+0x66>
 80097ac:	6822      	ldr	r2, [r4, #0]
 80097ae:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80097b2:	6022      	str	r2, [r4, #0]
 80097b4:	460d      	mov	r5, r1
 80097b6:	468a      	mov	sl, r1
 80097b8:	f806 3b01 	strb.w	r3, [r6], #1
 80097bc:	e7de      	b.n	800977c <_scanf_float+0x15c>
 80097be:	6822      	ldr	r2, [r4, #0]
 80097c0:	0610      	lsls	r0, r2, #24
 80097c2:	f57f af60 	bpl.w	8009686 <_scanf_float+0x66>
 80097c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097ca:	6022      	str	r2, [r4, #0]
 80097cc:	e7f4      	b.n	80097b8 <_scanf_float+0x198>
 80097ce:	f1ba 0f00 	cmp.w	sl, #0
 80097d2:	d10c      	bne.n	80097ee <_scanf_float+0x1ce>
 80097d4:	b977      	cbnz	r7, 80097f4 <_scanf_float+0x1d4>
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80097dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80097e0:	d108      	bne.n	80097f4 <_scanf_float+0x1d4>
 80097e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80097e6:	6022      	str	r2, [r4, #0]
 80097e8:	f04f 0a01 	mov.w	sl, #1
 80097ec:	e7e4      	b.n	80097b8 <_scanf_float+0x198>
 80097ee:	f1ba 0f02 	cmp.w	sl, #2
 80097f2:	d050      	beq.n	8009896 <_scanf_float+0x276>
 80097f4:	2d01      	cmp	r5, #1
 80097f6:	d002      	beq.n	80097fe <_scanf_float+0x1de>
 80097f8:	2d04      	cmp	r5, #4
 80097fa:	f47f af44 	bne.w	8009686 <_scanf_float+0x66>
 80097fe:	3501      	adds	r5, #1
 8009800:	b2ed      	uxtb	r5, r5
 8009802:	e7d9      	b.n	80097b8 <_scanf_float+0x198>
 8009804:	f1ba 0f01 	cmp.w	sl, #1
 8009808:	f47f af3d 	bne.w	8009686 <_scanf_float+0x66>
 800980c:	f04f 0a02 	mov.w	sl, #2
 8009810:	e7d2      	b.n	80097b8 <_scanf_float+0x198>
 8009812:	b975      	cbnz	r5, 8009832 <_scanf_float+0x212>
 8009814:	2f00      	cmp	r7, #0
 8009816:	f47f af37 	bne.w	8009688 <_scanf_float+0x68>
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009820:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009824:	f040 8103 	bne.w	8009a2e <_scanf_float+0x40e>
 8009828:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800982c:	6022      	str	r2, [r4, #0]
 800982e:	2501      	movs	r5, #1
 8009830:	e7c2      	b.n	80097b8 <_scanf_float+0x198>
 8009832:	2d03      	cmp	r5, #3
 8009834:	d0e3      	beq.n	80097fe <_scanf_float+0x1de>
 8009836:	2d05      	cmp	r5, #5
 8009838:	e7df      	b.n	80097fa <_scanf_float+0x1da>
 800983a:	2d02      	cmp	r5, #2
 800983c:	f47f af23 	bne.w	8009686 <_scanf_float+0x66>
 8009840:	2503      	movs	r5, #3
 8009842:	e7b9      	b.n	80097b8 <_scanf_float+0x198>
 8009844:	2d06      	cmp	r5, #6
 8009846:	f47f af1e 	bne.w	8009686 <_scanf_float+0x66>
 800984a:	2507      	movs	r5, #7
 800984c:	e7b4      	b.n	80097b8 <_scanf_float+0x198>
 800984e:	6822      	ldr	r2, [r4, #0]
 8009850:	0591      	lsls	r1, r2, #22
 8009852:	f57f af18 	bpl.w	8009686 <_scanf_float+0x66>
 8009856:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800985a:	6022      	str	r2, [r4, #0]
 800985c:	9702      	str	r7, [sp, #8]
 800985e:	e7ab      	b.n	80097b8 <_scanf_float+0x198>
 8009860:	6822      	ldr	r2, [r4, #0]
 8009862:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009866:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800986a:	d005      	beq.n	8009878 <_scanf_float+0x258>
 800986c:	0550      	lsls	r0, r2, #21
 800986e:	f57f af0a 	bpl.w	8009686 <_scanf_float+0x66>
 8009872:	2f00      	cmp	r7, #0
 8009874:	f000 80db 	beq.w	8009a2e <_scanf_float+0x40e>
 8009878:	0591      	lsls	r1, r2, #22
 800987a:	bf58      	it	pl
 800987c:	9902      	ldrpl	r1, [sp, #8]
 800987e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009882:	bf58      	it	pl
 8009884:	1a79      	subpl	r1, r7, r1
 8009886:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800988a:	bf58      	it	pl
 800988c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009890:	6022      	str	r2, [r4, #0]
 8009892:	2700      	movs	r7, #0
 8009894:	e790      	b.n	80097b8 <_scanf_float+0x198>
 8009896:	f04f 0a03 	mov.w	sl, #3
 800989a:	e78d      	b.n	80097b8 <_scanf_float+0x198>
 800989c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80098a0:	4649      	mov	r1, r9
 80098a2:	4640      	mov	r0, r8
 80098a4:	4798      	blx	r3
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f43f aedf 	beq.w	800966a <_scanf_float+0x4a>
 80098ac:	e6eb      	b.n	8009686 <_scanf_float+0x66>
 80098ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098b6:	464a      	mov	r2, r9
 80098b8:	4640      	mov	r0, r8
 80098ba:	4798      	blx	r3
 80098bc:	6923      	ldr	r3, [r4, #16]
 80098be:	3b01      	subs	r3, #1
 80098c0:	6123      	str	r3, [r4, #16]
 80098c2:	e6eb      	b.n	800969c <_scanf_float+0x7c>
 80098c4:	1e6b      	subs	r3, r5, #1
 80098c6:	2b06      	cmp	r3, #6
 80098c8:	d824      	bhi.n	8009914 <_scanf_float+0x2f4>
 80098ca:	2d02      	cmp	r5, #2
 80098cc:	d836      	bhi.n	800993c <_scanf_float+0x31c>
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	429e      	cmp	r6, r3
 80098d2:	f67f aee7 	bls.w	80096a4 <_scanf_float+0x84>
 80098d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098de:	464a      	mov	r2, r9
 80098e0:	4640      	mov	r0, r8
 80098e2:	4798      	blx	r3
 80098e4:	6923      	ldr	r3, [r4, #16]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	6123      	str	r3, [r4, #16]
 80098ea:	e7f0      	b.n	80098ce <_scanf_float+0x2ae>
 80098ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80098f4:	464a      	mov	r2, r9
 80098f6:	4640      	mov	r0, r8
 80098f8:	4798      	blx	r3
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	3b01      	subs	r3, #1
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009904:	fa5f fa8a 	uxtb.w	sl, sl
 8009908:	f1ba 0f02 	cmp.w	sl, #2
 800990c:	d1ee      	bne.n	80098ec <_scanf_float+0x2cc>
 800990e:	3d03      	subs	r5, #3
 8009910:	b2ed      	uxtb	r5, r5
 8009912:	1b76      	subs	r6, r6, r5
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	05da      	lsls	r2, r3, #23
 8009918:	d530      	bpl.n	800997c <_scanf_float+0x35c>
 800991a:	055b      	lsls	r3, r3, #21
 800991c:	d511      	bpl.n	8009942 <_scanf_float+0x322>
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	429e      	cmp	r6, r3
 8009922:	f67f aebf 	bls.w	80096a4 <_scanf_float+0x84>
 8009926:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800992a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800992e:	464a      	mov	r2, r9
 8009930:	4640      	mov	r0, r8
 8009932:	4798      	blx	r3
 8009934:	6923      	ldr	r3, [r4, #16]
 8009936:	3b01      	subs	r3, #1
 8009938:	6123      	str	r3, [r4, #16]
 800993a:	e7f0      	b.n	800991e <_scanf_float+0x2fe>
 800993c:	46aa      	mov	sl, r5
 800993e:	46b3      	mov	fp, r6
 8009940:	e7de      	b.n	8009900 <_scanf_float+0x2e0>
 8009942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009946:	6923      	ldr	r3, [r4, #16]
 8009948:	2965      	cmp	r1, #101	@ 0x65
 800994a:	f103 33ff 	add.w	r3, r3, #4294967295
 800994e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009952:	6123      	str	r3, [r4, #16]
 8009954:	d00c      	beq.n	8009970 <_scanf_float+0x350>
 8009956:	2945      	cmp	r1, #69	@ 0x45
 8009958:	d00a      	beq.n	8009970 <_scanf_float+0x350>
 800995a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800995e:	464a      	mov	r2, r9
 8009960:	4640      	mov	r0, r8
 8009962:	4798      	blx	r3
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800996a:	3b01      	subs	r3, #1
 800996c:	1eb5      	subs	r5, r6, #2
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009974:	464a      	mov	r2, r9
 8009976:	4640      	mov	r0, r8
 8009978:	4798      	blx	r3
 800997a:	462e      	mov	r6, r5
 800997c:	6822      	ldr	r2, [r4, #0]
 800997e:	f012 0210 	ands.w	r2, r2, #16
 8009982:	d001      	beq.n	8009988 <_scanf_float+0x368>
 8009984:	2000      	movs	r0, #0
 8009986:	e68e      	b.n	80096a6 <_scanf_float+0x86>
 8009988:	7032      	strb	r2, [r6, #0]
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009994:	d125      	bne.n	80099e2 <_scanf_float+0x3c2>
 8009996:	9b02      	ldr	r3, [sp, #8]
 8009998:	429f      	cmp	r7, r3
 800999a:	d00a      	beq.n	80099b2 <_scanf_float+0x392>
 800999c:	1bda      	subs	r2, r3, r7
 800999e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80099a2:	429e      	cmp	r6, r3
 80099a4:	bf28      	it	cs
 80099a6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80099aa:	4922      	ldr	r1, [pc, #136]	@ (8009a34 <_scanf_float+0x414>)
 80099ac:	4630      	mov	r0, r6
 80099ae:	f000 fa33 	bl	8009e18 <siprintf>
 80099b2:	9901      	ldr	r1, [sp, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	4640      	mov	r0, r8
 80099b8:	f002 fdb2 	bl	800c520 <_strtod_r>
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	6821      	ldr	r1, [r4, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f011 0f02 	tst.w	r1, #2
 80099c6:	ec57 6b10 	vmov	r6, r7, d0
 80099ca:	f103 0204 	add.w	r2, r3, #4
 80099ce:	d015      	beq.n	80099fc <_scanf_float+0x3dc>
 80099d0:	9903      	ldr	r1, [sp, #12]
 80099d2:	600a      	str	r2, [r1, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	e9c3 6700 	strd	r6, r7, [r3]
 80099da:	68e3      	ldr	r3, [r4, #12]
 80099dc:	3301      	adds	r3, #1
 80099de:	60e3      	str	r3, [r4, #12]
 80099e0:	e7d0      	b.n	8009984 <_scanf_float+0x364>
 80099e2:	9b04      	ldr	r3, [sp, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d0e4      	beq.n	80099b2 <_scanf_float+0x392>
 80099e8:	9905      	ldr	r1, [sp, #20]
 80099ea:	230a      	movs	r3, #10
 80099ec:	3101      	adds	r1, #1
 80099ee:	4640      	mov	r0, r8
 80099f0:	f002 fe16 	bl	800c620 <_strtol_r>
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	9e05      	ldr	r6, [sp, #20]
 80099f8:	1ac2      	subs	r2, r0, r3
 80099fa:	e7d0      	b.n	800999e <_scanf_float+0x37e>
 80099fc:	f011 0f04 	tst.w	r1, #4
 8009a00:	9903      	ldr	r1, [sp, #12]
 8009a02:	600a      	str	r2, [r1, #0]
 8009a04:	d1e6      	bne.n	80099d4 <_scanf_float+0x3b4>
 8009a06:	681d      	ldr	r5, [r3, #0]
 8009a08:	4632      	mov	r2, r6
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	4639      	mov	r1, r7
 8009a10:	f7f7 f8ac 	bl	8000b6c <__aeabi_dcmpun>
 8009a14:	b128      	cbz	r0, 8009a22 <_scanf_float+0x402>
 8009a16:	4808      	ldr	r0, [pc, #32]	@ (8009a38 <_scanf_float+0x418>)
 8009a18:	f000 fb78 	bl	800a10c <nanf>
 8009a1c:	ed85 0a00 	vstr	s0, [r5]
 8009a20:	e7db      	b.n	80099da <_scanf_float+0x3ba>
 8009a22:	4630      	mov	r0, r6
 8009a24:	4639      	mov	r1, r7
 8009a26:	f7f7 f8ff 	bl	8000c28 <__aeabi_d2f>
 8009a2a:	6028      	str	r0, [r5, #0]
 8009a2c:	e7d5      	b.n	80099da <_scanf_float+0x3ba>
 8009a2e:	2700      	movs	r7, #0
 8009a30:	e62e      	b.n	8009690 <_scanf_float+0x70>
 8009a32:	bf00      	nop
 8009a34:	0800dc6c 	.word	0x0800dc6c
 8009a38:	0800ddad 	.word	0x0800ddad

08009a3c <std>:
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	4604      	mov	r4, r0
 8009a42:	e9c0 3300 	strd	r3, r3, [r0]
 8009a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a4a:	6083      	str	r3, [r0, #8]
 8009a4c:	8181      	strh	r1, [r0, #12]
 8009a4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a50:	81c2      	strh	r2, [r0, #14]
 8009a52:	6183      	str	r3, [r0, #24]
 8009a54:	4619      	mov	r1, r3
 8009a56:	2208      	movs	r2, #8
 8009a58:	305c      	adds	r0, #92	@ 0x5c
 8009a5a:	f000 fad7 	bl	800a00c <memset>
 8009a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a94 <std+0x58>)
 8009a60:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a62:	4b0d      	ldr	r3, [pc, #52]	@ (8009a98 <std+0x5c>)
 8009a64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a66:	4b0d      	ldr	r3, [pc, #52]	@ (8009a9c <std+0x60>)
 8009a68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa0 <std+0x64>)
 8009a6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa4 <std+0x68>)
 8009a70:	6224      	str	r4, [r4, #32]
 8009a72:	429c      	cmp	r4, r3
 8009a74:	d006      	beq.n	8009a84 <std+0x48>
 8009a76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a7a:	4294      	cmp	r4, r2
 8009a7c:	d002      	beq.n	8009a84 <std+0x48>
 8009a7e:	33d0      	adds	r3, #208	@ 0xd0
 8009a80:	429c      	cmp	r4, r3
 8009a82:	d105      	bne.n	8009a90 <std+0x54>
 8009a84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a8c:	f000 bb3a 	b.w	800a104 <__retarget_lock_init_recursive>
 8009a90:	bd10      	pop	{r4, pc}
 8009a92:	bf00      	nop
 8009a94:	08009e5d 	.word	0x08009e5d
 8009a98:	08009e7f 	.word	0x08009e7f
 8009a9c:	08009eb7 	.word	0x08009eb7
 8009aa0:	08009edb 	.word	0x08009edb
 8009aa4:	200004d8 	.word	0x200004d8

08009aa8 <stdio_exit_handler>:
 8009aa8:	4a02      	ldr	r2, [pc, #8]	@ (8009ab4 <stdio_exit_handler+0xc>)
 8009aaa:	4903      	ldr	r1, [pc, #12]	@ (8009ab8 <stdio_exit_handler+0x10>)
 8009aac:	4803      	ldr	r0, [pc, #12]	@ (8009abc <stdio_exit_handler+0x14>)
 8009aae:	f000 b869 	b.w	8009b84 <_fwalk_sglue>
 8009ab2:	bf00      	nop
 8009ab4:	20000010 	.word	0x20000010
 8009ab8:	0800cc61 	.word	0x0800cc61
 8009abc:	20000020 	.word	0x20000020

08009ac0 <cleanup_stdio>:
 8009ac0:	6841      	ldr	r1, [r0, #4]
 8009ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8009af4 <cleanup_stdio+0x34>)
 8009ac4:	4299      	cmp	r1, r3
 8009ac6:	b510      	push	{r4, lr}
 8009ac8:	4604      	mov	r4, r0
 8009aca:	d001      	beq.n	8009ad0 <cleanup_stdio+0x10>
 8009acc:	f003 f8c8 	bl	800cc60 <_fflush_r>
 8009ad0:	68a1      	ldr	r1, [r4, #8]
 8009ad2:	4b09      	ldr	r3, [pc, #36]	@ (8009af8 <cleanup_stdio+0x38>)
 8009ad4:	4299      	cmp	r1, r3
 8009ad6:	d002      	beq.n	8009ade <cleanup_stdio+0x1e>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f003 f8c1 	bl	800cc60 <_fflush_r>
 8009ade:	68e1      	ldr	r1, [r4, #12]
 8009ae0:	4b06      	ldr	r3, [pc, #24]	@ (8009afc <cleanup_stdio+0x3c>)
 8009ae2:	4299      	cmp	r1, r3
 8009ae4:	d004      	beq.n	8009af0 <cleanup_stdio+0x30>
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aec:	f003 b8b8 	b.w	800cc60 <_fflush_r>
 8009af0:	bd10      	pop	{r4, pc}
 8009af2:	bf00      	nop
 8009af4:	200004d8 	.word	0x200004d8
 8009af8:	20000540 	.word	0x20000540
 8009afc:	200005a8 	.word	0x200005a8

08009b00 <global_stdio_init.part.0>:
 8009b00:	b510      	push	{r4, lr}
 8009b02:	4b0b      	ldr	r3, [pc, #44]	@ (8009b30 <global_stdio_init.part.0+0x30>)
 8009b04:	4c0b      	ldr	r4, [pc, #44]	@ (8009b34 <global_stdio_init.part.0+0x34>)
 8009b06:	4a0c      	ldr	r2, [pc, #48]	@ (8009b38 <global_stdio_init.part.0+0x38>)
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2104      	movs	r1, #4
 8009b10:	f7ff ff94 	bl	8009a3c <std>
 8009b14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b18:	2201      	movs	r2, #1
 8009b1a:	2109      	movs	r1, #9
 8009b1c:	f7ff ff8e 	bl	8009a3c <std>
 8009b20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b24:	2202      	movs	r2, #2
 8009b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b2a:	2112      	movs	r1, #18
 8009b2c:	f7ff bf86 	b.w	8009a3c <std>
 8009b30:	20000610 	.word	0x20000610
 8009b34:	200004d8 	.word	0x200004d8
 8009b38:	08009aa9 	.word	0x08009aa9

08009b3c <__sfp_lock_acquire>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	@ (8009b44 <__sfp_lock_acquire+0x8>)
 8009b3e:	f000 bae2 	b.w	800a106 <__retarget_lock_acquire_recursive>
 8009b42:	bf00      	nop
 8009b44:	20000619 	.word	0x20000619

08009b48 <__sfp_lock_release>:
 8009b48:	4801      	ldr	r0, [pc, #4]	@ (8009b50 <__sfp_lock_release+0x8>)
 8009b4a:	f000 badd 	b.w	800a108 <__retarget_lock_release_recursive>
 8009b4e:	bf00      	nop
 8009b50:	20000619 	.word	0x20000619

08009b54 <__sinit>:
 8009b54:	b510      	push	{r4, lr}
 8009b56:	4604      	mov	r4, r0
 8009b58:	f7ff fff0 	bl	8009b3c <__sfp_lock_acquire>
 8009b5c:	6a23      	ldr	r3, [r4, #32]
 8009b5e:	b11b      	cbz	r3, 8009b68 <__sinit+0x14>
 8009b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b64:	f7ff bff0 	b.w	8009b48 <__sfp_lock_release>
 8009b68:	4b04      	ldr	r3, [pc, #16]	@ (8009b7c <__sinit+0x28>)
 8009b6a:	6223      	str	r3, [r4, #32]
 8009b6c:	4b04      	ldr	r3, [pc, #16]	@ (8009b80 <__sinit+0x2c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1f5      	bne.n	8009b60 <__sinit+0xc>
 8009b74:	f7ff ffc4 	bl	8009b00 <global_stdio_init.part.0>
 8009b78:	e7f2      	b.n	8009b60 <__sinit+0xc>
 8009b7a:	bf00      	nop
 8009b7c:	08009ac1 	.word	0x08009ac1
 8009b80:	20000610 	.word	0x20000610

08009b84 <_fwalk_sglue>:
 8009b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b88:	4607      	mov	r7, r0
 8009b8a:	4688      	mov	r8, r1
 8009b8c:	4614      	mov	r4, r2
 8009b8e:	2600      	movs	r6, #0
 8009b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b94:	f1b9 0901 	subs.w	r9, r9, #1
 8009b98:	d505      	bpl.n	8009ba6 <_fwalk_sglue+0x22>
 8009b9a:	6824      	ldr	r4, [r4, #0]
 8009b9c:	2c00      	cmp	r4, #0
 8009b9e:	d1f7      	bne.n	8009b90 <_fwalk_sglue+0xc>
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d907      	bls.n	8009bbc <_fwalk_sglue+0x38>
 8009bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	d003      	beq.n	8009bbc <_fwalk_sglue+0x38>
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	47c0      	blx	r8
 8009bba:	4306      	orrs	r6, r0
 8009bbc:	3568      	adds	r5, #104	@ 0x68
 8009bbe:	e7e9      	b.n	8009b94 <_fwalk_sglue+0x10>

08009bc0 <iprintf>:
 8009bc0:	b40f      	push	{r0, r1, r2, r3}
 8009bc2:	b507      	push	{r0, r1, r2, lr}
 8009bc4:	4906      	ldr	r1, [pc, #24]	@ (8009be0 <iprintf+0x20>)
 8009bc6:	ab04      	add	r3, sp, #16
 8009bc8:	6808      	ldr	r0, [r1, #0]
 8009bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bce:	6881      	ldr	r1, [r0, #8]
 8009bd0:	9301      	str	r3, [sp, #4]
 8009bd2:	f002 fea9 	bl	800c928 <_vfiprintf_r>
 8009bd6:	b003      	add	sp, #12
 8009bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bdc:	b004      	add	sp, #16
 8009bde:	4770      	bx	lr
 8009be0:	2000001c 	.word	0x2000001c

08009be4 <_puts_r>:
 8009be4:	6a03      	ldr	r3, [r0, #32]
 8009be6:	b570      	push	{r4, r5, r6, lr}
 8009be8:	6884      	ldr	r4, [r0, #8]
 8009bea:	4605      	mov	r5, r0
 8009bec:	460e      	mov	r6, r1
 8009bee:	b90b      	cbnz	r3, 8009bf4 <_puts_r+0x10>
 8009bf0:	f7ff ffb0 	bl	8009b54 <__sinit>
 8009bf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bf6:	07db      	lsls	r3, r3, #31
 8009bf8:	d405      	bmi.n	8009c06 <_puts_r+0x22>
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	0598      	lsls	r0, r3, #22
 8009bfe:	d402      	bmi.n	8009c06 <_puts_r+0x22>
 8009c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c02:	f000 fa80 	bl	800a106 <__retarget_lock_acquire_recursive>
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	0719      	lsls	r1, r3, #28
 8009c0a:	d502      	bpl.n	8009c12 <_puts_r+0x2e>
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d135      	bne.n	8009c7e <_puts_r+0x9a>
 8009c12:	4621      	mov	r1, r4
 8009c14:	4628      	mov	r0, r5
 8009c16:	f000 f9a3 	bl	8009f60 <__swsetup_r>
 8009c1a:	b380      	cbz	r0, 8009c7e <_puts_r+0x9a>
 8009c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8009c20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c22:	07da      	lsls	r2, r3, #31
 8009c24:	d405      	bmi.n	8009c32 <_puts_r+0x4e>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	059b      	lsls	r3, r3, #22
 8009c2a:	d402      	bmi.n	8009c32 <_puts_r+0x4e>
 8009c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c2e:	f000 fa6b 	bl	800a108 <__retarget_lock_release_recursive>
 8009c32:	4628      	mov	r0, r5
 8009c34:	bd70      	pop	{r4, r5, r6, pc}
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	da04      	bge.n	8009c44 <_puts_r+0x60>
 8009c3a:	69a2      	ldr	r2, [r4, #24]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	dc17      	bgt.n	8009c70 <_puts_r+0x8c>
 8009c40:	290a      	cmp	r1, #10
 8009c42:	d015      	beq.n	8009c70 <_puts_r+0x8c>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	6022      	str	r2, [r4, #0]
 8009c4a:	7019      	strb	r1, [r3, #0]
 8009c4c:	68a3      	ldr	r3, [r4, #8]
 8009c4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c52:	3b01      	subs	r3, #1
 8009c54:	60a3      	str	r3, [r4, #8]
 8009c56:	2900      	cmp	r1, #0
 8009c58:	d1ed      	bne.n	8009c36 <_puts_r+0x52>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	da11      	bge.n	8009c82 <_puts_r+0x9e>
 8009c5e:	4622      	mov	r2, r4
 8009c60:	210a      	movs	r1, #10
 8009c62:	4628      	mov	r0, r5
 8009c64:	f000 f93d 	bl	8009ee2 <__swbuf_r>
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d0d7      	beq.n	8009c1c <_puts_r+0x38>
 8009c6c:	250a      	movs	r5, #10
 8009c6e:	e7d7      	b.n	8009c20 <_puts_r+0x3c>
 8009c70:	4622      	mov	r2, r4
 8009c72:	4628      	mov	r0, r5
 8009c74:	f000 f935 	bl	8009ee2 <__swbuf_r>
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d1e7      	bne.n	8009c4c <_puts_r+0x68>
 8009c7c:	e7ce      	b.n	8009c1c <_puts_r+0x38>
 8009c7e:	3e01      	subs	r6, #1
 8009c80:	e7e4      	b.n	8009c4c <_puts_r+0x68>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	6022      	str	r2, [r4, #0]
 8009c88:	220a      	movs	r2, #10
 8009c8a:	701a      	strb	r2, [r3, #0]
 8009c8c:	e7ee      	b.n	8009c6c <_puts_r+0x88>
	...

08009c90 <puts>:
 8009c90:	4b02      	ldr	r3, [pc, #8]	@ (8009c9c <puts+0xc>)
 8009c92:	4601      	mov	r1, r0
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	f7ff bfa5 	b.w	8009be4 <_puts_r>
 8009c9a:	bf00      	nop
 8009c9c:	2000001c 	.word	0x2000001c

08009ca0 <setbuf>:
 8009ca0:	fab1 f281 	clz	r2, r1
 8009ca4:	0952      	lsrs	r2, r2, #5
 8009ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009caa:	0052      	lsls	r2, r2, #1
 8009cac:	f000 b800 	b.w	8009cb0 <setvbuf>

08009cb0 <setvbuf>:
 8009cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cb4:	461d      	mov	r5, r3
 8009cb6:	4b57      	ldr	r3, [pc, #348]	@ (8009e14 <setvbuf+0x164>)
 8009cb8:	681f      	ldr	r7, [r3, #0]
 8009cba:	4604      	mov	r4, r0
 8009cbc:	460e      	mov	r6, r1
 8009cbe:	4690      	mov	r8, r2
 8009cc0:	b127      	cbz	r7, 8009ccc <setvbuf+0x1c>
 8009cc2:	6a3b      	ldr	r3, [r7, #32]
 8009cc4:	b913      	cbnz	r3, 8009ccc <setvbuf+0x1c>
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	f7ff ff44 	bl	8009b54 <__sinit>
 8009ccc:	f1b8 0f02 	cmp.w	r8, #2
 8009cd0:	d006      	beq.n	8009ce0 <setvbuf+0x30>
 8009cd2:	f1b8 0f01 	cmp.w	r8, #1
 8009cd6:	f200 809a 	bhi.w	8009e0e <setvbuf+0x15e>
 8009cda:	2d00      	cmp	r5, #0
 8009cdc:	f2c0 8097 	blt.w	8009e0e <setvbuf+0x15e>
 8009ce0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ce2:	07d9      	lsls	r1, r3, #31
 8009ce4:	d405      	bmi.n	8009cf2 <setvbuf+0x42>
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	059a      	lsls	r2, r3, #22
 8009cea:	d402      	bmi.n	8009cf2 <setvbuf+0x42>
 8009cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cee:	f000 fa0a 	bl	800a106 <__retarget_lock_acquire_recursive>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	f002 ffb3 	bl	800cc60 <_fflush_r>
 8009cfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cfc:	b141      	cbz	r1, 8009d10 <setvbuf+0x60>
 8009cfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d02:	4299      	cmp	r1, r3
 8009d04:	d002      	beq.n	8009d0c <setvbuf+0x5c>
 8009d06:	4638      	mov	r0, r7
 8009d08:	f001 f85e 	bl	800adc8 <_free_r>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d10:	2300      	movs	r3, #0
 8009d12:	61a3      	str	r3, [r4, #24]
 8009d14:	6063      	str	r3, [r4, #4]
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	061b      	lsls	r3, r3, #24
 8009d1a:	d503      	bpl.n	8009d24 <setvbuf+0x74>
 8009d1c:	6921      	ldr	r1, [r4, #16]
 8009d1e:	4638      	mov	r0, r7
 8009d20:	f001 f852 	bl	800adc8 <_free_r>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8009d2a:	f023 0303 	bic.w	r3, r3, #3
 8009d2e:	f1b8 0f02 	cmp.w	r8, #2
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	d061      	beq.n	8009dfa <setvbuf+0x14a>
 8009d36:	ab01      	add	r3, sp, #4
 8009d38:	466a      	mov	r2, sp
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f002 ffb7 	bl	800ccb0 <__swhatbuf_r>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	4318      	orrs	r0, r3
 8009d46:	81a0      	strh	r0, [r4, #12]
 8009d48:	bb2d      	cbnz	r5, 8009d96 <setvbuf+0xe6>
 8009d4a:	9d00      	ldr	r5, [sp, #0]
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f001 f885 	bl	800ae5c <malloc>
 8009d52:	4606      	mov	r6, r0
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d152      	bne.n	8009dfe <setvbuf+0x14e>
 8009d58:	f8dd 9000 	ldr.w	r9, [sp]
 8009d5c:	45a9      	cmp	r9, r5
 8009d5e:	d140      	bne.n	8009de2 <setvbuf+0x132>
 8009d60:	f04f 35ff 	mov.w	r5, #4294967295
 8009d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d68:	f043 0202 	orr.w	r2, r3, #2
 8009d6c:	81a2      	strh	r2, [r4, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	60a2      	str	r2, [r4, #8]
 8009d72:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009d76:	6022      	str	r2, [r4, #0]
 8009d78:	6122      	str	r2, [r4, #16]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	6162      	str	r2, [r4, #20]
 8009d7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d80:	07d6      	lsls	r6, r2, #31
 8009d82:	d404      	bmi.n	8009d8e <setvbuf+0xde>
 8009d84:	0598      	lsls	r0, r3, #22
 8009d86:	d402      	bmi.n	8009d8e <setvbuf+0xde>
 8009d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d8a:	f000 f9bd 	bl	800a108 <__retarget_lock_release_recursive>
 8009d8e:	4628      	mov	r0, r5
 8009d90:	b003      	add	sp, #12
 8009d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d96:	2e00      	cmp	r6, #0
 8009d98:	d0d8      	beq.n	8009d4c <setvbuf+0x9c>
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	b913      	cbnz	r3, 8009da4 <setvbuf+0xf4>
 8009d9e:	4638      	mov	r0, r7
 8009da0:	f7ff fed8 	bl	8009b54 <__sinit>
 8009da4:	f1b8 0f01 	cmp.w	r8, #1
 8009da8:	bf08      	it	eq
 8009daa:	89a3      	ldrheq	r3, [r4, #12]
 8009dac:	6026      	str	r6, [r4, #0]
 8009dae:	bf04      	itt	eq
 8009db0:	f043 0301 	orreq.w	r3, r3, #1
 8009db4:	81a3      	strheq	r3, [r4, #12]
 8009db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dba:	f013 0208 	ands.w	r2, r3, #8
 8009dbe:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009dc2:	d01e      	beq.n	8009e02 <setvbuf+0x152>
 8009dc4:	07d9      	lsls	r1, r3, #31
 8009dc6:	bf41      	itttt	mi
 8009dc8:	2200      	movmi	r2, #0
 8009dca:	426d      	negmi	r5, r5
 8009dcc:	60a2      	strmi	r2, [r4, #8]
 8009dce:	61a5      	strmi	r5, [r4, #24]
 8009dd0:	bf58      	it	pl
 8009dd2:	60a5      	strpl	r5, [r4, #8]
 8009dd4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009dd6:	07d2      	lsls	r2, r2, #31
 8009dd8:	d401      	bmi.n	8009dde <setvbuf+0x12e>
 8009dda:	059b      	lsls	r3, r3, #22
 8009ddc:	d513      	bpl.n	8009e06 <setvbuf+0x156>
 8009dde:	2500      	movs	r5, #0
 8009de0:	e7d5      	b.n	8009d8e <setvbuf+0xde>
 8009de2:	4648      	mov	r0, r9
 8009de4:	f001 f83a 	bl	800ae5c <malloc>
 8009de8:	4606      	mov	r6, r0
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d0b8      	beq.n	8009d60 <setvbuf+0xb0>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009df4:	81a3      	strh	r3, [r4, #12]
 8009df6:	464d      	mov	r5, r9
 8009df8:	e7cf      	b.n	8009d9a <setvbuf+0xea>
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	e7b2      	b.n	8009d64 <setvbuf+0xb4>
 8009dfe:	46a9      	mov	r9, r5
 8009e00:	e7f5      	b.n	8009dee <setvbuf+0x13e>
 8009e02:	60a2      	str	r2, [r4, #8]
 8009e04:	e7e6      	b.n	8009dd4 <setvbuf+0x124>
 8009e06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e08:	f000 f97e 	bl	800a108 <__retarget_lock_release_recursive>
 8009e0c:	e7e7      	b.n	8009dde <setvbuf+0x12e>
 8009e0e:	f04f 35ff 	mov.w	r5, #4294967295
 8009e12:	e7bc      	b.n	8009d8e <setvbuf+0xde>
 8009e14:	2000001c 	.word	0x2000001c

08009e18 <siprintf>:
 8009e18:	b40e      	push	{r1, r2, r3}
 8009e1a:	b510      	push	{r4, lr}
 8009e1c:	b09d      	sub	sp, #116	@ 0x74
 8009e1e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009e20:	9002      	str	r0, [sp, #8]
 8009e22:	9006      	str	r0, [sp, #24]
 8009e24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e28:	480a      	ldr	r0, [pc, #40]	@ (8009e54 <siprintf+0x3c>)
 8009e2a:	9107      	str	r1, [sp, #28]
 8009e2c:	9104      	str	r1, [sp, #16]
 8009e2e:	490a      	ldr	r1, [pc, #40]	@ (8009e58 <siprintf+0x40>)
 8009e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e34:	9105      	str	r1, [sp, #20]
 8009e36:	2400      	movs	r4, #0
 8009e38:	a902      	add	r1, sp, #8
 8009e3a:	6800      	ldr	r0, [r0, #0]
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009e40:	f002 fc4c 	bl	800c6dc <_svfiprintf_r>
 8009e44:	9b02      	ldr	r3, [sp, #8]
 8009e46:	701c      	strb	r4, [r3, #0]
 8009e48:	b01d      	add	sp, #116	@ 0x74
 8009e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e4e:	b003      	add	sp, #12
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	2000001c 	.word	0x2000001c
 8009e58:	ffff0208 	.word	0xffff0208

08009e5c <__sread>:
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	460c      	mov	r4, r1
 8009e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e64:	f000 f900 	bl	800a068 <_read_r>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	bfab      	itete	ge
 8009e6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e70:	181b      	addge	r3, r3, r0
 8009e72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e76:	bfac      	ite	ge
 8009e78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e7a:	81a3      	strhlt	r3, [r4, #12]
 8009e7c:	bd10      	pop	{r4, pc}

08009e7e <__swrite>:
 8009e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e82:	461f      	mov	r7, r3
 8009e84:	898b      	ldrh	r3, [r1, #12]
 8009e86:	05db      	lsls	r3, r3, #23
 8009e88:	4605      	mov	r5, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	4616      	mov	r6, r2
 8009e8e:	d505      	bpl.n	8009e9c <__swrite+0x1e>
 8009e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e94:	2302      	movs	r3, #2
 8009e96:	2200      	movs	r2, #0
 8009e98:	f000 f8d4 	bl	800a044 <_lseek_r>
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	463b      	mov	r3, r7
 8009eac:	4628      	mov	r0, r5
 8009eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb2:	f000 b8eb 	b.w	800a08c <_write_r>

08009eb6 <__sseek>:
 8009eb6:	b510      	push	{r4, lr}
 8009eb8:	460c      	mov	r4, r1
 8009eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ebe:	f000 f8c1 	bl	800a044 <_lseek_r>
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	bf15      	itete	ne
 8009ec8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009eca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ece:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ed2:	81a3      	strheq	r3, [r4, #12]
 8009ed4:	bf18      	it	ne
 8009ed6:	81a3      	strhne	r3, [r4, #12]
 8009ed8:	bd10      	pop	{r4, pc}

08009eda <__sclose>:
 8009eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ede:	f000 b8a1 	b.w	800a024 <_close_r>

08009ee2 <__swbuf_r>:
 8009ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee4:	460e      	mov	r6, r1
 8009ee6:	4614      	mov	r4, r2
 8009ee8:	4605      	mov	r5, r0
 8009eea:	b118      	cbz	r0, 8009ef4 <__swbuf_r+0x12>
 8009eec:	6a03      	ldr	r3, [r0, #32]
 8009eee:	b90b      	cbnz	r3, 8009ef4 <__swbuf_r+0x12>
 8009ef0:	f7ff fe30 	bl	8009b54 <__sinit>
 8009ef4:	69a3      	ldr	r3, [r4, #24]
 8009ef6:	60a3      	str	r3, [r4, #8]
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	071a      	lsls	r2, r3, #28
 8009efc:	d501      	bpl.n	8009f02 <__swbuf_r+0x20>
 8009efe:	6923      	ldr	r3, [r4, #16]
 8009f00:	b943      	cbnz	r3, 8009f14 <__swbuf_r+0x32>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4628      	mov	r0, r5
 8009f06:	f000 f82b 	bl	8009f60 <__swsetup_r>
 8009f0a:	b118      	cbz	r0, 8009f14 <__swbuf_r+0x32>
 8009f0c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f10:	4638      	mov	r0, r7
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	6922      	ldr	r2, [r4, #16]
 8009f18:	1a98      	subs	r0, r3, r2
 8009f1a:	6963      	ldr	r3, [r4, #20]
 8009f1c:	b2f6      	uxtb	r6, r6
 8009f1e:	4283      	cmp	r3, r0
 8009f20:	4637      	mov	r7, r6
 8009f22:	dc05      	bgt.n	8009f30 <__swbuf_r+0x4e>
 8009f24:	4621      	mov	r1, r4
 8009f26:	4628      	mov	r0, r5
 8009f28:	f002 fe9a 	bl	800cc60 <_fflush_r>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d1ed      	bne.n	8009f0c <__swbuf_r+0x2a>
 8009f30:	68a3      	ldr	r3, [r4, #8]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	6022      	str	r2, [r4, #0]
 8009f3c:	701e      	strb	r6, [r3, #0]
 8009f3e:	6962      	ldr	r2, [r4, #20]
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d004      	beq.n	8009f50 <__swbuf_r+0x6e>
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	07db      	lsls	r3, r3, #31
 8009f4a:	d5e1      	bpl.n	8009f10 <__swbuf_r+0x2e>
 8009f4c:	2e0a      	cmp	r6, #10
 8009f4e:	d1df      	bne.n	8009f10 <__swbuf_r+0x2e>
 8009f50:	4621      	mov	r1, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	f002 fe84 	bl	800cc60 <_fflush_r>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d0d9      	beq.n	8009f10 <__swbuf_r+0x2e>
 8009f5c:	e7d6      	b.n	8009f0c <__swbuf_r+0x2a>
	...

08009f60 <__swsetup_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4b29      	ldr	r3, [pc, #164]	@ (800a008 <__swsetup_r+0xa8>)
 8009f64:	4605      	mov	r5, r0
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	460c      	mov	r4, r1
 8009f6a:	b118      	cbz	r0, 8009f74 <__swsetup_r+0x14>
 8009f6c:	6a03      	ldr	r3, [r0, #32]
 8009f6e:	b90b      	cbnz	r3, 8009f74 <__swsetup_r+0x14>
 8009f70:	f7ff fdf0 	bl	8009b54 <__sinit>
 8009f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f78:	0719      	lsls	r1, r3, #28
 8009f7a:	d422      	bmi.n	8009fc2 <__swsetup_r+0x62>
 8009f7c:	06da      	lsls	r2, r3, #27
 8009f7e:	d407      	bmi.n	8009f90 <__swsetup_r+0x30>
 8009f80:	2209      	movs	r2, #9
 8009f82:	602a      	str	r2, [r5, #0]
 8009f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	e033      	b.n	8009ff8 <__swsetup_r+0x98>
 8009f90:	0758      	lsls	r0, r3, #29
 8009f92:	d512      	bpl.n	8009fba <__swsetup_r+0x5a>
 8009f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f96:	b141      	cbz	r1, 8009faa <__swsetup_r+0x4a>
 8009f98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f9c:	4299      	cmp	r1, r3
 8009f9e:	d002      	beq.n	8009fa6 <__swsetup_r+0x46>
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f000 ff11 	bl	800adc8 <_free_r>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	6063      	str	r3, [r4, #4]
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	f043 0308 	orr.w	r3, r3, #8
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	6923      	ldr	r3, [r4, #16]
 8009fc4:	b94b      	cbnz	r3, 8009fda <__swsetup_r+0x7a>
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fd0:	d003      	beq.n	8009fda <__swsetup_r+0x7a>
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f002 fe91 	bl	800ccfc <__smakebuf_r>
 8009fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fde:	f013 0201 	ands.w	r2, r3, #1
 8009fe2:	d00a      	beq.n	8009ffa <__swsetup_r+0x9a>
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	60a2      	str	r2, [r4, #8]
 8009fe8:	6962      	ldr	r2, [r4, #20]
 8009fea:	4252      	negs	r2, r2
 8009fec:	61a2      	str	r2, [r4, #24]
 8009fee:	6922      	ldr	r2, [r4, #16]
 8009ff0:	b942      	cbnz	r2, 800a004 <__swsetup_r+0xa4>
 8009ff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ff6:	d1c5      	bne.n	8009f84 <__swsetup_r+0x24>
 8009ff8:	bd38      	pop	{r3, r4, r5, pc}
 8009ffa:	0799      	lsls	r1, r3, #30
 8009ffc:	bf58      	it	pl
 8009ffe:	6962      	ldrpl	r2, [r4, #20]
 800a000:	60a2      	str	r2, [r4, #8]
 800a002:	e7f4      	b.n	8009fee <__swsetup_r+0x8e>
 800a004:	2000      	movs	r0, #0
 800a006:	e7f7      	b.n	8009ff8 <__swsetup_r+0x98>
 800a008:	2000001c 	.word	0x2000001c

0800a00c <memset>:
 800a00c:	4402      	add	r2, r0
 800a00e:	4603      	mov	r3, r0
 800a010:	4293      	cmp	r3, r2
 800a012:	d100      	bne.n	800a016 <memset+0xa>
 800a014:	4770      	bx	lr
 800a016:	f803 1b01 	strb.w	r1, [r3], #1
 800a01a:	e7f9      	b.n	800a010 <memset+0x4>

0800a01c <_localeconv_r>:
 800a01c:	4800      	ldr	r0, [pc, #0]	@ (800a020 <_localeconv_r+0x4>)
 800a01e:	4770      	bx	lr
 800a020:	2000015c 	.word	0x2000015c

0800a024 <_close_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d06      	ldr	r5, [pc, #24]	@ (800a040 <_close_r+0x1c>)
 800a028:	2300      	movs	r3, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	4608      	mov	r0, r1
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	f7f8 fdb6 	bl	8002ba0 <_close>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_close_r+0x1a>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_close_r+0x1a>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	20000614 	.word	0x20000614

0800a044 <_lseek_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d07      	ldr	r5, [pc, #28]	@ (800a064 <_lseek_r+0x20>)
 800a048:	4604      	mov	r4, r0
 800a04a:	4608      	mov	r0, r1
 800a04c:	4611      	mov	r1, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	602a      	str	r2, [r5, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	f7f8 fdcb 	bl	8002bee <_lseek>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_lseek_r+0x1e>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_lseek_r+0x1e>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	20000614 	.word	0x20000614

0800a068 <_read_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d07      	ldr	r5, [pc, #28]	@ (800a088 <_read_r+0x20>)
 800a06c:	4604      	mov	r4, r0
 800a06e:	4608      	mov	r0, r1
 800a070:	4611      	mov	r1, r2
 800a072:	2200      	movs	r2, #0
 800a074:	602a      	str	r2, [r5, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	f7f8 fd59 	bl	8002b2e <_read>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d102      	bne.n	800a086 <_read_r+0x1e>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	b103      	cbz	r3, 800a086 <_read_r+0x1e>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	20000614 	.word	0x20000614

0800a08c <_write_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	@ (800a0ac <_write_r+0x20>)
 800a090:	4604      	mov	r4, r0
 800a092:	4608      	mov	r0, r1
 800a094:	4611      	mov	r1, r2
 800a096:	2200      	movs	r2, #0
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f7f8 fd64 	bl	8002b68 <_write>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_write_r+0x1e>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_write_r+0x1e>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	20000614 	.word	0x20000614

0800a0b0 <__errno>:
 800a0b0:	4b01      	ldr	r3, [pc, #4]	@ (800a0b8 <__errno+0x8>)
 800a0b2:	6818      	ldr	r0, [r3, #0]
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	2000001c 	.word	0x2000001c

0800a0bc <__libc_init_array>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4d0d      	ldr	r5, [pc, #52]	@ (800a0f4 <__libc_init_array+0x38>)
 800a0c0:	4c0d      	ldr	r4, [pc, #52]	@ (800a0f8 <__libc_init_array+0x3c>)
 800a0c2:	1b64      	subs	r4, r4, r5
 800a0c4:	10a4      	asrs	r4, r4, #2
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	42a6      	cmp	r6, r4
 800a0ca:	d109      	bne.n	800a0e0 <__libc_init_array+0x24>
 800a0cc:	4d0b      	ldr	r5, [pc, #44]	@ (800a0fc <__libc_init_array+0x40>)
 800a0ce:	4c0c      	ldr	r4, [pc, #48]	@ (800a100 <__libc_init_array+0x44>)
 800a0d0:	f003 fae4 	bl	800d69c <_init>
 800a0d4:	1b64      	subs	r4, r4, r5
 800a0d6:	10a4      	asrs	r4, r4, #2
 800a0d8:	2600      	movs	r6, #0
 800a0da:	42a6      	cmp	r6, r4
 800a0dc:	d105      	bne.n	800a0ea <__libc_init_array+0x2e>
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e4:	4798      	blx	r3
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__libc_init_array+0xc>
 800a0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ee:	4798      	blx	r3
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	e7f2      	b.n	800a0da <__libc_init_array+0x1e>
 800a0f4:	0800e06c 	.word	0x0800e06c
 800a0f8:	0800e06c 	.word	0x0800e06c
 800a0fc:	0800e06c 	.word	0x0800e06c
 800a100:	0800e070 	.word	0x0800e070

0800a104 <__retarget_lock_init_recursive>:
 800a104:	4770      	bx	lr

0800a106 <__retarget_lock_acquire_recursive>:
 800a106:	4770      	bx	lr

0800a108 <__retarget_lock_release_recursive>:
 800a108:	4770      	bx	lr
	...

0800a10c <nanf>:
 800a10c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a114 <nanf+0x8>
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	7fc00000 	.word	0x7fc00000

0800a118 <quorem>:
 800a118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	6903      	ldr	r3, [r0, #16]
 800a11e:	690c      	ldr	r4, [r1, #16]
 800a120:	42a3      	cmp	r3, r4
 800a122:	4607      	mov	r7, r0
 800a124:	db7e      	blt.n	800a224 <quorem+0x10c>
 800a126:	3c01      	subs	r4, #1
 800a128:	f101 0814 	add.w	r8, r1, #20
 800a12c:	00a3      	lsls	r3, r4, #2
 800a12e:	f100 0514 	add.w	r5, r0, #20
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a138:	9301      	str	r3, [sp, #4]
 800a13a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a13e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a142:	3301      	adds	r3, #1
 800a144:	429a      	cmp	r2, r3
 800a146:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a14a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a14e:	d32e      	bcc.n	800a1ae <quorem+0x96>
 800a150:	f04f 0a00 	mov.w	sl, #0
 800a154:	46c4      	mov	ip, r8
 800a156:	46ae      	mov	lr, r5
 800a158:	46d3      	mov	fp, sl
 800a15a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a15e:	b298      	uxth	r0, r3
 800a160:	fb06 a000 	mla	r0, r6, r0, sl
 800a164:	0c02      	lsrs	r2, r0, #16
 800a166:	0c1b      	lsrs	r3, r3, #16
 800a168:	fb06 2303 	mla	r3, r6, r3, r2
 800a16c:	f8de 2000 	ldr.w	r2, [lr]
 800a170:	b280      	uxth	r0, r0
 800a172:	b292      	uxth	r2, r2
 800a174:	1a12      	subs	r2, r2, r0
 800a176:	445a      	add	r2, fp
 800a178:	f8de 0000 	ldr.w	r0, [lr]
 800a17c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a180:	b29b      	uxth	r3, r3
 800a182:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a186:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a18a:	b292      	uxth	r2, r2
 800a18c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a190:	45e1      	cmp	r9, ip
 800a192:	f84e 2b04 	str.w	r2, [lr], #4
 800a196:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a19a:	d2de      	bcs.n	800a15a <quorem+0x42>
 800a19c:	9b00      	ldr	r3, [sp, #0]
 800a19e:	58eb      	ldr	r3, [r5, r3]
 800a1a0:	b92b      	cbnz	r3, 800a1ae <quorem+0x96>
 800a1a2:	9b01      	ldr	r3, [sp, #4]
 800a1a4:	3b04      	subs	r3, #4
 800a1a6:	429d      	cmp	r5, r3
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	d32f      	bcc.n	800a20c <quorem+0xf4>
 800a1ac:	613c      	str	r4, [r7, #16]
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	f001 f9c6 	bl	800b540 <__mcmp>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	db25      	blt.n	800a204 <quorem+0xec>
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1c0:	f8d1 c000 	ldr.w	ip, [r1]
 800a1c4:	fa1f fe82 	uxth.w	lr, r2
 800a1c8:	fa1f f38c 	uxth.w	r3, ip
 800a1cc:	eba3 030e 	sub.w	r3, r3, lr
 800a1d0:	4403      	add	r3, r0
 800a1d2:	0c12      	lsrs	r2, r2, #16
 800a1d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a1d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1e2:	45c1      	cmp	r9, r8
 800a1e4:	f841 3b04 	str.w	r3, [r1], #4
 800a1e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a1ec:	d2e6      	bcs.n	800a1bc <quorem+0xa4>
 800a1ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1f6:	b922      	cbnz	r2, 800a202 <quorem+0xea>
 800a1f8:	3b04      	subs	r3, #4
 800a1fa:	429d      	cmp	r5, r3
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	d30b      	bcc.n	800a218 <quorem+0x100>
 800a200:	613c      	str	r4, [r7, #16]
 800a202:	3601      	adds	r6, #1
 800a204:	4630      	mov	r0, r6
 800a206:	b003      	add	sp, #12
 800a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20c:	6812      	ldr	r2, [r2, #0]
 800a20e:	3b04      	subs	r3, #4
 800a210:	2a00      	cmp	r2, #0
 800a212:	d1cb      	bne.n	800a1ac <quorem+0x94>
 800a214:	3c01      	subs	r4, #1
 800a216:	e7c6      	b.n	800a1a6 <quorem+0x8e>
 800a218:	6812      	ldr	r2, [r2, #0]
 800a21a:	3b04      	subs	r3, #4
 800a21c:	2a00      	cmp	r2, #0
 800a21e:	d1ef      	bne.n	800a200 <quorem+0xe8>
 800a220:	3c01      	subs	r4, #1
 800a222:	e7ea      	b.n	800a1fa <quorem+0xe2>
 800a224:	2000      	movs	r0, #0
 800a226:	e7ee      	b.n	800a206 <quorem+0xee>

0800a228 <_dtoa_r>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	69c7      	ldr	r7, [r0, #28]
 800a22e:	b097      	sub	sp, #92	@ 0x5c
 800a230:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a234:	ec55 4b10 	vmov	r4, r5, d0
 800a238:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a23a:	9107      	str	r1, [sp, #28]
 800a23c:	4681      	mov	r9, r0
 800a23e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a240:	9311      	str	r3, [sp, #68]	@ 0x44
 800a242:	b97f      	cbnz	r7, 800a264 <_dtoa_r+0x3c>
 800a244:	2010      	movs	r0, #16
 800a246:	f000 fe09 	bl	800ae5c <malloc>
 800a24a:	4602      	mov	r2, r0
 800a24c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a250:	b920      	cbnz	r0, 800a25c <_dtoa_r+0x34>
 800a252:	4ba9      	ldr	r3, [pc, #676]	@ (800a4f8 <_dtoa_r+0x2d0>)
 800a254:	21ef      	movs	r1, #239	@ 0xef
 800a256:	48a9      	ldr	r0, [pc, #676]	@ (800a4fc <_dtoa_r+0x2d4>)
 800a258:	f002 fe02 	bl	800ce60 <__assert_func>
 800a25c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a260:	6007      	str	r7, [r0, #0]
 800a262:	60c7      	str	r7, [r0, #12]
 800a264:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a268:	6819      	ldr	r1, [r3, #0]
 800a26a:	b159      	cbz	r1, 800a284 <_dtoa_r+0x5c>
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	604a      	str	r2, [r1, #4]
 800a270:	2301      	movs	r3, #1
 800a272:	4093      	lsls	r3, r2
 800a274:	608b      	str	r3, [r1, #8]
 800a276:	4648      	mov	r0, r9
 800a278:	f000 fee6 	bl	800b048 <_Bfree>
 800a27c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a280:	2200      	movs	r2, #0
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	1e2b      	subs	r3, r5, #0
 800a286:	bfb9      	ittee	lt
 800a288:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a28c:	9305      	strlt	r3, [sp, #20]
 800a28e:	2300      	movge	r3, #0
 800a290:	6033      	strge	r3, [r6, #0]
 800a292:	9f05      	ldr	r7, [sp, #20]
 800a294:	4b9a      	ldr	r3, [pc, #616]	@ (800a500 <_dtoa_r+0x2d8>)
 800a296:	bfbc      	itt	lt
 800a298:	2201      	movlt	r2, #1
 800a29a:	6032      	strlt	r2, [r6, #0]
 800a29c:	43bb      	bics	r3, r7
 800a29e:	d112      	bne.n	800a2c6 <_dtoa_r+0x9e>
 800a2a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a2a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2ac:	4323      	orrs	r3, r4
 800a2ae:	f000 855a 	beq.w	800ad66 <_dtoa_r+0xb3e>
 800a2b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a514 <_dtoa_r+0x2ec>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 855c 	beq.w	800ad76 <_dtoa_r+0xb4e>
 800a2be:	f10a 0303 	add.w	r3, sl, #3
 800a2c2:	f000 bd56 	b.w	800ad72 <_dtoa_r+0xb4a>
 800a2c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	ec51 0b17 	vmov	r0, r1, d7
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a2d6:	f7f6 fc17 	bl	8000b08 <__aeabi_dcmpeq>
 800a2da:	4680      	mov	r8, r0
 800a2dc:	b158      	cbz	r0, 800a2f6 <_dtoa_r+0xce>
 800a2de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	6013      	str	r3, [r2, #0]
 800a2e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2e6:	b113      	cbz	r3, 800a2ee <_dtoa_r+0xc6>
 800a2e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a2ea:	4b86      	ldr	r3, [pc, #536]	@ (800a504 <_dtoa_r+0x2dc>)
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a518 <_dtoa_r+0x2f0>
 800a2f2:	f000 bd40 	b.w	800ad76 <_dtoa_r+0xb4e>
 800a2f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a2fa:	aa14      	add	r2, sp, #80	@ 0x50
 800a2fc:	a915      	add	r1, sp, #84	@ 0x54
 800a2fe:	4648      	mov	r0, r9
 800a300:	f001 fa3e 	bl	800b780 <__d2b>
 800a304:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a308:	9002      	str	r0, [sp, #8]
 800a30a:	2e00      	cmp	r6, #0
 800a30c:	d078      	beq.n	800a400 <_dtoa_r+0x1d8>
 800a30e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a310:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a318:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a31c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a320:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a324:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a328:	4619      	mov	r1, r3
 800a32a:	2200      	movs	r2, #0
 800a32c:	4b76      	ldr	r3, [pc, #472]	@ (800a508 <_dtoa_r+0x2e0>)
 800a32e:	f7f5 ffcb 	bl	80002c8 <__aeabi_dsub>
 800a332:	a36b      	add	r3, pc, #428	@ (adr r3, 800a4e0 <_dtoa_r+0x2b8>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f7f6 f97e 	bl	8000638 <__aeabi_dmul>
 800a33c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a4e8 <_dtoa_r+0x2c0>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f7f5 ffc3 	bl	80002cc <__adddf3>
 800a346:	4604      	mov	r4, r0
 800a348:	4630      	mov	r0, r6
 800a34a:	460d      	mov	r5, r1
 800a34c:	f7f6 f90a 	bl	8000564 <__aeabi_i2d>
 800a350:	a367      	add	r3, pc, #412	@ (adr r3, 800a4f0 <_dtoa_r+0x2c8>)
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	f7f6 f96f 	bl	8000638 <__aeabi_dmul>
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4620      	mov	r0, r4
 800a360:	4629      	mov	r1, r5
 800a362:	f7f5 ffb3 	bl	80002cc <__adddf3>
 800a366:	4604      	mov	r4, r0
 800a368:	460d      	mov	r5, r1
 800a36a:	f7f6 fc15 	bl	8000b98 <__aeabi_d2iz>
 800a36e:	2200      	movs	r2, #0
 800a370:	4607      	mov	r7, r0
 800a372:	2300      	movs	r3, #0
 800a374:	4620      	mov	r0, r4
 800a376:	4629      	mov	r1, r5
 800a378:	f7f6 fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800a37c:	b140      	cbz	r0, 800a390 <_dtoa_r+0x168>
 800a37e:	4638      	mov	r0, r7
 800a380:	f7f6 f8f0 	bl	8000564 <__aeabi_i2d>
 800a384:	4622      	mov	r2, r4
 800a386:	462b      	mov	r3, r5
 800a388:	f7f6 fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 800a38c:	b900      	cbnz	r0, 800a390 <_dtoa_r+0x168>
 800a38e:	3f01      	subs	r7, #1
 800a390:	2f16      	cmp	r7, #22
 800a392:	d852      	bhi.n	800a43a <_dtoa_r+0x212>
 800a394:	4b5d      	ldr	r3, [pc, #372]	@ (800a50c <_dtoa_r+0x2e4>)
 800a396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a3a2:	f7f6 fbbb 	bl	8000b1c <__aeabi_dcmplt>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d049      	beq.n	800a43e <_dtoa_r+0x216>
 800a3aa:	3f01      	subs	r7, #1
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a3b2:	1b9b      	subs	r3, r3, r6
 800a3b4:	1e5a      	subs	r2, r3, #1
 800a3b6:	bf45      	ittet	mi
 800a3b8:	f1c3 0301 	rsbmi	r3, r3, #1
 800a3bc:	9300      	strmi	r3, [sp, #0]
 800a3be:	2300      	movpl	r3, #0
 800a3c0:	2300      	movmi	r3, #0
 800a3c2:	9206      	str	r2, [sp, #24]
 800a3c4:	bf54      	ite	pl
 800a3c6:	9300      	strpl	r3, [sp, #0]
 800a3c8:	9306      	strmi	r3, [sp, #24]
 800a3ca:	2f00      	cmp	r7, #0
 800a3cc:	db39      	blt.n	800a442 <_dtoa_r+0x21a>
 800a3ce:	9b06      	ldr	r3, [sp, #24]
 800a3d0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a3d2:	443b      	add	r3, r7
 800a3d4:	9306      	str	r3, [sp, #24]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9308      	str	r3, [sp, #32]
 800a3da:	9b07      	ldr	r3, [sp, #28]
 800a3dc:	2b09      	cmp	r3, #9
 800a3de:	d863      	bhi.n	800a4a8 <_dtoa_r+0x280>
 800a3e0:	2b05      	cmp	r3, #5
 800a3e2:	bfc4      	itt	gt
 800a3e4:	3b04      	subgt	r3, #4
 800a3e6:	9307      	strgt	r3, [sp, #28]
 800a3e8:	9b07      	ldr	r3, [sp, #28]
 800a3ea:	f1a3 0302 	sub.w	r3, r3, #2
 800a3ee:	bfcc      	ite	gt
 800a3f0:	2400      	movgt	r4, #0
 800a3f2:	2401      	movle	r4, #1
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d863      	bhi.n	800a4c0 <_dtoa_r+0x298>
 800a3f8:	e8df f003 	tbb	[pc, r3]
 800a3fc:	2b375452 	.word	0x2b375452
 800a400:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a404:	441e      	add	r6, r3
 800a406:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a40a:	2b20      	cmp	r3, #32
 800a40c:	bfc1      	itttt	gt
 800a40e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a412:	409f      	lslgt	r7, r3
 800a414:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a418:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a41c:	bfd6      	itet	le
 800a41e:	f1c3 0320 	rsble	r3, r3, #32
 800a422:	ea47 0003 	orrgt.w	r0, r7, r3
 800a426:	fa04 f003 	lslle.w	r0, r4, r3
 800a42a:	f7f6 f88b 	bl	8000544 <__aeabi_ui2d>
 800a42e:	2201      	movs	r2, #1
 800a430:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a434:	3e01      	subs	r6, #1
 800a436:	9212      	str	r2, [sp, #72]	@ 0x48
 800a438:	e776      	b.n	800a328 <_dtoa_r+0x100>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e7b7      	b.n	800a3ae <_dtoa_r+0x186>
 800a43e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a440:	e7b6      	b.n	800a3b0 <_dtoa_r+0x188>
 800a442:	9b00      	ldr	r3, [sp, #0]
 800a444:	1bdb      	subs	r3, r3, r7
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	427b      	negs	r3, r7
 800a44a:	9308      	str	r3, [sp, #32]
 800a44c:	2300      	movs	r3, #0
 800a44e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a450:	e7c3      	b.n	800a3da <_dtoa_r+0x1b2>
 800a452:	2301      	movs	r3, #1
 800a454:	9309      	str	r3, [sp, #36]	@ 0x24
 800a456:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a458:	eb07 0b03 	add.w	fp, r7, r3
 800a45c:	f10b 0301 	add.w	r3, fp, #1
 800a460:	2b01      	cmp	r3, #1
 800a462:	9303      	str	r3, [sp, #12]
 800a464:	bfb8      	it	lt
 800a466:	2301      	movlt	r3, #1
 800a468:	e006      	b.n	800a478 <_dtoa_r+0x250>
 800a46a:	2301      	movs	r3, #1
 800a46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a46e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a470:	2b00      	cmp	r3, #0
 800a472:	dd28      	ble.n	800a4c6 <_dtoa_r+0x29e>
 800a474:	469b      	mov	fp, r3
 800a476:	9303      	str	r3, [sp, #12]
 800a478:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a47c:	2100      	movs	r1, #0
 800a47e:	2204      	movs	r2, #4
 800a480:	f102 0514 	add.w	r5, r2, #20
 800a484:	429d      	cmp	r5, r3
 800a486:	d926      	bls.n	800a4d6 <_dtoa_r+0x2ae>
 800a488:	6041      	str	r1, [r0, #4]
 800a48a:	4648      	mov	r0, r9
 800a48c:	f000 fd9c 	bl	800afc8 <_Balloc>
 800a490:	4682      	mov	sl, r0
 800a492:	2800      	cmp	r0, #0
 800a494:	d142      	bne.n	800a51c <_dtoa_r+0x2f4>
 800a496:	4b1e      	ldr	r3, [pc, #120]	@ (800a510 <_dtoa_r+0x2e8>)
 800a498:	4602      	mov	r2, r0
 800a49a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a49e:	e6da      	b.n	800a256 <_dtoa_r+0x2e>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e7e3      	b.n	800a46c <_dtoa_r+0x244>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	e7d5      	b.n	800a454 <_dtoa_r+0x22c>
 800a4a8:	2401      	movs	r4, #1
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9307      	str	r3, [sp, #28]
 800a4ae:	9409      	str	r4, [sp, #36]	@ 0x24
 800a4b0:	f04f 3bff 	mov.w	fp, #4294967295
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a4ba:	2312      	movs	r3, #18
 800a4bc:	920c      	str	r2, [sp, #48]	@ 0x30
 800a4be:	e7db      	b.n	800a478 <_dtoa_r+0x250>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4c4:	e7f4      	b.n	800a4b0 <_dtoa_r+0x288>
 800a4c6:	f04f 0b01 	mov.w	fp, #1
 800a4ca:	f8cd b00c 	str.w	fp, [sp, #12]
 800a4ce:	465b      	mov	r3, fp
 800a4d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a4d4:	e7d0      	b.n	800a478 <_dtoa_r+0x250>
 800a4d6:	3101      	adds	r1, #1
 800a4d8:	0052      	lsls	r2, r2, #1
 800a4da:	e7d1      	b.n	800a480 <_dtoa_r+0x258>
 800a4dc:	f3af 8000 	nop.w
 800a4e0:	636f4361 	.word	0x636f4361
 800a4e4:	3fd287a7 	.word	0x3fd287a7
 800a4e8:	8b60c8b3 	.word	0x8b60c8b3
 800a4ec:	3fc68a28 	.word	0x3fc68a28
 800a4f0:	509f79fb 	.word	0x509f79fb
 800a4f4:	3fd34413 	.word	0x3fd34413
 800a4f8:	0800dc7e 	.word	0x0800dc7e
 800a4fc:	0800dc95 	.word	0x0800dc95
 800a500:	7ff00000 	.word	0x7ff00000
 800a504:	0800dc49 	.word	0x0800dc49
 800a508:	3ff80000 	.word	0x3ff80000
 800a50c:	0800de48 	.word	0x0800de48
 800a510:	0800dced 	.word	0x0800dced
 800a514:	0800dc7a 	.word	0x0800dc7a
 800a518:	0800dc48 	.word	0x0800dc48
 800a51c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a520:	6018      	str	r0, [r3, #0]
 800a522:	9b03      	ldr	r3, [sp, #12]
 800a524:	2b0e      	cmp	r3, #14
 800a526:	f200 80a1 	bhi.w	800a66c <_dtoa_r+0x444>
 800a52a:	2c00      	cmp	r4, #0
 800a52c:	f000 809e 	beq.w	800a66c <_dtoa_r+0x444>
 800a530:	2f00      	cmp	r7, #0
 800a532:	dd33      	ble.n	800a59c <_dtoa_r+0x374>
 800a534:	4b9c      	ldr	r3, [pc, #624]	@ (800a7a8 <_dtoa_r+0x580>)
 800a536:	f007 020f 	and.w	r2, r7, #15
 800a53a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a53e:	ed93 7b00 	vldr	d7, [r3]
 800a542:	05f8      	lsls	r0, r7, #23
 800a544:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a548:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a54c:	d516      	bpl.n	800a57c <_dtoa_r+0x354>
 800a54e:	4b97      	ldr	r3, [pc, #604]	@ (800a7ac <_dtoa_r+0x584>)
 800a550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a554:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a558:	f7f6 f998 	bl	800088c <__aeabi_ddiv>
 800a55c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a560:	f004 040f 	and.w	r4, r4, #15
 800a564:	2603      	movs	r6, #3
 800a566:	4d91      	ldr	r5, [pc, #580]	@ (800a7ac <_dtoa_r+0x584>)
 800a568:	b954      	cbnz	r4, 800a580 <_dtoa_r+0x358>
 800a56a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a56e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a572:	f7f6 f98b 	bl	800088c <__aeabi_ddiv>
 800a576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a57a:	e028      	b.n	800a5ce <_dtoa_r+0x3a6>
 800a57c:	2602      	movs	r6, #2
 800a57e:	e7f2      	b.n	800a566 <_dtoa_r+0x33e>
 800a580:	07e1      	lsls	r1, r4, #31
 800a582:	d508      	bpl.n	800a596 <_dtoa_r+0x36e>
 800a584:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a588:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a58c:	f7f6 f854 	bl	8000638 <__aeabi_dmul>
 800a590:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a594:	3601      	adds	r6, #1
 800a596:	1064      	asrs	r4, r4, #1
 800a598:	3508      	adds	r5, #8
 800a59a:	e7e5      	b.n	800a568 <_dtoa_r+0x340>
 800a59c:	f000 80af 	beq.w	800a6fe <_dtoa_r+0x4d6>
 800a5a0:	427c      	negs	r4, r7
 800a5a2:	4b81      	ldr	r3, [pc, #516]	@ (800a7a8 <_dtoa_r+0x580>)
 800a5a4:	4d81      	ldr	r5, [pc, #516]	@ (800a7ac <_dtoa_r+0x584>)
 800a5a6:	f004 020f 	and.w	r2, r4, #15
 800a5aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5b6:	f7f6 f83f 	bl	8000638 <__aeabi_dmul>
 800a5ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5be:	1124      	asrs	r4, r4, #4
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	2602      	movs	r6, #2
 800a5c4:	2c00      	cmp	r4, #0
 800a5c6:	f040 808f 	bne.w	800a6e8 <_dtoa_r+0x4c0>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1d3      	bne.n	800a576 <_dtoa_r+0x34e>
 800a5ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 8094 	beq.w	800a702 <_dtoa_r+0x4da>
 800a5da:	4b75      	ldr	r3, [pc, #468]	@ (800a7b0 <_dtoa_r+0x588>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	4620      	mov	r0, r4
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	f7f6 fa9b 	bl	8000b1c <__aeabi_dcmplt>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f000 808b 	beq.w	800a702 <_dtoa_r+0x4da>
 800a5ec:	9b03      	ldr	r3, [sp, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 8087 	beq.w	800a702 <_dtoa_r+0x4da>
 800a5f4:	f1bb 0f00 	cmp.w	fp, #0
 800a5f8:	dd34      	ble.n	800a664 <_dtoa_r+0x43c>
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	4b6d      	ldr	r3, [pc, #436]	@ (800a7b4 <_dtoa_r+0x58c>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	4629      	mov	r1, r5
 800a602:	f7f6 f819 	bl	8000638 <__aeabi_dmul>
 800a606:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a60a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a60e:	3601      	adds	r6, #1
 800a610:	465c      	mov	r4, fp
 800a612:	4630      	mov	r0, r6
 800a614:	f7f5 ffa6 	bl	8000564 <__aeabi_i2d>
 800a618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a61c:	f7f6 f80c 	bl	8000638 <__aeabi_dmul>
 800a620:	4b65      	ldr	r3, [pc, #404]	@ (800a7b8 <_dtoa_r+0x590>)
 800a622:	2200      	movs	r2, #0
 800a624:	f7f5 fe52 	bl	80002cc <__adddf3>
 800a628:	4605      	mov	r5, r0
 800a62a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a62e:	2c00      	cmp	r4, #0
 800a630:	d16a      	bne.n	800a708 <_dtoa_r+0x4e0>
 800a632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a636:	4b61      	ldr	r3, [pc, #388]	@ (800a7bc <_dtoa_r+0x594>)
 800a638:	2200      	movs	r2, #0
 800a63a:	f7f5 fe45 	bl	80002c8 <__aeabi_dsub>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a646:	462a      	mov	r2, r5
 800a648:	4633      	mov	r3, r6
 800a64a:	f7f6 fa85 	bl	8000b58 <__aeabi_dcmpgt>
 800a64e:	2800      	cmp	r0, #0
 800a650:	f040 8298 	bne.w	800ab84 <_dtoa_r+0x95c>
 800a654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a658:	462a      	mov	r2, r5
 800a65a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a65e:	f7f6 fa5d 	bl	8000b1c <__aeabi_dcmplt>
 800a662:	bb38      	cbnz	r0, 800a6b4 <_dtoa_r+0x48c>
 800a664:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a668:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a66c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f2c0 8157 	blt.w	800a922 <_dtoa_r+0x6fa>
 800a674:	2f0e      	cmp	r7, #14
 800a676:	f300 8154 	bgt.w	800a922 <_dtoa_r+0x6fa>
 800a67a:	4b4b      	ldr	r3, [pc, #300]	@ (800a7a8 <_dtoa_r+0x580>)
 800a67c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a680:	ed93 7b00 	vldr	d7, [r3]
 800a684:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a686:	2b00      	cmp	r3, #0
 800a688:	ed8d 7b00 	vstr	d7, [sp]
 800a68c:	f280 80e5 	bge.w	800a85a <_dtoa_r+0x632>
 800a690:	9b03      	ldr	r3, [sp, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	f300 80e1 	bgt.w	800a85a <_dtoa_r+0x632>
 800a698:	d10c      	bne.n	800a6b4 <_dtoa_r+0x48c>
 800a69a:	4b48      	ldr	r3, [pc, #288]	@ (800a7bc <_dtoa_r+0x594>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	ec51 0b17 	vmov	r0, r1, d7
 800a6a2:	f7f5 ffc9 	bl	8000638 <__aeabi_dmul>
 800a6a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6aa:	f7f6 fa4b 	bl	8000b44 <__aeabi_dcmpge>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f000 8266 	beq.w	800ab80 <_dtoa_r+0x958>
 800a6b4:	2400      	movs	r4, #0
 800a6b6:	4625      	mov	r5, r4
 800a6b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6ba:	4656      	mov	r6, sl
 800a6bc:	ea6f 0803 	mvn.w	r8, r3
 800a6c0:	2700      	movs	r7, #0
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	4648      	mov	r0, r9
 800a6c6:	f000 fcbf 	bl	800b048 <_Bfree>
 800a6ca:	2d00      	cmp	r5, #0
 800a6cc:	f000 80bd 	beq.w	800a84a <_dtoa_r+0x622>
 800a6d0:	b12f      	cbz	r7, 800a6de <_dtoa_r+0x4b6>
 800a6d2:	42af      	cmp	r7, r5
 800a6d4:	d003      	beq.n	800a6de <_dtoa_r+0x4b6>
 800a6d6:	4639      	mov	r1, r7
 800a6d8:	4648      	mov	r0, r9
 800a6da:	f000 fcb5 	bl	800b048 <_Bfree>
 800a6de:	4629      	mov	r1, r5
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	f000 fcb1 	bl	800b048 <_Bfree>
 800a6e6:	e0b0      	b.n	800a84a <_dtoa_r+0x622>
 800a6e8:	07e2      	lsls	r2, r4, #31
 800a6ea:	d505      	bpl.n	800a6f8 <_dtoa_r+0x4d0>
 800a6ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6f0:	f7f5 ffa2 	bl	8000638 <__aeabi_dmul>
 800a6f4:	3601      	adds	r6, #1
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	1064      	asrs	r4, r4, #1
 800a6fa:	3508      	adds	r5, #8
 800a6fc:	e762      	b.n	800a5c4 <_dtoa_r+0x39c>
 800a6fe:	2602      	movs	r6, #2
 800a700:	e765      	b.n	800a5ce <_dtoa_r+0x3a6>
 800a702:	9c03      	ldr	r4, [sp, #12]
 800a704:	46b8      	mov	r8, r7
 800a706:	e784      	b.n	800a612 <_dtoa_r+0x3ea>
 800a708:	4b27      	ldr	r3, [pc, #156]	@ (800a7a8 <_dtoa_r+0x580>)
 800a70a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a70c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a710:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a714:	4454      	add	r4, sl
 800a716:	2900      	cmp	r1, #0
 800a718:	d054      	beq.n	800a7c4 <_dtoa_r+0x59c>
 800a71a:	4929      	ldr	r1, [pc, #164]	@ (800a7c0 <_dtoa_r+0x598>)
 800a71c:	2000      	movs	r0, #0
 800a71e:	f7f6 f8b5 	bl	800088c <__aeabi_ddiv>
 800a722:	4633      	mov	r3, r6
 800a724:	462a      	mov	r2, r5
 800a726:	f7f5 fdcf 	bl	80002c8 <__aeabi_dsub>
 800a72a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a72e:	4656      	mov	r6, sl
 800a730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a734:	f7f6 fa30 	bl	8000b98 <__aeabi_d2iz>
 800a738:	4605      	mov	r5, r0
 800a73a:	f7f5 ff13 	bl	8000564 <__aeabi_i2d>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a746:	f7f5 fdbf 	bl	80002c8 <__aeabi_dsub>
 800a74a:	3530      	adds	r5, #48	@ 0x30
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a754:	f806 5b01 	strb.w	r5, [r6], #1
 800a758:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a75c:	f7f6 f9de 	bl	8000b1c <__aeabi_dcmplt>
 800a760:	2800      	cmp	r0, #0
 800a762:	d172      	bne.n	800a84a <_dtoa_r+0x622>
 800a764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a768:	4911      	ldr	r1, [pc, #68]	@ (800a7b0 <_dtoa_r+0x588>)
 800a76a:	2000      	movs	r0, #0
 800a76c:	f7f5 fdac 	bl	80002c8 <__aeabi_dsub>
 800a770:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a774:	f7f6 f9d2 	bl	8000b1c <__aeabi_dcmplt>
 800a778:	2800      	cmp	r0, #0
 800a77a:	f040 80b4 	bne.w	800a8e6 <_dtoa_r+0x6be>
 800a77e:	42a6      	cmp	r6, r4
 800a780:	f43f af70 	beq.w	800a664 <_dtoa_r+0x43c>
 800a784:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a788:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b4 <_dtoa_r+0x58c>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	f7f5 ff54 	bl	8000638 <__aeabi_dmul>
 800a790:	4b08      	ldr	r3, [pc, #32]	@ (800a7b4 <_dtoa_r+0x58c>)
 800a792:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a796:	2200      	movs	r2, #0
 800a798:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a79c:	f7f5 ff4c 	bl	8000638 <__aeabi_dmul>
 800a7a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7a4:	e7c4      	b.n	800a730 <_dtoa_r+0x508>
 800a7a6:	bf00      	nop
 800a7a8:	0800de48 	.word	0x0800de48
 800a7ac:	0800de20 	.word	0x0800de20
 800a7b0:	3ff00000 	.word	0x3ff00000
 800a7b4:	40240000 	.word	0x40240000
 800a7b8:	401c0000 	.word	0x401c0000
 800a7bc:	40140000 	.word	0x40140000
 800a7c0:	3fe00000 	.word	0x3fe00000
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f7f5 ff36 	bl	8000638 <__aeabi_dmul>
 800a7cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a7d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a7d2:	4656      	mov	r6, sl
 800a7d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7d8:	f7f6 f9de 	bl	8000b98 <__aeabi_d2iz>
 800a7dc:	4605      	mov	r5, r0
 800a7de:	f7f5 fec1 	bl	8000564 <__aeabi_i2d>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7ea:	f7f5 fd6d 	bl	80002c8 <__aeabi_dsub>
 800a7ee:	3530      	adds	r5, #48	@ 0x30
 800a7f0:	f806 5b01 	strb.w	r5, [r6], #1
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	42a6      	cmp	r6, r4
 800a7fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7fe:	f04f 0200 	mov.w	r2, #0
 800a802:	d124      	bne.n	800a84e <_dtoa_r+0x626>
 800a804:	4baf      	ldr	r3, [pc, #700]	@ (800aac4 <_dtoa_r+0x89c>)
 800a806:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a80a:	f7f5 fd5f 	bl	80002cc <__adddf3>
 800a80e:	4602      	mov	r2, r0
 800a810:	460b      	mov	r3, r1
 800a812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a816:	f7f6 f99f 	bl	8000b58 <__aeabi_dcmpgt>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d163      	bne.n	800a8e6 <_dtoa_r+0x6be>
 800a81e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a822:	49a8      	ldr	r1, [pc, #672]	@ (800aac4 <_dtoa_r+0x89c>)
 800a824:	2000      	movs	r0, #0
 800a826:	f7f5 fd4f 	bl	80002c8 <__aeabi_dsub>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a832:	f7f6 f973 	bl	8000b1c <__aeabi_dcmplt>
 800a836:	2800      	cmp	r0, #0
 800a838:	f43f af14 	beq.w	800a664 <_dtoa_r+0x43c>
 800a83c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a83e:	1e73      	subs	r3, r6, #1
 800a840:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a842:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a846:	2b30      	cmp	r3, #48	@ 0x30
 800a848:	d0f8      	beq.n	800a83c <_dtoa_r+0x614>
 800a84a:	4647      	mov	r7, r8
 800a84c:	e03b      	b.n	800a8c6 <_dtoa_r+0x69e>
 800a84e:	4b9e      	ldr	r3, [pc, #632]	@ (800aac8 <_dtoa_r+0x8a0>)
 800a850:	f7f5 fef2 	bl	8000638 <__aeabi_dmul>
 800a854:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a858:	e7bc      	b.n	800a7d4 <_dtoa_r+0x5ac>
 800a85a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a85e:	4656      	mov	r6, sl
 800a860:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a864:	4620      	mov	r0, r4
 800a866:	4629      	mov	r1, r5
 800a868:	f7f6 f810 	bl	800088c <__aeabi_ddiv>
 800a86c:	f7f6 f994 	bl	8000b98 <__aeabi_d2iz>
 800a870:	4680      	mov	r8, r0
 800a872:	f7f5 fe77 	bl	8000564 <__aeabi_i2d>
 800a876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a87a:	f7f5 fedd 	bl	8000638 <__aeabi_dmul>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	4620      	mov	r0, r4
 800a884:	4629      	mov	r1, r5
 800a886:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a88a:	f7f5 fd1d 	bl	80002c8 <__aeabi_dsub>
 800a88e:	f806 4b01 	strb.w	r4, [r6], #1
 800a892:	9d03      	ldr	r5, [sp, #12]
 800a894:	eba6 040a 	sub.w	r4, r6, sl
 800a898:	42a5      	cmp	r5, r4
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	d133      	bne.n	800a908 <_dtoa_r+0x6e0>
 800a8a0:	f7f5 fd14 	bl	80002cc <__adddf3>
 800a8a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	f7f6 f954 	bl	8000b58 <__aeabi_dcmpgt>
 800a8b0:	b9c0      	cbnz	r0, 800a8e4 <_dtoa_r+0x6bc>
 800a8b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f6 f925 	bl	8000b08 <__aeabi_dcmpeq>
 800a8be:	b110      	cbz	r0, 800a8c6 <_dtoa_r+0x69e>
 800a8c0:	f018 0f01 	tst.w	r8, #1
 800a8c4:	d10e      	bne.n	800a8e4 <_dtoa_r+0x6bc>
 800a8c6:	9902      	ldr	r1, [sp, #8]
 800a8c8:	4648      	mov	r0, r9
 800a8ca:	f000 fbbd 	bl	800b048 <_Bfree>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	7033      	strb	r3, [r6, #0]
 800a8d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8d4:	3701      	adds	r7, #1
 800a8d6:	601f      	str	r7, [r3, #0]
 800a8d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 824b 	beq.w	800ad76 <_dtoa_r+0xb4e>
 800a8e0:	601e      	str	r6, [r3, #0]
 800a8e2:	e248      	b.n	800ad76 <_dtoa_r+0xb4e>
 800a8e4:	46b8      	mov	r8, r7
 800a8e6:	4633      	mov	r3, r6
 800a8e8:	461e      	mov	r6, r3
 800a8ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8ee:	2a39      	cmp	r2, #57	@ 0x39
 800a8f0:	d106      	bne.n	800a900 <_dtoa_r+0x6d8>
 800a8f2:	459a      	cmp	sl, r3
 800a8f4:	d1f8      	bne.n	800a8e8 <_dtoa_r+0x6c0>
 800a8f6:	2230      	movs	r2, #48	@ 0x30
 800a8f8:	f108 0801 	add.w	r8, r8, #1
 800a8fc:	f88a 2000 	strb.w	r2, [sl]
 800a900:	781a      	ldrb	r2, [r3, #0]
 800a902:	3201      	adds	r2, #1
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	e7a0      	b.n	800a84a <_dtoa_r+0x622>
 800a908:	4b6f      	ldr	r3, [pc, #444]	@ (800aac8 <_dtoa_r+0x8a0>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	f7f5 fe94 	bl	8000638 <__aeabi_dmul>
 800a910:	2200      	movs	r2, #0
 800a912:	2300      	movs	r3, #0
 800a914:	4604      	mov	r4, r0
 800a916:	460d      	mov	r5, r1
 800a918:	f7f6 f8f6 	bl	8000b08 <__aeabi_dcmpeq>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d09f      	beq.n	800a860 <_dtoa_r+0x638>
 800a920:	e7d1      	b.n	800a8c6 <_dtoa_r+0x69e>
 800a922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a924:	2a00      	cmp	r2, #0
 800a926:	f000 80ea 	beq.w	800aafe <_dtoa_r+0x8d6>
 800a92a:	9a07      	ldr	r2, [sp, #28]
 800a92c:	2a01      	cmp	r2, #1
 800a92e:	f300 80cd 	bgt.w	800aacc <_dtoa_r+0x8a4>
 800a932:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a934:	2a00      	cmp	r2, #0
 800a936:	f000 80c1 	beq.w	800aabc <_dtoa_r+0x894>
 800a93a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a93e:	9c08      	ldr	r4, [sp, #32]
 800a940:	9e00      	ldr	r6, [sp, #0]
 800a942:	9a00      	ldr	r2, [sp, #0]
 800a944:	441a      	add	r2, r3
 800a946:	9200      	str	r2, [sp, #0]
 800a948:	9a06      	ldr	r2, [sp, #24]
 800a94a:	2101      	movs	r1, #1
 800a94c:	441a      	add	r2, r3
 800a94e:	4648      	mov	r0, r9
 800a950:	9206      	str	r2, [sp, #24]
 800a952:	f000 fc77 	bl	800b244 <__i2b>
 800a956:	4605      	mov	r5, r0
 800a958:	b166      	cbz	r6, 800a974 <_dtoa_r+0x74c>
 800a95a:	9b06      	ldr	r3, [sp, #24]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd09      	ble.n	800a974 <_dtoa_r+0x74c>
 800a960:	42b3      	cmp	r3, r6
 800a962:	9a00      	ldr	r2, [sp, #0]
 800a964:	bfa8      	it	ge
 800a966:	4633      	movge	r3, r6
 800a968:	1ad2      	subs	r2, r2, r3
 800a96a:	9200      	str	r2, [sp, #0]
 800a96c:	9a06      	ldr	r2, [sp, #24]
 800a96e:	1af6      	subs	r6, r6, r3
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	9306      	str	r3, [sp, #24]
 800a974:	9b08      	ldr	r3, [sp, #32]
 800a976:	b30b      	cbz	r3, 800a9bc <_dtoa_r+0x794>
 800a978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 80c6 	beq.w	800ab0c <_dtoa_r+0x8e4>
 800a980:	2c00      	cmp	r4, #0
 800a982:	f000 80c0 	beq.w	800ab06 <_dtoa_r+0x8de>
 800a986:	4629      	mov	r1, r5
 800a988:	4622      	mov	r2, r4
 800a98a:	4648      	mov	r0, r9
 800a98c:	f000 fd12 	bl	800b3b4 <__pow5mult>
 800a990:	9a02      	ldr	r2, [sp, #8]
 800a992:	4601      	mov	r1, r0
 800a994:	4605      	mov	r5, r0
 800a996:	4648      	mov	r0, r9
 800a998:	f000 fc6a 	bl	800b270 <__multiply>
 800a99c:	9902      	ldr	r1, [sp, #8]
 800a99e:	4680      	mov	r8, r0
 800a9a0:	4648      	mov	r0, r9
 800a9a2:	f000 fb51 	bl	800b048 <_Bfree>
 800a9a6:	9b08      	ldr	r3, [sp, #32]
 800a9a8:	1b1b      	subs	r3, r3, r4
 800a9aa:	9308      	str	r3, [sp, #32]
 800a9ac:	f000 80b1 	beq.w	800ab12 <_dtoa_r+0x8ea>
 800a9b0:	9a08      	ldr	r2, [sp, #32]
 800a9b2:	4641      	mov	r1, r8
 800a9b4:	4648      	mov	r0, r9
 800a9b6:	f000 fcfd 	bl	800b3b4 <__pow5mult>
 800a9ba:	9002      	str	r0, [sp, #8]
 800a9bc:	2101      	movs	r1, #1
 800a9be:	4648      	mov	r0, r9
 800a9c0:	f000 fc40 	bl	800b244 <__i2b>
 800a9c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 81d8 	beq.w	800ad7e <_dtoa_r+0xb56>
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	4601      	mov	r1, r0
 800a9d2:	4648      	mov	r0, r9
 800a9d4:	f000 fcee 	bl	800b3b4 <__pow5mult>
 800a9d8:	9b07      	ldr	r3, [sp, #28]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	4604      	mov	r4, r0
 800a9de:	f300 809f 	bgt.w	800ab20 <_dtoa_r+0x8f8>
 800a9e2:	9b04      	ldr	r3, [sp, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f040 8097 	bne.w	800ab18 <_dtoa_r+0x8f0>
 800a9ea:	9b05      	ldr	r3, [sp, #20]
 800a9ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f040 8093 	bne.w	800ab1c <_dtoa_r+0x8f4>
 800a9f6:	9b05      	ldr	r3, [sp, #20]
 800a9f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9fc:	0d1b      	lsrs	r3, r3, #20
 800a9fe:	051b      	lsls	r3, r3, #20
 800aa00:	b133      	cbz	r3, 800aa10 <_dtoa_r+0x7e8>
 800aa02:	9b00      	ldr	r3, [sp, #0]
 800aa04:	3301      	adds	r3, #1
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	9b06      	ldr	r3, [sp, #24]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	9306      	str	r3, [sp, #24]
 800aa0e:	2301      	movs	r3, #1
 800aa10:	9308      	str	r3, [sp, #32]
 800aa12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 81b8 	beq.w	800ad8a <_dtoa_r+0xb62>
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa20:	6918      	ldr	r0, [r3, #16]
 800aa22:	f000 fbc3 	bl	800b1ac <__hi0bits>
 800aa26:	f1c0 0020 	rsb	r0, r0, #32
 800aa2a:	9b06      	ldr	r3, [sp, #24]
 800aa2c:	4418      	add	r0, r3
 800aa2e:	f010 001f 	ands.w	r0, r0, #31
 800aa32:	f000 8082 	beq.w	800ab3a <_dtoa_r+0x912>
 800aa36:	f1c0 0320 	rsb	r3, r0, #32
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	dd73      	ble.n	800ab26 <_dtoa_r+0x8fe>
 800aa3e:	9b00      	ldr	r3, [sp, #0]
 800aa40:	f1c0 001c 	rsb	r0, r0, #28
 800aa44:	4403      	add	r3, r0
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	9b06      	ldr	r3, [sp, #24]
 800aa4a:	4403      	add	r3, r0
 800aa4c:	4406      	add	r6, r0
 800aa4e:	9306      	str	r3, [sp, #24]
 800aa50:	9b00      	ldr	r3, [sp, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dd05      	ble.n	800aa62 <_dtoa_r+0x83a>
 800aa56:	9902      	ldr	r1, [sp, #8]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	4648      	mov	r0, r9
 800aa5c:	f000 fd04 	bl	800b468 <__lshift>
 800aa60:	9002      	str	r0, [sp, #8]
 800aa62:	9b06      	ldr	r3, [sp, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	dd05      	ble.n	800aa74 <_dtoa_r+0x84c>
 800aa68:	4621      	mov	r1, r4
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	4648      	mov	r0, r9
 800aa6e:	f000 fcfb 	bl	800b468 <__lshift>
 800aa72:	4604      	mov	r4, r0
 800aa74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d061      	beq.n	800ab3e <_dtoa_r+0x916>
 800aa7a:	9802      	ldr	r0, [sp, #8]
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	f000 fd5f 	bl	800b540 <__mcmp>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	da5b      	bge.n	800ab3e <_dtoa_r+0x916>
 800aa86:	2300      	movs	r3, #0
 800aa88:	9902      	ldr	r1, [sp, #8]
 800aa8a:	220a      	movs	r2, #10
 800aa8c:	4648      	mov	r0, r9
 800aa8e:	f000 fafd 	bl	800b08c <__multadd>
 800aa92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa94:	9002      	str	r0, [sp, #8]
 800aa96:	f107 38ff 	add.w	r8, r7, #4294967295
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f000 8177 	beq.w	800ad8e <_dtoa_r+0xb66>
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	220a      	movs	r2, #10
 800aaa6:	4648      	mov	r0, r9
 800aaa8:	f000 faf0 	bl	800b08c <__multadd>
 800aaac:	f1bb 0f00 	cmp.w	fp, #0
 800aab0:	4605      	mov	r5, r0
 800aab2:	dc6f      	bgt.n	800ab94 <_dtoa_r+0x96c>
 800aab4:	9b07      	ldr	r3, [sp, #28]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	dc49      	bgt.n	800ab4e <_dtoa_r+0x926>
 800aaba:	e06b      	b.n	800ab94 <_dtoa_r+0x96c>
 800aabc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aabe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aac2:	e73c      	b.n	800a93e <_dtoa_r+0x716>
 800aac4:	3fe00000 	.word	0x3fe00000
 800aac8:	40240000 	.word	0x40240000
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	1e5c      	subs	r4, r3, #1
 800aad0:	9b08      	ldr	r3, [sp, #32]
 800aad2:	42a3      	cmp	r3, r4
 800aad4:	db09      	blt.n	800aaea <_dtoa_r+0x8c2>
 800aad6:	1b1c      	subs	r4, r3, r4
 800aad8:	9b03      	ldr	r3, [sp, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f6bf af30 	bge.w	800a940 <_dtoa_r+0x718>
 800aae0:	9b00      	ldr	r3, [sp, #0]
 800aae2:	9a03      	ldr	r2, [sp, #12]
 800aae4:	1a9e      	subs	r6, r3, r2
 800aae6:	2300      	movs	r3, #0
 800aae8:	e72b      	b.n	800a942 <_dtoa_r+0x71a>
 800aaea:	9b08      	ldr	r3, [sp, #32]
 800aaec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aaee:	9408      	str	r4, [sp, #32]
 800aaf0:	1ae3      	subs	r3, r4, r3
 800aaf2:	441a      	add	r2, r3
 800aaf4:	9e00      	ldr	r6, [sp, #0]
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	920d      	str	r2, [sp, #52]	@ 0x34
 800aafa:	2400      	movs	r4, #0
 800aafc:	e721      	b.n	800a942 <_dtoa_r+0x71a>
 800aafe:	9c08      	ldr	r4, [sp, #32]
 800ab00:	9e00      	ldr	r6, [sp, #0]
 800ab02:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ab04:	e728      	b.n	800a958 <_dtoa_r+0x730>
 800ab06:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ab0a:	e751      	b.n	800a9b0 <_dtoa_r+0x788>
 800ab0c:	9a08      	ldr	r2, [sp, #32]
 800ab0e:	9902      	ldr	r1, [sp, #8]
 800ab10:	e750      	b.n	800a9b4 <_dtoa_r+0x78c>
 800ab12:	f8cd 8008 	str.w	r8, [sp, #8]
 800ab16:	e751      	b.n	800a9bc <_dtoa_r+0x794>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	e779      	b.n	800aa10 <_dtoa_r+0x7e8>
 800ab1c:	9b04      	ldr	r3, [sp, #16]
 800ab1e:	e777      	b.n	800aa10 <_dtoa_r+0x7e8>
 800ab20:	2300      	movs	r3, #0
 800ab22:	9308      	str	r3, [sp, #32]
 800ab24:	e779      	b.n	800aa1a <_dtoa_r+0x7f2>
 800ab26:	d093      	beq.n	800aa50 <_dtoa_r+0x828>
 800ab28:	9a00      	ldr	r2, [sp, #0]
 800ab2a:	331c      	adds	r3, #28
 800ab2c:	441a      	add	r2, r3
 800ab2e:	9200      	str	r2, [sp, #0]
 800ab30:	9a06      	ldr	r2, [sp, #24]
 800ab32:	441a      	add	r2, r3
 800ab34:	441e      	add	r6, r3
 800ab36:	9206      	str	r2, [sp, #24]
 800ab38:	e78a      	b.n	800aa50 <_dtoa_r+0x828>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	e7f4      	b.n	800ab28 <_dtoa_r+0x900>
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	46b8      	mov	r8, r7
 800ab44:	dc20      	bgt.n	800ab88 <_dtoa_r+0x960>
 800ab46:	469b      	mov	fp, r3
 800ab48:	9b07      	ldr	r3, [sp, #28]
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	dd1e      	ble.n	800ab8c <_dtoa_r+0x964>
 800ab4e:	f1bb 0f00 	cmp.w	fp, #0
 800ab52:	f47f adb1 	bne.w	800a6b8 <_dtoa_r+0x490>
 800ab56:	4621      	mov	r1, r4
 800ab58:	465b      	mov	r3, fp
 800ab5a:	2205      	movs	r2, #5
 800ab5c:	4648      	mov	r0, r9
 800ab5e:	f000 fa95 	bl	800b08c <__multadd>
 800ab62:	4601      	mov	r1, r0
 800ab64:	4604      	mov	r4, r0
 800ab66:	9802      	ldr	r0, [sp, #8]
 800ab68:	f000 fcea 	bl	800b540 <__mcmp>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f77f ada3 	ble.w	800a6b8 <_dtoa_r+0x490>
 800ab72:	4656      	mov	r6, sl
 800ab74:	2331      	movs	r3, #49	@ 0x31
 800ab76:	f806 3b01 	strb.w	r3, [r6], #1
 800ab7a:	f108 0801 	add.w	r8, r8, #1
 800ab7e:	e59f      	b.n	800a6c0 <_dtoa_r+0x498>
 800ab80:	9c03      	ldr	r4, [sp, #12]
 800ab82:	46b8      	mov	r8, r7
 800ab84:	4625      	mov	r5, r4
 800ab86:	e7f4      	b.n	800ab72 <_dtoa_r+0x94a>
 800ab88:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ab8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 8101 	beq.w	800ad96 <_dtoa_r+0xb6e>
 800ab94:	2e00      	cmp	r6, #0
 800ab96:	dd05      	ble.n	800aba4 <_dtoa_r+0x97c>
 800ab98:	4629      	mov	r1, r5
 800ab9a:	4632      	mov	r2, r6
 800ab9c:	4648      	mov	r0, r9
 800ab9e:	f000 fc63 	bl	800b468 <__lshift>
 800aba2:	4605      	mov	r5, r0
 800aba4:	9b08      	ldr	r3, [sp, #32]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d05c      	beq.n	800ac64 <_dtoa_r+0xa3c>
 800abaa:	6869      	ldr	r1, [r5, #4]
 800abac:	4648      	mov	r0, r9
 800abae:	f000 fa0b 	bl	800afc8 <_Balloc>
 800abb2:	4606      	mov	r6, r0
 800abb4:	b928      	cbnz	r0, 800abc2 <_dtoa_r+0x99a>
 800abb6:	4b82      	ldr	r3, [pc, #520]	@ (800adc0 <_dtoa_r+0xb98>)
 800abb8:	4602      	mov	r2, r0
 800abba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800abbe:	f7ff bb4a 	b.w	800a256 <_dtoa_r+0x2e>
 800abc2:	692a      	ldr	r2, [r5, #16]
 800abc4:	3202      	adds	r2, #2
 800abc6:	0092      	lsls	r2, r2, #2
 800abc8:	f105 010c 	add.w	r1, r5, #12
 800abcc:	300c      	adds	r0, #12
 800abce:	f002 f92f 	bl	800ce30 <memcpy>
 800abd2:	2201      	movs	r2, #1
 800abd4:	4631      	mov	r1, r6
 800abd6:	4648      	mov	r0, r9
 800abd8:	f000 fc46 	bl	800b468 <__lshift>
 800abdc:	f10a 0301 	add.w	r3, sl, #1
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	eb0a 030b 	add.w	r3, sl, fp
 800abe6:	9308      	str	r3, [sp, #32]
 800abe8:	9b04      	ldr	r3, [sp, #16]
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	462f      	mov	r7, r5
 800abf0:	9306      	str	r3, [sp, #24]
 800abf2:	4605      	mov	r5, r0
 800abf4:	9b00      	ldr	r3, [sp, #0]
 800abf6:	9802      	ldr	r0, [sp, #8]
 800abf8:	4621      	mov	r1, r4
 800abfa:	f103 3bff 	add.w	fp, r3, #4294967295
 800abfe:	f7ff fa8b 	bl	800a118 <quorem>
 800ac02:	4603      	mov	r3, r0
 800ac04:	3330      	adds	r3, #48	@ 0x30
 800ac06:	9003      	str	r0, [sp, #12]
 800ac08:	4639      	mov	r1, r7
 800ac0a:	9802      	ldr	r0, [sp, #8]
 800ac0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac0e:	f000 fc97 	bl	800b540 <__mcmp>
 800ac12:	462a      	mov	r2, r5
 800ac14:	9004      	str	r0, [sp, #16]
 800ac16:	4621      	mov	r1, r4
 800ac18:	4648      	mov	r0, r9
 800ac1a:	f000 fcad 	bl	800b578 <__mdiff>
 800ac1e:	68c2      	ldr	r2, [r0, #12]
 800ac20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac22:	4606      	mov	r6, r0
 800ac24:	bb02      	cbnz	r2, 800ac68 <_dtoa_r+0xa40>
 800ac26:	4601      	mov	r1, r0
 800ac28:	9802      	ldr	r0, [sp, #8]
 800ac2a:	f000 fc89 	bl	800b540 <__mcmp>
 800ac2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac30:	4602      	mov	r2, r0
 800ac32:	4631      	mov	r1, r6
 800ac34:	4648      	mov	r0, r9
 800ac36:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac3a:	f000 fa05 	bl	800b048 <_Bfree>
 800ac3e:	9b07      	ldr	r3, [sp, #28]
 800ac40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac42:	9e00      	ldr	r6, [sp, #0]
 800ac44:	ea42 0103 	orr.w	r1, r2, r3
 800ac48:	9b06      	ldr	r3, [sp, #24]
 800ac4a:	4319      	orrs	r1, r3
 800ac4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4e:	d10d      	bne.n	800ac6c <_dtoa_r+0xa44>
 800ac50:	2b39      	cmp	r3, #57	@ 0x39
 800ac52:	d027      	beq.n	800aca4 <_dtoa_r+0xa7c>
 800ac54:	9a04      	ldr	r2, [sp, #16]
 800ac56:	2a00      	cmp	r2, #0
 800ac58:	dd01      	ble.n	800ac5e <_dtoa_r+0xa36>
 800ac5a:	9b03      	ldr	r3, [sp, #12]
 800ac5c:	3331      	adds	r3, #49	@ 0x31
 800ac5e:	f88b 3000 	strb.w	r3, [fp]
 800ac62:	e52e      	b.n	800a6c2 <_dtoa_r+0x49a>
 800ac64:	4628      	mov	r0, r5
 800ac66:	e7b9      	b.n	800abdc <_dtoa_r+0x9b4>
 800ac68:	2201      	movs	r2, #1
 800ac6a:	e7e2      	b.n	800ac32 <_dtoa_r+0xa0a>
 800ac6c:	9904      	ldr	r1, [sp, #16]
 800ac6e:	2900      	cmp	r1, #0
 800ac70:	db04      	blt.n	800ac7c <_dtoa_r+0xa54>
 800ac72:	9807      	ldr	r0, [sp, #28]
 800ac74:	4301      	orrs	r1, r0
 800ac76:	9806      	ldr	r0, [sp, #24]
 800ac78:	4301      	orrs	r1, r0
 800ac7a:	d120      	bne.n	800acbe <_dtoa_r+0xa96>
 800ac7c:	2a00      	cmp	r2, #0
 800ac7e:	ddee      	ble.n	800ac5e <_dtoa_r+0xa36>
 800ac80:	9902      	ldr	r1, [sp, #8]
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	2201      	movs	r2, #1
 800ac86:	4648      	mov	r0, r9
 800ac88:	f000 fbee 	bl	800b468 <__lshift>
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	9002      	str	r0, [sp, #8]
 800ac90:	f000 fc56 	bl	800b540 <__mcmp>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	9b00      	ldr	r3, [sp, #0]
 800ac98:	dc02      	bgt.n	800aca0 <_dtoa_r+0xa78>
 800ac9a:	d1e0      	bne.n	800ac5e <_dtoa_r+0xa36>
 800ac9c:	07da      	lsls	r2, r3, #31
 800ac9e:	d5de      	bpl.n	800ac5e <_dtoa_r+0xa36>
 800aca0:	2b39      	cmp	r3, #57	@ 0x39
 800aca2:	d1da      	bne.n	800ac5a <_dtoa_r+0xa32>
 800aca4:	2339      	movs	r3, #57	@ 0x39
 800aca6:	f88b 3000 	strb.w	r3, [fp]
 800acaa:	4633      	mov	r3, r6
 800acac:	461e      	mov	r6, r3
 800acae:	3b01      	subs	r3, #1
 800acb0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800acb4:	2a39      	cmp	r2, #57	@ 0x39
 800acb6:	d04e      	beq.n	800ad56 <_dtoa_r+0xb2e>
 800acb8:	3201      	adds	r2, #1
 800acba:	701a      	strb	r2, [r3, #0]
 800acbc:	e501      	b.n	800a6c2 <_dtoa_r+0x49a>
 800acbe:	2a00      	cmp	r2, #0
 800acc0:	dd03      	ble.n	800acca <_dtoa_r+0xaa2>
 800acc2:	2b39      	cmp	r3, #57	@ 0x39
 800acc4:	d0ee      	beq.n	800aca4 <_dtoa_r+0xa7c>
 800acc6:	3301      	adds	r3, #1
 800acc8:	e7c9      	b.n	800ac5e <_dtoa_r+0xa36>
 800acca:	9a00      	ldr	r2, [sp, #0]
 800accc:	9908      	ldr	r1, [sp, #32]
 800acce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800acd2:	428a      	cmp	r2, r1
 800acd4:	d028      	beq.n	800ad28 <_dtoa_r+0xb00>
 800acd6:	9902      	ldr	r1, [sp, #8]
 800acd8:	2300      	movs	r3, #0
 800acda:	220a      	movs	r2, #10
 800acdc:	4648      	mov	r0, r9
 800acde:	f000 f9d5 	bl	800b08c <__multadd>
 800ace2:	42af      	cmp	r7, r5
 800ace4:	9002      	str	r0, [sp, #8]
 800ace6:	f04f 0300 	mov.w	r3, #0
 800acea:	f04f 020a 	mov.w	r2, #10
 800acee:	4639      	mov	r1, r7
 800acf0:	4648      	mov	r0, r9
 800acf2:	d107      	bne.n	800ad04 <_dtoa_r+0xadc>
 800acf4:	f000 f9ca 	bl	800b08c <__multadd>
 800acf8:	4607      	mov	r7, r0
 800acfa:	4605      	mov	r5, r0
 800acfc:	9b00      	ldr	r3, [sp, #0]
 800acfe:	3301      	adds	r3, #1
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	e777      	b.n	800abf4 <_dtoa_r+0x9cc>
 800ad04:	f000 f9c2 	bl	800b08c <__multadd>
 800ad08:	4629      	mov	r1, r5
 800ad0a:	4607      	mov	r7, r0
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	220a      	movs	r2, #10
 800ad10:	4648      	mov	r0, r9
 800ad12:	f000 f9bb 	bl	800b08c <__multadd>
 800ad16:	4605      	mov	r5, r0
 800ad18:	e7f0      	b.n	800acfc <_dtoa_r+0xad4>
 800ad1a:	f1bb 0f00 	cmp.w	fp, #0
 800ad1e:	bfcc      	ite	gt
 800ad20:	465e      	movgt	r6, fp
 800ad22:	2601      	movle	r6, #1
 800ad24:	4456      	add	r6, sl
 800ad26:	2700      	movs	r7, #0
 800ad28:	9902      	ldr	r1, [sp, #8]
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	4648      	mov	r0, r9
 800ad30:	f000 fb9a 	bl	800b468 <__lshift>
 800ad34:	4621      	mov	r1, r4
 800ad36:	9002      	str	r0, [sp, #8]
 800ad38:	f000 fc02 	bl	800b540 <__mcmp>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	dcb4      	bgt.n	800acaa <_dtoa_r+0xa82>
 800ad40:	d102      	bne.n	800ad48 <_dtoa_r+0xb20>
 800ad42:	9b00      	ldr	r3, [sp, #0]
 800ad44:	07db      	lsls	r3, r3, #31
 800ad46:	d4b0      	bmi.n	800acaa <_dtoa_r+0xa82>
 800ad48:	4633      	mov	r3, r6
 800ad4a:	461e      	mov	r6, r3
 800ad4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad50:	2a30      	cmp	r2, #48	@ 0x30
 800ad52:	d0fa      	beq.n	800ad4a <_dtoa_r+0xb22>
 800ad54:	e4b5      	b.n	800a6c2 <_dtoa_r+0x49a>
 800ad56:	459a      	cmp	sl, r3
 800ad58:	d1a8      	bne.n	800acac <_dtoa_r+0xa84>
 800ad5a:	2331      	movs	r3, #49	@ 0x31
 800ad5c:	f108 0801 	add.w	r8, r8, #1
 800ad60:	f88a 3000 	strb.w	r3, [sl]
 800ad64:	e4ad      	b.n	800a6c2 <_dtoa_r+0x49a>
 800ad66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800adc4 <_dtoa_r+0xb9c>
 800ad6c:	b11b      	cbz	r3, 800ad76 <_dtoa_r+0xb4e>
 800ad6e:	f10a 0308 	add.w	r3, sl, #8
 800ad72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	4650      	mov	r0, sl
 800ad78:	b017      	add	sp, #92	@ 0x5c
 800ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7e:	9b07      	ldr	r3, [sp, #28]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	f77f ae2e 	ble.w	800a9e2 <_dtoa_r+0x7ba>
 800ad86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad88:	9308      	str	r3, [sp, #32]
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	e64d      	b.n	800aa2a <_dtoa_r+0x802>
 800ad8e:	f1bb 0f00 	cmp.w	fp, #0
 800ad92:	f77f aed9 	ble.w	800ab48 <_dtoa_r+0x920>
 800ad96:	4656      	mov	r6, sl
 800ad98:	9802      	ldr	r0, [sp, #8]
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	f7ff f9bc 	bl	800a118 <quorem>
 800ada0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ada4:	f806 3b01 	strb.w	r3, [r6], #1
 800ada8:	eba6 020a 	sub.w	r2, r6, sl
 800adac:	4593      	cmp	fp, r2
 800adae:	ddb4      	ble.n	800ad1a <_dtoa_r+0xaf2>
 800adb0:	9902      	ldr	r1, [sp, #8]
 800adb2:	2300      	movs	r3, #0
 800adb4:	220a      	movs	r2, #10
 800adb6:	4648      	mov	r0, r9
 800adb8:	f000 f968 	bl	800b08c <__multadd>
 800adbc:	9002      	str	r0, [sp, #8]
 800adbe:	e7eb      	b.n	800ad98 <_dtoa_r+0xb70>
 800adc0:	0800dced 	.word	0x0800dced
 800adc4:	0800dc71 	.word	0x0800dc71

0800adc8 <_free_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4605      	mov	r5, r0
 800adcc:	2900      	cmp	r1, #0
 800adce:	d041      	beq.n	800ae54 <_free_r+0x8c>
 800add0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add4:	1f0c      	subs	r4, r1, #4
 800add6:	2b00      	cmp	r3, #0
 800add8:	bfb8      	it	lt
 800adda:	18e4      	addlt	r4, r4, r3
 800addc:	f000 f8e8 	bl	800afb0 <__malloc_lock>
 800ade0:	4a1d      	ldr	r2, [pc, #116]	@ (800ae58 <_free_r+0x90>)
 800ade2:	6813      	ldr	r3, [r2, #0]
 800ade4:	b933      	cbnz	r3, 800adf4 <_free_r+0x2c>
 800ade6:	6063      	str	r3, [r4, #4]
 800ade8:	6014      	str	r4, [r2, #0]
 800adea:	4628      	mov	r0, r5
 800adec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adf0:	f000 b8e4 	b.w	800afbc <__malloc_unlock>
 800adf4:	42a3      	cmp	r3, r4
 800adf6:	d908      	bls.n	800ae0a <_free_r+0x42>
 800adf8:	6820      	ldr	r0, [r4, #0]
 800adfa:	1821      	adds	r1, r4, r0
 800adfc:	428b      	cmp	r3, r1
 800adfe:	bf01      	itttt	eq
 800ae00:	6819      	ldreq	r1, [r3, #0]
 800ae02:	685b      	ldreq	r3, [r3, #4]
 800ae04:	1809      	addeq	r1, r1, r0
 800ae06:	6021      	streq	r1, [r4, #0]
 800ae08:	e7ed      	b.n	800ade6 <_free_r+0x1e>
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	b10b      	cbz	r3, 800ae14 <_free_r+0x4c>
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	d9fa      	bls.n	800ae0a <_free_r+0x42>
 800ae14:	6811      	ldr	r1, [r2, #0]
 800ae16:	1850      	adds	r0, r2, r1
 800ae18:	42a0      	cmp	r0, r4
 800ae1a:	d10b      	bne.n	800ae34 <_free_r+0x6c>
 800ae1c:	6820      	ldr	r0, [r4, #0]
 800ae1e:	4401      	add	r1, r0
 800ae20:	1850      	adds	r0, r2, r1
 800ae22:	4283      	cmp	r3, r0
 800ae24:	6011      	str	r1, [r2, #0]
 800ae26:	d1e0      	bne.n	800adea <_free_r+0x22>
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	6053      	str	r3, [r2, #4]
 800ae2e:	4408      	add	r0, r1
 800ae30:	6010      	str	r0, [r2, #0]
 800ae32:	e7da      	b.n	800adea <_free_r+0x22>
 800ae34:	d902      	bls.n	800ae3c <_free_r+0x74>
 800ae36:	230c      	movs	r3, #12
 800ae38:	602b      	str	r3, [r5, #0]
 800ae3a:	e7d6      	b.n	800adea <_free_r+0x22>
 800ae3c:	6820      	ldr	r0, [r4, #0]
 800ae3e:	1821      	adds	r1, r4, r0
 800ae40:	428b      	cmp	r3, r1
 800ae42:	bf04      	itt	eq
 800ae44:	6819      	ldreq	r1, [r3, #0]
 800ae46:	685b      	ldreq	r3, [r3, #4]
 800ae48:	6063      	str	r3, [r4, #4]
 800ae4a:	bf04      	itt	eq
 800ae4c:	1809      	addeq	r1, r1, r0
 800ae4e:	6021      	streq	r1, [r4, #0]
 800ae50:	6054      	str	r4, [r2, #4]
 800ae52:	e7ca      	b.n	800adea <_free_r+0x22>
 800ae54:	bd38      	pop	{r3, r4, r5, pc}
 800ae56:	bf00      	nop
 800ae58:	20000620 	.word	0x20000620

0800ae5c <malloc>:
 800ae5c:	4b02      	ldr	r3, [pc, #8]	@ (800ae68 <malloc+0xc>)
 800ae5e:	4601      	mov	r1, r0
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	f000 b825 	b.w	800aeb0 <_malloc_r>
 800ae66:	bf00      	nop
 800ae68:	2000001c 	.word	0x2000001c

0800ae6c <sbrk_aligned>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	4e0f      	ldr	r6, [pc, #60]	@ (800aeac <sbrk_aligned+0x40>)
 800ae70:	460c      	mov	r4, r1
 800ae72:	6831      	ldr	r1, [r6, #0]
 800ae74:	4605      	mov	r5, r0
 800ae76:	b911      	cbnz	r1, 800ae7e <sbrk_aligned+0x12>
 800ae78:	f001 ffca 	bl	800ce10 <_sbrk_r>
 800ae7c:	6030      	str	r0, [r6, #0]
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4628      	mov	r0, r5
 800ae82:	f001 ffc5 	bl	800ce10 <_sbrk_r>
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	d103      	bne.n	800ae92 <sbrk_aligned+0x26>
 800ae8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ae8e:	4620      	mov	r0, r4
 800ae90:	bd70      	pop	{r4, r5, r6, pc}
 800ae92:	1cc4      	adds	r4, r0, #3
 800ae94:	f024 0403 	bic.w	r4, r4, #3
 800ae98:	42a0      	cmp	r0, r4
 800ae9a:	d0f8      	beq.n	800ae8e <sbrk_aligned+0x22>
 800ae9c:	1a21      	subs	r1, r4, r0
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f001 ffb6 	bl	800ce10 <_sbrk_r>
 800aea4:	3001      	adds	r0, #1
 800aea6:	d1f2      	bne.n	800ae8e <sbrk_aligned+0x22>
 800aea8:	e7ef      	b.n	800ae8a <sbrk_aligned+0x1e>
 800aeaa:	bf00      	nop
 800aeac:	2000061c 	.word	0x2000061c

0800aeb0 <_malloc_r>:
 800aeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb4:	1ccd      	adds	r5, r1, #3
 800aeb6:	f025 0503 	bic.w	r5, r5, #3
 800aeba:	3508      	adds	r5, #8
 800aebc:	2d0c      	cmp	r5, #12
 800aebe:	bf38      	it	cc
 800aec0:	250c      	movcc	r5, #12
 800aec2:	2d00      	cmp	r5, #0
 800aec4:	4606      	mov	r6, r0
 800aec6:	db01      	blt.n	800aecc <_malloc_r+0x1c>
 800aec8:	42a9      	cmp	r1, r5
 800aeca:	d904      	bls.n	800aed6 <_malloc_r+0x26>
 800aecc:	230c      	movs	r3, #12
 800aece:	6033      	str	r3, [r6, #0]
 800aed0:	2000      	movs	r0, #0
 800aed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afac <_malloc_r+0xfc>
 800aeda:	f000 f869 	bl	800afb0 <__malloc_lock>
 800aede:	f8d8 3000 	ldr.w	r3, [r8]
 800aee2:	461c      	mov	r4, r3
 800aee4:	bb44      	cbnz	r4, 800af38 <_malloc_r+0x88>
 800aee6:	4629      	mov	r1, r5
 800aee8:	4630      	mov	r0, r6
 800aeea:	f7ff ffbf 	bl	800ae6c <sbrk_aligned>
 800aeee:	1c43      	adds	r3, r0, #1
 800aef0:	4604      	mov	r4, r0
 800aef2:	d158      	bne.n	800afa6 <_malloc_r+0xf6>
 800aef4:	f8d8 4000 	ldr.w	r4, [r8]
 800aef8:	4627      	mov	r7, r4
 800aefa:	2f00      	cmp	r7, #0
 800aefc:	d143      	bne.n	800af86 <_malloc_r+0xd6>
 800aefe:	2c00      	cmp	r4, #0
 800af00:	d04b      	beq.n	800af9a <_malloc_r+0xea>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	4639      	mov	r1, r7
 800af06:	4630      	mov	r0, r6
 800af08:	eb04 0903 	add.w	r9, r4, r3
 800af0c:	f001 ff80 	bl	800ce10 <_sbrk_r>
 800af10:	4581      	cmp	r9, r0
 800af12:	d142      	bne.n	800af9a <_malloc_r+0xea>
 800af14:	6821      	ldr	r1, [r4, #0]
 800af16:	1a6d      	subs	r5, r5, r1
 800af18:	4629      	mov	r1, r5
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff ffa6 	bl	800ae6c <sbrk_aligned>
 800af20:	3001      	adds	r0, #1
 800af22:	d03a      	beq.n	800af9a <_malloc_r+0xea>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	442b      	add	r3, r5
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	f8d8 3000 	ldr.w	r3, [r8]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	bb62      	cbnz	r2, 800af8c <_malloc_r+0xdc>
 800af32:	f8c8 7000 	str.w	r7, [r8]
 800af36:	e00f      	b.n	800af58 <_malloc_r+0xa8>
 800af38:	6822      	ldr	r2, [r4, #0]
 800af3a:	1b52      	subs	r2, r2, r5
 800af3c:	d420      	bmi.n	800af80 <_malloc_r+0xd0>
 800af3e:	2a0b      	cmp	r2, #11
 800af40:	d917      	bls.n	800af72 <_malloc_r+0xc2>
 800af42:	1961      	adds	r1, r4, r5
 800af44:	42a3      	cmp	r3, r4
 800af46:	6025      	str	r5, [r4, #0]
 800af48:	bf18      	it	ne
 800af4a:	6059      	strne	r1, [r3, #4]
 800af4c:	6863      	ldr	r3, [r4, #4]
 800af4e:	bf08      	it	eq
 800af50:	f8c8 1000 	streq.w	r1, [r8]
 800af54:	5162      	str	r2, [r4, r5]
 800af56:	604b      	str	r3, [r1, #4]
 800af58:	4630      	mov	r0, r6
 800af5a:	f000 f82f 	bl	800afbc <__malloc_unlock>
 800af5e:	f104 000b 	add.w	r0, r4, #11
 800af62:	1d23      	adds	r3, r4, #4
 800af64:	f020 0007 	bic.w	r0, r0, #7
 800af68:	1ac2      	subs	r2, r0, r3
 800af6a:	bf1c      	itt	ne
 800af6c:	1a1b      	subne	r3, r3, r0
 800af6e:	50a3      	strne	r3, [r4, r2]
 800af70:	e7af      	b.n	800aed2 <_malloc_r+0x22>
 800af72:	6862      	ldr	r2, [r4, #4]
 800af74:	42a3      	cmp	r3, r4
 800af76:	bf0c      	ite	eq
 800af78:	f8c8 2000 	streq.w	r2, [r8]
 800af7c:	605a      	strne	r2, [r3, #4]
 800af7e:	e7eb      	b.n	800af58 <_malloc_r+0xa8>
 800af80:	4623      	mov	r3, r4
 800af82:	6864      	ldr	r4, [r4, #4]
 800af84:	e7ae      	b.n	800aee4 <_malloc_r+0x34>
 800af86:	463c      	mov	r4, r7
 800af88:	687f      	ldr	r7, [r7, #4]
 800af8a:	e7b6      	b.n	800aefa <_malloc_r+0x4a>
 800af8c:	461a      	mov	r2, r3
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	42a3      	cmp	r3, r4
 800af92:	d1fb      	bne.n	800af8c <_malloc_r+0xdc>
 800af94:	2300      	movs	r3, #0
 800af96:	6053      	str	r3, [r2, #4]
 800af98:	e7de      	b.n	800af58 <_malloc_r+0xa8>
 800af9a:	230c      	movs	r3, #12
 800af9c:	6033      	str	r3, [r6, #0]
 800af9e:	4630      	mov	r0, r6
 800afa0:	f000 f80c 	bl	800afbc <__malloc_unlock>
 800afa4:	e794      	b.n	800aed0 <_malloc_r+0x20>
 800afa6:	6005      	str	r5, [r0, #0]
 800afa8:	e7d6      	b.n	800af58 <_malloc_r+0xa8>
 800afaa:	bf00      	nop
 800afac:	20000620 	.word	0x20000620

0800afb0 <__malloc_lock>:
 800afb0:	4801      	ldr	r0, [pc, #4]	@ (800afb8 <__malloc_lock+0x8>)
 800afb2:	f7ff b8a8 	b.w	800a106 <__retarget_lock_acquire_recursive>
 800afb6:	bf00      	nop
 800afb8:	20000618 	.word	0x20000618

0800afbc <__malloc_unlock>:
 800afbc:	4801      	ldr	r0, [pc, #4]	@ (800afc4 <__malloc_unlock+0x8>)
 800afbe:	f7ff b8a3 	b.w	800a108 <__retarget_lock_release_recursive>
 800afc2:	bf00      	nop
 800afc4:	20000618 	.word	0x20000618

0800afc8 <_Balloc>:
 800afc8:	b570      	push	{r4, r5, r6, lr}
 800afca:	69c6      	ldr	r6, [r0, #28]
 800afcc:	4604      	mov	r4, r0
 800afce:	460d      	mov	r5, r1
 800afd0:	b976      	cbnz	r6, 800aff0 <_Balloc+0x28>
 800afd2:	2010      	movs	r0, #16
 800afd4:	f7ff ff42 	bl	800ae5c <malloc>
 800afd8:	4602      	mov	r2, r0
 800afda:	61e0      	str	r0, [r4, #28]
 800afdc:	b920      	cbnz	r0, 800afe8 <_Balloc+0x20>
 800afde:	4b18      	ldr	r3, [pc, #96]	@ (800b040 <_Balloc+0x78>)
 800afe0:	4818      	ldr	r0, [pc, #96]	@ (800b044 <_Balloc+0x7c>)
 800afe2:	216b      	movs	r1, #107	@ 0x6b
 800afe4:	f001 ff3c 	bl	800ce60 <__assert_func>
 800afe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afec:	6006      	str	r6, [r0, #0]
 800afee:	60c6      	str	r6, [r0, #12]
 800aff0:	69e6      	ldr	r6, [r4, #28]
 800aff2:	68f3      	ldr	r3, [r6, #12]
 800aff4:	b183      	cbz	r3, 800b018 <_Balloc+0x50>
 800aff6:	69e3      	ldr	r3, [r4, #28]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800affe:	b9b8      	cbnz	r0, 800b030 <_Balloc+0x68>
 800b000:	2101      	movs	r1, #1
 800b002:	fa01 f605 	lsl.w	r6, r1, r5
 800b006:	1d72      	adds	r2, r6, #5
 800b008:	0092      	lsls	r2, r2, #2
 800b00a:	4620      	mov	r0, r4
 800b00c:	f001 ff46 	bl	800ce9c <_calloc_r>
 800b010:	b160      	cbz	r0, 800b02c <_Balloc+0x64>
 800b012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b016:	e00e      	b.n	800b036 <_Balloc+0x6e>
 800b018:	2221      	movs	r2, #33	@ 0x21
 800b01a:	2104      	movs	r1, #4
 800b01c:	4620      	mov	r0, r4
 800b01e:	f001 ff3d 	bl	800ce9c <_calloc_r>
 800b022:	69e3      	ldr	r3, [r4, #28]
 800b024:	60f0      	str	r0, [r6, #12]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1e4      	bne.n	800aff6 <_Balloc+0x2e>
 800b02c:	2000      	movs	r0, #0
 800b02e:	bd70      	pop	{r4, r5, r6, pc}
 800b030:	6802      	ldr	r2, [r0, #0]
 800b032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b036:	2300      	movs	r3, #0
 800b038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b03c:	e7f7      	b.n	800b02e <_Balloc+0x66>
 800b03e:	bf00      	nop
 800b040:	0800dc7e 	.word	0x0800dc7e
 800b044:	0800dcfe 	.word	0x0800dcfe

0800b048 <_Bfree>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	69c6      	ldr	r6, [r0, #28]
 800b04c:	4605      	mov	r5, r0
 800b04e:	460c      	mov	r4, r1
 800b050:	b976      	cbnz	r6, 800b070 <_Bfree+0x28>
 800b052:	2010      	movs	r0, #16
 800b054:	f7ff ff02 	bl	800ae5c <malloc>
 800b058:	4602      	mov	r2, r0
 800b05a:	61e8      	str	r0, [r5, #28]
 800b05c:	b920      	cbnz	r0, 800b068 <_Bfree+0x20>
 800b05e:	4b09      	ldr	r3, [pc, #36]	@ (800b084 <_Bfree+0x3c>)
 800b060:	4809      	ldr	r0, [pc, #36]	@ (800b088 <_Bfree+0x40>)
 800b062:	218f      	movs	r1, #143	@ 0x8f
 800b064:	f001 fefc 	bl	800ce60 <__assert_func>
 800b068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b06c:	6006      	str	r6, [r0, #0]
 800b06e:	60c6      	str	r6, [r0, #12]
 800b070:	b13c      	cbz	r4, 800b082 <_Bfree+0x3a>
 800b072:	69eb      	ldr	r3, [r5, #28]
 800b074:	6862      	ldr	r2, [r4, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b07c:	6021      	str	r1, [r4, #0]
 800b07e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b082:	bd70      	pop	{r4, r5, r6, pc}
 800b084:	0800dc7e 	.word	0x0800dc7e
 800b088:	0800dcfe 	.word	0x0800dcfe

0800b08c <__multadd>:
 800b08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b090:	690d      	ldr	r5, [r1, #16]
 800b092:	4607      	mov	r7, r0
 800b094:	460c      	mov	r4, r1
 800b096:	461e      	mov	r6, r3
 800b098:	f101 0c14 	add.w	ip, r1, #20
 800b09c:	2000      	movs	r0, #0
 800b09e:	f8dc 3000 	ldr.w	r3, [ip]
 800b0a2:	b299      	uxth	r1, r3
 800b0a4:	fb02 6101 	mla	r1, r2, r1, r6
 800b0a8:	0c1e      	lsrs	r6, r3, #16
 800b0aa:	0c0b      	lsrs	r3, r1, #16
 800b0ac:	fb02 3306 	mla	r3, r2, r6, r3
 800b0b0:	b289      	uxth	r1, r1
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0b8:	4285      	cmp	r5, r0
 800b0ba:	f84c 1b04 	str.w	r1, [ip], #4
 800b0be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0c2:	dcec      	bgt.n	800b09e <__multadd+0x12>
 800b0c4:	b30e      	cbz	r6, 800b10a <__multadd+0x7e>
 800b0c6:	68a3      	ldr	r3, [r4, #8]
 800b0c8:	42ab      	cmp	r3, r5
 800b0ca:	dc19      	bgt.n	800b100 <__multadd+0x74>
 800b0cc:	6861      	ldr	r1, [r4, #4]
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	3101      	adds	r1, #1
 800b0d2:	f7ff ff79 	bl	800afc8 <_Balloc>
 800b0d6:	4680      	mov	r8, r0
 800b0d8:	b928      	cbnz	r0, 800b0e6 <__multadd+0x5a>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b110 <__multadd+0x84>)
 800b0de:	480d      	ldr	r0, [pc, #52]	@ (800b114 <__multadd+0x88>)
 800b0e0:	21ba      	movs	r1, #186	@ 0xba
 800b0e2:	f001 febd 	bl	800ce60 <__assert_func>
 800b0e6:	6922      	ldr	r2, [r4, #16]
 800b0e8:	3202      	adds	r2, #2
 800b0ea:	f104 010c 	add.w	r1, r4, #12
 800b0ee:	0092      	lsls	r2, r2, #2
 800b0f0:	300c      	adds	r0, #12
 800b0f2:	f001 fe9d 	bl	800ce30 <memcpy>
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	f7ff ffa5 	bl	800b048 <_Bfree>
 800b0fe:	4644      	mov	r4, r8
 800b100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b104:	3501      	adds	r5, #1
 800b106:	615e      	str	r6, [r3, #20]
 800b108:	6125      	str	r5, [r4, #16]
 800b10a:	4620      	mov	r0, r4
 800b10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b110:	0800dced 	.word	0x0800dced
 800b114:	0800dcfe 	.word	0x0800dcfe

0800b118 <__s2b>:
 800b118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b11c:	460c      	mov	r4, r1
 800b11e:	4615      	mov	r5, r2
 800b120:	461f      	mov	r7, r3
 800b122:	2209      	movs	r2, #9
 800b124:	3308      	adds	r3, #8
 800b126:	4606      	mov	r6, r0
 800b128:	fb93 f3f2 	sdiv	r3, r3, r2
 800b12c:	2100      	movs	r1, #0
 800b12e:	2201      	movs	r2, #1
 800b130:	429a      	cmp	r2, r3
 800b132:	db09      	blt.n	800b148 <__s2b+0x30>
 800b134:	4630      	mov	r0, r6
 800b136:	f7ff ff47 	bl	800afc8 <_Balloc>
 800b13a:	b940      	cbnz	r0, 800b14e <__s2b+0x36>
 800b13c:	4602      	mov	r2, r0
 800b13e:	4b19      	ldr	r3, [pc, #100]	@ (800b1a4 <__s2b+0x8c>)
 800b140:	4819      	ldr	r0, [pc, #100]	@ (800b1a8 <__s2b+0x90>)
 800b142:	21d3      	movs	r1, #211	@ 0xd3
 800b144:	f001 fe8c 	bl	800ce60 <__assert_func>
 800b148:	0052      	lsls	r2, r2, #1
 800b14a:	3101      	adds	r1, #1
 800b14c:	e7f0      	b.n	800b130 <__s2b+0x18>
 800b14e:	9b08      	ldr	r3, [sp, #32]
 800b150:	6143      	str	r3, [r0, #20]
 800b152:	2d09      	cmp	r5, #9
 800b154:	f04f 0301 	mov.w	r3, #1
 800b158:	6103      	str	r3, [r0, #16]
 800b15a:	dd16      	ble.n	800b18a <__s2b+0x72>
 800b15c:	f104 0909 	add.w	r9, r4, #9
 800b160:	46c8      	mov	r8, r9
 800b162:	442c      	add	r4, r5
 800b164:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b168:	4601      	mov	r1, r0
 800b16a:	3b30      	subs	r3, #48	@ 0x30
 800b16c:	220a      	movs	r2, #10
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ff8c 	bl	800b08c <__multadd>
 800b174:	45a0      	cmp	r8, r4
 800b176:	d1f5      	bne.n	800b164 <__s2b+0x4c>
 800b178:	f1a5 0408 	sub.w	r4, r5, #8
 800b17c:	444c      	add	r4, r9
 800b17e:	1b2d      	subs	r5, r5, r4
 800b180:	1963      	adds	r3, r4, r5
 800b182:	42bb      	cmp	r3, r7
 800b184:	db04      	blt.n	800b190 <__s2b+0x78>
 800b186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b18a:	340a      	adds	r4, #10
 800b18c:	2509      	movs	r5, #9
 800b18e:	e7f6      	b.n	800b17e <__s2b+0x66>
 800b190:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b194:	4601      	mov	r1, r0
 800b196:	3b30      	subs	r3, #48	@ 0x30
 800b198:	220a      	movs	r2, #10
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7ff ff76 	bl	800b08c <__multadd>
 800b1a0:	e7ee      	b.n	800b180 <__s2b+0x68>
 800b1a2:	bf00      	nop
 800b1a4:	0800dced 	.word	0x0800dced
 800b1a8:	0800dcfe 	.word	0x0800dcfe

0800b1ac <__hi0bits>:
 800b1ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	bf36      	itet	cc
 800b1b4:	0403      	lslcc	r3, r0, #16
 800b1b6:	2000      	movcs	r0, #0
 800b1b8:	2010      	movcc	r0, #16
 800b1ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1be:	bf3c      	itt	cc
 800b1c0:	021b      	lslcc	r3, r3, #8
 800b1c2:	3008      	addcc	r0, #8
 800b1c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1c8:	bf3c      	itt	cc
 800b1ca:	011b      	lslcc	r3, r3, #4
 800b1cc:	3004      	addcc	r0, #4
 800b1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1d2:	bf3c      	itt	cc
 800b1d4:	009b      	lslcc	r3, r3, #2
 800b1d6:	3002      	addcc	r0, #2
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	db05      	blt.n	800b1e8 <__hi0bits+0x3c>
 800b1dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b1e0:	f100 0001 	add.w	r0, r0, #1
 800b1e4:	bf08      	it	eq
 800b1e6:	2020      	moveq	r0, #32
 800b1e8:	4770      	bx	lr

0800b1ea <__lo0bits>:
 800b1ea:	6803      	ldr	r3, [r0, #0]
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	f013 0007 	ands.w	r0, r3, #7
 800b1f2:	d00b      	beq.n	800b20c <__lo0bits+0x22>
 800b1f4:	07d9      	lsls	r1, r3, #31
 800b1f6:	d421      	bmi.n	800b23c <__lo0bits+0x52>
 800b1f8:	0798      	lsls	r0, r3, #30
 800b1fa:	bf49      	itett	mi
 800b1fc:	085b      	lsrmi	r3, r3, #1
 800b1fe:	089b      	lsrpl	r3, r3, #2
 800b200:	2001      	movmi	r0, #1
 800b202:	6013      	strmi	r3, [r2, #0]
 800b204:	bf5c      	itt	pl
 800b206:	6013      	strpl	r3, [r2, #0]
 800b208:	2002      	movpl	r0, #2
 800b20a:	4770      	bx	lr
 800b20c:	b299      	uxth	r1, r3
 800b20e:	b909      	cbnz	r1, 800b214 <__lo0bits+0x2a>
 800b210:	0c1b      	lsrs	r3, r3, #16
 800b212:	2010      	movs	r0, #16
 800b214:	b2d9      	uxtb	r1, r3
 800b216:	b909      	cbnz	r1, 800b21c <__lo0bits+0x32>
 800b218:	3008      	adds	r0, #8
 800b21a:	0a1b      	lsrs	r3, r3, #8
 800b21c:	0719      	lsls	r1, r3, #28
 800b21e:	bf04      	itt	eq
 800b220:	091b      	lsreq	r3, r3, #4
 800b222:	3004      	addeq	r0, #4
 800b224:	0799      	lsls	r1, r3, #30
 800b226:	bf04      	itt	eq
 800b228:	089b      	lsreq	r3, r3, #2
 800b22a:	3002      	addeq	r0, #2
 800b22c:	07d9      	lsls	r1, r3, #31
 800b22e:	d403      	bmi.n	800b238 <__lo0bits+0x4e>
 800b230:	085b      	lsrs	r3, r3, #1
 800b232:	f100 0001 	add.w	r0, r0, #1
 800b236:	d003      	beq.n	800b240 <__lo0bits+0x56>
 800b238:	6013      	str	r3, [r2, #0]
 800b23a:	4770      	bx	lr
 800b23c:	2000      	movs	r0, #0
 800b23e:	4770      	bx	lr
 800b240:	2020      	movs	r0, #32
 800b242:	4770      	bx	lr

0800b244 <__i2b>:
 800b244:	b510      	push	{r4, lr}
 800b246:	460c      	mov	r4, r1
 800b248:	2101      	movs	r1, #1
 800b24a:	f7ff febd 	bl	800afc8 <_Balloc>
 800b24e:	4602      	mov	r2, r0
 800b250:	b928      	cbnz	r0, 800b25e <__i2b+0x1a>
 800b252:	4b05      	ldr	r3, [pc, #20]	@ (800b268 <__i2b+0x24>)
 800b254:	4805      	ldr	r0, [pc, #20]	@ (800b26c <__i2b+0x28>)
 800b256:	f240 1145 	movw	r1, #325	@ 0x145
 800b25a:	f001 fe01 	bl	800ce60 <__assert_func>
 800b25e:	2301      	movs	r3, #1
 800b260:	6144      	str	r4, [r0, #20]
 800b262:	6103      	str	r3, [r0, #16]
 800b264:	bd10      	pop	{r4, pc}
 800b266:	bf00      	nop
 800b268:	0800dced 	.word	0x0800dced
 800b26c:	0800dcfe 	.word	0x0800dcfe

0800b270 <__multiply>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	4617      	mov	r7, r2
 800b276:	690a      	ldr	r2, [r1, #16]
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	bfa8      	it	ge
 800b27e:	463b      	movge	r3, r7
 800b280:	4689      	mov	r9, r1
 800b282:	bfa4      	itt	ge
 800b284:	460f      	movge	r7, r1
 800b286:	4699      	movge	r9, r3
 800b288:	693d      	ldr	r5, [r7, #16]
 800b28a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	6879      	ldr	r1, [r7, #4]
 800b292:	eb05 060a 	add.w	r6, r5, sl
 800b296:	42b3      	cmp	r3, r6
 800b298:	b085      	sub	sp, #20
 800b29a:	bfb8      	it	lt
 800b29c:	3101      	addlt	r1, #1
 800b29e:	f7ff fe93 	bl	800afc8 <_Balloc>
 800b2a2:	b930      	cbnz	r0, 800b2b2 <__multiply+0x42>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	4b41      	ldr	r3, [pc, #260]	@ (800b3ac <__multiply+0x13c>)
 800b2a8:	4841      	ldr	r0, [pc, #260]	@ (800b3b0 <__multiply+0x140>)
 800b2aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b2ae:	f001 fdd7 	bl	800ce60 <__assert_func>
 800b2b2:	f100 0414 	add.w	r4, r0, #20
 800b2b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b2ba:	4623      	mov	r3, r4
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4573      	cmp	r3, lr
 800b2c0:	d320      	bcc.n	800b304 <__multiply+0x94>
 800b2c2:	f107 0814 	add.w	r8, r7, #20
 800b2c6:	f109 0114 	add.w	r1, r9, #20
 800b2ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b2ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b2d2:	9302      	str	r3, [sp, #8]
 800b2d4:	1beb      	subs	r3, r5, r7
 800b2d6:	3b15      	subs	r3, #21
 800b2d8:	f023 0303 	bic.w	r3, r3, #3
 800b2dc:	3304      	adds	r3, #4
 800b2de:	3715      	adds	r7, #21
 800b2e0:	42bd      	cmp	r5, r7
 800b2e2:	bf38      	it	cc
 800b2e4:	2304      	movcc	r3, #4
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	9b02      	ldr	r3, [sp, #8]
 800b2ea:	9103      	str	r1, [sp, #12]
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	d80c      	bhi.n	800b30a <__multiply+0x9a>
 800b2f0:	2e00      	cmp	r6, #0
 800b2f2:	dd03      	ble.n	800b2fc <__multiply+0x8c>
 800b2f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d055      	beq.n	800b3a8 <__multiply+0x138>
 800b2fc:	6106      	str	r6, [r0, #16]
 800b2fe:	b005      	add	sp, #20
 800b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b304:	f843 2b04 	str.w	r2, [r3], #4
 800b308:	e7d9      	b.n	800b2be <__multiply+0x4e>
 800b30a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b30e:	f1ba 0f00 	cmp.w	sl, #0
 800b312:	d01f      	beq.n	800b354 <__multiply+0xe4>
 800b314:	46c4      	mov	ip, r8
 800b316:	46a1      	mov	r9, r4
 800b318:	2700      	movs	r7, #0
 800b31a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b31e:	f8d9 3000 	ldr.w	r3, [r9]
 800b322:	fa1f fb82 	uxth.w	fp, r2
 800b326:	b29b      	uxth	r3, r3
 800b328:	fb0a 330b 	mla	r3, sl, fp, r3
 800b32c:	443b      	add	r3, r7
 800b32e:	f8d9 7000 	ldr.w	r7, [r9]
 800b332:	0c12      	lsrs	r2, r2, #16
 800b334:	0c3f      	lsrs	r7, r7, #16
 800b336:	fb0a 7202 	mla	r2, sl, r2, r7
 800b33a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b33e:	b29b      	uxth	r3, r3
 800b340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b344:	4565      	cmp	r5, ip
 800b346:	f849 3b04 	str.w	r3, [r9], #4
 800b34a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b34e:	d8e4      	bhi.n	800b31a <__multiply+0xaa>
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	50e7      	str	r7, [r4, r3]
 800b354:	9b03      	ldr	r3, [sp, #12]
 800b356:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b35a:	3104      	adds	r1, #4
 800b35c:	f1b9 0f00 	cmp.w	r9, #0
 800b360:	d020      	beq.n	800b3a4 <__multiply+0x134>
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	4647      	mov	r7, r8
 800b366:	46a4      	mov	ip, r4
 800b368:	f04f 0a00 	mov.w	sl, #0
 800b36c:	f8b7 b000 	ldrh.w	fp, [r7]
 800b370:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b374:	fb09 220b 	mla	r2, r9, fp, r2
 800b378:	4452      	add	r2, sl
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b380:	f84c 3b04 	str.w	r3, [ip], #4
 800b384:	f857 3b04 	ldr.w	r3, [r7], #4
 800b388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b38c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b390:	fb09 330a 	mla	r3, r9, sl, r3
 800b394:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b398:	42bd      	cmp	r5, r7
 800b39a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b39e:	d8e5      	bhi.n	800b36c <__multiply+0xfc>
 800b3a0:	9a01      	ldr	r2, [sp, #4]
 800b3a2:	50a3      	str	r3, [r4, r2]
 800b3a4:	3404      	adds	r4, #4
 800b3a6:	e79f      	b.n	800b2e8 <__multiply+0x78>
 800b3a8:	3e01      	subs	r6, #1
 800b3aa:	e7a1      	b.n	800b2f0 <__multiply+0x80>
 800b3ac:	0800dced 	.word	0x0800dced
 800b3b0:	0800dcfe 	.word	0x0800dcfe

0800b3b4 <__pow5mult>:
 800b3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b8:	4615      	mov	r5, r2
 800b3ba:	f012 0203 	ands.w	r2, r2, #3
 800b3be:	4607      	mov	r7, r0
 800b3c0:	460e      	mov	r6, r1
 800b3c2:	d007      	beq.n	800b3d4 <__pow5mult+0x20>
 800b3c4:	4c25      	ldr	r4, [pc, #148]	@ (800b45c <__pow5mult+0xa8>)
 800b3c6:	3a01      	subs	r2, #1
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3ce:	f7ff fe5d 	bl	800b08c <__multadd>
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	10ad      	asrs	r5, r5, #2
 800b3d6:	d03d      	beq.n	800b454 <__pow5mult+0xa0>
 800b3d8:	69fc      	ldr	r4, [r7, #28]
 800b3da:	b97c      	cbnz	r4, 800b3fc <__pow5mult+0x48>
 800b3dc:	2010      	movs	r0, #16
 800b3de:	f7ff fd3d 	bl	800ae5c <malloc>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	61f8      	str	r0, [r7, #28]
 800b3e6:	b928      	cbnz	r0, 800b3f4 <__pow5mult+0x40>
 800b3e8:	4b1d      	ldr	r3, [pc, #116]	@ (800b460 <__pow5mult+0xac>)
 800b3ea:	481e      	ldr	r0, [pc, #120]	@ (800b464 <__pow5mult+0xb0>)
 800b3ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b3f0:	f001 fd36 	bl	800ce60 <__assert_func>
 800b3f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3f8:	6004      	str	r4, [r0, #0]
 800b3fa:	60c4      	str	r4, [r0, #12]
 800b3fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b400:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b404:	b94c      	cbnz	r4, 800b41a <__pow5mult+0x66>
 800b406:	f240 2171 	movw	r1, #625	@ 0x271
 800b40a:	4638      	mov	r0, r7
 800b40c:	f7ff ff1a 	bl	800b244 <__i2b>
 800b410:	2300      	movs	r3, #0
 800b412:	f8c8 0008 	str.w	r0, [r8, #8]
 800b416:	4604      	mov	r4, r0
 800b418:	6003      	str	r3, [r0, #0]
 800b41a:	f04f 0900 	mov.w	r9, #0
 800b41e:	07eb      	lsls	r3, r5, #31
 800b420:	d50a      	bpl.n	800b438 <__pow5mult+0x84>
 800b422:	4631      	mov	r1, r6
 800b424:	4622      	mov	r2, r4
 800b426:	4638      	mov	r0, r7
 800b428:	f7ff ff22 	bl	800b270 <__multiply>
 800b42c:	4631      	mov	r1, r6
 800b42e:	4680      	mov	r8, r0
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff fe09 	bl	800b048 <_Bfree>
 800b436:	4646      	mov	r6, r8
 800b438:	106d      	asrs	r5, r5, #1
 800b43a:	d00b      	beq.n	800b454 <__pow5mult+0xa0>
 800b43c:	6820      	ldr	r0, [r4, #0]
 800b43e:	b938      	cbnz	r0, 800b450 <__pow5mult+0x9c>
 800b440:	4622      	mov	r2, r4
 800b442:	4621      	mov	r1, r4
 800b444:	4638      	mov	r0, r7
 800b446:	f7ff ff13 	bl	800b270 <__multiply>
 800b44a:	6020      	str	r0, [r4, #0]
 800b44c:	f8c0 9000 	str.w	r9, [r0]
 800b450:	4604      	mov	r4, r0
 800b452:	e7e4      	b.n	800b41e <__pow5mult+0x6a>
 800b454:	4630      	mov	r0, r6
 800b456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b45a:	bf00      	nop
 800b45c:	0800de10 	.word	0x0800de10
 800b460:	0800dc7e 	.word	0x0800dc7e
 800b464:	0800dcfe 	.word	0x0800dcfe

0800b468 <__lshift>:
 800b468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b46c:	460c      	mov	r4, r1
 800b46e:	6849      	ldr	r1, [r1, #4]
 800b470:	6923      	ldr	r3, [r4, #16]
 800b472:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b476:	68a3      	ldr	r3, [r4, #8]
 800b478:	4607      	mov	r7, r0
 800b47a:	4691      	mov	r9, r2
 800b47c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b480:	f108 0601 	add.w	r6, r8, #1
 800b484:	42b3      	cmp	r3, r6
 800b486:	db0b      	blt.n	800b4a0 <__lshift+0x38>
 800b488:	4638      	mov	r0, r7
 800b48a:	f7ff fd9d 	bl	800afc8 <_Balloc>
 800b48e:	4605      	mov	r5, r0
 800b490:	b948      	cbnz	r0, 800b4a6 <__lshift+0x3e>
 800b492:	4602      	mov	r2, r0
 800b494:	4b28      	ldr	r3, [pc, #160]	@ (800b538 <__lshift+0xd0>)
 800b496:	4829      	ldr	r0, [pc, #164]	@ (800b53c <__lshift+0xd4>)
 800b498:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b49c:	f001 fce0 	bl	800ce60 <__assert_func>
 800b4a0:	3101      	adds	r1, #1
 800b4a2:	005b      	lsls	r3, r3, #1
 800b4a4:	e7ee      	b.n	800b484 <__lshift+0x1c>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f100 0114 	add.w	r1, r0, #20
 800b4ac:	f100 0210 	add.w	r2, r0, #16
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	4553      	cmp	r3, sl
 800b4b4:	db33      	blt.n	800b51e <__lshift+0xb6>
 800b4b6:	6920      	ldr	r0, [r4, #16]
 800b4b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4bc:	f104 0314 	add.w	r3, r4, #20
 800b4c0:	f019 091f 	ands.w	r9, r9, #31
 800b4c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4cc:	d02b      	beq.n	800b526 <__lshift+0xbe>
 800b4ce:	f1c9 0e20 	rsb	lr, r9, #32
 800b4d2:	468a      	mov	sl, r1
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	6818      	ldr	r0, [r3, #0]
 800b4d8:	fa00 f009 	lsl.w	r0, r0, r9
 800b4dc:	4310      	orrs	r0, r2
 800b4de:	f84a 0b04 	str.w	r0, [sl], #4
 800b4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e6:	459c      	cmp	ip, r3
 800b4e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4ec:	d8f3      	bhi.n	800b4d6 <__lshift+0x6e>
 800b4ee:	ebac 0304 	sub.w	r3, ip, r4
 800b4f2:	3b15      	subs	r3, #21
 800b4f4:	f023 0303 	bic.w	r3, r3, #3
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	f104 0015 	add.w	r0, r4, #21
 800b4fe:	4560      	cmp	r0, ip
 800b500:	bf88      	it	hi
 800b502:	2304      	movhi	r3, #4
 800b504:	50ca      	str	r2, [r1, r3]
 800b506:	b10a      	cbz	r2, 800b50c <__lshift+0xa4>
 800b508:	f108 0602 	add.w	r6, r8, #2
 800b50c:	3e01      	subs	r6, #1
 800b50e:	4638      	mov	r0, r7
 800b510:	612e      	str	r6, [r5, #16]
 800b512:	4621      	mov	r1, r4
 800b514:	f7ff fd98 	bl	800b048 <_Bfree>
 800b518:	4628      	mov	r0, r5
 800b51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b522:	3301      	adds	r3, #1
 800b524:	e7c5      	b.n	800b4b2 <__lshift+0x4a>
 800b526:	3904      	subs	r1, #4
 800b528:	f853 2b04 	ldr.w	r2, [r3], #4
 800b52c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b530:	459c      	cmp	ip, r3
 800b532:	d8f9      	bhi.n	800b528 <__lshift+0xc0>
 800b534:	e7ea      	b.n	800b50c <__lshift+0xa4>
 800b536:	bf00      	nop
 800b538:	0800dced 	.word	0x0800dced
 800b53c:	0800dcfe 	.word	0x0800dcfe

0800b540 <__mcmp>:
 800b540:	690a      	ldr	r2, [r1, #16]
 800b542:	4603      	mov	r3, r0
 800b544:	6900      	ldr	r0, [r0, #16]
 800b546:	1a80      	subs	r0, r0, r2
 800b548:	b530      	push	{r4, r5, lr}
 800b54a:	d10e      	bne.n	800b56a <__mcmp+0x2a>
 800b54c:	3314      	adds	r3, #20
 800b54e:	3114      	adds	r1, #20
 800b550:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b554:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b558:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b55c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b560:	4295      	cmp	r5, r2
 800b562:	d003      	beq.n	800b56c <__mcmp+0x2c>
 800b564:	d205      	bcs.n	800b572 <__mcmp+0x32>
 800b566:	f04f 30ff 	mov.w	r0, #4294967295
 800b56a:	bd30      	pop	{r4, r5, pc}
 800b56c:	42a3      	cmp	r3, r4
 800b56e:	d3f3      	bcc.n	800b558 <__mcmp+0x18>
 800b570:	e7fb      	b.n	800b56a <__mcmp+0x2a>
 800b572:	2001      	movs	r0, #1
 800b574:	e7f9      	b.n	800b56a <__mcmp+0x2a>
	...

0800b578 <__mdiff>:
 800b578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	4689      	mov	r9, r1
 800b57e:	4606      	mov	r6, r0
 800b580:	4611      	mov	r1, r2
 800b582:	4648      	mov	r0, r9
 800b584:	4614      	mov	r4, r2
 800b586:	f7ff ffdb 	bl	800b540 <__mcmp>
 800b58a:	1e05      	subs	r5, r0, #0
 800b58c:	d112      	bne.n	800b5b4 <__mdiff+0x3c>
 800b58e:	4629      	mov	r1, r5
 800b590:	4630      	mov	r0, r6
 800b592:	f7ff fd19 	bl	800afc8 <_Balloc>
 800b596:	4602      	mov	r2, r0
 800b598:	b928      	cbnz	r0, 800b5a6 <__mdiff+0x2e>
 800b59a:	4b3f      	ldr	r3, [pc, #252]	@ (800b698 <__mdiff+0x120>)
 800b59c:	f240 2137 	movw	r1, #567	@ 0x237
 800b5a0:	483e      	ldr	r0, [pc, #248]	@ (800b69c <__mdiff+0x124>)
 800b5a2:	f001 fc5d 	bl	800ce60 <__assert_func>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	b003      	add	sp, #12
 800b5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b4:	bfbc      	itt	lt
 800b5b6:	464b      	movlt	r3, r9
 800b5b8:	46a1      	movlt	r9, r4
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b5c0:	bfba      	itte	lt
 800b5c2:	461c      	movlt	r4, r3
 800b5c4:	2501      	movlt	r5, #1
 800b5c6:	2500      	movge	r5, #0
 800b5c8:	f7ff fcfe 	bl	800afc8 <_Balloc>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	b918      	cbnz	r0, 800b5d8 <__mdiff+0x60>
 800b5d0:	4b31      	ldr	r3, [pc, #196]	@ (800b698 <__mdiff+0x120>)
 800b5d2:	f240 2145 	movw	r1, #581	@ 0x245
 800b5d6:	e7e3      	b.n	800b5a0 <__mdiff+0x28>
 800b5d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b5dc:	6926      	ldr	r6, [r4, #16]
 800b5de:	60c5      	str	r5, [r0, #12]
 800b5e0:	f109 0310 	add.w	r3, r9, #16
 800b5e4:	f109 0514 	add.w	r5, r9, #20
 800b5e8:	f104 0e14 	add.w	lr, r4, #20
 800b5ec:	f100 0b14 	add.w	fp, r0, #20
 800b5f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b5f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	46d9      	mov	r9, fp
 800b5fc:	f04f 0c00 	mov.w	ip, #0
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b606:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	fa1f f38a 	uxth.w	r3, sl
 800b610:	4619      	mov	r1, r3
 800b612:	b283      	uxth	r3, r0
 800b614:	1acb      	subs	r3, r1, r3
 800b616:	0c00      	lsrs	r0, r0, #16
 800b618:	4463      	add	r3, ip
 800b61a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b61e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b622:	b29b      	uxth	r3, r3
 800b624:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b628:	4576      	cmp	r6, lr
 800b62a:	f849 3b04 	str.w	r3, [r9], #4
 800b62e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b632:	d8e5      	bhi.n	800b600 <__mdiff+0x88>
 800b634:	1b33      	subs	r3, r6, r4
 800b636:	3b15      	subs	r3, #21
 800b638:	f023 0303 	bic.w	r3, r3, #3
 800b63c:	3415      	adds	r4, #21
 800b63e:	3304      	adds	r3, #4
 800b640:	42a6      	cmp	r6, r4
 800b642:	bf38      	it	cc
 800b644:	2304      	movcc	r3, #4
 800b646:	441d      	add	r5, r3
 800b648:	445b      	add	r3, fp
 800b64a:	461e      	mov	r6, r3
 800b64c:	462c      	mov	r4, r5
 800b64e:	4544      	cmp	r4, r8
 800b650:	d30e      	bcc.n	800b670 <__mdiff+0xf8>
 800b652:	f108 0103 	add.w	r1, r8, #3
 800b656:	1b49      	subs	r1, r1, r5
 800b658:	f021 0103 	bic.w	r1, r1, #3
 800b65c:	3d03      	subs	r5, #3
 800b65e:	45a8      	cmp	r8, r5
 800b660:	bf38      	it	cc
 800b662:	2100      	movcc	r1, #0
 800b664:	440b      	add	r3, r1
 800b666:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b66a:	b191      	cbz	r1, 800b692 <__mdiff+0x11a>
 800b66c:	6117      	str	r7, [r2, #16]
 800b66e:	e79d      	b.n	800b5ac <__mdiff+0x34>
 800b670:	f854 1b04 	ldr.w	r1, [r4], #4
 800b674:	46e6      	mov	lr, ip
 800b676:	0c08      	lsrs	r0, r1, #16
 800b678:	fa1c fc81 	uxtah	ip, ip, r1
 800b67c:	4471      	add	r1, lr
 800b67e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b682:	b289      	uxth	r1, r1
 800b684:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b688:	f846 1b04 	str.w	r1, [r6], #4
 800b68c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b690:	e7dd      	b.n	800b64e <__mdiff+0xd6>
 800b692:	3f01      	subs	r7, #1
 800b694:	e7e7      	b.n	800b666 <__mdiff+0xee>
 800b696:	bf00      	nop
 800b698:	0800dced 	.word	0x0800dced
 800b69c:	0800dcfe 	.word	0x0800dcfe

0800b6a0 <__ulp>:
 800b6a0:	b082      	sub	sp, #8
 800b6a2:	ed8d 0b00 	vstr	d0, [sp]
 800b6a6:	9a01      	ldr	r2, [sp, #4]
 800b6a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b6e8 <__ulp+0x48>)
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	dc08      	bgt.n	800b6c6 <__ulp+0x26>
 800b6b4:	425b      	negs	r3, r3
 800b6b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b6ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b6be:	da04      	bge.n	800b6ca <__ulp+0x2a>
 800b6c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b6c4:	4113      	asrs	r3, r2
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	e008      	b.n	800b6dc <__ulp+0x3c>
 800b6ca:	f1a2 0314 	sub.w	r3, r2, #20
 800b6ce:	2b1e      	cmp	r3, #30
 800b6d0:	bfda      	itte	le
 800b6d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b6d6:	40da      	lsrle	r2, r3
 800b6d8:	2201      	movgt	r2, #1
 800b6da:	2300      	movs	r3, #0
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4610      	mov	r0, r2
 800b6e0:	ec41 0b10 	vmov	d0, r0, r1
 800b6e4:	b002      	add	sp, #8
 800b6e6:	4770      	bx	lr
 800b6e8:	7ff00000 	.word	0x7ff00000

0800b6ec <__b2d>:
 800b6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f0:	6906      	ldr	r6, [r0, #16]
 800b6f2:	f100 0814 	add.w	r8, r0, #20
 800b6f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b6fa:	1f37      	subs	r7, r6, #4
 800b6fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b700:	4610      	mov	r0, r2
 800b702:	f7ff fd53 	bl	800b1ac <__hi0bits>
 800b706:	f1c0 0320 	rsb	r3, r0, #32
 800b70a:	280a      	cmp	r0, #10
 800b70c:	600b      	str	r3, [r1, #0]
 800b70e:	491b      	ldr	r1, [pc, #108]	@ (800b77c <__b2d+0x90>)
 800b710:	dc15      	bgt.n	800b73e <__b2d+0x52>
 800b712:	f1c0 0c0b 	rsb	ip, r0, #11
 800b716:	fa22 f30c 	lsr.w	r3, r2, ip
 800b71a:	45b8      	cmp	r8, r7
 800b71c:	ea43 0501 	orr.w	r5, r3, r1
 800b720:	bf34      	ite	cc
 800b722:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b726:	2300      	movcs	r3, #0
 800b728:	3015      	adds	r0, #21
 800b72a:	fa02 f000 	lsl.w	r0, r2, r0
 800b72e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b732:	4303      	orrs	r3, r0
 800b734:	461c      	mov	r4, r3
 800b736:	ec45 4b10 	vmov	d0, r4, r5
 800b73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b73e:	45b8      	cmp	r8, r7
 800b740:	bf3a      	itte	cc
 800b742:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b746:	f1a6 0708 	subcc.w	r7, r6, #8
 800b74a:	2300      	movcs	r3, #0
 800b74c:	380b      	subs	r0, #11
 800b74e:	d012      	beq.n	800b776 <__b2d+0x8a>
 800b750:	f1c0 0120 	rsb	r1, r0, #32
 800b754:	fa23 f401 	lsr.w	r4, r3, r1
 800b758:	4082      	lsls	r2, r0
 800b75a:	4322      	orrs	r2, r4
 800b75c:	4547      	cmp	r7, r8
 800b75e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b762:	bf8c      	ite	hi
 800b764:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b768:	2200      	movls	r2, #0
 800b76a:	4083      	lsls	r3, r0
 800b76c:	40ca      	lsrs	r2, r1
 800b76e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b772:	4313      	orrs	r3, r2
 800b774:	e7de      	b.n	800b734 <__b2d+0x48>
 800b776:	ea42 0501 	orr.w	r5, r2, r1
 800b77a:	e7db      	b.n	800b734 <__b2d+0x48>
 800b77c:	3ff00000 	.word	0x3ff00000

0800b780 <__d2b>:
 800b780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b784:	460f      	mov	r7, r1
 800b786:	2101      	movs	r1, #1
 800b788:	ec59 8b10 	vmov	r8, r9, d0
 800b78c:	4616      	mov	r6, r2
 800b78e:	f7ff fc1b 	bl	800afc8 <_Balloc>
 800b792:	4604      	mov	r4, r0
 800b794:	b930      	cbnz	r0, 800b7a4 <__d2b+0x24>
 800b796:	4602      	mov	r2, r0
 800b798:	4b23      	ldr	r3, [pc, #140]	@ (800b828 <__d2b+0xa8>)
 800b79a:	4824      	ldr	r0, [pc, #144]	@ (800b82c <__d2b+0xac>)
 800b79c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b7a0:	f001 fb5e 	bl	800ce60 <__assert_func>
 800b7a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b7a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7ac:	b10d      	cbz	r5, 800b7b2 <__d2b+0x32>
 800b7ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7b2:	9301      	str	r3, [sp, #4]
 800b7b4:	f1b8 0300 	subs.w	r3, r8, #0
 800b7b8:	d023      	beq.n	800b802 <__d2b+0x82>
 800b7ba:	4668      	mov	r0, sp
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	f7ff fd14 	bl	800b1ea <__lo0bits>
 800b7c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b7c6:	b1d0      	cbz	r0, 800b7fe <__d2b+0x7e>
 800b7c8:	f1c0 0320 	rsb	r3, r0, #32
 800b7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d0:	430b      	orrs	r3, r1
 800b7d2:	40c2      	lsrs	r2, r0
 800b7d4:	6163      	str	r3, [r4, #20]
 800b7d6:	9201      	str	r2, [sp, #4]
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	61a3      	str	r3, [r4, #24]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bf0c      	ite	eq
 800b7e0:	2201      	moveq	r2, #1
 800b7e2:	2202      	movne	r2, #2
 800b7e4:	6122      	str	r2, [r4, #16]
 800b7e6:	b1a5      	cbz	r5, 800b812 <__d2b+0x92>
 800b7e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b7ec:	4405      	add	r5, r0
 800b7ee:	603d      	str	r5, [r7, #0]
 800b7f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b7f4:	6030      	str	r0, [r6, #0]
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	b003      	add	sp, #12
 800b7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7fe:	6161      	str	r1, [r4, #20]
 800b800:	e7ea      	b.n	800b7d8 <__d2b+0x58>
 800b802:	a801      	add	r0, sp, #4
 800b804:	f7ff fcf1 	bl	800b1ea <__lo0bits>
 800b808:	9b01      	ldr	r3, [sp, #4]
 800b80a:	6163      	str	r3, [r4, #20]
 800b80c:	3020      	adds	r0, #32
 800b80e:	2201      	movs	r2, #1
 800b810:	e7e8      	b.n	800b7e4 <__d2b+0x64>
 800b812:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b816:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b81a:	6038      	str	r0, [r7, #0]
 800b81c:	6918      	ldr	r0, [r3, #16]
 800b81e:	f7ff fcc5 	bl	800b1ac <__hi0bits>
 800b822:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b826:	e7e5      	b.n	800b7f4 <__d2b+0x74>
 800b828:	0800dced 	.word	0x0800dced
 800b82c:	0800dcfe 	.word	0x0800dcfe

0800b830 <__ratio>:
 800b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b834:	b085      	sub	sp, #20
 800b836:	e9cd 1000 	strd	r1, r0, [sp]
 800b83a:	a902      	add	r1, sp, #8
 800b83c:	f7ff ff56 	bl	800b6ec <__b2d>
 800b840:	9800      	ldr	r0, [sp, #0]
 800b842:	a903      	add	r1, sp, #12
 800b844:	ec55 4b10 	vmov	r4, r5, d0
 800b848:	f7ff ff50 	bl	800b6ec <__b2d>
 800b84c:	9b01      	ldr	r3, [sp, #4]
 800b84e:	6919      	ldr	r1, [r3, #16]
 800b850:	9b00      	ldr	r3, [sp, #0]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	1ac9      	subs	r1, r1, r3
 800b856:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b85a:	1a9b      	subs	r3, r3, r2
 800b85c:	ec5b ab10 	vmov	sl, fp, d0
 800b860:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b864:	2b00      	cmp	r3, #0
 800b866:	bfce      	itee	gt
 800b868:	462a      	movgt	r2, r5
 800b86a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b86e:	465a      	movle	r2, fp
 800b870:	462f      	mov	r7, r5
 800b872:	46d9      	mov	r9, fp
 800b874:	bfcc      	ite	gt
 800b876:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b87a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b87e:	464b      	mov	r3, r9
 800b880:	4652      	mov	r2, sl
 800b882:	4620      	mov	r0, r4
 800b884:	4639      	mov	r1, r7
 800b886:	f7f5 f801 	bl	800088c <__aeabi_ddiv>
 800b88a:	ec41 0b10 	vmov	d0, r0, r1
 800b88e:	b005      	add	sp, #20
 800b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b894 <__copybits>:
 800b894:	3901      	subs	r1, #1
 800b896:	b570      	push	{r4, r5, r6, lr}
 800b898:	1149      	asrs	r1, r1, #5
 800b89a:	6914      	ldr	r4, [r2, #16]
 800b89c:	3101      	adds	r1, #1
 800b89e:	f102 0314 	add.w	r3, r2, #20
 800b8a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b8a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8aa:	1f05      	subs	r5, r0, #4
 800b8ac:	42a3      	cmp	r3, r4
 800b8ae:	d30c      	bcc.n	800b8ca <__copybits+0x36>
 800b8b0:	1aa3      	subs	r3, r4, r2
 800b8b2:	3b11      	subs	r3, #17
 800b8b4:	f023 0303 	bic.w	r3, r3, #3
 800b8b8:	3211      	adds	r2, #17
 800b8ba:	42a2      	cmp	r2, r4
 800b8bc:	bf88      	it	hi
 800b8be:	2300      	movhi	r3, #0
 800b8c0:	4418      	add	r0, r3
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	4288      	cmp	r0, r1
 800b8c6:	d305      	bcc.n	800b8d4 <__copybits+0x40>
 800b8c8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ca:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8ce:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8d2:	e7eb      	b.n	800b8ac <__copybits+0x18>
 800b8d4:	f840 3b04 	str.w	r3, [r0], #4
 800b8d8:	e7f4      	b.n	800b8c4 <__copybits+0x30>

0800b8da <__any_on>:
 800b8da:	f100 0214 	add.w	r2, r0, #20
 800b8de:	6900      	ldr	r0, [r0, #16]
 800b8e0:	114b      	asrs	r3, r1, #5
 800b8e2:	4298      	cmp	r0, r3
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	db11      	blt.n	800b90c <__any_on+0x32>
 800b8e8:	dd0a      	ble.n	800b900 <__any_on+0x26>
 800b8ea:	f011 011f 	ands.w	r1, r1, #31
 800b8ee:	d007      	beq.n	800b900 <__any_on+0x26>
 800b8f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8f4:	fa24 f001 	lsr.w	r0, r4, r1
 800b8f8:	fa00 f101 	lsl.w	r1, r0, r1
 800b8fc:	428c      	cmp	r4, r1
 800b8fe:	d10b      	bne.n	800b918 <__any_on+0x3e>
 800b900:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b904:	4293      	cmp	r3, r2
 800b906:	d803      	bhi.n	800b910 <__any_on+0x36>
 800b908:	2000      	movs	r0, #0
 800b90a:	bd10      	pop	{r4, pc}
 800b90c:	4603      	mov	r3, r0
 800b90e:	e7f7      	b.n	800b900 <__any_on+0x26>
 800b910:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b914:	2900      	cmp	r1, #0
 800b916:	d0f5      	beq.n	800b904 <__any_on+0x2a>
 800b918:	2001      	movs	r0, #1
 800b91a:	e7f6      	b.n	800b90a <__any_on+0x30>

0800b91c <sulp>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	4604      	mov	r4, r0
 800b920:	460d      	mov	r5, r1
 800b922:	ec45 4b10 	vmov	d0, r4, r5
 800b926:	4616      	mov	r6, r2
 800b928:	f7ff feba 	bl	800b6a0 <__ulp>
 800b92c:	ec51 0b10 	vmov	r0, r1, d0
 800b930:	b17e      	cbz	r6, 800b952 <sulp+0x36>
 800b932:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b936:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	dd09      	ble.n	800b952 <sulp+0x36>
 800b93e:	051b      	lsls	r3, r3, #20
 800b940:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b944:	2400      	movs	r4, #0
 800b946:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b94a:	4622      	mov	r2, r4
 800b94c:	462b      	mov	r3, r5
 800b94e:	f7f4 fe73 	bl	8000638 <__aeabi_dmul>
 800b952:	ec41 0b10 	vmov	d0, r0, r1
 800b956:	bd70      	pop	{r4, r5, r6, pc}

0800b958 <_strtod_l>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	b09f      	sub	sp, #124	@ 0x7c
 800b95e:	460c      	mov	r4, r1
 800b960:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b962:	2200      	movs	r2, #0
 800b964:	921a      	str	r2, [sp, #104]	@ 0x68
 800b966:	9005      	str	r0, [sp, #20]
 800b968:	f04f 0a00 	mov.w	sl, #0
 800b96c:	f04f 0b00 	mov.w	fp, #0
 800b970:	460a      	mov	r2, r1
 800b972:	9219      	str	r2, [sp, #100]	@ 0x64
 800b974:	7811      	ldrb	r1, [r2, #0]
 800b976:	292b      	cmp	r1, #43	@ 0x2b
 800b978:	d04a      	beq.n	800ba10 <_strtod_l+0xb8>
 800b97a:	d838      	bhi.n	800b9ee <_strtod_l+0x96>
 800b97c:	290d      	cmp	r1, #13
 800b97e:	d832      	bhi.n	800b9e6 <_strtod_l+0x8e>
 800b980:	2908      	cmp	r1, #8
 800b982:	d832      	bhi.n	800b9ea <_strtod_l+0x92>
 800b984:	2900      	cmp	r1, #0
 800b986:	d03b      	beq.n	800ba00 <_strtod_l+0xa8>
 800b988:	2200      	movs	r2, #0
 800b98a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b98c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b98e:	782a      	ldrb	r2, [r5, #0]
 800b990:	2a30      	cmp	r2, #48	@ 0x30
 800b992:	f040 80b2 	bne.w	800bafa <_strtod_l+0x1a2>
 800b996:	786a      	ldrb	r2, [r5, #1]
 800b998:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b99c:	2a58      	cmp	r2, #88	@ 0x58
 800b99e:	d16e      	bne.n	800ba7e <_strtod_l+0x126>
 800b9a0:	9302      	str	r3, [sp, #8]
 800b9a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9a4:	9301      	str	r3, [sp, #4]
 800b9a6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	4a8f      	ldr	r2, [pc, #572]	@ (800bbe8 <_strtod_l+0x290>)
 800b9ac:	9805      	ldr	r0, [sp, #20]
 800b9ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b9b0:	a919      	add	r1, sp, #100	@ 0x64
 800b9b2:	f001 faef 	bl	800cf94 <__gethex>
 800b9b6:	f010 060f 	ands.w	r6, r0, #15
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	d005      	beq.n	800b9ca <_strtod_l+0x72>
 800b9be:	2e06      	cmp	r6, #6
 800b9c0:	d128      	bne.n	800ba14 <_strtod_l+0xbc>
 800b9c2:	3501      	adds	r5, #1
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b9c8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b9ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f040 858e 	bne.w	800c4ee <_strtod_l+0xb96>
 800b9d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9d4:	b1cb      	cbz	r3, 800ba0a <_strtod_l+0xb2>
 800b9d6:	4652      	mov	r2, sl
 800b9d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b9dc:	ec43 2b10 	vmov	d0, r2, r3
 800b9e0:	b01f      	add	sp, #124	@ 0x7c
 800b9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e6:	2920      	cmp	r1, #32
 800b9e8:	d1ce      	bne.n	800b988 <_strtod_l+0x30>
 800b9ea:	3201      	adds	r2, #1
 800b9ec:	e7c1      	b.n	800b972 <_strtod_l+0x1a>
 800b9ee:	292d      	cmp	r1, #45	@ 0x2d
 800b9f0:	d1ca      	bne.n	800b988 <_strtod_l+0x30>
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	910e      	str	r1, [sp, #56]	@ 0x38
 800b9f6:	1c51      	adds	r1, r2, #1
 800b9f8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b9fa:	7852      	ldrb	r2, [r2, #1]
 800b9fc:	2a00      	cmp	r2, #0
 800b9fe:	d1c5      	bne.n	800b98c <_strtod_l+0x34>
 800ba00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ba02:	9419      	str	r4, [sp, #100]	@ 0x64
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f040 8570 	bne.w	800c4ea <_strtod_l+0xb92>
 800ba0a:	4652      	mov	r2, sl
 800ba0c:	465b      	mov	r3, fp
 800ba0e:	e7e5      	b.n	800b9dc <_strtod_l+0x84>
 800ba10:	2100      	movs	r1, #0
 800ba12:	e7ef      	b.n	800b9f4 <_strtod_l+0x9c>
 800ba14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba16:	b13a      	cbz	r2, 800ba28 <_strtod_l+0xd0>
 800ba18:	2135      	movs	r1, #53	@ 0x35
 800ba1a:	a81c      	add	r0, sp, #112	@ 0x70
 800ba1c:	f7ff ff3a 	bl	800b894 <__copybits>
 800ba20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba22:	9805      	ldr	r0, [sp, #20]
 800ba24:	f7ff fb10 	bl	800b048 <_Bfree>
 800ba28:	3e01      	subs	r6, #1
 800ba2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ba2c:	2e04      	cmp	r6, #4
 800ba2e:	d806      	bhi.n	800ba3e <_strtod_l+0xe6>
 800ba30:	e8df f006 	tbb	[pc, r6]
 800ba34:	201d0314 	.word	0x201d0314
 800ba38:	14          	.byte	0x14
 800ba39:	00          	.byte	0x00
 800ba3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ba3e:	05e1      	lsls	r1, r4, #23
 800ba40:	bf48      	it	mi
 800ba42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ba46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba4a:	0d1b      	lsrs	r3, r3, #20
 800ba4c:	051b      	lsls	r3, r3, #20
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1bb      	bne.n	800b9ca <_strtod_l+0x72>
 800ba52:	f7fe fb2d 	bl	800a0b0 <__errno>
 800ba56:	2322      	movs	r3, #34	@ 0x22
 800ba58:	6003      	str	r3, [r0, #0]
 800ba5a:	e7b6      	b.n	800b9ca <_strtod_l+0x72>
 800ba5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ba60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ba64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ba68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba6c:	e7e7      	b.n	800ba3e <_strtod_l+0xe6>
 800ba6e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800bbf0 <_strtod_l+0x298>
 800ba72:	e7e4      	b.n	800ba3e <_strtod_l+0xe6>
 800ba74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ba78:	f04f 3aff 	mov.w	sl, #4294967295
 800ba7c:	e7df      	b.n	800ba3e <_strtod_l+0xe6>
 800ba7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba84:	785b      	ldrb	r3, [r3, #1]
 800ba86:	2b30      	cmp	r3, #48	@ 0x30
 800ba88:	d0f9      	beq.n	800ba7e <_strtod_l+0x126>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d09d      	beq.n	800b9ca <_strtod_l+0x72>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	2700      	movs	r7, #0
 800ba92:	9308      	str	r3, [sp, #32]
 800ba94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba96:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba98:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ba9a:	46b9      	mov	r9, r7
 800ba9c:	220a      	movs	r2, #10
 800ba9e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800baa0:	7805      	ldrb	r5, [r0, #0]
 800baa2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800baa6:	b2d9      	uxtb	r1, r3
 800baa8:	2909      	cmp	r1, #9
 800baaa:	d928      	bls.n	800bafe <_strtod_l+0x1a6>
 800baac:	494f      	ldr	r1, [pc, #316]	@ (800bbec <_strtod_l+0x294>)
 800baae:	2201      	movs	r2, #1
 800bab0:	f001 f97a 	bl	800cda8 <strncmp>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d032      	beq.n	800bb1e <_strtod_l+0x1c6>
 800bab8:	2000      	movs	r0, #0
 800baba:	462a      	mov	r2, r5
 800babc:	900a      	str	r0, [sp, #40]	@ 0x28
 800babe:	464d      	mov	r5, r9
 800bac0:	4603      	mov	r3, r0
 800bac2:	2a65      	cmp	r2, #101	@ 0x65
 800bac4:	d001      	beq.n	800baca <_strtod_l+0x172>
 800bac6:	2a45      	cmp	r2, #69	@ 0x45
 800bac8:	d114      	bne.n	800baf4 <_strtod_l+0x19c>
 800baca:	b91d      	cbnz	r5, 800bad4 <_strtod_l+0x17c>
 800bacc:	9a08      	ldr	r2, [sp, #32]
 800bace:	4302      	orrs	r2, r0
 800bad0:	d096      	beq.n	800ba00 <_strtod_l+0xa8>
 800bad2:	2500      	movs	r5, #0
 800bad4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bad6:	1c62      	adds	r2, r4, #1
 800bad8:	9219      	str	r2, [sp, #100]	@ 0x64
 800bada:	7862      	ldrb	r2, [r4, #1]
 800badc:	2a2b      	cmp	r2, #43	@ 0x2b
 800bade:	d07a      	beq.n	800bbd6 <_strtod_l+0x27e>
 800bae0:	2a2d      	cmp	r2, #45	@ 0x2d
 800bae2:	d07e      	beq.n	800bbe2 <_strtod_l+0x28a>
 800bae4:	f04f 0c00 	mov.w	ip, #0
 800bae8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800baec:	2909      	cmp	r1, #9
 800baee:	f240 8085 	bls.w	800bbfc <_strtod_l+0x2a4>
 800baf2:	9419      	str	r4, [sp, #100]	@ 0x64
 800baf4:	f04f 0800 	mov.w	r8, #0
 800baf8:	e0a5      	b.n	800bc46 <_strtod_l+0x2ee>
 800bafa:	2300      	movs	r3, #0
 800bafc:	e7c8      	b.n	800ba90 <_strtod_l+0x138>
 800bafe:	f1b9 0f08 	cmp.w	r9, #8
 800bb02:	bfd8      	it	le
 800bb04:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800bb06:	f100 0001 	add.w	r0, r0, #1
 800bb0a:	bfda      	itte	le
 800bb0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800bb10:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800bb12:	fb02 3707 	mlagt	r7, r2, r7, r3
 800bb16:	f109 0901 	add.w	r9, r9, #1
 800bb1a:	9019      	str	r0, [sp, #100]	@ 0x64
 800bb1c:	e7bf      	b.n	800ba9e <_strtod_l+0x146>
 800bb1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb24:	785a      	ldrb	r2, [r3, #1]
 800bb26:	f1b9 0f00 	cmp.w	r9, #0
 800bb2a:	d03b      	beq.n	800bba4 <_strtod_l+0x24c>
 800bb2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb2e:	464d      	mov	r5, r9
 800bb30:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bb34:	2b09      	cmp	r3, #9
 800bb36:	d912      	bls.n	800bb5e <_strtod_l+0x206>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e7c2      	b.n	800bac2 <_strtod_l+0x16a>
 800bb3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb42:	785a      	ldrb	r2, [r3, #1]
 800bb44:	3001      	adds	r0, #1
 800bb46:	2a30      	cmp	r2, #48	@ 0x30
 800bb48:	d0f8      	beq.n	800bb3c <_strtod_l+0x1e4>
 800bb4a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bb4e:	2b08      	cmp	r3, #8
 800bb50:	f200 84d2 	bhi.w	800c4f8 <_strtod_l+0xba0>
 800bb54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb56:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb58:	2000      	movs	r0, #0
 800bb5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	3a30      	subs	r2, #48	@ 0x30
 800bb60:	f100 0301 	add.w	r3, r0, #1
 800bb64:	d018      	beq.n	800bb98 <_strtod_l+0x240>
 800bb66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb68:	4419      	add	r1, r3
 800bb6a:	910a      	str	r1, [sp, #40]	@ 0x28
 800bb6c:	462e      	mov	r6, r5
 800bb6e:	f04f 0e0a 	mov.w	lr, #10
 800bb72:	1c71      	adds	r1, r6, #1
 800bb74:	eba1 0c05 	sub.w	ip, r1, r5
 800bb78:	4563      	cmp	r3, ip
 800bb7a:	dc15      	bgt.n	800bba8 <_strtod_l+0x250>
 800bb7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800bb80:	182b      	adds	r3, r5, r0
 800bb82:	2b08      	cmp	r3, #8
 800bb84:	f105 0501 	add.w	r5, r5, #1
 800bb88:	4405      	add	r5, r0
 800bb8a:	dc1a      	bgt.n	800bbc2 <_strtod_l+0x26a>
 800bb8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb8e:	230a      	movs	r3, #10
 800bb90:	fb03 2301 	mla	r3, r3, r1, r2
 800bb94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb96:	2300      	movs	r3, #0
 800bb98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb9a:	1c51      	adds	r1, r2, #1
 800bb9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb9e:	7852      	ldrb	r2, [r2, #1]
 800bba0:	4618      	mov	r0, r3
 800bba2:	e7c5      	b.n	800bb30 <_strtod_l+0x1d8>
 800bba4:	4648      	mov	r0, r9
 800bba6:	e7ce      	b.n	800bb46 <_strtod_l+0x1ee>
 800bba8:	2e08      	cmp	r6, #8
 800bbaa:	dc05      	bgt.n	800bbb8 <_strtod_l+0x260>
 800bbac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bbae:	fb0e f606 	mul.w	r6, lr, r6
 800bbb2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800bbb4:	460e      	mov	r6, r1
 800bbb6:	e7dc      	b.n	800bb72 <_strtod_l+0x21a>
 800bbb8:	2910      	cmp	r1, #16
 800bbba:	bfd8      	it	le
 800bbbc:	fb0e f707 	mulle.w	r7, lr, r7
 800bbc0:	e7f8      	b.n	800bbb4 <_strtod_l+0x25c>
 800bbc2:	2b0f      	cmp	r3, #15
 800bbc4:	bfdc      	itt	le
 800bbc6:	230a      	movle	r3, #10
 800bbc8:	fb03 2707 	mlale	r7, r3, r7, r2
 800bbcc:	e7e3      	b.n	800bb96 <_strtod_l+0x23e>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e77a      	b.n	800bacc <_strtod_l+0x174>
 800bbd6:	f04f 0c00 	mov.w	ip, #0
 800bbda:	1ca2      	adds	r2, r4, #2
 800bbdc:	9219      	str	r2, [sp, #100]	@ 0x64
 800bbde:	78a2      	ldrb	r2, [r4, #2]
 800bbe0:	e782      	b.n	800bae8 <_strtod_l+0x190>
 800bbe2:	f04f 0c01 	mov.w	ip, #1
 800bbe6:	e7f8      	b.n	800bbda <_strtod_l+0x282>
 800bbe8:	0800df24 	.word	0x0800df24
 800bbec:	0800dd57 	.word	0x0800dd57
 800bbf0:	7ff00000 	.word	0x7ff00000
 800bbf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbf6:	1c51      	adds	r1, r2, #1
 800bbf8:	9119      	str	r1, [sp, #100]	@ 0x64
 800bbfa:	7852      	ldrb	r2, [r2, #1]
 800bbfc:	2a30      	cmp	r2, #48	@ 0x30
 800bbfe:	d0f9      	beq.n	800bbf4 <_strtod_l+0x29c>
 800bc00:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bc04:	2908      	cmp	r1, #8
 800bc06:	f63f af75 	bhi.w	800baf4 <_strtod_l+0x19c>
 800bc0a:	3a30      	subs	r2, #48	@ 0x30
 800bc0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bc10:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bc12:	f04f 080a 	mov.w	r8, #10
 800bc16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bc18:	1c56      	adds	r6, r2, #1
 800bc1a:	9619      	str	r6, [sp, #100]	@ 0x64
 800bc1c:	7852      	ldrb	r2, [r2, #1]
 800bc1e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bc22:	f1be 0f09 	cmp.w	lr, #9
 800bc26:	d939      	bls.n	800bc9c <_strtod_l+0x344>
 800bc28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bc2a:	1a76      	subs	r6, r6, r1
 800bc2c:	2e08      	cmp	r6, #8
 800bc2e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bc32:	dc03      	bgt.n	800bc3c <_strtod_l+0x2e4>
 800bc34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc36:	4588      	cmp	r8, r1
 800bc38:	bfa8      	it	ge
 800bc3a:	4688      	movge	r8, r1
 800bc3c:	f1bc 0f00 	cmp.w	ip, #0
 800bc40:	d001      	beq.n	800bc46 <_strtod_l+0x2ee>
 800bc42:	f1c8 0800 	rsb	r8, r8, #0
 800bc46:	2d00      	cmp	r5, #0
 800bc48:	d14e      	bne.n	800bce8 <_strtod_l+0x390>
 800bc4a:	9908      	ldr	r1, [sp, #32]
 800bc4c:	4308      	orrs	r0, r1
 800bc4e:	f47f aebc 	bne.w	800b9ca <_strtod_l+0x72>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f47f aed4 	bne.w	800ba00 <_strtod_l+0xa8>
 800bc58:	2a69      	cmp	r2, #105	@ 0x69
 800bc5a:	d028      	beq.n	800bcae <_strtod_l+0x356>
 800bc5c:	dc25      	bgt.n	800bcaa <_strtod_l+0x352>
 800bc5e:	2a49      	cmp	r2, #73	@ 0x49
 800bc60:	d025      	beq.n	800bcae <_strtod_l+0x356>
 800bc62:	2a4e      	cmp	r2, #78	@ 0x4e
 800bc64:	f47f aecc 	bne.w	800ba00 <_strtod_l+0xa8>
 800bc68:	499a      	ldr	r1, [pc, #616]	@ (800bed4 <_strtod_l+0x57c>)
 800bc6a:	a819      	add	r0, sp, #100	@ 0x64
 800bc6c:	f001 fbb4 	bl	800d3d8 <__match>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	f43f aec5 	beq.w	800ba00 <_strtod_l+0xa8>
 800bc76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	2b28      	cmp	r3, #40	@ 0x28
 800bc7c:	d12e      	bne.n	800bcdc <_strtod_l+0x384>
 800bc7e:	4996      	ldr	r1, [pc, #600]	@ (800bed8 <_strtod_l+0x580>)
 800bc80:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc82:	a819      	add	r0, sp, #100	@ 0x64
 800bc84:	f001 fbbc 	bl	800d400 <__hexnan>
 800bc88:	2805      	cmp	r0, #5
 800bc8a:	d127      	bne.n	800bcdc <_strtod_l+0x384>
 800bc8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc8e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bc92:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bc96:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bc9a:	e696      	b.n	800b9ca <_strtod_l+0x72>
 800bc9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc9e:	fb08 2101 	mla	r1, r8, r1, r2
 800bca2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bca6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bca8:	e7b5      	b.n	800bc16 <_strtod_l+0x2be>
 800bcaa:	2a6e      	cmp	r2, #110	@ 0x6e
 800bcac:	e7da      	b.n	800bc64 <_strtod_l+0x30c>
 800bcae:	498b      	ldr	r1, [pc, #556]	@ (800bedc <_strtod_l+0x584>)
 800bcb0:	a819      	add	r0, sp, #100	@ 0x64
 800bcb2:	f001 fb91 	bl	800d3d8 <__match>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f43f aea2 	beq.w	800ba00 <_strtod_l+0xa8>
 800bcbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcbe:	4988      	ldr	r1, [pc, #544]	@ (800bee0 <_strtod_l+0x588>)
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	a819      	add	r0, sp, #100	@ 0x64
 800bcc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800bcc6:	f001 fb87 	bl	800d3d8 <__match>
 800bcca:	b910      	cbnz	r0, 800bcd2 <_strtod_l+0x37a>
 800bccc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcce:	3301      	adds	r3, #1
 800bcd0:	9319      	str	r3, [sp, #100]	@ 0x64
 800bcd2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800bef0 <_strtod_l+0x598>
 800bcd6:	f04f 0a00 	mov.w	sl, #0
 800bcda:	e676      	b.n	800b9ca <_strtod_l+0x72>
 800bcdc:	4881      	ldr	r0, [pc, #516]	@ (800bee4 <_strtod_l+0x58c>)
 800bcde:	f001 f8b7 	bl	800ce50 <nan>
 800bce2:	ec5b ab10 	vmov	sl, fp, d0
 800bce6:	e670      	b.n	800b9ca <_strtod_l+0x72>
 800bce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800bcec:	eba8 0303 	sub.w	r3, r8, r3
 800bcf0:	f1b9 0f00 	cmp.w	r9, #0
 800bcf4:	bf08      	it	eq
 800bcf6:	46a9      	moveq	r9, r5
 800bcf8:	2d10      	cmp	r5, #16
 800bcfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcfc:	462c      	mov	r4, r5
 800bcfe:	bfa8      	it	ge
 800bd00:	2410      	movge	r4, #16
 800bd02:	f7f4 fc1f 	bl	8000544 <__aeabi_ui2d>
 800bd06:	2d09      	cmp	r5, #9
 800bd08:	4682      	mov	sl, r0
 800bd0a:	468b      	mov	fp, r1
 800bd0c:	dc13      	bgt.n	800bd36 <_strtod_l+0x3de>
 800bd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f43f ae5a 	beq.w	800b9ca <_strtod_l+0x72>
 800bd16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd18:	dd78      	ble.n	800be0c <_strtod_l+0x4b4>
 800bd1a:	2b16      	cmp	r3, #22
 800bd1c:	dc5f      	bgt.n	800bdde <_strtod_l+0x486>
 800bd1e:	4972      	ldr	r1, [pc, #456]	@ (800bee8 <_strtod_l+0x590>)
 800bd20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd28:	4652      	mov	r2, sl
 800bd2a:	465b      	mov	r3, fp
 800bd2c:	f7f4 fc84 	bl	8000638 <__aeabi_dmul>
 800bd30:	4682      	mov	sl, r0
 800bd32:	468b      	mov	fp, r1
 800bd34:	e649      	b.n	800b9ca <_strtod_l+0x72>
 800bd36:	4b6c      	ldr	r3, [pc, #432]	@ (800bee8 <_strtod_l+0x590>)
 800bd38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bd40:	f7f4 fc7a 	bl	8000638 <__aeabi_dmul>
 800bd44:	4682      	mov	sl, r0
 800bd46:	4638      	mov	r0, r7
 800bd48:	468b      	mov	fp, r1
 800bd4a:	f7f4 fbfb 	bl	8000544 <__aeabi_ui2d>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	4650      	mov	r0, sl
 800bd54:	4659      	mov	r1, fp
 800bd56:	f7f4 fab9 	bl	80002cc <__adddf3>
 800bd5a:	2d0f      	cmp	r5, #15
 800bd5c:	4682      	mov	sl, r0
 800bd5e:	468b      	mov	fp, r1
 800bd60:	ddd5      	ble.n	800bd0e <_strtod_l+0x3b6>
 800bd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd64:	1b2c      	subs	r4, r5, r4
 800bd66:	441c      	add	r4, r3
 800bd68:	2c00      	cmp	r4, #0
 800bd6a:	f340 8093 	ble.w	800be94 <_strtod_l+0x53c>
 800bd6e:	f014 030f 	ands.w	r3, r4, #15
 800bd72:	d00a      	beq.n	800bd8a <_strtod_l+0x432>
 800bd74:	495c      	ldr	r1, [pc, #368]	@ (800bee8 <_strtod_l+0x590>)
 800bd76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd7a:	4652      	mov	r2, sl
 800bd7c:	465b      	mov	r3, fp
 800bd7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd82:	f7f4 fc59 	bl	8000638 <__aeabi_dmul>
 800bd86:	4682      	mov	sl, r0
 800bd88:	468b      	mov	fp, r1
 800bd8a:	f034 040f 	bics.w	r4, r4, #15
 800bd8e:	d073      	beq.n	800be78 <_strtod_l+0x520>
 800bd90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bd94:	dd49      	ble.n	800be2a <_strtod_l+0x4d2>
 800bd96:	2400      	movs	r4, #0
 800bd98:	46a0      	mov	r8, r4
 800bd9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd9c:	46a1      	mov	r9, r4
 800bd9e:	9a05      	ldr	r2, [sp, #20]
 800bda0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800bef0 <_strtod_l+0x598>
 800bda4:	2322      	movs	r3, #34	@ 0x22
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	f04f 0a00 	mov.w	sl, #0
 800bdac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f43f ae0b 	beq.w	800b9ca <_strtod_l+0x72>
 800bdb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdb6:	9805      	ldr	r0, [sp, #20]
 800bdb8:	f7ff f946 	bl	800b048 <_Bfree>
 800bdbc:	9805      	ldr	r0, [sp, #20]
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	f7ff f942 	bl	800b048 <_Bfree>
 800bdc4:	9805      	ldr	r0, [sp, #20]
 800bdc6:	4641      	mov	r1, r8
 800bdc8:	f7ff f93e 	bl	800b048 <_Bfree>
 800bdcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdce:	9805      	ldr	r0, [sp, #20]
 800bdd0:	f7ff f93a 	bl	800b048 <_Bfree>
 800bdd4:	9805      	ldr	r0, [sp, #20]
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	f7ff f936 	bl	800b048 <_Bfree>
 800bddc:	e5f5      	b.n	800b9ca <_strtod_l+0x72>
 800bdde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bde0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bde4:	4293      	cmp	r3, r2
 800bde6:	dbbc      	blt.n	800bd62 <_strtod_l+0x40a>
 800bde8:	4c3f      	ldr	r4, [pc, #252]	@ (800bee8 <_strtod_l+0x590>)
 800bdea:	f1c5 050f 	rsb	r5, r5, #15
 800bdee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bdf2:	4652      	mov	r2, sl
 800bdf4:	465b      	mov	r3, fp
 800bdf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdfa:	f7f4 fc1d 	bl	8000638 <__aeabi_dmul>
 800bdfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be00:	1b5d      	subs	r5, r3, r5
 800be02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800be06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be0a:	e78f      	b.n	800bd2c <_strtod_l+0x3d4>
 800be0c:	3316      	adds	r3, #22
 800be0e:	dba8      	blt.n	800bd62 <_strtod_l+0x40a>
 800be10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be12:	eba3 0808 	sub.w	r8, r3, r8
 800be16:	4b34      	ldr	r3, [pc, #208]	@ (800bee8 <_strtod_l+0x590>)
 800be18:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800be1c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800be20:	4650      	mov	r0, sl
 800be22:	4659      	mov	r1, fp
 800be24:	f7f4 fd32 	bl	800088c <__aeabi_ddiv>
 800be28:	e782      	b.n	800bd30 <_strtod_l+0x3d8>
 800be2a:	2300      	movs	r3, #0
 800be2c:	4f2f      	ldr	r7, [pc, #188]	@ (800beec <_strtod_l+0x594>)
 800be2e:	1124      	asrs	r4, r4, #4
 800be30:	4650      	mov	r0, sl
 800be32:	4659      	mov	r1, fp
 800be34:	461e      	mov	r6, r3
 800be36:	2c01      	cmp	r4, #1
 800be38:	dc21      	bgt.n	800be7e <_strtod_l+0x526>
 800be3a:	b10b      	cbz	r3, 800be40 <_strtod_l+0x4e8>
 800be3c:	4682      	mov	sl, r0
 800be3e:	468b      	mov	fp, r1
 800be40:	492a      	ldr	r1, [pc, #168]	@ (800beec <_strtod_l+0x594>)
 800be42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800be46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800be4a:	4652      	mov	r2, sl
 800be4c:	465b      	mov	r3, fp
 800be4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be52:	f7f4 fbf1 	bl	8000638 <__aeabi_dmul>
 800be56:	4b26      	ldr	r3, [pc, #152]	@ (800bef0 <_strtod_l+0x598>)
 800be58:	460a      	mov	r2, r1
 800be5a:	400b      	ands	r3, r1
 800be5c:	4925      	ldr	r1, [pc, #148]	@ (800bef4 <_strtod_l+0x59c>)
 800be5e:	428b      	cmp	r3, r1
 800be60:	4682      	mov	sl, r0
 800be62:	d898      	bhi.n	800bd96 <_strtod_l+0x43e>
 800be64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800be68:	428b      	cmp	r3, r1
 800be6a:	bf86      	itte	hi
 800be6c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800bef8 <_strtod_l+0x5a0>
 800be70:	f04f 3aff 	movhi.w	sl, #4294967295
 800be74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800be78:	2300      	movs	r3, #0
 800be7a:	9308      	str	r3, [sp, #32]
 800be7c:	e076      	b.n	800bf6c <_strtod_l+0x614>
 800be7e:	07e2      	lsls	r2, r4, #31
 800be80:	d504      	bpl.n	800be8c <_strtod_l+0x534>
 800be82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be86:	f7f4 fbd7 	bl	8000638 <__aeabi_dmul>
 800be8a:	2301      	movs	r3, #1
 800be8c:	3601      	adds	r6, #1
 800be8e:	1064      	asrs	r4, r4, #1
 800be90:	3708      	adds	r7, #8
 800be92:	e7d0      	b.n	800be36 <_strtod_l+0x4de>
 800be94:	d0f0      	beq.n	800be78 <_strtod_l+0x520>
 800be96:	4264      	negs	r4, r4
 800be98:	f014 020f 	ands.w	r2, r4, #15
 800be9c:	d00a      	beq.n	800beb4 <_strtod_l+0x55c>
 800be9e:	4b12      	ldr	r3, [pc, #72]	@ (800bee8 <_strtod_l+0x590>)
 800bea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bea4:	4650      	mov	r0, sl
 800bea6:	4659      	mov	r1, fp
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	f7f4 fcee 	bl	800088c <__aeabi_ddiv>
 800beb0:	4682      	mov	sl, r0
 800beb2:	468b      	mov	fp, r1
 800beb4:	1124      	asrs	r4, r4, #4
 800beb6:	d0df      	beq.n	800be78 <_strtod_l+0x520>
 800beb8:	2c1f      	cmp	r4, #31
 800beba:	dd1f      	ble.n	800befc <_strtod_l+0x5a4>
 800bebc:	2400      	movs	r4, #0
 800bebe:	46a0      	mov	r8, r4
 800bec0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bec2:	46a1      	mov	r9, r4
 800bec4:	9a05      	ldr	r2, [sp, #20]
 800bec6:	2322      	movs	r3, #34	@ 0x22
 800bec8:	f04f 0a00 	mov.w	sl, #0
 800becc:	f04f 0b00 	mov.w	fp, #0
 800bed0:	6013      	str	r3, [r2, #0]
 800bed2:	e76b      	b.n	800bdac <_strtod_l+0x454>
 800bed4:	0800dc45 	.word	0x0800dc45
 800bed8:	0800df10 	.word	0x0800df10
 800bedc:	0800dc3d 	.word	0x0800dc3d
 800bee0:	0800dc74 	.word	0x0800dc74
 800bee4:	0800ddad 	.word	0x0800ddad
 800bee8:	0800de48 	.word	0x0800de48
 800beec:	0800de20 	.word	0x0800de20
 800bef0:	7ff00000 	.word	0x7ff00000
 800bef4:	7ca00000 	.word	0x7ca00000
 800bef8:	7fefffff 	.word	0x7fefffff
 800befc:	f014 0310 	ands.w	r3, r4, #16
 800bf00:	bf18      	it	ne
 800bf02:	236a      	movne	r3, #106	@ 0x6a
 800bf04:	4ea9      	ldr	r6, [pc, #676]	@ (800c1ac <_strtod_l+0x854>)
 800bf06:	9308      	str	r3, [sp, #32]
 800bf08:	4650      	mov	r0, sl
 800bf0a:	4659      	mov	r1, fp
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	07e7      	lsls	r7, r4, #31
 800bf10:	d504      	bpl.n	800bf1c <_strtod_l+0x5c4>
 800bf12:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf16:	f7f4 fb8f 	bl	8000638 <__aeabi_dmul>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	1064      	asrs	r4, r4, #1
 800bf1e:	f106 0608 	add.w	r6, r6, #8
 800bf22:	d1f4      	bne.n	800bf0e <_strtod_l+0x5b6>
 800bf24:	b10b      	cbz	r3, 800bf2a <_strtod_l+0x5d2>
 800bf26:	4682      	mov	sl, r0
 800bf28:	468b      	mov	fp, r1
 800bf2a:	9b08      	ldr	r3, [sp, #32]
 800bf2c:	b1b3      	cbz	r3, 800bf5c <_strtod_l+0x604>
 800bf2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bf32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	4659      	mov	r1, fp
 800bf3a:	dd0f      	ble.n	800bf5c <_strtod_l+0x604>
 800bf3c:	2b1f      	cmp	r3, #31
 800bf3e:	dd56      	ble.n	800bfee <_strtod_l+0x696>
 800bf40:	2b34      	cmp	r3, #52	@ 0x34
 800bf42:	bfde      	ittt	le
 800bf44:	f04f 33ff 	movle.w	r3, #4294967295
 800bf48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bf4c:	4093      	lslle	r3, r2
 800bf4e:	f04f 0a00 	mov.w	sl, #0
 800bf52:	bfcc      	ite	gt
 800bf54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bf58:	ea03 0b01 	andle.w	fp, r3, r1
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	2300      	movs	r3, #0
 800bf60:	4650      	mov	r0, sl
 800bf62:	4659      	mov	r1, fp
 800bf64:	f7f4 fdd0 	bl	8000b08 <__aeabi_dcmpeq>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d1a7      	bne.n	800bebc <_strtod_l+0x564>
 800bf6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bf72:	9805      	ldr	r0, [sp, #20]
 800bf74:	462b      	mov	r3, r5
 800bf76:	464a      	mov	r2, r9
 800bf78:	f7ff f8ce 	bl	800b118 <__s2b>
 800bf7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	f43f af09 	beq.w	800bd96 <_strtod_l+0x43e>
 800bf84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf88:	2a00      	cmp	r2, #0
 800bf8a:	eba3 0308 	sub.w	r3, r3, r8
 800bf8e:	bfa8      	it	ge
 800bf90:	2300      	movge	r3, #0
 800bf92:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf94:	2400      	movs	r4, #0
 800bf96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf9a:	9316      	str	r3, [sp, #88]	@ 0x58
 800bf9c:	46a0      	mov	r8, r4
 800bf9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfa0:	9805      	ldr	r0, [sp, #20]
 800bfa2:	6859      	ldr	r1, [r3, #4]
 800bfa4:	f7ff f810 	bl	800afc8 <_Balloc>
 800bfa8:	4681      	mov	r9, r0
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	f43f aef7 	beq.w	800bd9e <_strtod_l+0x446>
 800bfb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfb2:	691a      	ldr	r2, [r3, #16]
 800bfb4:	3202      	adds	r2, #2
 800bfb6:	f103 010c 	add.w	r1, r3, #12
 800bfba:	0092      	lsls	r2, r2, #2
 800bfbc:	300c      	adds	r0, #12
 800bfbe:	f000 ff37 	bl	800ce30 <memcpy>
 800bfc2:	ec4b ab10 	vmov	d0, sl, fp
 800bfc6:	9805      	ldr	r0, [sp, #20]
 800bfc8:	aa1c      	add	r2, sp, #112	@ 0x70
 800bfca:	a91b      	add	r1, sp, #108	@ 0x6c
 800bfcc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bfd0:	f7ff fbd6 	bl	800b780 <__d2b>
 800bfd4:	901a      	str	r0, [sp, #104]	@ 0x68
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	f43f aee1 	beq.w	800bd9e <_strtod_l+0x446>
 800bfdc:	9805      	ldr	r0, [sp, #20]
 800bfde:	2101      	movs	r1, #1
 800bfe0:	f7ff f930 	bl	800b244 <__i2b>
 800bfe4:	4680      	mov	r8, r0
 800bfe6:	b948      	cbnz	r0, 800bffc <_strtod_l+0x6a4>
 800bfe8:	f04f 0800 	mov.w	r8, #0
 800bfec:	e6d7      	b.n	800bd9e <_strtod_l+0x446>
 800bfee:	f04f 32ff 	mov.w	r2, #4294967295
 800bff2:	fa02 f303 	lsl.w	r3, r2, r3
 800bff6:	ea03 0a0a 	and.w	sl, r3, sl
 800bffa:	e7af      	b.n	800bf5c <_strtod_l+0x604>
 800bffc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bffe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c000:	2d00      	cmp	r5, #0
 800c002:	bfab      	itete	ge
 800c004:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c006:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c008:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c00a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c00c:	bfac      	ite	ge
 800c00e:	18ef      	addge	r7, r5, r3
 800c010:	1b5e      	sublt	r6, r3, r5
 800c012:	9b08      	ldr	r3, [sp, #32]
 800c014:	1aed      	subs	r5, r5, r3
 800c016:	4415      	add	r5, r2
 800c018:	4b65      	ldr	r3, [pc, #404]	@ (800c1b0 <_strtod_l+0x858>)
 800c01a:	3d01      	subs	r5, #1
 800c01c:	429d      	cmp	r5, r3
 800c01e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c022:	da50      	bge.n	800c0c6 <_strtod_l+0x76e>
 800c024:	1b5b      	subs	r3, r3, r5
 800c026:	2b1f      	cmp	r3, #31
 800c028:	eba2 0203 	sub.w	r2, r2, r3
 800c02c:	f04f 0101 	mov.w	r1, #1
 800c030:	dc3d      	bgt.n	800c0ae <_strtod_l+0x756>
 800c032:	fa01 f303 	lsl.w	r3, r1, r3
 800c036:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c038:	2300      	movs	r3, #0
 800c03a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c03c:	18bd      	adds	r5, r7, r2
 800c03e:	9b08      	ldr	r3, [sp, #32]
 800c040:	42af      	cmp	r7, r5
 800c042:	4416      	add	r6, r2
 800c044:	441e      	add	r6, r3
 800c046:	463b      	mov	r3, r7
 800c048:	bfa8      	it	ge
 800c04a:	462b      	movge	r3, r5
 800c04c:	42b3      	cmp	r3, r6
 800c04e:	bfa8      	it	ge
 800c050:	4633      	movge	r3, r6
 800c052:	2b00      	cmp	r3, #0
 800c054:	bfc2      	ittt	gt
 800c056:	1aed      	subgt	r5, r5, r3
 800c058:	1af6      	subgt	r6, r6, r3
 800c05a:	1aff      	subgt	r7, r7, r3
 800c05c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dd16      	ble.n	800c090 <_strtod_l+0x738>
 800c062:	4641      	mov	r1, r8
 800c064:	9805      	ldr	r0, [sp, #20]
 800c066:	461a      	mov	r2, r3
 800c068:	f7ff f9a4 	bl	800b3b4 <__pow5mult>
 800c06c:	4680      	mov	r8, r0
 800c06e:	2800      	cmp	r0, #0
 800c070:	d0ba      	beq.n	800bfe8 <_strtod_l+0x690>
 800c072:	4601      	mov	r1, r0
 800c074:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c076:	9805      	ldr	r0, [sp, #20]
 800c078:	f7ff f8fa 	bl	800b270 <__multiply>
 800c07c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c07e:	2800      	cmp	r0, #0
 800c080:	f43f ae8d 	beq.w	800bd9e <_strtod_l+0x446>
 800c084:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c086:	9805      	ldr	r0, [sp, #20]
 800c088:	f7fe ffde 	bl	800b048 <_Bfree>
 800c08c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c08e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c090:	2d00      	cmp	r5, #0
 800c092:	dc1d      	bgt.n	800c0d0 <_strtod_l+0x778>
 800c094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c096:	2b00      	cmp	r3, #0
 800c098:	dd23      	ble.n	800c0e2 <_strtod_l+0x78a>
 800c09a:	4649      	mov	r1, r9
 800c09c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c09e:	9805      	ldr	r0, [sp, #20]
 800c0a0:	f7ff f988 	bl	800b3b4 <__pow5mult>
 800c0a4:	4681      	mov	r9, r0
 800c0a6:	b9e0      	cbnz	r0, 800c0e2 <_strtod_l+0x78a>
 800c0a8:	f04f 0900 	mov.w	r9, #0
 800c0ac:	e677      	b.n	800bd9e <_strtod_l+0x446>
 800c0ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c0b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c0b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c0ba:	35e2      	adds	r5, #226	@ 0xe2
 800c0bc:	fa01 f305 	lsl.w	r3, r1, r5
 800c0c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c0c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c0c4:	e7ba      	b.n	800c03c <_strtod_l+0x6e4>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0ce:	e7b5      	b.n	800c03c <_strtod_l+0x6e4>
 800c0d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0d2:	9805      	ldr	r0, [sp, #20]
 800c0d4:	462a      	mov	r2, r5
 800c0d6:	f7ff f9c7 	bl	800b468 <__lshift>
 800c0da:	901a      	str	r0, [sp, #104]	@ 0x68
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d1d9      	bne.n	800c094 <_strtod_l+0x73c>
 800c0e0:	e65d      	b.n	800bd9e <_strtod_l+0x446>
 800c0e2:	2e00      	cmp	r6, #0
 800c0e4:	dd07      	ble.n	800c0f6 <_strtod_l+0x79e>
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	9805      	ldr	r0, [sp, #20]
 800c0ea:	4632      	mov	r2, r6
 800c0ec:	f7ff f9bc 	bl	800b468 <__lshift>
 800c0f0:	4681      	mov	r9, r0
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d0d8      	beq.n	800c0a8 <_strtod_l+0x750>
 800c0f6:	2f00      	cmp	r7, #0
 800c0f8:	dd08      	ble.n	800c10c <_strtod_l+0x7b4>
 800c0fa:	4641      	mov	r1, r8
 800c0fc:	9805      	ldr	r0, [sp, #20]
 800c0fe:	463a      	mov	r2, r7
 800c100:	f7ff f9b2 	bl	800b468 <__lshift>
 800c104:	4680      	mov	r8, r0
 800c106:	2800      	cmp	r0, #0
 800c108:	f43f ae49 	beq.w	800bd9e <_strtod_l+0x446>
 800c10c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c10e:	9805      	ldr	r0, [sp, #20]
 800c110:	464a      	mov	r2, r9
 800c112:	f7ff fa31 	bl	800b578 <__mdiff>
 800c116:	4604      	mov	r4, r0
 800c118:	2800      	cmp	r0, #0
 800c11a:	f43f ae40 	beq.w	800bd9e <_strtod_l+0x446>
 800c11e:	68c3      	ldr	r3, [r0, #12]
 800c120:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c122:	2300      	movs	r3, #0
 800c124:	60c3      	str	r3, [r0, #12]
 800c126:	4641      	mov	r1, r8
 800c128:	f7ff fa0a 	bl	800b540 <__mcmp>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	da45      	bge.n	800c1bc <_strtod_l+0x864>
 800c130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c132:	ea53 030a 	orrs.w	r3, r3, sl
 800c136:	d16b      	bne.n	800c210 <_strtod_l+0x8b8>
 800c138:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d167      	bne.n	800c210 <_strtod_l+0x8b8>
 800c140:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c144:	0d1b      	lsrs	r3, r3, #20
 800c146:	051b      	lsls	r3, r3, #20
 800c148:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c14c:	d960      	bls.n	800c210 <_strtod_l+0x8b8>
 800c14e:	6963      	ldr	r3, [r4, #20]
 800c150:	b913      	cbnz	r3, 800c158 <_strtod_l+0x800>
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	2b01      	cmp	r3, #1
 800c156:	dd5b      	ble.n	800c210 <_strtod_l+0x8b8>
 800c158:	4621      	mov	r1, r4
 800c15a:	2201      	movs	r2, #1
 800c15c:	9805      	ldr	r0, [sp, #20]
 800c15e:	f7ff f983 	bl	800b468 <__lshift>
 800c162:	4641      	mov	r1, r8
 800c164:	4604      	mov	r4, r0
 800c166:	f7ff f9eb 	bl	800b540 <__mcmp>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	dd50      	ble.n	800c210 <_strtod_l+0x8b8>
 800c16e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c172:	9a08      	ldr	r2, [sp, #32]
 800c174:	0d1b      	lsrs	r3, r3, #20
 800c176:	051b      	lsls	r3, r3, #20
 800c178:	2a00      	cmp	r2, #0
 800c17a:	d06a      	beq.n	800c252 <_strtod_l+0x8fa>
 800c17c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c180:	d867      	bhi.n	800c252 <_strtod_l+0x8fa>
 800c182:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c186:	f67f ae9d 	bls.w	800bec4 <_strtod_l+0x56c>
 800c18a:	4b0a      	ldr	r3, [pc, #40]	@ (800c1b4 <_strtod_l+0x85c>)
 800c18c:	4650      	mov	r0, sl
 800c18e:	4659      	mov	r1, fp
 800c190:	2200      	movs	r2, #0
 800c192:	f7f4 fa51 	bl	8000638 <__aeabi_dmul>
 800c196:	4b08      	ldr	r3, [pc, #32]	@ (800c1b8 <_strtod_l+0x860>)
 800c198:	400b      	ands	r3, r1
 800c19a:	4682      	mov	sl, r0
 800c19c:	468b      	mov	fp, r1
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f47f ae08 	bne.w	800bdb4 <_strtod_l+0x45c>
 800c1a4:	9a05      	ldr	r2, [sp, #20]
 800c1a6:	2322      	movs	r3, #34	@ 0x22
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	e603      	b.n	800bdb4 <_strtod_l+0x45c>
 800c1ac:	0800df38 	.word	0x0800df38
 800c1b0:	fffffc02 	.word	0xfffffc02
 800c1b4:	39500000 	.word	0x39500000
 800c1b8:	7ff00000 	.word	0x7ff00000
 800c1bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c1c0:	d165      	bne.n	800c28e <_strtod_l+0x936>
 800c1c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c1c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1c8:	b35a      	cbz	r2, 800c222 <_strtod_l+0x8ca>
 800c1ca:	4a9f      	ldr	r2, [pc, #636]	@ (800c448 <_strtod_l+0xaf0>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d12b      	bne.n	800c228 <_strtod_l+0x8d0>
 800c1d0:	9b08      	ldr	r3, [sp, #32]
 800c1d2:	4651      	mov	r1, sl
 800c1d4:	b303      	cbz	r3, 800c218 <_strtod_l+0x8c0>
 800c1d6:	4b9d      	ldr	r3, [pc, #628]	@ (800c44c <_strtod_l+0xaf4>)
 800c1d8:	465a      	mov	r2, fp
 800c1da:	4013      	ands	r3, r2
 800c1dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e4:	d81b      	bhi.n	800c21e <_strtod_l+0x8c6>
 800c1e6:	0d1b      	lsrs	r3, r3, #20
 800c1e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f0:	4299      	cmp	r1, r3
 800c1f2:	d119      	bne.n	800c228 <_strtod_l+0x8d0>
 800c1f4:	4b96      	ldr	r3, [pc, #600]	@ (800c450 <_strtod_l+0xaf8>)
 800c1f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d102      	bne.n	800c202 <_strtod_l+0x8aa>
 800c1fc:	3101      	adds	r1, #1
 800c1fe:	f43f adce 	beq.w	800bd9e <_strtod_l+0x446>
 800c202:	4b92      	ldr	r3, [pc, #584]	@ (800c44c <_strtod_l+0xaf4>)
 800c204:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c206:	401a      	ands	r2, r3
 800c208:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c20c:	f04f 0a00 	mov.w	sl, #0
 800c210:	9b08      	ldr	r3, [sp, #32]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1b9      	bne.n	800c18a <_strtod_l+0x832>
 800c216:	e5cd      	b.n	800bdb4 <_strtod_l+0x45c>
 800c218:	f04f 33ff 	mov.w	r3, #4294967295
 800c21c:	e7e8      	b.n	800c1f0 <_strtod_l+0x898>
 800c21e:	4613      	mov	r3, r2
 800c220:	e7e6      	b.n	800c1f0 <_strtod_l+0x898>
 800c222:	ea53 030a 	orrs.w	r3, r3, sl
 800c226:	d0a2      	beq.n	800c16e <_strtod_l+0x816>
 800c228:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c22a:	b1db      	cbz	r3, 800c264 <_strtod_l+0x90c>
 800c22c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c22e:	4213      	tst	r3, r2
 800c230:	d0ee      	beq.n	800c210 <_strtod_l+0x8b8>
 800c232:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c234:	9a08      	ldr	r2, [sp, #32]
 800c236:	4650      	mov	r0, sl
 800c238:	4659      	mov	r1, fp
 800c23a:	b1bb      	cbz	r3, 800c26c <_strtod_l+0x914>
 800c23c:	f7ff fb6e 	bl	800b91c <sulp>
 800c240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c244:	ec53 2b10 	vmov	r2, r3, d0
 800c248:	f7f4 f840 	bl	80002cc <__adddf3>
 800c24c:	4682      	mov	sl, r0
 800c24e:	468b      	mov	fp, r1
 800c250:	e7de      	b.n	800c210 <_strtod_l+0x8b8>
 800c252:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c256:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c25a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c25e:	f04f 3aff 	mov.w	sl, #4294967295
 800c262:	e7d5      	b.n	800c210 <_strtod_l+0x8b8>
 800c264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c266:	ea13 0f0a 	tst.w	r3, sl
 800c26a:	e7e1      	b.n	800c230 <_strtod_l+0x8d8>
 800c26c:	f7ff fb56 	bl	800b91c <sulp>
 800c270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c274:	ec53 2b10 	vmov	r2, r3, d0
 800c278:	f7f4 f826 	bl	80002c8 <__aeabi_dsub>
 800c27c:	2200      	movs	r2, #0
 800c27e:	2300      	movs	r3, #0
 800c280:	4682      	mov	sl, r0
 800c282:	468b      	mov	fp, r1
 800c284:	f7f4 fc40 	bl	8000b08 <__aeabi_dcmpeq>
 800c288:	2800      	cmp	r0, #0
 800c28a:	d0c1      	beq.n	800c210 <_strtod_l+0x8b8>
 800c28c:	e61a      	b.n	800bec4 <_strtod_l+0x56c>
 800c28e:	4641      	mov	r1, r8
 800c290:	4620      	mov	r0, r4
 800c292:	f7ff facd 	bl	800b830 <__ratio>
 800c296:	ec57 6b10 	vmov	r6, r7, d0
 800c29a:	2200      	movs	r2, #0
 800c29c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	f7f4 fc44 	bl	8000b30 <__aeabi_dcmple>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d06f      	beq.n	800c38c <_strtod_l+0xa34>
 800c2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d17a      	bne.n	800c3a8 <_strtod_l+0xa50>
 800c2b2:	f1ba 0f00 	cmp.w	sl, #0
 800c2b6:	d158      	bne.n	800c36a <_strtod_l+0xa12>
 800c2b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d15a      	bne.n	800c378 <_strtod_l+0xa20>
 800c2c2:	4b64      	ldr	r3, [pc, #400]	@ (800c454 <_strtod_l+0xafc>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	f7f4 fc27 	bl	8000b1c <__aeabi_dcmplt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d159      	bne.n	800c386 <_strtod_l+0xa2e>
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	4639      	mov	r1, r7
 800c2d6:	4b60      	ldr	r3, [pc, #384]	@ (800c458 <_strtod_l+0xb00>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f7f4 f9ad 	bl	8000638 <__aeabi_dmul>
 800c2de:	4606      	mov	r6, r0
 800c2e0:	460f      	mov	r7, r1
 800c2e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c2e6:	9606      	str	r6, [sp, #24]
 800c2e8:	9307      	str	r3, [sp, #28]
 800c2ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ee:	4d57      	ldr	r5, [pc, #348]	@ (800c44c <_strtod_l+0xaf4>)
 800c2f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2f6:	401d      	ands	r5, r3
 800c2f8:	4b58      	ldr	r3, [pc, #352]	@ (800c45c <_strtod_l+0xb04>)
 800c2fa:	429d      	cmp	r5, r3
 800c2fc:	f040 80b2 	bne.w	800c464 <_strtod_l+0xb0c>
 800c300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c302:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c306:	ec4b ab10 	vmov	d0, sl, fp
 800c30a:	f7ff f9c9 	bl	800b6a0 <__ulp>
 800c30e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c312:	ec51 0b10 	vmov	r0, r1, d0
 800c316:	f7f4 f98f 	bl	8000638 <__aeabi_dmul>
 800c31a:	4652      	mov	r2, sl
 800c31c:	465b      	mov	r3, fp
 800c31e:	f7f3 ffd5 	bl	80002cc <__adddf3>
 800c322:	460b      	mov	r3, r1
 800c324:	4949      	ldr	r1, [pc, #292]	@ (800c44c <_strtod_l+0xaf4>)
 800c326:	4a4e      	ldr	r2, [pc, #312]	@ (800c460 <_strtod_l+0xb08>)
 800c328:	4019      	ands	r1, r3
 800c32a:	4291      	cmp	r1, r2
 800c32c:	4682      	mov	sl, r0
 800c32e:	d942      	bls.n	800c3b6 <_strtod_l+0xa5e>
 800c330:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c332:	4b47      	ldr	r3, [pc, #284]	@ (800c450 <_strtod_l+0xaf8>)
 800c334:	429a      	cmp	r2, r3
 800c336:	d103      	bne.n	800c340 <_strtod_l+0x9e8>
 800c338:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c33a:	3301      	adds	r3, #1
 800c33c:	f43f ad2f 	beq.w	800bd9e <_strtod_l+0x446>
 800c340:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c450 <_strtod_l+0xaf8>
 800c344:	f04f 3aff 	mov.w	sl, #4294967295
 800c348:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c34a:	9805      	ldr	r0, [sp, #20]
 800c34c:	f7fe fe7c 	bl	800b048 <_Bfree>
 800c350:	9805      	ldr	r0, [sp, #20]
 800c352:	4649      	mov	r1, r9
 800c354:	f7fe fe78 	bl	800b048 <_Bfree>
 800c358:	9805      	ldr	r0, [sp, #20]
 800c35a:	4641      	mov	r1, r8
 800c35c:	f7fe fe74 	bl	800b048 <_Bfree>
 800c360:	9805      	ldr	r0, [sp, #20]
 800c362:	4621      	mov	r1, r4
 800c364:	f7fe fe70 	bl	800b048 <_Bfree>
 800c368:	e619      	b.n	800bf9e <_strtod_l+0x646>
 800c36a:	f1ba 0f01 	cmp.w	sl, #1
 800c36e:	d103      	bne.n	800c378 <_strtod_l+0xa20>
 800c370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c372:	2b00      	cmp	r3, #0
 800c374:	f43f ada6 	beq.w	800bec4 <_strtod_l+0x56c>
 800c378:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c428 <_strtod_l+0xad0>
 800c37c:	4f35      	ldr	r7, [pc, #212]	@ (800c454 <_strtod_l+0xafc>)
 800c37e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c382:	2600      	movs	r6, #0
 800c384:	e7b1      	b.n	800c2ea <_strtod_l+0x992>
 800c386:	4f34      	ldr	r7, [pc, #208]	@ (800c458 <_strtod_l+0xb00>)
 800c388:	2600      	movs	r6, #0
 800c38a:	e7aa      	b.n	800c2e2 <_strtod_l+0x98a>
 800c38c:	4b32      	ldr	r3, [pc, #200]	@ (800c458 <_strtod_l+0xb00>)
 800c38e:	4630      	mov	r0, r6
 800c390:	4639      	mov	r1, r7
 800c392:	2200      	movs	r2, #0
 800c394:	f7f4 f950 	bl	8000638 <__aeabi_dmul>
 800c398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c39a:	4606      	mov	r6, r0
 800c39c:	460f      	mov	r7, r1
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d09f      	beq.n	800c2e2 <_strtod_l+0x98a>
 800c3a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c3a6:	e7a0      	b.n	800c2ea <_strtod_l+0x992>
 800c3a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c430 <_strtod_l+0xad8>
 800c3ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c3b0:	ec57 6b17 	vmov	r6, r7, d7
 800c3b4:	e799      	b.n	800c2ea <_strtod_l+0x992>
 800c3b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c3ba:	9b08      	ldr	r3, [sp, #32]
 800c3bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1c1      	bne.n	800c348 <_strtod_l+0x9f0>
 800c3c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c3c8:	0d1b      	lsrs	r3, r3, #20
 800c3ca:	051b      	lsls	r3, r3, #20
 800c3cc:	429d      	cmp	r5, r3
 800c3ce:	d1bb      	bne.n	800c348 <_strtod_l+0x9f0>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	f7f4 fc90 	bl	8000cf8 <__aeabi_d2lz>
 800c3d8:	f7f4 f900 	bl	80005dc <__aeabi_l2d>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	4639      	mov	r1, r7
 800c3e4:	f7f3 ff70 	bl	80002c8 <__aeabi_dsub>
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c3f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3f6:	ea46 060a 	orr.w	r6, r6, sl
 800c3fa:	431e      	orrs	r6, r3
 800c3fc:	d06f      	beq.n	800c4de <_strtod_l+0xb86>
 800c3fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800c438 <_strtod_l+0xae0>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f7f4 fb8a 	bl	8000b1c <__aeabi_dcmplt>
 800c408:	2800      	cmp	r0, #0
 800c40a:	f47f acd3 	bne.w	800bdb4 <_strtod_l+0x45c>
 800c40e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c440 <_strtod_l+0xae8>)
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c418:	f7f4 fb9e 	bl	8000b58 <__aeabi_dcmpgt>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d093      	beq.n	800c348 <_strtod_l+0x9f0>
 800c420:	e4c8      	b.n	800bdb4 <_strtod_l+0x45c>
 800c422:	bf00      	nop
 800c424:	f3af 8000 	nop.w
 800c428:	00000000 	.word	0x00000000
 800c42c:	bff00000 	.word	0xbff00000
 800c430:	00000000 	.word	0x00000000
 800c434:	3ff00000 	.word	0x3ff00000
 800c438:	94a03595 	.word	0x94a03595
 800c43c:	3fdfffff 	.word	0x3fdfffff
 800c440:	35afe535 	.word	0x35afe535
 800c444:	3fe00000 	.word	0x3fe00000
 800c448:	000fffff 	.word	0x000fffff
 800c44c:	7ff00000 	.word	0x7ff00000
 800c450:	7fefffff 	.word	0x7fefffff
 800c454:	3ff00000 	.word	0x3ff00000
 800c458:	3fe00000 	.word	0x3fe00000
 800c45c:	7fe00000 	.word	0x7fe00000
 800c460:	7c9fffff 	.word	0x7c9fffff
 800c464:	9b08      	ldr	r3, [sp, #32]
 800c466:	b323      	cbz	r3, 800c4b2 <_strtod_l+0xb5a>
 800c468:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c46c:	d821      	bhi.n	800c4b2 <_strtod_l+0xb5a>
 800c46e:	a328      	add	r3, pc, #160	@ (adr r3, 800c510 <_strtod_l+0xbb8>)
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	4630      	mov	r0, r6
 800c476:	4639      	mov	r1, r7
 800c478:	f7f4 fb5a 	bl	8000b30 <__aeabi_dcmple>
 800c47c:	b1a0      	cbz	r0, 800c4a8 <_strtod_l+0xb50>
 800c47e:	4639      	mov	r1, r7
 800c480:	4630      	mov	r0, r6
 800c482:	f7f4 fbb1 	bl	8000be8 <__aeabi_d2uiz>
 800c486:	2801      	cmp	r0, #1
 800c488:	bf38      	it	cc
 800c48a:	2001      	movcc	r0, #1
 800c48c:	f7f4 f85a 	bl	8000544 <__aeabi_ui2d>
 800c490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c492:	4606      	mov	r6, r0
 800c494:	460f      	mov	r7, r1
 800c496:	b9fb      	cbnz	r3, 800c4d8 <_strtod_l+0xb80>
 800c498:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c49c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c49e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c4a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c4a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c4a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c4ae:	1b5b      	subs	r3, r3, r5
 800c4b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c4b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c4ba:	f7ff f8f1 	bl	800b6a0 <__ulp>
 800c4be:	4650      	mov	r0, sl
 800c4c0:	ec53 2b10 	vmov	r2, r3, d0
 800c4c4:	4659      	mov	r1, fp
 800c4c6:	f7f4 f8b7 	bl	8000638 <__aeabi_dmul>
 800c4ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c4ce:	f7f3 fefd 	bl	80002cc <__adddf3>
 800c4d2:	4682      	mov	sl, r0
 800c4d4:	468b      	mov	fp, r1
 800c4d6:	e770      	b.n	800c3ba <_strtod_l+0xa62>
 800c4d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c4dc:	e7e0      	b.n	800c4a0 <_strtod_l+0xb48>
 800c4de:	a30e      	add	r3, pc, #56	@ (adr r3, 800c518 <_strtod_l+0xbc0>)
 800c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e4:	f7f4 fb1a 	bl	8000b1c <__aeabi_dcmplt>
 800c4e8:	e798      	b.n	800c41c <_strtod_l+0xac4>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	930e      	str	r3, [sp, #56]	@ 0x38
 800c4ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c4f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	f7ff ba6d 	b.w	800b9d2 <_strtod_l+0x7a>
 800c4f8:	2a65      	cmp	r2, #101	@ 0x65
 800c4fa:	f43f ab68 	beq.w	800bbce <_strtod_l+0x276>
 800c4fe:	2a45      	cmp	r2, #69	@ 0x45
 800c500:	f43f ab65 	beq.w	800bbce <_strtod_l+0x276>
 800c504:	2301      	movs	r3, #1
 800c506:	f7ff bba0 	b.w	800bc4a <_strtod_l+0x2f2>
 800c50a:	bf00      	nop
 800c50c:	f3af 8000 	nop.w
 800c510:	ffc00000 	.word	0xffc00000
 800c514:	41dfffff 	.word	0x41dfffff
 800c518:	94a03595 	.word	0x94a03595
 800c51c:	3fcfffff 	.word	0x3fcfffff

0800c520 <_strtod_r>:
 800c520:	4b01      	ldr	r3, [pc, #4]	@ (800c528 <_strtod_r+0x8>)
 800c522:	f7ff ba19 	b.w	800b958 <_strtod_l>
 800c526:	bf00      	nop
 800c528:	2000006c 	.word	0x2000006c

0800c52c <_strtol_l.isra.0>:
 800c52c:	2b24      	cmp	r3, #36	@ 0x24
 800c52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c532:	4686      	mov	lr, r0
 800c534:	4690      	mov	r8, r2
 800c536:	d801      	bhi.n	800c53c <_strtol_l.isra.0+0x10>
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d106      	bne.n	800c54a <_strtol_l.isra.0+0x1e>
 800c53c:	f7fd fdb8 	bl	800a0b0 <__errno>
 800c540:	2316      	movs	r3, #22
 800c542:	6003      	str	r3, [r0, #0]
 800c544:	2000      	movs	r0, #0
 800c546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c54a:	4834      	ldr	r0, [pc, #208]	@ (800c61c <_strtol_l.isra.0+0xf0>)
 800c54c:	460d      	mov	r5, r1
 800c54e:	462a      	mov	r2, r5
 800c550:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c554:	5d06      	ldrb	r6, [r0, r4]
 800c556:	f016 0608 	ands.w	r6, r6, #8
 800c55a:	d1f8      	bne.n	800c54e <_strtol_l.isra.0+0x22>
 800c55c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c55e:	d110      	bne.n	800c582 <_strtol_l.isra.0+0x56>
 800c560:	782c      	ldrb	r4, [r5, #0]
 800c562:	2601      	movs	r6, #1
 800c564:	1c95      	adds	r5, r2, #2
 800c566:	f033 0210 	bics.w	r2, r3, #16
 800c56a:	d115      	bne.n	800c598 <_strtol_l.isra.0+0x6c>
 800c56c:	2c30      	cmp	r4, #48	@ 0x30
 800c56e:	d10d      	bne.n	800c58c <_strtol_l.isra.0+0x60>
 800c570:	782a      	ldrb	r2, [r5, #0]
 800c572:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c576:	2a58      	cmp	r2, #88	@ 0x58
 800c578:	d108      	bne.n	800c58c <_strtol_l.isra.0+0x60>
 800c57a:	786c      	ldrb	r4, [r5, #1]
 800c57c:	3502      	adds	r5, #2
 800c57e:	2310      	movs	r3, #16
 800c580:	e00a      	b.n	800c598 <_strtol_l.isra.0+0x6c>
 800c582:	2c2b      	cmp	r4, #43	@ 0x2b
 800c584:	bf04      	itt	eq
 800c586:	782c      	ldrbeq	r4, [r5, #0]
 800c588:	1c95      	addeq	r5, r2, #2
 800c58a:	e7ec      	b.n	800c566 <_strtol_l.isra.0+0x3a>
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1f6      	bne.n	800c57e <_strtol_l.isra.0+0x52>
 800c590:	2c30      	cmp	r4, #48	@ 0x30
 800c592:	bf14      	ite	ne
 800c594:	230a      	movne	r3, #10
 800c596:	2308      	moveq	r3, #8
 800c598:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c59c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	fbbc f9f3 	udiv	r9, ip, r3
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c5ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c5b0:	2f09      	cmp	r7, #9
 800c5b2:	d80f      	bhi.n	800c5d4 <_strtol_l.isra.0+0xa8>
 800c5b4:	463c      	mov	r4, r7
 800c5b6:	42a3      	cmp	r3, r4
 800c5b8:	dd1b      	ble.n	800c5f2 <_strtol_l.isra.0+0xc6>
 800c5ba:	1c57      	adds	r7, r2, #1
 800c5bc:	d007      	beq.n	800c5ce <_strtol_l.isra.0+0xa2>
 800c5be:	4581      	cmp	r9, r0
 800c5c0:	d314      	bcc.n	800c5ec <_strtol_l.isra.0+0xc0>
 800c5c2:	d101      	bne.n	800c5c8 <_strtol_l.isra.0+0x9c>
 800c5c4:	45a2      	cmp	sl, r4
 800c5c6:	db11      	blt.n	800c5ec <_strtol_l.isra.0+0xc0>
 800c5c8:	fb00 4003 	mla	r0, r0, r3, r4
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5d2:	e7eb      	b.n	800c5ac <_strtol_l.isra.0+0x80>
 800c5d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c5d8:	2f19      	cmp	r7, #25
 800c5da:	d801      	bhi.n	800c5e0 <_strtol_l.isra.0+0xb4>
 800c5dc:	3c37      	subs	r4, #55	@ 0x37
 800c5de:	e7ea      	b.n	800c5b6 <_strtol_l.isra.0+0x8a>
 800c5e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c5e4:	2f19      	cmp	r7, #25
 800c5e6:	d804      	bhi.n	800c5f2 <_strtol_l.isra.0+0xc6>
 800c5e8:	3c57      	subs	r4, #87	@ 0x57
 800c5ea:	e7e4      	b.n	800c5b6 <_strtol_l.isra.0+0x8a>
 800c5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f0:	e7ed      	b.n	800c5ce <_strtol_l.isra.0+0xa2>
 800c5f2:	1c53      	adds	r3, r2, #1
 800c5f4:	d108      	bne.n	800c608 <_strtol_l.isra.0+0xdc>
 800c5f6:	2322      	movs	r3, #34	@ 0x22
 800c5f8:	f8ce 3000 	str.w	r3, [lr]
 800c5fc:	4660      	mov	r0, ip
 800c5fe:	f1b8 0f00 	cmp.w	r8, #0
 800c602:	d0a0      	beq.n	800c546 <_strtol_l.isra.0+0x1a>
 800c604:	1e69      	subs	r1, r5, #1
 800c606:	e006      	b.n	800c616 <_strtol_l.isra.0+0xea>
 800c608:	b106      	cbz	r6, 800c60c <_strtol_l.isra.0+0xe0>
 800c60a:	4240      	negs	r0, r0
 800c60c:	f1b8 0f00 	cmp.w	r8, #0
 800c610:	d099      	beq.n	800c546 <_strtol_l.isra.0+0x1a>
 800c612:	2a00      	cmp	r2, #0
 800c614:	d1f6      	bne.n	800c604 <_strtol_l.isra.0+0xd8>
 800c616:	f8c8 1000 	str.w	r1, [r8]
 800c61a:	e794      	b.n	800c546 <_strtol_l.isra.0+0x1a>
 800c61c:	0800df61 	.word	0x0800df61

0800c620 <_strtol_r>:
 800c620:	f7ff bf84 	b.w	800c52c <_strtol_l.isra.0>

0800c624 <__ssputs_r>:
 800c624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c628:	688e      	ldr	r6, [r1, #8]
 800c62a:	461f      	mov	r7, r3
 800c62c:	42be      	cmp	r6, r7
 800c62e:	680b      	ldr	r3, [r1, #0]
 800c630:	4682      	mov	sl, r0
 800c632:	460c      	mov	r4, r1
 800c634:	4690      	mov	r8, r2
 800c636:	d82d      	bhi.n	800c694 <__ssputs_r+0x70>
 800c638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c63c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c640:	d026      	beq.n	800c690 <__ssputs_r+0x6c>
 800c642:	6965      	ldr	r5, [r4, #20]
 800c644:	6909      	ldr	r1, [r1, #16]
 800c646:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c64a:	eba3 0901 	sub.w	r9, r3, r1
 800c64e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c652:	1c7b      	adds	r3, r7, #1
 800c654:	444b      	add	r3, r9
 800c656:	106d      	asrs	r5, r5, #1
 800c658:	429d      	cmp	r5, r3
 800c65a:	bf38      	it	cc
 800c65c:	461d      	movcc	r5, r3
 800c65e:	0553      	lsls	r3, r2, #21
 800c660:	d527      	bpl.n	800c6b2 <__ssputs_r+0x8e>
 800c662:	4629      	mov	r1, r5
 800c664:	f7fe fc24 	bl	800aeb0 <_malloc_r>
 800c668:	4606      	mov	r6, r0
 800c66a:	b360      	cbz	r0, 800c6c6 <__ssputs_r+0xa2>
 800c66c:	6921      	ldr	r1, [r4, #16]
 800c66e:	464a      	mov	r2, r9
 800c670:	f000 fbde 	bl	800ce30 <memcpy>
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c67e:	81a3      	strh	r3, [r4, #12]
 800c680:	6126      	str	r6, [r4, #16]
 800c682:	6165      	str	r5, [r4, #20]
 800c684:	444e      	add	r6, r9
 800c686:	eba5 0509 	sub.w	r5, r5, r9
 800c68a:	6026      	str	r6, [r4, #0]
 800c68c:	60a5      	str	r5, [r4, #8]
 800c68e:	463e      	mov	r6, r7
 800c690:	42be      	cmp	r6, r7
 800c692:	d900      	bls.n	800c696 <__ssputs_r+0x72>
 800c694:	463e      	mov	r6, r7
 800c696:	6820      	ldr	r0, [r4, #0]
 800c698:	4632      	mov	r2, r6
 800c69a:	4641      	mov	r1, r8
 800c69c:	f000 fb6a 	bl	800cd74 <memmove>
 800c6a0:	68a3      	ldr	r3, [r4, #8]
 800c6a2:	1b9b      	subs	r3, r3, r6
 800c6a4:	60a3      	str	r3, [r4, #8]
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	4433      	add	r3, r6
 800c6aa:	6023      	str	r3, [r4, #0]
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b2:	462a      	mov	r2, r5
 800c6b4:	f000 ff51 	bl	800d55a <_realloc_r>
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d1e0      	bne.n	800c680 <__ssputs_r+0x5c>
 800c6be:	6921      	ldr	r1, [r4, #16]
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	f7fe fb81 	bl	800adc8 <_free_r>
 800c6c6:	230c      	movs	r3, #12
 800c6c8:	f8ca 3000 	str.w	r3, [sl]
 800c6cc:	89a3      	ldrh	r3, [r4, #12]
 800c6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6d2:	81a3      	strh	r3, [r4, #12]
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d8:	e7e9      	b.n	800c6ae <__ssputs_r+0x8a>
	...

0800c6dc <_svfiprintf_r>:
 800c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	4698      	mov	r8, r3
 800c6e2:	898b      	ldrh	r3, [r1, #12]
 800c6e4:	061b      	lsls	r3, r3, #24
 800c6e6:	b09d      	sub	sp, #116	@ 0x74
 800c6e8:	4607      	mov	r7, r0
 800c6ea:	460d      	mov	r5, r1
 800c6ec:	4614      	mov	r4, r2
 800c6ee:	d510      	bpl.n	800c712 <_svfiprintf_r+0x36>
 800c6f0:	690b      	ldr	r3, [r1, #16]
 800c6f2:	b973      	cbnz	r3, 800c712 <_svfiprintf_r+0x36>
 800c6f4:	2140      	movs	r1, #64	@ 0x40
 800c6f6:	f7fe fbdb 	bl	800aeb0 <_malloc_r>
 800c6fa:	6028      	str	r0, [r5, #0]
 800c6fc:	6128      	str	r0, [r5, #16]
 800c6fe:	b930      	cbnz	r0, 800c70e <_svfiprintf_r+0x32>
 800c700:	230c      	movs	r3, #12
 800c702:	603b      	str	r3, [r7, #0]
 800c704:	f04f 30ff 	mov.w	r0, #4294967295
 800c708:	b01d      	add	sp, #116	@ 0x74
 800c70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70e:	2340      	movs	r3, #64	@ 0x40
 800c710:	616b      	str	r3, [r5, #20]
 800c712:	2300      	movs	r3, #0
 800c714:	9309      	str	r3, [sp, #36]	@ 0x24
 800c716:	2320      	movs	r3, #32
 800c718:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c71c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c720:	2330      	movs	r3, #48	@ 0x30
 800c722:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8c0 <_svfiprintf_r+0x1e4>
 800c726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c72a:	f04f 0901 	mov.w	r9, #1
 800c72e:	4623      	mov	r3, r4
 800c730:	469a      	mov	sl, r3
 800c732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c736:	b10a      	cbz	r2, 800c73c <_svfiprintf_r+0x60>
 800c738:	2a25      	cmp	r2, #37	@ 0x25
 800c73a:	d1f9      	bne.n	800c730 <_svfiprintf_r+0x54>
 800c73c:	ebba 0b04 	subs.w	fp, sl, r4
 800c740:	d00b      	beq.n	800c75a <_svfiprintf_r+0x7e>
 800c742:	465b      	mov	r3, fp
 800c744:	4622      	mov	r2, r4
 800c746:	4629      	mov	r1, r5
 800c748:	4638      	mov	r0, r7
 800c74a:	f7ff ff6b 	bl	800c624 <__ssputs_r>
 800c74e:	3001      	adds	r0, #1
 800c750:	f000 80a7 	beq.w	800c8a2 <_svfiprintf_r+0x1c6>
 800c754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c756:	445a      	add	r2, fp
 800c758:	9209      	str	r2, [sp, #36]	@ 0x24
 800c75a:	f89a 3000 	ldrb.w	r3, [sl]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	f000 809f 	beq.w	800c8a2 <_svfiprintf_r+0x1c6>
 800c764:	2300      	movs	r3, #0
 800c766:	f04f 32ff 	mov.w	r2, #4294967295
 800c76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c76e:	f10a 0a01 	add.w	sl, sl, #1
 800c772:	9304      	str	r3, [sp, #16]
 800c774:	9307      	str	r3, [sp, #28]
 800c776:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c77a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c77c:	4654      	mov	r4, sl
 800c77e:	2205      	movs	r2, #5
 800c780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c784:	484e      	ldr	r0, [pc, #312]	@ (800c8c0 <_svfiprintf_r+0x1e4>)
 800c786:	f7f3 fd43 	bl	8000210 <memchr>
 800c78a:	9a04      	ldr	r2, [sp, #16]
 800c78c:	b9d8      	cbnz	r0, 800c7c6 <_svfiprintf_r+0xea>
 800c78e:	06d0      	lsls	r0, r2, #27
 800c790:	bf44      	itt	mi
 800c792:	2320      	movmi	r3, #32
 800c794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c798:	0711      	lsls	r1, r2, #28
 800c79a:	bf44      	itt	mi
 800c79c:	232b      	movmi	r3, #43	@ 0x2b
 800c79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7a8:	d015      	beq.n	800c7d6 <_svfiprintf_r+0xfa>
 800c7aa:	9a07      	ldr	r2, [sp, #28]
 800c7ac:	4654      	mov	r4, sl
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	f04f 0c0a 	mov.w	ip, #10
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ba:	3b30      	subs	r3, #48	@ 0x30
 800c7bc:	2b09      	cmp	r3, #9
 800c7be:	d94b      	bls.n	800c858 <_svfiprintf_r+0x17c>
 800c7c0:	b1b0      	cbz	r0, 800c7f0 <_svfiprintf_r+0x114>
 800c7c2:	9207      	str	r2, [sp, #28]
 800c7c4:	e014      	b.n	800c7f0 <_svfiprintf_r+0x114>
 800c7c6:	eba0 0308 	sub.w	r3, r0, r8
 800c7ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	9304      	str	r3, [sp, #16]
 800c7d2:	46a2      	mov	sl, r4
 800c7d4:	e7d2      	b.n	800c77c <_svfiprintf_r+0xa0>
 800c7d6:	9b03      	ldr	r3, [sp, #12]
 800c7d8:	1d19      	adds	r1, r3, #4
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	9103      	str	r1, [sp, #12]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	bfbb      	ittet	lt
 800c7e2:	425b      	neglt	r3, r3
 800c7e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c7e8:	9307      	strge	r3, [sp, #28]
 800c7ea:	9307      	strlt	r3, [sp, #28]
 800c7ec:	bfb8      	it	lt
 800c7ee:	9204      	strlt	r2, [sp, #16]
 800c7f0:	7823      	ldrb	r3, [r4, #0]
 800c7f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7f4:	d10a      	bne.n	800c80c <_svfiprintf_r+0x130>
 800c7f6:	7863      	ldrb	r3, [r4, #1]
 800c7f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7fa:	d132      	bne.n	800c862 <_svfiprintf_r+0x186>
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	1d1a      	adds	r2, r3, #4
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	9203      	str	r2, [sp, #12]
 800c804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c808:	3402      	adds	r4, #2
 800c80a:	9305      	str	r3, [sp, #20]
 800c80c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c8d0 <_svfiprintf_r+0x1f4>
 800c810:	7821      	ldrb	r1, [r4, #0]
 800c812:	2203      	movs	r2, #3
 800c814:	4650      	mov	r0, sl
 800c816:	f7f3 fcfb 	bl	8000210 <memchr>
 800c81a:	b138      	cbz	r0, 800c82c <_svfiprintf_r+0x150>
 800c81c:	9b04      	ldr	r3, [sp, #16]
 800c81e:	eba0 000a 	sub.w	r0, r0, sl
 800c822:	2240      	movs	r2, #64	@ 0x40
 800c824:	4082      	lsls	r2, r0
 800c826:	4313      	orrs	r3, r2
 800c828:	3401      	adds	r4, #1
 800c82a:	9304      	str	r3, [sp, #16]
 800c82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c830:	4824      	ldr	r0, [pc, #144]	@ (800c8c4 <_svfiprintf_r+0x1e8>)
 800c832:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c836:	2206      	movs	r2, #6
 800c838:	f7f3 fcea 	bl	8000210 <memchr>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d036      	beq.n	800c8ae <_svfiprintf_r+0x1d2>
 800c840:	4b21      	ldr	r3, [pc, #132]	@ (800c8c8 <_svfiprintf_r+0x1ec>)
 800c842:	bb1b      	cbnz	r3, 800c88c <_svfiprintf_r+0x1b0>
 800c844:	9b03      	ldr	r3, [sp, #12]
 800c846:	3307      	adds	r3, #7
 800c848:	f023 0307 	bic.w	r3, r3, #7
 800c84c:	3308      	adds	r3, #8
 800c84e:	9303      	str	r3, [sp, #12]
 800c850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c852:	4433      	add	r3, r6
 800c854:	9309      	str	r3, [sp, #36]	@ 0x24
 800c856:	e76a      	b.n	800c72e <_svfiprintf_r+0x52>
 800c858:	fb0c 3202 	mla	r2, ip, r2, r3
 800c85c:	460c      	mov	r4, r1
 800c85e:	2001      	movs	r0, #1
 800c860:	e7a8      	b.n	800c7b4 <_svfiprintf_r+0xd8>
 800c862:	2300      	movs	r3, #0
 800c864:	3401      	adds	r4, #1
 800c866:	9305      	str	r3, [sp, #20]
 800c868:	4619      	mov	r1, r3
 800c86a:	f04f 0c0a 	mov.w	ip, #10
 800c86e:	4620      	mov	r0, r4
 800c870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c874:	3a30      	subs	r2, #48	@ 0x30
 800c876:	2a09      	cmp	r2, #9
 800c878:	d903      	bls.n	800c882 <_svfiprintf_r+0x1a6>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d0c6      	beq.n	800c80c <_svfiprintf_r+0x130>
 800c87e:	9105      	str	r1, [sp, #20]
 800c880:	e7c4      	b.n	800c80c <_svfiprintf_r+0x130>
 800c882:	fb0c 2101 	mla	r1, ip, r1, r2
 800c886:	4604      	mov	r4, r0
 800c888:	2301      	movs	r3, #1
 800c88a:	e7f0      	b.n	800c86e <_svfiprintf_r+0x192>
 800c88c:	ab03      	add	r3, sp, #12
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	462a      	mov	r2, r5
 800c892:	4b0e      	ldr	r3, [pc, #56]	@ (800c8cc <_svfiprintf_r+0x1f0>)
 800c894:	a904      	add	r1, sp, #16
 800c896:	4638      	mov	r0, r7
 800c898:	f7fc fb0c 	bl	8008eb4 <_printf_float>
 800c89c:	1c42      	adds	r2, r0, #1
 800c89e:	4606      	mov	r6, r0
 800c8a0:	d1d6      	bne.n	800c850 <_svfiprintf_r+0x174>
 800c8a2:	89ab      	ldrh	r3, [r5, #12]
 800c8a4:	065b      	lsls	r3, r3, #25
 800c8a6:	f53f af2d 	bmi.w	800c704 <_svfiprintf_r+0x28>
 800c8aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8ac:	e72c      	b.n	800c708 <_svfiprintf_r+0x2c>
 800c8ae:	ab03      	add	r3, sp, #12
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	462a      	mov	r2, r5
 800c8b4:	4b05      	ldr	r3, [pc, #20]	@ (800c8cc <_svfiprintf_r+0x1f0>)
 800c8b6:	a904      	add	r1, sp, #16
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	f7fc fd93 	bl	80093e4 <_printf_i>
 800c8be:	e7ed      	b.n	800c89c <_svfiprintf_r+0x1c0>
 800c8c0:	0800dd59 	.word	0x0800dd59
 800c8c4:	0800dd63 	.word	0x0800dd63
 800c8c8:	08008eb5 	.word	0x08008eb5
 800c8cc:	0800c625 	.word	0x0800c625
 800c8d0:	0800dd5f 	.word	0x0800dd5f

0800c8d4 <__sfputc_r>:
 800c8d4:	6893      	ldr	r3, [r2, #8]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	b410      	push	{r4}
 800c8dc:	6093      	str	r3, [r2, #8]
 800c8de:	da08      	bge.n	800c8f2 <__sfputc_r+0x1e>
 800c8e0:	6994      	ldr	r4, [r2, #24]
 800c8e2:	42a3      	cmp	r3, r4
 800c8e4:	db01      	blt.n	800c8ea <__sfputc_r+0x16>
 800c8e6:	290a      	cmp	r1, #10
 800c8e8:	d103      	bne.n	800c8f2 <__sfputc_r+0x1e>
 800c8ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ee:	f7fd baf8 	b.w	8009ee2 <__swbuf_r>
 800c8f2:	6813      	ldr	r3, [r2, #0]
 800c8f4:	1c58      	adds	r0, r3, #1
 800c8f6:	6010      	str	r0, [r2, #0]
 800c8f8:	7019      	strb	r1, [r3, #0]
 800c8fa:	4608      	mov	r0, r1
 800c8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <__sfputs_r>:
 800c902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c904:	4606      	mov	r6, r0
 800c906:	460f      	mov	r7, r1
 800c908:	4614      	mov	r4, r2
 800c90a:	18d5      	adds	r5, r2, r3
 800c90c:	42ac      	cmp	r4, r5
 800c90e:	d101      	bne.n	800c914 <__sfputs_r+0x12>
 800c910:	2000      	movs	r0, #0
 800c912:	e007      	b.n	800c924 <__sfputs_r+0x22>
 800c914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c918:	463a      	mov	r2, r7
 800c91a:	4630      	mov	r0, r6
 800c91c:	f7ff ffda 	bl	800c8d4 <__sfputc_r>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d1f3      	bne.n	800c90c <__sfputs_r+0xa>
 800c924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c928 <_vfiprintf_r>:
 800c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	460d      	mov	r5, r1
 800c92e:	b09d      	sub	sp, #116	@ 0x74
 800c930:	4614      	mov	r4, r2
 800c932:	4698      	mov	r8, r3
 800c934:	4606      	mov	r6, r0
 800c936:	b118      	cbz	r0, 800c940 <_vfiprintf_r+0x18>
 800c938:	6a03      	ldr	r3, [r0, #32]
 800c93a:	b90b      	cbnz	r3, 800c940 <_vfiprintf_r+0x18>
 800c93c:	f7fd f90a 	bl	8009b54 <__sinit>
 800c940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c942:	07d9      	lsls	r1, r3, #31
 800c944:	d405      	bmi.n	800c952 <_vfiprintf_r+0x2a>
 800c946:	89ab      	ldrh	r3, [r5, #12]
 800c948:	059a      	lsls	r2, r3, #22
 800c94a:	d402      	bmi.n	800c952 <_vfiprintf_r+0x2a>
 800c94c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c94e:	f7fd fbda 	bl	800a106 <__retarget_lock_acquire_recursive>
 800c952:	89ab      	ldrh	r3, [r5, #12]
 800c954:	071b      	lsls	r3, r3, #28
 800c956:	d501      	bpl.n	800c95c <_vfiprintf_r+0x34>
 800c958:	692b      	ldr	r3, [r5, #16]
 800c95a:	b99b      	cbnz	r3, 800c984 <_vfiprintf_r+0x5c>
 800c95c:	4629      	mov	r1, r5
 800c95e:	4630      	mov	r0, r6
 800c960:	f7fd fafe 	bl	8009f60 <__swsetup_r>
 800c964:	b170      	cbz	r0, 800c984 <_vfiprintf_r+0x5c>
 800c966:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c968:	07dc      	lsls	r4, r3, #31
 800c96a:	d504      	bpl.n	800c976 <_vfiprintf_r+0x4e>
 800c96c:	f04f 30ff 	mov.w	r0, #4294967295
 800c970:	b01d      	add	sp, #116	@ 0x74
 800c972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c976:	89ab      	ldrh	r3, [r5, #12]
 800c978:	0598      	lsls	r0, r3, #22
 800c97a:	d4f7      	bmi.n	800c96c <_vfiprintf_r+0x44>
 800c97c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c97e:	f7fd fbc3 	bl	800a108 <__retarget_lock_release_recursive>
 800c982:	e7f3      	b.n	800c96c <_vfiprintf_r+0x44>
 800c984:	2300      	movs	r3, #0
 800c986:	9309      	str	r3, [sp, #36]	@ 0x24
 800c988:	2320      	movs	r3, #32
 800c98a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c98e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c992:	2330      	movs	r3, #48	@ 0x30
 800c994:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb44 <_vfiprintf_r+0x21c>
 800c998:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c99c:	f04f 0901 	mov.w	r9, #1
 800c9a0:	4623      	mov	r3, r4
 800c9a2:	469a      	mov	sl, r3
 800c9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9a8:	b10a      	cbz	r2, 800c9ae <_vfiprintf_r+0x86>
 800c9aa:	2a25      	cmp	r2, #37	@ 0x25
 800c9ac:	d1f9      	bne.n	800c9a2 <_vfiprintf_r+0x7a>
 800c9ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c9b2:	d00b      	beq.n	800c9cc <_vfiprintf_r+0xa4>
 800c9b4:	465b      	mov	r3, fp
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7ff ffa1 	bl	800c902 <__sfputs_r>
 800c9c0:	3001      	adds	r0, #1
 800c9c2:	f000 80a7 	beq.w	800cb14 <_vfiprintf_r+0x1ec>
 800c9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9c8:	445a      	add	r2, fp
 800c9ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 809f 	beq.w	800cb14 <_vfiprintf_r+0x1ec>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9e0:	f10a 0a01 	add.w	sl, sl, #1
 800c9e4:	9304      	str	r3, [sp, #16]
 800c9e6:	9307      	str	r3, [sp, #28]
 800c9e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9ee:	4654      	mov	r4, sl
 800c9f0:	2205      	movs	r2, #5
 800c9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f6:	4853      	ldr	r0, [pc, #332]	@ (800cb44 <_vfiprintf_r+0x21c>)
 800c9f8:	f7f3 fc0a 	bl	8000210 <memchr>
 800c9fc:	9a04      	ldr	r2, [sp, #16]
 800c9fe:	b9d8      	cbnz	r0, 800ca38 <_vfiprintf_r+0x110>
 800ca00:	06d1      	lsls	r1, r2, #27
 800ca02:	bf44      	itt	mi
 800ca04:	2320      	movmi	r3, #32
 800ca06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca0a:	0713      	lsls	r3, r2, #28
 800ca0c:	bf44      	itt	mi
 800ca0e:	232b      	movmi	r3, #43	@ 0x2b
 800ca10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca14:	f89a 3000 	ldrb.w	r3, [sl]
 800ca18:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca1a:	d015      	beq.n	800ca48 <_vfiprintf_r+0x120>
 800ca1c:	9a07      	ldr	r2, [sp, #28]
 800ca1e:	4654      	mov	r4, sl
 800ca20:	2000      	movs	r0, #0
 800ca22:	f04f 0c0a 	mov.w	ip, #10
 800ca26:	4621      	mov	r1, r4
 800ca28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca2c:	3b30      	subs	r3, #48	@ 0x30
 800ca2e:	2b09      	cmp	r3, #9
 800ca30:	d94b      	bls.n	800caca <_vfiprintf_r+0x1a2>
 800ca32:	b1b0      	cbz	r0, 800ca62 <_vfiprintf_r+0x13a>
 800ca34:	9207      	str	r2, [sp, #28]
 800ca36:	e014      	b.n	800ca62 <_vfiprintf_r+0x13a>
 800ca38:	eba0 0308 	sub.w	r3, r0, r8
 800ca3c:	fa09 f303 	lsl.w	r3, r9, r3
 800ca40:	4313      	orrs	r3, r2
 800ca42:	9304      	str	r3, [sp, #16]
 800ca44:	46a2      	mov	sl, r4
 800ca46:	e7d2      	b.n	800c9ee <_vfiprintf_r+0xc6>
 800ca48:	9b03      	ldr	r3, [sp, #12]
 800ca4a:	1d19      	adds	r1, r3, #4
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	9103      	str	r1, [sp, #12]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	bfbb      	ittet	lt
 800ca54:	425b      	neglt	r3, r3
 800ca56:	f042 0202 	orrlt.w	r2, r2, #2
 800ca5a:	9307      	strge	r3, [sp, #28]
 800ca5c:	9307      	strlt	r3, [sp, #28]
 800ca5e:	bfb8      	it	lt
 800ca60:	9204      	strlt	r2, [sp, #16]
 800ca62:	7823      	ldrb	r3, [r4, #0]
 800ca64:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca66:	d10a      	bne.n	800ca7e <_vfiprintf_r+0x156>
 800ca68:	7863      	ldrb	r3, [r4, #1]
 800ca6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca6c:	d132      	bne.n	800cad4 <_vfiprintf_r+0x1ac>
 800ca6e:	9b03      	ldr	r3, [sp, #12]
 800ca70:	1d1a      	adds	r2, r3, #4
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	9203      	str	r2, [sp, #12]
 800ca76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca7a:	3402      	adds	r4, #2
 800ca7c:	9305      	str	r3, [sp, #20]
 800ca7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb54 <_vfiprintf_r+0x22c>
 800ca82:	7821      	ldrb	r1, [r4, #0]
 800ca84:	2203      	movs	r2, #3
 800ca86:	4650      	mov	r0, sl
 800ca88:	f7f3 fbc2 	bl	8000210 <memchr>
 800ca8c:	b138      	cbz	r0, 800ca9e <_vfiprintf_r+0x176>
 800ca8e:	9b04      	ldr	r3, [sp, #16]
 800ca90:	eba0 000a 	sub.w	r0, r0, sl
 800ca94:	2240      	movs	r2, #64	@ 0x40
 800ca96:	4082      	lsls	r2, r0
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	3401      	adds	r4, #1
 800ca9c:	9304      	str	r3, [sp, #16]
 800ca9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa2:	4829      	ldr	r0, [pc, #164]	@ (800cb48 <_vfiprintf_r+0x220>)
 800caa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800caa8:	2206      	movs	r2, #6
 800caaa:	f7f3 fbb1 	bl	8000210 <memchr>
 800caae:	2800      	cmp	r0, #0
 800cab0:	d03f      	beq.n	800cb32 <_vfiprintf_r+0x20a>
 800cab2:	4b26      	ldr	r3, [pc, #152]	@ (800cb4c <_vfiprintf_r+0x224>)
 800cab4:	bb1b      	cbnz	r3, 800cafe <_vfiprintf_r+0x1d6>
 800cab6:	9b03      	ldr	r3, [sp, #12]
 800cab8:	3307      	adds	r3, #7
 800caba:	f023 0307 	bic.w	r3, r3, #7
 800cabe:	3308      	adds	r3, #8
 800cac0:	9303      	str	r3, [sp, #12]
 800cac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cac4:	443b      	add	r3, r7
 800cac6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cac8:	e76a      	b.n	800c9a0 <_vfiprintf_r+0x78>
 800caca:	fb0c 3202 	mla	r2, ip, r2, r3
 800cace:	460c      	mov	r4, r1
 800cad0:	2001      	movs	r0, #1
 800cad2:	e7a8      	b.n	800ca26 <_vfiprintf_r+0xfe>
 800cad4:	2300      	movs	r3, #0
 800cad6:	3401      	adds	r4, #1
 800cad8:	9305      	str	r3, [sp, #20]
 800cada:	4619      	mov	r1, r3
 800cadc:	f04f 0c0a 	mov.w	ip, #10
 800cae0:	4620      	mov	r0, r4
 800cae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cae6:	3a30      	subs	r2, #48	@ 0x30
 800cae8:	2a09      	cmp	r2, #9
 800caea:	d903      	bls.n	800caf4 <_vfiprintf_r+0x1cc>
 800caec:	2b00      	cmp	r3, #0
 800caee:	d0c6      	beq.n	800ca7e <_vfiprintf_r+0x156>
 800caf0:	9105      	str	r1, [sp, #20]
 800caf2:	e7c4      	b.n	800ca7e <_vfiprintf_r+0x156>
 800caf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800caf8:	4604      	mov	r4, r0
 800cafa:	2301      	movs	r3, #1
 800cafc:	e7f0      	b.n	800cae0 <_vfiprintf_r+0x1b8>
 800cafe:	ab03      	add	r3, sp, #12
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	462a      	mov	r2, r5
 800cb04:	4b12      	ldr	r3, [pc, #72]	@ (800cb50 <_vfiprintf_r+0x228>)
 800cb06:	a904      	add	r1, sp, #16
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f7fc f9d3 	bl	8008eb4 <_printf_float>
 800cb0e:	4607      	mov	r7, r0
 800cb10:	1c78      	adds	r0, r7, #1
 800cb12:	d1d6      	bne.n	800cac2 <_vfiprintf_r+0x19a>
 800cb14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb16:	07d9      	lsls	r1, r3, #31
 800cb18:	d405      	bmi.n	800cb26 <_vfiprintf_r+0x1fe>
 800cb1a:	89ab      	ldrh	r3, [r5, #12]
 800cb1c:	059a      	lsls	r2, r3, #22
 800cb1e:	d402      	bmi.n	800cb26 <_vfiprintf_r+0x1fe>
 800cb20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb22:	f7fd faf1 	bl	800a108 <__retarget_lock_release_recursive>
 800cb26:	89ab      	ldrh	r3, [r5, #12]
 800cb28:	065b      	lsls	r3, r3, #25
 800cb2a:	f53f af1f 	bmi.w	800c96c <_vfiprintf_r+0x44>
 800cb2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb30:	e71e      	b.n	800c970 <_vfiprintf_r+0x48>
 800cb32:	ab03      	add	r3, sp, #12
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	462a      	mov	r2, r5
 800cb38:	4b05      	ldr	r3, [pc, #20]	@ (800cb50 <_vfiprintf_r+0x228>)
 800cb3a:	a904      	add	r1, sp, #16
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f7fc fc51 	bl	80093e4 <_printf_i>
 800cb42:	e7e4      	b.n	800cb0e <_vfiprintf_r+0x1e6>
 800cb44:	0800dd59 	.word	0x0800dd59
 800cb48:	0800dd63 	.word	0x0800dd63
 800cb4c:	08008eb5 	.word	0x08008eb5
 800cb50:	0800c903 	.word	0x0800c903
 800cb54:	0800dd5f 	.word	0x0800dd5f

0800cb58 <__sflush_r>:
 800cb58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb60:	0716      	lsls	r6, r2, #28
 800cb62:	4605      	mov	r5, r0
 800cb64:	460c      	mov	r4, r1
 800cb66:	d454      	bmi.n	800cc12 <__sflush_r+0xba>
 800cb68:	684b      	ldr	r3, [r1, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dc02      	bgt.n	800cb74 <__sflush_r+0x1c>
 800cb6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	dd48      	ble.n	800cc06 <__sflush_r+0xae>
 800cb74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	d045      	beq.n	800cc06 <__sflush_r+0xae>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb80:	682f      	ldr	r7, [r5, #0]
 800cb82:	6a21      	ldr	r1, [r4, #32]
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	d030      	beq.n	800cbea <__sflush_r+0x92>
 800cb88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	0759      	lsls	r1, r3, #29
 800cb8e:	d505      	bpl.n	800cb9c <__sflush_r+0x44>
 800cb90:	6863      	ldr	r3, [r4, #4]
 800cb92:	1ad2      	subs	r2, r2, r3
 800cb94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb96:	b10b      	cbz	r3, 800cb9c <__sflush_r+0x44>
 800cb98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb9a:	1ad2      	subs	r2, r2, r3
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cba0:	6a21      	ldr	r1, [r4, #32]
 800cba2:	4628      	mov	r0, r5
 800cba4:	47b0      	blx	r6
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	d106      	bne.n	800cbba <__sflush_r+0x62>
 800cbac:	6829      	ldr	r1, [r5, #0]
 800cbae:	291d      	cmp	r1, #29
 800cbb0:	d82b      	bhi.n	800cc0a <__sflush_r+0xb2>
 800cbb2:	4a2a      	ldr	r2, [pc, #168]	@ (800cc5c <__sflush_r+0x104>)
 800cbb4:	40ca      	lsrs	r2, r1
 800cbb6:	07d6      	lsls	r6, r2, #31
 800cbb8:	d527      	bpl.n	800cc0a <__sflush_r+0xb2>
 800cbba:	2200      	movs	r2, #0
 800cbbc:	6062      	str	r2, [r4, #4]
 800cbbe:	04d9      	lsls	r1, r3, #19
 800cbc0:	6922      	ldr	r2, [r4, #16]
 800cbc2:	6022      	str	r2, [r4, #0]
 800cbc4:	d504      	bpl.n	800cbd0 <__sflush_r+0x78>
 800cbc6:	1c42      	adds	r2, r0, #1
 800cbc8:	d101      	bne.n	800cbce <__sflush_r+0x76>
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	b903      	cbnz	r3, 800cbd0 <__sflush_r+0x78>
 800cbce:	6560      	str	r0, [r4, #84]	@ 0x54
 800cbd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbd2:	602f      	str	r7, [r5, #0]
 800cbd4:	b1b9      	cbz	r1, 800cc06 <__sflush_r+0xae>
 800cbd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbda:	4299      	cmp	r1, r3
 800cbdc:	d002      	beq.n	800cbe4 <__sflush_r+0x8c>
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f7fe f8f2 	bl	800adc8 <_free_r>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbe8:	e00d      	b.n	800cc06 <__sflush_r+0xae>
 800cbea:	2301      	movs	r3, #1
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b0      	blx	r6
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	1c50      	adds	r0, r2, #1
 800cbf4:	d1c9      	bne.n	800cb8a <__sflush_r+0x32>
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d0c6      	beq.n	800cb8a <__sflush_r+0x32>
 800cbfc:	2b1d      	cmp	r3, #29
 800cbfe:	d001      	beq.n	800cc04 <__sflush_r+0xac>
 800cc00:	2b16      	cmp	r3, #22
 800cc02:	d11e      	bne.n	800cc42 <__sflush_r+0xea>
 800cc04:	602f      	str	r7, [r5, #0]
 800cc06:	2000      	movs	r0, #0
 800cc08:	e022      	b.n	800cc50 <__sflush_r+0xf8>
 800cc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc0e:	b21b      	sxth	r3, r3
 800cc10:	e01b      	b.n	800cc4a <__sflush_r+0xf2>
 800cc12:	690f      	ldr	r7, [r1, #16]
 800cc14:	2f00      	cmp	r7, #0
 800cc16:	d0f6      	beq.n	800cc06 <__sflush_r+0xae>
 800cc18:	0793      	lsls	r3, r2, #30
 800cc1a:	680e      	ldr	r6, [r1, #0]
 800cc1c:	bf08      	it	eq
 800cc1e:	694b      	ldreq	r3, [r1, #20]
 800cc20:	600f      	str	r7, [r1, #0]
 800cc22:	bf18      	it	ne
 800cc24:	2300      	movne	r3, #0
 800cc26:	eba6 0807 	sub.w	r8, r6, r7
 800cc2a:	608b      	str	r3, [r1, #8]
 800cc2c:	f1b8 0f00 	cmp.w	r8, #0
 800cc30:	dde9      	ble.n	800cc06 <__sflush_r+0xae>
 800cc32:	6a21      	ldr	r1, [r4, #32]
 800cc34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc36:	4643      	mov	r3, r8
 800cc38:	463a      	mov	r2, r7
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	47b0      	blx	r6
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	dc08      	bgt.n	800cc54 <__sflush_r+0xfc>
 800cc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc54:	4407      	add	r7, r0
 800cc56:	eba8 0800 	sub.w	r8, r8, r0
 800cc5a:	e7e7      	b.n	800cc2c <__sflush_r+0xd4>
 800cc5c:	20400001 	.word	0x20400001

0800cc60 <_fflush_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	690b      	ldr	r3, [r1, #16]
 800cc64:	4605      	mov	r5, r0
 800cc66:	460c      	mov	r4, r1
 800cc68:	b913      	cbnz	r3, 800cc70 <_fflush_r+0x10>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	b118      	cbz	r0, 800cc7a <_fflush_r+0x1a>
 800cc72:	6a03      	ldr	r3, [r0, #32]
 800cc74:	b90b      	cbnz	r3, 800cc7a <_fflush_r+0x1a>
 800cc76:	f7fc ff6d 	bl	8009b54 <__sinit>
 800cc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f3      	beq.n	800cc6a <_fflush_r+0xa>
 800cc82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc84:	07d0      	lsls	r0, r2, #31
 800cc86:	d404      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc88:	0599      	lsls	r1, r3, #22
 800cc8a:	d402      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc8e:	f7fd fa3a 	bl	800a106 <__retarget_lock_acquire_recursive>
 800cc92:	4628      	mov	r0, r5
 800cc94:	4621      	mov	r1, r4
 800cc96:	f7ff ff5f 	bl	800cb58 <__sflush_r>
 800cc9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc9c:	07da      	lsls	r2, r3, #31
 800cc9e:	4605      	mov	r5, r0
 800cca0:	d4e4      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	059b      	lsls	r3, r3, #22
 800cca6:	d4e1      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccaa:	f7fd fa2d 	bl	800a108 <__retarget_lock_release_recursive>
 800ccae:	e7dd      	b.n	800cc6c <_fflush_r+0xc>

0800ccb0 <__swhatbuf_r>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb8:	2900      	cmp	r1, #0
 800ccba:	b096      	sub	sp, #88	@ 0x58
 800ccbc:	4615      	mov	r5, r2
 800ccbe:	461e      	mov	r6, r3
 800ccc0:	da0d      	bge.n	800ccde <__swhatbuf_r+0x2e>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ccc8:	f04f 0100 	mov.w	r1, #0
 800cccc:	bf14      	ite	ne
 800ccce:	2340      	movne	r3, #64	@ 0x40
 800ccd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	6031      	str	r1, [r6, #0]
 800ccd8:	602b      	str	r3, [r5, #0]
 800ccda:	b016      	add	sp, #88	@ 0x58
 800ccdc:	bd70      	pop	{r4, r5, r6, pc}
 800ccde:	466a      	mov	r2, sp
 800cce0:	f000 f874 	bl	800cdcc <_fstat_r>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	dbec      	blt.n	800ccc2 <__swhatbuf_r+0x12>
 800cce8:	9901      	ldr	r1, [sp, #4]
 800ccea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ccee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ccf2:	4259      	negs	r1, r3
 800ccf4:	4159      	adcs	r1, r3
 800ccf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccfa:	e7eb      	b.n	800ccd4 <__swhatbuf_r+0x24>

0800ccfc <__smakebuf_r>:
 800ccfc:	898b      	ldrh	r3, [r1, #12]
 800ccfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd00:	079d      	lsls	r5, r3, #30
 800cd02:	4606      	mov	r6, r0
 800cd04:	460c      	mov	r4, r1
 800cd06:	d507      	bpl.n	800cd18 <__smakebuf_r+0x1c>
 800cd08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	6123      	str	r3, [r4, #16]
 800cd10:	2301      	movs	r3, #1
 800cd12:	6163      	str	r3, [r4, #20]
 800cd14:	b003      	add	sp, #12
 800cd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd18:	ab01      	add	r3, sp, #4
 800cd1a:	466a      	mov	r2, sp
 800cd1c:	f7ff ffc8 	bl	800ccb0 <__swhatbuf_r>
 800cd20:	9f00      	ldr	r7, [sp, #0]
 800cd22:	4605      	mov	r5, r0
 800cd24:	4639      	mov	r1, r7
 800cd26:	4630      	mov	r0, r6
 800cd28:	f7fe f8c2 	bl	800aeb0 <_malloc_r>
 800cd2c:	b948      	cbnz	r0, 800cd42 <__smakebuf_r+0x46>
 800cd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd32:	059a      	lsls	r2, r3, #22
 800cd34:	d4ee      	bmi.n	800cd14 <__smakebuf_r+0x18>
 800cd36:	f023 0303 	bic.w	r3, r3, #3
 800cd3a:	f043 0302 	orr.w	r3, r3, #2
 800cd3e:	81a3      	strh	r3, [r4, #12]
 800cd40:	e7e2      	b.n	800cd08 <__smakebuf_r+0xc>
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	6020      	str	r0, [r4, #0]
 800cd46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd4a:	81a3      	strh	r3, [r4, #12]
 800cd4c:	9b01      	ldr	r3, [sp, #4]
 800cd4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd52:	b15b      	cbz	r3, 800cd6c <__smakebuf_r+0x70>
 800cd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f000 f849 	bl	800cdf0 <_isatty_r>
 800cd5e:	b128      	cbz	r0, 800cd6c <__smakebuf_r+0x70>
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	f023 0303 	bic.w	r3, r3, #3
 800cd66:	f043 0301 	orr.w	r3, r3, #1
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	431d      	orrs	r5, r3
 800cd70:	81a5      	strh	r5, [r4, #12]
 800cd72:	e7cf      	b.n	800cd14 <__smakebuf_r+0x18>

0800cd74 <memmove>:
 800cd74:	4288      	cmp	r0, r1
 800cd76:	b510      	push	{r4, lr}
 800cd78:	eb01 0402 	add.w	r4, r1, r2
 800cd7c:	d902      	bls.n	800cd84 <memmove+0x10>
 800cd7e:	4284      	cmp	r4, r0
 800cd80:	4623      	mov	r3, r4
 800cd82:	d807      	bhi.n	800cd94 <memmove+0x20>
 800cd84:	1e43      	subs	r3, r0, #1
 800cd86:	42a1      	cmp	r1, r4
 800cd88:	d008      	beq.n	800cd9c <memmove+0x28>
 800cd8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd92:	e7f8      	b.n	800cd86 <memmove+0x12>
 800cd94:	4402      	add	r2, r0
 800cd96:	4601      	mov	r1, r0
 800cd98:	428a      	cmp	r2, r1
 800cd9a:	d100      	bne.n	800cd9e <memmove+0x2a>
 800cd9c:	bd10      	pop	{r4, pc}
 800cd9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cda2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cda6:	e7f7      	b.n	800cd98 <memmove+0x24>

0800cda8 <strncmp>:
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	b16a      	cbz	r2, 800cdc8 <strncmp+0x20>
 800cdac:	3901      	subs	r1, #1
 800cdae:	1884      	adds	r4, r0, r2
 800cdb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d103      	bne.n	800cdc4 <strncmp+0x1c>
 800cdbc:	42a0      	cmp	r0, r4
 800cdbe:	d001      	beq.n	800cdc4 <strncmp+0x1c>
 800cdc0:	2a00      	cmp	r2, #0
 800cdc2:	d1f5      	bne.n	800cdb0 <strncmp+0x8>
 800cdc4:	1ad0      	subs	r0, r2, r3
 800cdc6:	bd10      	pop	{r4, pc}
 800cdc8:	4610      	mov	r0, r2
 800cdca:	e7fc      	b.n	800cdc6 <strncmp+0x1e>

0800cdcc <_fstat_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d07      	ldr	r5, [pc, #28]	@ (800cdec <_fstat_r+0x20>)
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	602b      	str	r3, [r5, #0]
 800cdda:	f7f5 feed 	bl	8002bb8 <_fstat>
 800cdde:	1c43      	adds	r3, r0, #1
 800cde0:	d102      	bne.n	800cde8 <_fstat_r+0x1c>
 800cde2:	682b      	ldr	r3, [r5, #0]
 800cde4:	b103      	cbz	r3, 800cde8 <_fstat_r+0x1c>
 800cde6:	6023      	str	r3, [r4, #0]
 800cde8:	bd38      	pop	{r3, r4, r5, pc}
 800cdea:	bf00      	nop
 800cdec:	20000614 	.word	0x20000614

0800cdf0 <_isatty_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d06      	ldr	r5, [pc, #24]	@ (800ce0c <_isatty_r+0x1c>)
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	602b      	str	r3, [r5, #0]
 800cdfc:	f7f5 feec 	bl	8002bd8 <_isatty>
 800ce00:	1c43      	adds	r3, r0, #1
 800ce02:	d102      	bne.n	800ce0a <_isatty_r+0x1a>
 800ce04:	682b      	ldr	r3, [r5, #0]
 800ce06:	b103      	cbz	r3, 800ce0a <_isatty_r+0x1a>
 800ce08:	6023      	str	r3, [r4, #0]
 800ce0a:	bd38      	pop	{r3, r4, r5, pc}
 800ce0c:	20000614 	.word	0x20000614

0800ce10 <_sbrk_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4d06      	ldr	r5, [pc, #24]	@ (800ce2c <_sbrk_r+0x1c>)
 800ce14:	2300      	movs	r3, #0
 800ce16:	4604      	mov	r4, r0
 800ce18:	4608      	mov	r0, r1
 800ce1a:	602b      	str	r3, [r5, #0]
 800ce1c:	f7f5 fef4 	bl	8002c08 <_sbrk>
 800ce20:	1c43      	adds	r3, r0, #1
 800ce22:	d102      	bne.n	800ce2a <_sbrk_r+0x1a>
 800ce24:	682b      	ldr	r3, [r5, #0]
 800ce26:	b103      	cbz	r3, 800ce2a <_sbrk_r+0x1a>
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
 800ce2c:	20000614 	.word	0x20000614

0800ce30 <memcpy>:
 800ce30:	440a      	add	r2, r1
 800ce32:	4291      	cmp	r1, r2
 800ce34:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce38:	d100      	bne.n	800ce3c <memcpy+0xc>
 800ce3a:	4770      	bx	lr
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce46:	4291      	cmp	r1, r2
 800ce48:	d1f9      	bne.n	800ce3e <memcpy+0xe>
 800ce4a:	bd10      	pop	{r4, pc}
 800ce4c:	0000      	movs	r0, r0
	...

0800ce50 <nan>:
 800ce50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ce58 <nan+0x8>
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	00000000 	.word	0x00000000
 800ce5c:	7ff80000 	.word	0x7ff80000

0800ce60 <__assert_func>:
 800ce60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce62:	4614      	mov	r4, r2
 800ce64:	461a      	mov	r2, r3
 800ce66:	4b09      	ldr	r3, [pc, #36]	@ (800ce8c <__assert_func+0x2c>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	68d8      	ldr	r0, [r3, #12]
 800ce6e:	b14c      	cbz	r4, 800ce84 <__assert_func+0x24>
 800ce70:	4b07      	ldr	r3, [pc, #28]	@ (800ce90 <__assert_func+0x30>)
 800ce72:	9100      	str	r1, [sp, #0]
 800ce74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce78:	4906      	ldr	r1, [pc, #24]	@ (800ce94 <__assert_func+0x34>)
 800ce7a:	462b      	mov	r3, r5
 800ce7c:	f000 fba8 	bl	800d5d0 <fiprintf>
 800ce80:	f000 fbb8 	bl	800d5f4 <abort>
 800ce84:	4b04      	ldr	r3, [pc, #16]	@ (800ce98 <__assert_func+0x38>)
 800ce86:	461c      	mov	r4, r3
 800ce88:	e7f3      	b.n	800ce72 <__assert_func+0x12>
 800ce8a:	bf00      	nop
 800ce8c:	2000001c 	.word	0x2000001c
 800ce90:	0800dd72 	.word	0x0800dd72
 800ce94:	0800dd7f 	.word	0x0800dd7f
 800ce98:	0800ddad 	.word	0x0800ddad

0800ce9c <_calloc_r>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	fba1 5402 	umull	r5, r4, r1, r2
 800cea2:	b934      	cbnz	r4, 800ceb2 <_calloc_r+0x16>
 800cea4:	4629      	mov	r1, r5
 800cea6:	f7fe f803 	bl	800aeb0 <_malloc_r>
 800ceaa:	4606      	mov	r6, r0
 800ceac:	b928      	cbnz	r0, 800ceba <_calloc_r+0x1e>
 800ceae:	4630      	mov	r0, r6
 800ceb0:	bd70      	pop	{r4, r5, r6, pc}
 800ceb2:	220c      	movs	r2, #12
 800ceb4:	6002      	str	r2, [r0, #0]
 800ceb6:	2600      	movs	r6, #0
 800ceb8:	e7f9      	b.n	800ceae <_calloc_r+0x12>
 800ceba:	462a      	mov	r2, r5
 800cebc:	4621      	mov	r1, r4
 800cebe:	f7fd f8a5 	bl	800a00c <memset>
 800cec2:	e7f4      	b.n	800ceae <_calloc_r+0x12>

0800cec4 <rshift>:
 800cec4:	6903      	ldr	r3, [r0, #16]
 800cec6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ceca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cece:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ced2:	f100 0414 	add.w	r4, r0, #20
 800ced6:	dd45      	ble.n	800cf64 <rshift+0xa0>
 800ced8:	f011 011f 	ands.w	r1, r1, #31
 800cedc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cee0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cee4:	d10c      	bne.n	800cf00 <rshift+0x3c>
 800cee6:	f100 0710 	add.w	r7, r0, #16
 800ceea:	4629      	mov	r1, r5
 800ceec:	42b1      	cmp	r1, r6
 800ceee:	d334      	bcc.n	800cf5a <rshift+0x96>
 800cef0:	1a9b      	subs	r3, r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	1eea      	subs	r2, r5, #3
 800cef6:	4296      	cmp	r6, r2
 800cef8:	bf38      	it	cc
 800cefa:	2300      	movcc	r3, #0
 800cefc:	4423      	add	r3, r4
 800cefe:	e015      	b.n	800cf2c <rshift+0x68>
 800cf00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf04:	f1c1 0820 	rsb	r8, r1, #32
 800cf08:	40cf      	lsrs	r7, r1
 800cf0a:	f105 0e04 	add.w	lr, r5, #4
 800cf0e:	46a1      	mov	r9, r4
 800cf10:	4576      	cmp	r6, lr
 800cf12:	46f4      	mov	ip, lr
 800cf14:	d815      	bhi.n	800cf42 <rshift+0x7e>
 800cf16:	1a9a      	subs	r2, r3, r2
 800cf18:	0092      	lsls	r2, r2, #2
 800cf1a:	3a04      	subs	r2, #4
 800cf1c:	3501      	adds	r5, #1
 800cf1e:	42ae      	cmp	r6, r5
 800cf20:	bf38      	it	cc
 800cf22:	2200      	movcc	r2, #0
 800cf24:	18a3      	adds	r3, r4, r2
 800cf26:	50a7      	str	r7, [r4, r2]
 800cf28:	b107      	cbz	r7, 800cf2c <rshift+0x68>
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	1b1a      	subs	r2, r3, r4
 800cf2e:	42a3      	cmp	r3, r4
 800cf30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf34:	bf08      	it	eq
 800cf36:	2300      	moveq	r3, #0
 800cf38:	6102      	str	r2, [r0, #16]
 800cf3a:	bf08      	it	eq
 800cf3c:	6143      	streq	r3, [r0, #20]
 800cf3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf42:	f8dc c000 	ldr.w	ip, [ip]
 800cf46:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf4a:	ea4c 0707 	orr.w	r7, ip, r7
 800cf4e:	f849 7b04 	str.w	r7, [r9], #4
 800cf52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf56:	40cf      	lsrs	r7, r1
 800cf58:	e7da      	b.n	800cf10 <rshift+0x4c>
 800cf5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf62:	e7c3      	b.n	800ceec <rshift+0x28>
 800cf64:	4623      	mov	r3, r4
 800cf66:	e7e1      	b.n	800cf2c <rshift+0x68>

0800cf68 <__hexdig_fun>:
 800cf68:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cf6c:	2b09      	cmp	r3, #9
 800cf6e:	d802      	bhi.n	800cf76 <__hexdig_fun+0xe>
 800cf70:	3820      	subs	r0, #32
 800cf72:	b2c0      	uxtb	r0, r0
 800cf74:	4770      	bx	lr
 800cf76:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cf7a:	2b05      	cmp	r3, #5
 800cf7c:	d801      	bhi.n	800cf82 <__hexdig_fun+0x1a>
 800cf7e:	3847      	subs	r0, #71	@ 0x47
 800cf80:	e7f7      	b.n	800cf72 <__hexdig_fun+0xa>
 800cf82:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cf86:	2b05      	cmp	r3, #5
 800cf88:	d801      	bhi.n	800cf8e <__hexdig_fun+0x26>
 800cf8a:	3827      	subs	r0, #39	@ 0x27
 800cf8c:	e7f1      	b.n	800cf72 <__hexdig_fun+0xa>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	4770      	bx	lr
	...

0800cf94 <__gethex>:
 800cf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf98:	b085      	sub	sp, #20
 800cf9a:	468a      	mov	sl, r1
 800cf9c:	9302      	str	r3, [sp, #8]
 800cf9e:	680b      	ldr	r3, [r1, #0]
 800cfa0:	9001      	str	r0, [sp, #4]
 800cfa2:	4690      	mov	r8, r2
 800cfa4:	1c9c      	adds	r4, r3, #2
 800cfa6:	46a1      	mov	r9, r4
 800cfa8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cfac:	2830      	cmp	r0, #48	@ 0x30
 800cfae:	d0fa      	beq.n	800cfa6 <__gethex+0x12>
 800cfb0:	eba9 0303 	sub.w	r3, r9, r3
 800cfb4:	f1a3 0b02 	sub.w	fp, r3, #2
 800cfb8:	f7ff ffd6 	bl	800cf68 <__hexdig_fun>
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d168      	bne.n	800d094 <__gethex+0x100>
 800cfc2:	49a0      	ldr	r1, [pc, #640]	@ (800d244 <__gethex+0x2b0>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	4648      	mov	r0, r9
 800cfc8:	f7ff feee 	bl	800cda8 <strncmp>
 800cfcc:	4607      	mov	r7, r0
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	d167      	bne.n	800d0a2 <__gethex+0x10e>
 800cfd2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cfd6:	4626      	mov	r6, r4
 800cfd8:	f7ff ffc6 	bl	800cf68 <__hexdig_fun>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d062      	beq.n	800d0a6 <__gethex+0x112>
 800cfe0:	4623      	mov	r3, r4
 800cfe2:	7818      	ldrb	r0, [r3, #0]
 800cfe4:	2830      	cmp	r0, #48	@ 0x30
 800cfe6:	4699      	mov	r9, r3
 800cfe8:	f103 0301 	add.w	r3, r3, #1
 800cfec:	d0f9      	beq.n	800cfe2 <__gethex+0x4e>
 800cfee:	f7ff ffbb 	bl	800cf68 <__hexdig_fun>
 800cff2:	fab0 f580 	clz	r5, r0
 800cff6:	096d      	lsrs	r5, r5, #5
 800cff8:	f04f 0b01 	mov.w	fp, #1
 800cffc:	464a      	mov	r2, r9
 800cffe:	4616      	mov	r6, r2
 800d000:	3201      	adds	r2, #1
 800d002:	7830      	ldrb	r0, [r6, #0]
 800d004:	f7ff ffb0 	bl	800cf68 <__hexdig_fun>
 800d008:	2800      	cmp	r0, #0
 800d00a:	d1f8      	bne.n	800cffe <__gethex+0x6a>
 800d00c:	498d      	ldr	r1, [pc, #564]	@ (800d244 <__gethex+0x2b0>)
 800d00e:	2201      	movs	r2, #1
 800d010:	4630      	mov	r0, r6
 800d012:	f7ff fec9 	bl	800cda8 <strncmp>
 800d016:	2800      	cmp	r0, #0
 800d018:	d13f      	bne.n	800d09a <__gethex+0x106>
 800d01a:	b944      	cbnz	r4, 800d02e <__gethex+0x9a>
 800d01c:	1c74      	adds	r4, r6, #1
 800d01e:	4622      	mov	r2, r4
 800d020:	4616      	mov	r6, r2
 800d022:	3201      	adds	r2, #1
 800d024:	7830      	ldrb	r0, [r6, #0]
 800d026:	f7ff ff9f 	bl	800cf68 <__hexdig_fun>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d1f8      	bne.n	800d020 <__gethex+0x8c>
 800d02e:	1ba4      	subs	r4, r4, r6
 800d030:	00a7      	lsls	r7, r4, #2
 800d032:	7833      	ldrb	r3, [r6, #0]
 800d034:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d038:	2b50      	cmp	r3, #80	@ 0x50
 800d03a:	d13e      	bne.n	800d0ba <__gethex+0x126>
 800d03c:	7873      	ldrb	r3, [r6, #1]
 800d03e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d040:	d033      	beq.n	800d0aa <__gethex+0x116>
 800d042:	2b2d      	cmp	r3, #45	@ 0x2d
 800d044:	d034      	beq.n	800d0b0 <__gethex+0x11c>
 800d046:	1c71      	adds	r1, r6, #1
 800d048:	2400      	movs	r4, #0
 800d04a:	7808      	ldrb	r0, [r1, #0]
 800d04c:	f7ff ff8c 	bl	800cf68 <__hexdig_fun>
 800d050:	1e43      	subs	r3, r0, #1
 800d052:	b2db      	uxtb	r3, r3
 800d054:	2b18      	cmp	r3, #24
 800d056:	d830      	bhi.n	800d0ba <__gethex+0x126>
 800d058:	f1a0 0210 	sub.w	r2, r0, #16
 800d05c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d060:	f7ff ff82 	bl	800cf68 <__hexdig_fun>
 800d064:	f100 3cff 	add.w	ip, r0, #4294967295
 800d068:	fa5f fc8c 	uxtb.w	ip, ip
 800d06c:	f1bc 0f18 	cmp.w	ip, #24
 800d070:	f04f 030a 	mov.w	r3, #10
 800d074:	d91e      	bls.n	800d0b4 <__gethex+0x120>
 800d076:	b104      	cbz	r4, 800d07a <__gethex+0xe6>
 800d078:	4252      	negs	r2, r2
 800d07a:	4417      	add	r7, r2
 800d07c:	f8ca 1000 	str.w	r1, [sl]
 800d080:	b1ed      	cbz	r5, 800d0be <__gethex+0x12a>
 800d082:	f1bb 0f00 	cmp.w	fp, #0
 800d086:	bf0c      	ite	eq
 800d088:	2506      	moveq	r5, #6
 800d08a:	2500      	movne	r5, #0
 800d08c:	4628      	mov	r0, r5
 800d08e:	b005      	add	sp, #20
 800d090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d094:	2500      	movs	r5, #0
 800d096:	462c      	mov	r4, r5
 800d098:	e7b0      	b.n	800cffc <__gethex+0x68>
 800d09a:	2c00      	cmp	r4, #0
 800d09c:	d1c7      	bne.n	800d02e <__gethex+0x9a>
 800d09e:	4627      	mov	r7, r4
 800d0a0:	e7c7      	b.n	800d032 <__gethex+0x9e>
 800d0a2:	464e      	mov	r6, r9
 800d0a4:	462f      	mov	r7, r5
 800d0a6:	2501      	movs	r5, #1
 800d0a8:	e7c3      	b.n	800d032 <__gethex+0x9e>
 800d0aa:	2400      	movs	r4, #0
 800d0ac:	1cb1      	adds	r1, r6, #2
 800d0ae:	e7cc      	b.n	800d04a <__gethex+0xb6>
 800d0b0:	2401      	movs	r4, #1
 800d0b2:	e7fb      	b.n	800d0ac <__gethex+0x118>
 800d0b4:	fb03 0002 	mla	r0, r3, r2, r0
 800d0b8:	e7ce      	b.n	800d058 <__gethex+0xc4>
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	e7de      	b.n	800d07c <__gethex+0xe8>
 800d0be:	eba6 0309 	sub.w	r3, r6, r9
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	2b07      	cmp	r3, #7
 800d0c8:	dc0a      	bgt.n	800d0e0 <__gethex+0x14c>
 800d0ca:	9801      	ldr	r0, [sp, #4]
 800d0cc:	f7fd ff7c 	bl	800afc8 <_Balloc>
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	b940      	cbnz	r0, 800d0e6 <__gethex+0x152>
 800d0d4:	4b5c      	ldr	r3, [pc, #368]	@ (800d248 <__gethex+0x2b4>)
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	21e4      	movs	r1, #228	@ 0xe4
 800d0da:	485c      	ldr	r0, [pc, #368]	@ (800d24c <__gethex+0x2b8>)
 800d0dc:	f7ff fec0 	bl	800ce60 <__assert_func>
 800d0e0:	3101      	adds	r1, #1
 800d0e2:	105b      	asrs	r3, r3, #1
 800d0e4:	e7ef      	b.n	800d0c6 <__gethex+0x132>
 800d0e6:	f100 0a14 	add.w	sl, r0, #20
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	4655      	mov	r5, sl
 800d0ee:	469b      	mov	fp, r3
 800d0f0:	45b1      	cmp	r9, r6
 800d0f2:	d337      	bcc.n	800d164 <__gethex+0x1d0>
 800d0f4:	f845 bb04 	str.w	fp, [r5], #4
 800d0f8:	eba5 050a 	sub.w	r5, r5, sl
 800d0fc:	10ad      	asrs	r5, r5, #2
 800d0fe:	6125      	str	r5, [r4, #16]
 800d100:	4658      	mov	r0, fp
 800d102:	f7fe f853 	bl	800b1ac <__hi0bits>
 800d106:	016d      	lsls	r5, r5, #5
 800d108:	f8d8 6000 	ldr.w	r6, [r8]
 800d10c:	1a2d      	subs	r5, r5, r0
 800d10e:	42b5      	cmp	r5, r6
 800d110:	dd54      	ble.n	800d1bc <__gethex+0x228>
 800d112:	1bad      	subs	r5, r5, r6
 800d114:	4629      	mov	r1, r5
 800d116:	4620      	mov	r0, r4
 800d118:	f7fe fbdf 	bl	800b8da <__any_on>
 800d11c:	4681      	mov	r9, r0
 800d11e:	b178      	cbz	r0, 800d140 <__gethex+0x1ac>
 800d120:	1e6b      	subs	r3, r5, #1
 800d122:	1159      	asrs	r1, r3, #5
 800d124:	f003 021f 	and.w	r2, r3, #31
 800d128:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d12c:	f04f 0901 	mov.w	r9, #1
 800d130:	fa09 f202 	lsl.w	r2, r9, r2
 800d134:	420a      	tst	r2, r1
 800d136:	d003      	beq.n	800d140 <__gethex+0x1ac>
 800d138:	454b      	cmp	r3, r9
 800d13a:	dc36      	bgt.n	800d1aa <__gethex+0x216>
 800d13c:	f04f 0902 	mov.w	r9, #2
 800d140:	4629      	mov	r1, r5
 800d142:	4620      	mov	r0, r4
 800d144:	f7ff febe 	bl	800cec4 <rshift>
 800d148:	442f      	add	r7, r5
 800d14a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d14e:	42bb      	cmp	r3, r7
 800d150:	da42      	bge.n	800d1d8 <__gethex+0x244>
 800d152:	9801      	ldr	r0, [sp, #4]
 800d154:	4621      	mov	r1, r4
 800d156:	f7fd ff77 	bl	800b048 <_Bfree>
 800d15a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d15c:	2300      	movs	r3, #0
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	25a3      	movs	r5, #163	@ 0xa3
 800d162:	e793      	b.n	800d08c <__gethex+0xf8>
 800d164:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d168:	2a2e      	cmp	r2, #46	@ 0x2e
 800d16a:	d012      	beq.n	800d192 <__gethex+0x1fe>
 800d16c:	2b20      	cmp	r3, #32
 800d16e:	d104      	bne.n	800d17a <__gethex+0x1e6>
 800d170:	f845 bb04 	str.w	fp, [r5], #4
 800d174:	f04f 0b00 	mov.w	fp, #0
 800d178:	465b      	mov	r3, fp
 800d17a:	7830      	ldrb	r0, [r6, #0]
 800d17c:	9303      	str	r3, [sp, #12]
 800d17e:	f7ff fef3 	bl	800cf68 <__hexdig_fun>
 800d182:	9b03      	ldr	r3, [sp, #12]
 800d184:	f000 000f 	and.w	r0, r0, #15
 800d188:	4098      	lsls	r0, r3
 800d18a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d18e:	3304      	adds	r3, #4
 800d190:	e7ae      	b.n	800d0f0 <__gethex+0x15c>
 800d192:	45b1      	cmp	r9, r6
 800d194:	d8ea      	bhi.n	800d16c <__gethex+0x1d8>
 800d196:	492b      	ldr	r1, [pc, #172]	@ (800d244 <__gethex+0x2b0>)
 800d198:	9303      	str	r3, [sp, #12]
 800d19a:	2201      	movs	r2, #1
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7ff fe03 	bl	800cda8 <strncmp>
 800d1a2:	9b03      	ldr	r3, [sp, #12]
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d1e1      	bne.n	800d16c <__gethex+0x1d8>
 800d1a8:	e7a2      	b.n	800d0f0 <__gethex+0x15c>
 800d1aa:	1ea9      	subs	r1, r5, #2
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f7fe fb94 	bl	800b8da <__any_on>
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	d0c2      	beq.n	800d13c <__gethex+0x1a8>
 800d1b6:	f04f 0903 	mov.w	r9, #3
 800d1ba:	e7c1      	b.n	800d140 <__gethex+0x1ac>
 800d1bc:	da09      	bge.n	800d1d2 <__gethex+0x23e>
 800d1be:	1b75      	subs	r5, r6, r5
 800d1c0:	4621      	mov	r1, r4
 800d1c2:	9801      	ldr	r0, [sp, #4]
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	f7fe f94f 	bl	800b468 <__lshift>
 800d1ca:	1b7f      	subs	r7, r7, r5
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	f100 0a14 	add.w	sl, r0, #20
 800d1d2:	f04f 0900 	mov.w	r9, #0
 800d1d6:	e7b8      	b.n	800d14a <__gethex+0x1b6>
 800d1d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d1dc:	42bd      	cmp	r5, r7
 800d1de:	dd6f      	ble.n	800d2c0 <__gethex+0x32c>
 800d1e0:	1bed      	subs	r5, r5, r7
 800d1e2:	42ae      	cmp	r6, r5
 800d1e4:	dc34      	bgt.n	800d250 <__gethex+0x2bc>
 800d1e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1ea:	2b02      	cmp	r3, #2
 800d1ec:	d022      	beq.n	800d234 <__gethex+0x2a0>
 800d1ee:	2b03      	cmp	r3, #3
 800d1f0:	d024      	beq.n	800d23c <__gethex+0x2a8>
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d115      	bne.n	800d222 <__gethex+0x28e>
 800d1f6:	42ae      	cmp	r6, r5
 800d1f8:	d113      	bne.n	800d222 <__gethex+0x28e>
 800d1fa:	2e01      	cmp	r6, #1
 800d1fc:	d10b      	bne.n	800d216 <__gethex+0x282>
 800d1fe:	9a02      	ldr	r2, [sp, #8]
 800d200:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d204:	6013      	str	r3, [r2, #0]
 800d206:	2301      	movs	r3, #1
 800d208:	6123      	str	r3, [r4, #16]
 800d20a:	f8ca 3000 	str.w	r3, [sl]
 800d20e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d210:	2562      	movs	r5, #98	@ 0x62
 800d212:	601c      	str	r4, [r3, #0]
 800d214:	e73a      	b.n	800d08c <__gethex+0xf8>
 800d216:	1e71      	subs	r1, r6, #1
 800d218:	4620      	mov	r0, r4
 800d21a:	f7fe fb5e 	bl	800b8da <__any_on>
 800d21e:	2800      	cmp	r0, #0
 800d220:	d1ed      	bne.n	800d1fe <__gethex+0x26a>
 800d222:	9801      	ldr	r0, [sp, #4]
 800d224:	4621      	mov	r1, r4
 800d226:	f7fd ff0f 	bl	800b048 <_Bfree>
 800d22a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d22c:	2300      	movs	r3, #0
 800d22e:	6013      	str	r3, [r2, #0]
 800d230:	2550      	movs	r5, #80	@ 0x50
 800d232:	e72b      	b.n	800d08c <__gethex+0xf8>
 800d234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1f3      	bne.n	800d222 <__gethex+0x28e>
 800d23a:	e7e0      	b.n	800d1fe <__gethex+0x26a>
 800d23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1dd      	bne.n	800d1fe <__gethex+0x26a>
 800d242:	e7ee      	b.n	800d222 <__gethex+0x28e>
 800d244:	0800dd57 	.word	0x0800dd57
 800d248:	0800dced 	.word	0x0800dced
 800d24c:	0800ddae 	.word	0x0800ddae
 800d250:	1e6f      	subs	r7, r5, #1
 800d252:	f1b9 0f00 	cmp.w	r9, #0
 800d256:	d130      	bne.n	800d2ba <__gethex+0x326>
 800d258:	b127      	cbz	r7, 800d264 <__gethex+0x2d0>
 800d25a:	4639      	mov	r1, r7
 800d25c:	4620      	mov	r0, r4
 800d25e:	f7fe fb3c 	bl	800b8da <__any_on>
 800d262:	4681      	mov	r9, r0
 800d264:	117a      	asrs	r2, r7, #5
 800d266:	2301      	movs	r3, #1
 800d268:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d26c:	f007 071f 	and.w	r7, r7, #31
 800d270:	40bb      	lsls	r3, r7
 800d272:	4213      	tst	r3, r2
 800d274:	4629      	mov	r1, r5
 800d276:	4620      	mov	r0, r4
 800d278:	bf18      	it	ne
 800d27a:	f049 0902 	orrne.w	r9, r9, #2
 800d27e:	f7ff fe21 	bl	800cec4 <rshift>
 800d282:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d286:	1b76      	subs	r6, r6, r5
 800d288:	2502      	movs	r5, #2
 800d28a:	f1b9 0f00 	cmp.w	r9, #0
 800d28e:	d047      	beq.n	800d320 <__gethex+0x38c>
 800d290:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d294:	2b02      	cmp	r3, #2
 800d296:	d015      	beq.n	800d2c4 <__gethex+0x330>
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d017      	beq.n	800d2cc <__gethex+0x338>
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d109      	bne.n	800d2b4 <__gethex+0x320>
 800d2a0:	f019 0f02 	tst.w	r9, #2
 800d2a4:	d006      	beq.n	800d2b4 <__gethex+0x320>
 800d2a6:	f8da 3000 	ldr.w	r3, [sl]
 800d2aa:	ea49 0903 	orr.w	r9, r9, r3
 800d2ae:	f019 0f01 	tst.w	r9, #1
 800d2b2:	d10e      	bne.n	800d2d2 <__gethex+0x33e>
 800d2b4:	f045 0510 	orr.w	r5, r5, #16
 800d2b8:	e032      	b.n	800d320 <__gethex+0x38c>
 800d2ba:	f04f 0901 	mov.w	r9, #1
 800d2be:	e7d1      	b.n	800d264 <__gethex+0x2d0>
 800d2c0:	2501      	movs	r5, #1
 800d2c2:	e7e2      	b.n	800d28a <__gethex+0x2f6>
 800d2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2c6:	f1c3 0301 	rsb	r3, r3, #1
 800d2ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d0f0      	beq.n	800d2b4 <__gethex+0x320>
 800d2d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2d6:	f104 0314 	add.w	r3, r4, #20
 800d2da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d2de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d2e2:	f04f 0c00 	mov.w	ip, #0
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d2f0:	d01b      	beq.n	800d32a <__gethex+0x396>
 800d2f2:	3201      	adds	r2, #1
 800d2f4:	6002      	str	r2, [r0, #0]
 800d2f6:	2d02      	cmp	r5, #2
 800d2f8:	f104 0314 	add.w	r3, r4, #20
 800d2fc:	d13c      	bne.n	800d378 <__gethex+0x3e4>
 800d2fe:	f8d8 2000 	ldr.w	r2, [r8]
 800d302:	3a01      	subs	r2, #1
 800d304:	42b2      	cmp	r2, r6
 800d306:	d109      	bne.n	800d31c <__gethex+0x388>
 800d308:	1171      	asrs	r1, r6, #5
 800d30a:	2201      	movs	r2, #1
 800d30c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d310:	f006 061f 	and.w	r6, r6, #31
 800d314:	fa02 f606 	lsl.w	r6, r2, r6
 800d318:	421e      	tst	r6, r3
 800d31a:	d13a      	bne.n	800d392 <__gethex+0x3fe>
 800d31c:	f045 0520 	orr.w	r5, r5, #32
 800d320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d322:	601c      	str	r4, [r3, #0]
 800d324:	9b02      	ldr	r3, [sp, #8]
 800d326:	601f      	str	r7, [r3, #0]
 800d328:	e6b0      	b.n	800d08c <__gethex+0xf8>
 800d32a:	4299      	cmp	r1, r3
 800d32c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d330:	d8d9      	bhi.n	800d2e6 <__gethex+0x352>
 800d332:	68a3      	ldr	r3, [r4, #8]
 800d334:	459b      	cmp	fp, r3
 800d336:	db17      	blt.n	800d368 <__gethex+0x3d4>
 800d338:	6861      	ldr	r1, [r4, #4]
 800d33a:	9801      	ldr	r0, [sp, #4]
 800d33c:	3101      	adds	r1, #1
 800d33e:	f7fd fe43 	bl	800afc8 <_Balloc>
 800d342:	4681      	mov	r9, r0
 800d344:	b918      	cbnz	r0, 800d34e <__gethex+0x3ba>
 800d346:	4b1a      	ldr	r3, [pc, #104]	@ (800d3b0 <__gethex+0x41c>)
 800d348:	4602      	mov	r2, r0
 800d34a:	2184      	movs	r1, #132	@ 0x84
 800d34c:	e6c5      	b.n	800d0da <__gethex+0x146>
 800d34e:	6922      	ldr	r2, [r4, #16]
 800d350:	3202      	adds	r2, #2
 800d352:	f104 010c 	add.w	r1, r4, #12
 800d356:	0092      	lsls	r2, r2, #2
 800d358:	300c      	adds	r0, #12
 800d35a:	f7ff fd69 	bl	800ce30 <memcpy>
 800d35e:	4621      	mov	r1, r4
 800d360:	9801      	ldr	r0, [sp, #4]
 800d362:	f7fd fe71 	bl	800b048 <_Bfree>
 800d366:	464c      	mov	r4, r9
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d370:	6122      	str	r2, [r4, #16]
 800d372:	2201      	movs	r2, #1
 800d374:	615a      	str	r2, [r3, #20]
 800d376:	e7be      	b.n	800d2f6 <__gethex+0x362>
 800d378:	6922      	ldr	r2, [r4, #16]
 800d37a:	455a      	cmp	r2, fp
 800d37c:	dd0b      	ble.n	800d396 <__gethex+0x402>
 800d37e:	2101      	movs	r1, #1
 800d380:	4620      	mov	r0, r4
 800d382:	f7ff fd9f 	bl	800cec4 <rshift>
 800d386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d38a:	3701      	adds	r7, #1
 800d38c:	42bb      	cmp	r3, r7
 800d38e:	f6ff aee0 	blt.w	800d152 <__gethex+0x1be>
 800d392:	2501      	movs	r5, #1
 800d394:	e7c2      	b.n	800d31c <__gethex+0x388>
 800d396:	f016 061f 	ands.w	r6, r6, #31
 800d39a:	d0fa      	beq.n	800d392 <__gethex+0x3fe>
 800d39c:	4453      	add	r3, sl
 800d39e:	f1c6 0620 	rsb	r6, r6, #32
 800d3a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3a6:	f7fd ff01 	bl	800b1ac <__hi0bits>
 800d3aa:	42b0      	cmp	r0, r6
 800d3ac:	dbe7      	blt.n	800d37e <__gethex+0x3ea>
 800d3ae:	e7f0      	b.n	800d392 <__gethex+0x3fe>
 800d3b0:	0800dced 	.word	0x0800dced

0800d3b4 <L_shift>:
 800d3b4:	f1c2 0208 	rsb	r2, r2, #8
 800d3b8:	0092      	lsls	r2, r2, #2
 800d3ba:	b570      	push	{r4, r5, r6, lr}
 800d3bc:	f1c2 0620 	rsb	r6, r2, #32
 800d3c0:	6843      	ldr	r3, [r0, #4]
 800d3c2:	6804      	ldr	r4, [r0, #0]
 800d3c4:	fa03 f506 	lsl.w	r5, r3, r6
 800d3c8:	432c      	orrs	r4, r5
 800d3ca:	40d3      	lsrs	r3, r2
 800d3cc:	6004      	str	r4, [r0, #0]
 800d3ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3d2:	4288      	cmp	r0, r1
 800d3d4:	d3f4      	bcc.n	800d3c0 <L_shift+0xc>
 800d3d6:	bd70      	pop	{r4, r5, r6, pc}

0800d3d8 <__match>:
 800d3d8:	b530      	push	{r4, r5, lr}
 800d3da:	6803      	ldr	r3, [r0, #0]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3e2:	b914      	cbnz	r4, 800d3ea <__match+0x12>
 800d3e4:	6003      	str	r3, [r0, #0]
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	bd30      	pop	{r4, r5, pc}
 800d3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d3f2:	2d19      	cmp	r5, #25
 800d3f4:	bf98      	it	ls
 800d3f6:	3220      	addls	r2, #32
 800d3f8:	42a2      	cmp	r2, r4
 800d3fa:	d0f0      	beq.n	800d3de <__match+0x6>
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	e7f3      	b.n	800d3e8 <__match+0x10>

0800d400 <__hexnan>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	680b      	ldr	r3, [r1, #0]
 800d406:	6801      	ldr	r1, [r0, #0]
 800d408:	115e      	asrs	r6, r3, #5
 800d40a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d40e:	f013 031f 	ands.w	r3, r3, #31
 800d412:	b087      	sub	sp, #28
 800d414:	bf18      	it	ne
 800d416:	3604      	addne	r6, #4
 800d418:	2500      	movs	r5, #0
 800d41a:	1f37      	subs	r7, r6, #4
 800d41c:	4682      	mov	sl, r0
 800d41e:	4690      	mov	r8, r2
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	f846 5c04 	str.w	r5, [r6, #-4]
 800d426:	46b9      	mov	r9, r7
 800d428:	463c      	mov	r4, r7
 800d42a:	9502      	str	r5, [sp, #8]
 800d42c:	46ab      	mov	fp, r5
 800d42e:	784a      	ldrb	r2, [r1, #1]
 800d430:	1c4b      	adds	r3, r1, #1
 800d432:	9303      	str	r3, [sp, #12]
 800d434:	b342      	cbz	r2, 800d488 <__hexnan+0x88>
 800d436:	4610      	mov	r0, r2
 800d438:	9105      	str	r1, [sp, #20]
 800d43a:	9204      	str	r2, [sp, #16]
 800d43c:	f7ff fd94 	bl	800cf68 <__hexdig_fun>
 800d440:	2800      	cmp	r0, #0
 800d442:	d151      	bne.n	800d4e8 <__hexnan+0xe8>
 800d444:	9a04      	ldr	r2, [sp, #16]
 800d446:	9905      	ldr	r1, [sp, #20]
 800d448:	2a20      	cmp	r2, #32
 800d44a:	d818      	bhi.n	800d47e <__hexnan+0x7e>
 800d44c:	9b02      	ldr	r3, [sp, #8]
 800d44e:	459b      	cmp	fp, r3
 800d450:	dd13      	ble.n	800d47a <__hexnan+0x7a>
 800d452:	454c      	cmp	r4, r9
 800d454:	d206      	bcs.n	800d464 <__hexnan+0x64>
 800d456:	2d07      	cmp	r5, #7
 800d458:	dc04      	bgt.n	800d464 <__hexnan+0x64>
 800d45a:	462a      	mov	r2, r5
 800d45c:	4649      	mov	r1, r9
 800d45e:	4620      	mov	r0, r4
 800d460:	f7ff ffa8 	bl	800d3b4 <L_shift>
 800d464:	4544      	cmp	r4, r8
 800d466:	d952      	bls.n	800d50e <__hexnan+0x10e>
 800d468:	2300      	movs	r3, #0
 800d46a:	f1a4 0904 	sub.w	r9, r4, #4
 800d46e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d472:	f8cd b008 	str.w	fp, [sp, #8]
 800d476:	464c      	mov	r4, r9
 800d478:	461d      	mov	r5, r3
 800d47a:	9903      	ldr	r1, [sp, #12]
 800d47c:	e7d7      	b.n	800d42e <__hexnan+0x2e>
 800d47e:	2a29      	cmp	r2, #41	@ 0x29
 800d480:	d157      	bne.n	800d532 <__hexnan+0x132>
 800d482:	3102      	adds	r1, #2
 800d484:	f8ca 1000 	str.w	r1, [sl]
 800d488:	f1bb 0f00 	cmp.w	fp, #0
 800d48c:	d051      	beq.n	800d532 <__hexnan+0x132>
 800d48e:	454c      	cmp	r4, r9
 800d490:	d206      	bcs.n	800d4a0 <__hexnan+0xa0>
 800d492:	2d07      	cmp	r5, #7
 800d494:	dc04      	bgt.n	800d4a0 <__hexnan+0xa0>
 800d496:	462a      	mov	r2, r5
 800d498:	4649      	mov	r1, r9
 800d49a:	4620      	mov	r0, r4
 800d49c:	f7ff ff8a 	bl	800d3b4 <L_shift>
 800d4a0:	4544      	cmp	r4, r8
 800d4a2:	d936      	bls.n	800d512 <__hexnan+0x112>
 800d4a4:	f1a8 0204 	sub.w	r2, r8, #4
 800d4a8:	4623      	mov	r3, r4
 800d4aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4b2:	429f      	cmp	r7, r3
 800d4b4:	d2f9      	bcs.n	800d4aa <__hexnan+0xaa>
 800d4b6:	1b3b      	subs	r3, r7, r4
 800d4b8:	f023 0303 	bic.w	r3, r3, #3
 800d4bc:	3304      	adds	r3, #4
 800d4be:	3401      	adds	r4, #1
 800d4c0:	3e03      	subs	r6, #3
 800d4c2:	42b4      	cmp	r4, r6
 800d4c4:	bf88      	it	hi
 800d4c6:	2304      	movhi	r3, #4
 800d4c8:	4443      	add	r3, r8
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f843 2b04 	str.w	r2, [r3], #4
 800d4d0:	429f      	cmp	r7, r3
 800d4d2:	d2fb      	bcs.n	800d4cc <__hexnan+0xcc>
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	b91b      	cbnz	r3, 800d4e0 <__hexnan+0xe0>
 800d4d8:	4547      	cmp	r7, r8
 800d4da:	d128      	bne.n	800d52e <__hexnan+0x12e>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	2005      	movs	r0, #5
 800d4e2:	b007      	add	sp, #28
 800d4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e8:	3501      	adds	r5, #1
 800d4ea:	2d08      	cmp	r5, #8
 800d4ec:	f10b 0b01 	add.w	fp, fp, #1
 800d4f0:	dd06      	ble.n	800d500 <__hexnan+0x100>
 800d4f2:	4544      	cmp	r4, r8
 800d4f4:	d9c1      	bls.n	800d47a <__hexnan+0x7a>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4fc:	2501      	movs	r5, #1
 800d4fe:	3c04      	subs	r4, #4
 800d500:	6822      	ldr	r2, [r4, #0]
 800d502:	f000 000f 	and.w	r0, r0, #15
 800d506:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d50a:	6020      	str	r0, [r4, #0]
 800d50c:	e7b5      	b.n	800d47a <__hexnan+0x7a>
 800d50e:	2508      	movs	r5, #8
 800d510:	e7b3      	b.n	800d47a <__hexnan+0x7a>
 800d512:	9b01      	ldr	r3, [sp, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0dd      	beq.n	800d4d4 <__hexnan+0xd4>
 800d518:	f1c3 0320 	rsb	r3, r3, #32
 800d51c:	f04f 32ff 	mov.w	r2, #4294967295
 800d520:	40da      	lsrs	r2, r3
 800d522:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d526:	4013      	ands	r3, r2
 800d528:	f846 3c04 	str.w	r3, [r6, #-4]
 800d52c:	e7d2      	b.n	800d4d4 <__hexnan+0xd4>
 800d52e:	3f04      	subs	r7, #4
 800d530:	e7d0      	b.n	800d4d4 <__hexnan+0xd4>
 800d532:	2004      	movs	r0, #4
 800d534:	e7d5      	b.n	800d4e2 <__hexnan+0xe2>

0800d536 <__ascii_mbtowc>:
 800d536:	b082      	sub	sp, #8
 800d538:	b901      	cbnz	r1, 800d53c <__ascii_mbtowc+0x6>
 800d53a:	a901      	add	r1, sp, #4
 800d53c:	b142      	cbz	r2, 800d550 <__ascii_mbtowc+0x1a>
 800d53e:	b14b      	cbz	r3, 800d554 <__ascii_mbtowc+0x1e>
 800d540:	7813      	ldrb	r3, [r2, #0]
 800d542:	600b      	str	r3, [r1, #0]
 800d544:	7812      	ldrb	r2, [r2, #0]
 800d546:	1e10      	subs	r0, r2, #0
 800d548:	bf18      	it	ne
 800d54a:	2001      	movne	r0, #1
 800d54c:	b002      	add	sp, #8
 800d54e:	4770      	bx	lr
 800d550:	4610      	mov	r0, r2
 800d552:	e7fb      	b.n	800d54c <__ascii_mbtowc+0x16>
 800d554:	f06f 0001 	mvn.w	r0, #1
 800d558:	e7f8      	b.n	800d54c <__ascii_mbtowc+0x16>

0800d55a <_realloc_r>:
 800d55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55e:	4607      	mov	r7, r0
 800d560:	4614      	mov	r4, r2
 800d562:	460d      	mov	r5, r1
 800d564:	b921      	cbnz	r1, 800d570 <_realloc_r+0x16>
 800d566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d56a:	4611      	mov	r1, r2
 800d56c:	f7fd bca0 	b.w	800aeb0 <_malloc_r>
 800d570:	b92a      	cbnz	r2, 800d57e <_realloc_r+0x24>
 800d572:	f7fd fc29 	bl	800adc8 <_free_r>
 800d576:	4625      	mov	r5, r4
 800d578:	4628      	mov	r0, r5
 800d57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57e:	f000 f840 	bl	800d602 <_malloc_usable_size_r>
 800d582:	4284      	cmp	r4, r0
 800d584:	4606      	mov	r6, r0
 800d586:	d802      	bhi.n	800d58e <_realloc_r+0x34>
 800d588:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d58c:	d8f4      	bhi.n	800d578 <_realloc_r+0x1e>
 800d58e:	4621      	mov	r1, r4
 800d590:	4638      	mov	r0, r7
 800d592:	f7fd fc8d 	bl	800aeb0 <_malloc_r>
 800d596:	4680      	mov	r8, r0
 800d598:	b908      	cbnz	r0, 800d59e <_realloc_r+0x44>
 800d59a:	4645      	mov	r5, r8
 800d59c:	e7ec      	b.n	800d578 <_realloc_r+0x1e>
 800d59e:	42b4      	cmp	r4, r6
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	bf28      	it	cs
 800d5a6:	4632      	movcs	r2, r6
 800d5a8:	f7ff fc42 	bl	800ce30 <memcpy>
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	4638      	mov	r0, r7
 800d5b0:	f7fd fc0a 	bl	800adc8 <_free_r>
 800d5b4:	e7f1      	b.n	800d59a <_realloc_r+0x40>

0800d5b6 <__ascii_wctomb>:
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	4608      	mov	r0, r1
 800d5ba:	b141      	cbz	r1, 800d5ce <__ascii_wctomb+0x18>
 800d5bc:	2aff      	cmp	r2, #255	@ 0xff
 800d5be:	d904      	bls.n	800d5ca <__ascii_wctomb+0x14>
 800d5c0:	228a      	movs	r2, #138	@ 0x8a
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c8:	4770      	bx	lr
 800d5ca:	700a      	strb	r2, [r1, #0]
 800d5cc:	2001      	movs	r0, #1
 800d5ce:	4770      	bx	lr

0800d5d0 <fiprintf>:
 800d5d0:	b40e      	push	{r1, r2, r3}
 800d5d2:	b503      	push	{r0, r1, lr}
 800d5d4:	4601      	mov	r1, r0
 800d5d6:	ab03      	add	r3, sp, #12
 800d5d8:	4805      	ldr	r0, [pc, #20]	@ (800d5f0 <fiprintf+0x20>)
 800d5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5de:	6800      	ldr	r0, [r0, #0]
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	f7ff f9a1 	bl	800c928 <_vfiprintf_r>
 800d5e6:	b002      	add	sp, #8
 800d5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5ec:	b003      	add	sp, #12
 800d5ee:	4770      	bx	lr
 800d5f0:	2000001c 	.word	0x2000001c

0800d5f4 <abort>:
 800d5f4:	b508      	push	{r3, lr}
 800d5f6:	2006      	movs	r0, #6
 800d5f8:	f000 f834 	bl	800d664 <raise>
 800d5fc:	2001      	movs	r0, #1
 800d5fe:	f7f5 fa8b 	bl	8002b18 <_exit>

0800d602 <_malloc_usable_size_r>:
 800d602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d606:	1f18      	subs	r0, r3, #4
 800d608:	2b00      	cmp	r3, #0
 800d60a:	bfbc      	itt	lt
 800d60c:	580b      	ldrlt	r3, [r1, r0]
 800d60e:	18c0      	addlt	r0, r0, r3
 800d610:	4770      	bx	lr

0800d612 <_raise_r>:
 800d612:	291f      	cmp	r1, #31
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4605      	mov	r5, r0
 800d618:	460c      	mov	r4, r1
 800d61a:	d904      	bls.n	800d626 <_raise_r+0x14>
 800d61c:	2316      	movs	r3, #22
 800d61e:	6003      	str	r3, [r0, #0]
 800d620:	f04f 30ff 	mov.w	r0, #4294967295
 800d624:	bd38      	pop	{r3, r4, r5, pc}
 800d626:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d628:	b112      	cbz	r2, 800d630 <_raise_r+0x1e>
 800d62a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d62e:	b94b      	cbnz	r3, 800d644 <_raise_r+0x32>
 800d630:	4628      	mov	r0, r5
 800d632:	f000 f831 	bl	800d698 <_getpid_r>
 800d636:	4622      	mov	r2, r4
 800d638:	4601      	mov	r1, r0
 800d63a:	4628      	mov	r0, r5
 800d63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d640:	f000 b818 	b.w	800d674 <_kill_r>
 800d644:	2b01      	cmp	r3, #1
 800d646:	d00a      	beq.n	800d65e <_raise_r+0x4c>
 800d648:	1c59      	adds	r1, r3, #1
 800d64a:	d103      	bne.n	800d654 <_raise_r+0x42>
 800d64c:	2316      	movs	r3, #22
 800d64e:	6003      	str	r3, [r0, #0]
 800d650:	2001      	movs	r0, #1
 800d652:	e7e7      	b.n	800d624 <_raise_r+0x12>
 800d654:	2100      	movs	r1, #0
 800d656:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d65a:	4620      	mov	r0, r4
 800d65c:	4798      	blx	r3
 800d65e:	2000      	movs	r0, #0
 800d660:	e7e0      	b.n	800d624 <_raise_r+0x12>
	...

0800d664 <raise>:
 800d664:	4b02      	ldr	r3, [pc, #8]	@ (800d670 <raise+0xc>)
 800d666:	4601      	mov	r1, r0
 800d668:	6818      	ldr	r0, [r3, #0]
 800d66a:	f7ff bfd2 	b.w	800d612 <_raise_r>
 800d66e:	bf00      	nop
 800d670:	2000001c 	.word	0x2000001c

0800d674 <_kill_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	4d07      	ldr	r5, [pc, #28]	@ (800d694 <_kill_r+0x20>)
 800d678:	2300      	movs	r3, #0
 800d67a:	4604      	mov	r4, r0
 800d67c:	4608      	mov	r0, r1
 800d67e:	4611      	mov	r1, r2
 800d680:	602b      	str	r3, [r5, #0]
 800d682:	f7f5 fa39 	bl	8002af8 <_kill>
 800d686:	1c43      	adds	r3, r0, #1
 800d688:	d102      	bne.n	800d690 <_kill_r+0x1c>
 800d68a:	682b      	ldr	r3, [r5, #0]
 800d68c:	b103      	cbz	r3, 800d690 <_kill_r+0x1c>
 800d68e:	6023      	str	r3, [r4, #0]
 800d690:	bd38      	pop	{r3, r4, r5, pc}
 800d692:	bf00      	nop
 800d694:	20000614 	.word	0x20000614

0800d698 <_getpid_r>:
 800d698:	f7f5 ba26 	b.w	8002ae8 <_getpid>

0800d69c <_init>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	bf00      	nop
 800d6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a2:	bc08      	pop	{r3}
 800d6a4:	469e      	mov	lr, r3
 800d6a6:	4770      	bx	lr

0800d6a8 <_fini>:
 800d6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6aa:	bf00      	nop
 800d6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ae:	bc08      	pop	{r3}
 800d6b0:	469e      	mov	lr, r3
 800d6b2:	4770      	bx	lr
