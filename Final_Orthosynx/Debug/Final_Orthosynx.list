
Final_Orthosynx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  0800d280  0800d280  0000e280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db04  0800db04  0000f22c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800db04  0800db04  0000eb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db0c  0800db0c  0000f22c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db0c  0800db0c  0000eb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db10  0800db10  0000eb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  0800db14  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  2000022c  0800dd40  0000f22c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  0800dd40  0000f620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f22c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019666  00000000  00000000  0000f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002922  00000000  00000000  000288c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0002b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000151d  00000000  00000000  0002cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025807  00000000  00000000  0002e105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d82f  00000000  00000000  0005390c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f50  00000000  00000000  0007113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015508b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008978  00000000  00000000  001550d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d264 	.word	0x0800d264

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000230 	.word	0x20000230
 800020c:	0800d264 	.word	0x0800d264

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001068:	23ff      	movs	r3, #255	@ 0xff
 800106a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 800106c:	2300      	movs	r3, #0
 800106e:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8001070:	2300      	movs	r3, #0
 8001072:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001074:	2300      	movs	r3, #0
 8001076:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8001078:	4a58      	ldr	r2, [pc, #352]	@ (80011dc <bno055_init+0x17c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800107e:	4b57      	ldr	r3, [pc, #348]	@ (80011dc <bno055_init+0x17c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68dc      	ldr	r4, [r3, #12]
 8001084:	4b55      	ldr	r3, [pc, #340]	@ (80011dc <bno055_init+0x17c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	7a58      	ldrb	r0, [r3, #9]
 800108a:	f107 020d 	add.w	r2, r7, #13
 800108e:	2301      	movs	r3, #1
 8001090:	2107      	movs	r1, #7
 8001092:	47a0      	blx	r4
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001098:	4b50      	ldr	r3, [pc, #320]	@ (80011dc <bno055_init+0x17c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	691c      	ldr	r4, [r3, #16]
 800109e:	4b4f      	ldr	r3, [pc, #316]	@ (80011dc <bno055_init+0x17c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	7a58      	ldrb	r0, [r3, #9]
 80010a4:	f107 020e 	add.w	r2, r7, #14
 80010a8:	2301      	movs	r3, #1
 80010aa:	2100      	movs	r1, #0
 80010ac:	47a0      	blx	r4
 80010ae:	4603      	mov	r3, r0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	4413      	add	r3, r2
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 80010ba:	4b48      	ldr	r3, [pc, #288]	@ (80011dc <bno055_init+0x17c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	7bba      	ldrb	r2, [r7, #14]
 80010c0:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010c2:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <bno055_init+0x17c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	691c      	ldr	r4, [r3, #16]
 80010c8:	4b44      	ldr	r3, [pc, #272]	@ (80011dc <bno055_init+0x17c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7a58      	ldrb	r0, [r3, #9]
 80010ce:	f107 020e 	add.w	r2, r7, #14
 80010d2:	2301      	movs	r3, #1
 80010d4:	2101      	movs	r1, #1
 80010d6:	47a0      	blx	r4
 80010d8:	4603      	mov	r3, r0
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	4413      	add	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80010e4:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <bno055_init+0x17c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	7bba      	ldrb	r2, [r7, #14]
 80010ea:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010ec:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <bno055_init+0x17c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	691c      	ldr	r4, [r3, #16]
 80010f2:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <bno055_init+0x17c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	7a58      	ldrb	r0, [r3, #9]
 80010f8:	f107 020e 	add.w	r2, r7, #14
 80010fc:	2301      	movs	r3, #1
 80010fe:	2102      	movs	r1, #2
 8001100:	47a0      	blx	r4
 8001102:	4603      	mov	r3, r0
 8001104:	b2da      	uxtb	r2, r3
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	4413      	add	r3, r2
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 800110e:	4b33      	ldr	r3, [pc, #204]	@ (80011dc <bno055_init+0x17c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	7bba      	ldrb	r2, [r7, #14]
 8001114:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <bno055_init+0x17c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691c      	ldr	r4, [r3, #16]
 800111c:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <bno055_init+0x17c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	7a58      	ldrb	r0, [r3, #9]
 8001122:	f107 020e 	add.w	r2, r7, #14
 8001126:	2301      	movs	r3, #1
 8001128:	2103      	movs	r1, #3
 800112a:	47a0      	blx	r4
 800112c:	4603      	mov	r3, r0
 800112e:	b2da      	uxtb	r2, r3
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4413      	add	r3, r2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8001138:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <bno055_init+0x17c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	7bba      	ldrb	r2, [r7, #14]
 800113e:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <bno055_init+0x17c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	691c      	ldr	r4, [r3, #16]
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <bno055_init+0x17c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	7a58      	ldrb	r0, [r3, #9]
 800114c:	f107 020e 	add.w	r2, r7, #14
 8001150:	2301      	movs	r3, #1
 8001152:	2106      	movs	r1, #6
 8001154:	47a0      	blx	r4
 8001156:	4603      	mov	r3, r0
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	4413      	add	r3, r2
 800115e:	b2db      	uxtb	r3, r3
 8001160:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8001162:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <bno055_init+0x17c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	7bba      	ldrb	r2, [r7, #14]
 8001168:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <bno055_init+0x17c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	691c      	ldr	r4, [r3, #16]
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <bno055_init+0x17c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	7a58      	ldrb	r0, [r3, #9]
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	2302      	movs	r3, #2
 800117c:	2104      	movs	r1, #4
 800117e:	47a0      	blx	r4
 8001180:	4603      	mov	r3, r0
 8001182:	b2da      	uxtb	r2, r3
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	4413      	add	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 800118c:	7a3b      	ldrb	r3, [r7, #8]
 800118e:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b29a      	uxth	r2, r3
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <bno055_init+0x17c>)
 800119c:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 800119e:	430a      	orrs	r2, r1
 80011a0:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 80011a2:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011a4:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <bno055_init+0x17c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691c      	ldr	r4, [r3, #16]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <bno055_init+0x17c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	7a58      	ldrb	r0, [r3, #9]
 80011b0:	f107 020e 	add.w	r2, r7, #14
 80011b4:	2301      	movs	r3, #1
 80011b6:	2107      	movs	r1, #7
 80011b8:	47a0      	blx	r4
 80011ba:	4603      	mov	r3, r0
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4413      	add	r3, r2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 80011c6:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <bno055_init+0x17c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	7bba      	ldrb	r2, [r7, #14]
 80011cc:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000248 	.word	0x20000248

080011e0 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80011f0:	23ff      	movs	r3, #255	@ 0xff
 80011f2:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <bno055_write_register+0x48>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 80011fc:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001200:	e00d      	b.n	800121e <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <bno055_write_register+0x48>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68dc      	ldr	r4, [r3, #12]
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <bno055_write_register+0x48>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7a58      	ldrb	r0, [r3, #9]
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	79f9      	ldrb	r1, [r7, #7]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	20000248 	.word	0x20000248

0800122c <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001236:	23ff      	movs	r3, #255	@ 0xff
 8001238:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800123a:	2300      	movs	r3, #0
 800123c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <bno055_write_page_id+0x8c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8001246:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800124a:	e030      	b.n	80012ae <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800124c:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <bno055_write_page_id+0x8c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691c      	ldr	r4, [r3, #16]
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <bno055_write_page_id+0x8c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	7a58      	ldrb	r0, [r3, #9]
 8001258:	f107 020e 	add.w	r2, r7, #14
 800125c:	2301      	movs	r3, #1
 800125e:	2107      	movs	r1, #7
 8001260:	47a0      	blx	r4
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d11b      	bne.n	80012a6 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <bno055_write_page_id+0x8c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68dc      	ldr	r4, [r3, #12]
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <bno055_write_page_id+0x8c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	7a58      	ldrb	r0, [r3, #9]
 800127e:	f107 020e 	add.w	r2, r7, #14
 8001282:	2301      	movs	r3, #1
 8001284:	2107      	movs	r1, #7
 8001286:	47a0      	blx	r4
 8001288:	4603      	mov	r3, r0
 800128a:	b2da      	uxtb	r2, r3
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	4413      	add	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8001294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d106      	bne.n	80012aa <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <bno055_write_page_id+0x8c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	711a      	strb	r2, [r3, #4]
 80012a4:	e001      	b.n	80012aa <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80012a6:	23ff      	movs	r3, #255	@ 0xff
 80012a8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000248 	.word	0x20000248

080012bc <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80012c4:	23ff      	movs	r3, #255	@ 0xff
 80012c6:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80012cc:	23ff      	movs	r3, #255	@ 0xff
 80012ce:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <bno055_get_operation_mode+0x80>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80012d8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80012dc:	e02a      	b.n	8001334 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80012de:	4b17      	ldr	r3, [pc, #92]	@ (800133c <bno055_get_operation_mode+0x80>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	791b      	ldrb	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff ff9f 	bl	800122c <bno055_write_page_id>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80012f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <bno055_get_operation_mode+0x48>
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <bno055_get_operation_mode+0x80>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d113      	bne.n	800132c <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <bno055_get_operation_mode+0x80>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	691c      	ldr	r4, [r3, #16]
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <bno055_get_operation_mode+0x80>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	7a58      	ldrb	r0, [r3, #9]
 8001310:	f107 020d 	add.w	r2, r7, #13
 8001314:	2301      	movs	r3, #1
 8001316:	213d      	movs	r1, #61	@ 0x3d
 8001318:	47a0      	blx	r4
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e001      	b.n	8001330 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800132c:	23ff      	movs	r3, #255	@ 0xff
 800132e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	20000248 	.word	0x20000248

08001340 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800134a:	23ff      	movs	r3, #255	@ 0xff
 800134c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800134e:	2300      	movs	r3, #0
 8001350:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001352:	2300      	movs	r3, #0
 8001354:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001356:	23ff      	movs	r3, #255	@ 0xff
 8001358:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800135a:	4b5c      	ldr	r3, [pc, #368]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001362:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001366:	e0ac      	b.n	80014c2 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ffa5 	bl	80012bc <bno055_get_operation_mode>
 8001372:	4603      	mov	r3, r0
 8001374:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 809d 	bne.w	80014ba <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d137      	bne.n	80013f6 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001386:	4b51      	ldr	r3, [pc, #324]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	691c      	ldr	r4, [r3, #16]
 800138c:	4b4f      	ldr	r3, [pc, #316]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	7a58      	ldrb	r0, [r3, #9]
 8001392:	f107 020d 	add.w	r2, r7, #13
 8001396:	2301      	movs	r3, #1
 8001398:	213d      	movs	r1, #61	@ 0x3d
 800139a:	47a0      	blx	r4
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 808a 	bne.w	80014be <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80013aa:	7b7b      	ldrb	r3, [r7, #13]
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	f023 030f 	bic.w	r3, r3, #15
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80013c6:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68dc      	ldr	r4, [r3, #12]
 80013cc:	4b3f      	ldr	r3, [pc, #252]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	7a58      	ldrb	r0, [r3, #9]
 80013d2:	f107 020d 	add.w	r2, r7, #13
 80013d6:	2301      	movs	r3, #1
 80013d8:	213d      	movs	r1, #61	@ 0x3d
 80013da:	47a0      	blx	r4
 80013dc:	4603      	mov	r3, r0
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	4413      	add	r3, r2
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80013e8:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80013f2:	4798      	blx	r3
 80013f4:	e063      	b.n	80014be <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80013f6:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	691c      	ldr	r4, [r3, #16]
 80013fc:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	7a58      	ldrb	r0, [r3, #9]
 8001402:	f107 020d 	add.w	r2, r7, #13
 8001406:	2301      	movs	r3, #1
 8001408:	213d      	movs	r1, #61	@ 0x3d
 800140a:	47a0      	blx	r4
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d116      	bne.n	8001446 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8001418:	7b7b      	ldrb	r3, [r7, #13]
 800141a:	f023 030f 	bic.w	r3, r3, #15
 800141e:	b2db      	uxtb	r3, r3
 8001420:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8001422:	f107 030d 	add.w	r3, r7, #13
 8001426:	2201      	movs	r2, #1
 8001428:	4619      	mov	r1, r3
 800142a:	203d      	movs	r0, #61	@ 0x3d
 800142c:	f7ff fed8 	bl	80011e0 <bno055_write_register>
 8001430:	4603      	mov	r3, r0
 8001432:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	4413      	add	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 800143c:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2014      	movs	r0, #20
 8001444:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d038      	beq.n	80014be <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691c      	ldr	r4, [r3, #16]
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	7a58      	ldrb	r0, [r3, #9]
 8001458:	f107 020d 	add.w	r2, r7, #13
 800145c:	2301      	movs	r3, #1
 800145e:	213d      	movs	r1, #61	@ 0x3d
 8001460:	47a0      	blx	r4
 8001462:	4603      	mov	r3, r0
 8001464:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d127      	bne.n	80014be <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	b25b      	sxtb	r3, r3
 8001472:	f023 030f 	bic.w	r3, r3, #15
 8001476:	b25a      	sxtb	r2, r3
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	b25b      	sxtb	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b25b      	sxtb	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68dc      	ldr	r4, [r3, #12]
 8001490:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	7a58      	ldrb	r0, [r3, #9]
 8001496:	f107 020d 	add.w	r2, r7, #13
 800149a:	2301      	movs	r3, #1
 800149c:	213d      	movs	r1, #61	@ 0x3d
 800149e:	47a0      	blx	r4
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <bno055_set_operation_mode+0x18c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80014b6:	4798      	blx	r3
 80014b8:	e001      	b.n	80014be <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80014ba:	23ff      	movs	r3, #255	@ 0xff
 80014bc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd90      	pop	{r4, r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000248 	.word	0x20000248

080014d0 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80014d8:	1d39      	adds	r1, r7, #4
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	2201      	movs	r2, #1
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <__io_putchar+0x20>)
 80014e2:	f006 fa3d 	bl	8007960 <HAL_UART_Transmit>
  return ch;
 80014e6:	687b      	ldr	r3, [r7, #4]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200003fc 	.word	0x200003fc

080014f4 <BNO055_Delay>:
// Delay function for BNO055
void BNO055_Delay(u32 period) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
   HAL_Delay(period);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f001 fa8d 	bl	8002a1c <HAL_Delay>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f001 fa11 	bl	8002938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f91f 	bl	8001758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f000 faad 	bl	8001a78 <MX_GPIO_Init>
  MX_DMA_Init();
 800151e:	f000 fa7b 	bl	8001a18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001522:	f000 fa2f 	bl	8001984 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001526:	f000 f985 	bl	8001834 <MX_I2C1_Init>
  MX_I2C2_Init();
 800152a:	f000 f9b1 	bl	8001890 <MX_I2C2_Init>
  MX_TIM3_Init();
 800152e:	f000 f9dd 	bl	80018ec <MX_TIM3_Init>
  MX_WWDG_Init();
 8001532:	f000 fa51 	bl	80019d8 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  // Configure interrupt priorities
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0); // I2C1 Event
 8001536:	2200      	movs	r2, #0
 8001538:	2101      	movs	r1, #1
 800153a:	201f      	movs	r0, #31
 800153c:	f001 fb6d 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0); // I2C1 Error (highest priority)
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2020      	movs	r0, #32
 8001546:	f001 fb68 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0); // I2C2 Event
 800154a:	2200      	movs	r2, #0
 800154c:	2101      	movs	r1, #1
 800154e:	2021      	movs	r0, #33	@ 0x21
 8001550:	f001 fb63 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0); // I2C2 Error (highest priority)
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2022      	movs	r0, #34	@ 0x22
 800155a:	f001 fb5e 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART2_IRQn, 1, 0); // USART2 global interrupt
 800155e:	2200      	movs	r2, #0
 8001560:	2101      	movs	r1, #1
 8001562:	2026      	movs	r0, #38	@ 0x26
 8001564:	f001 fb59 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0); // Timer3 (lower priority)
 8001568:	2200      	movs	r2, #0
 800156a:	2102      	movs	r1, #2
 800156c:	201d      	movs	r0, #29
 800156e:	f001 fb54 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(WWDG_IRQn, 0, 0); // Watchdog (highest priority)
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2000      	movs	r0, #0
 8001578:	f001 fb4f 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0); // User Button
 800157c:	2200      	movs	r2, #0
 800157e:	2102      	movs	r1, #2
 8001580:	2028      	movs	r0, #40	@ 0x28
 8001582:	f001 fb4a 	bl	8002c1a <HAL_NVIC_SetPriority>
  // Configure DMA interrupt priorities
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0); // I2C2_RX
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	200d      	movs	r0, #13
 800158c:	f001 fb45 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0); // I2C2_TX
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	202f      	movs	r0, #47	@ 0x2f
 8001596:	f001 fb40 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0); // USART2_TX
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2011      	movs	r0, #17
 80015a0:	f001 fb3b 	bl	8002c1a <HAL_NVIC_SetPriority>
  // Configure I2C noise filtering
  HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 80015a4:	2100      	movs	r1, #0
 80015a6:	4859      	ldr	r0, [pc, #356]	@ (800170c <main+0x200>)
 80015a8:	f004 ff1f 	bl	80063ea <HAL_I2CEx_ConfigAnalogFilter>
  HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 3);
 80015ac:	2103      	movs	r1, #3
 80015ae:	4857      	ldr	r0, [pc, #348]	@ (800170c <main+0x200>)
 80015b0:	f004 ff57 	bl	8006462 <HAL_I2CEx_ConfigDigitalFilter>
  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 80015b4:	2100      	movs	r1, #0
 80015b6:	4856      	ldr	r0, [pc, #344]	@ (8001710 <main+0x204>)
 80015b8:	f004 ff17 	bl	80063ea <HAL_I2CEx_ConfigAnalogFilter>
  HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 3);
 80015bc:	2103      	movs	r1, #3
 80015be:	4854      	ldr	r0, [pc, #336]	@ (8001710 <main+0x204>)
 80015c0:	f004 ff4f 	bl	8006462 <HAL_I2CEx_ConfigDigitalFilter>
  // Configure printf buffering
  setbuf(stdout, NULL); // Disable buffering for immediate output
 80015c4:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <main+0x208>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f008 f949 	bl	8009864 <setbuf>
  // Initialize Debug LED to OFF
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015d8:	484f      	ldr	r0, [pc, #316]	@ (8001718 <main+0x20c>)
 80015da:	f002 f873 	bl	80036c4 <HAL_GPIO_WritePin>
  // Print startup message
  printf("Prosthetic Knee Controller Starting...\r\n");
 80015de:	484f      	ldr	r0, [pc, #316]	@ (800171c <main+0x210>)
 80015e0:	f008 f938 	bl	8009854 <puts>
  printf("Clock: %lu MHz\r\n", HAL_RCC_GetSysClockFreq()/1000000);
 80015e4:	f005 f896 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001720 <main+0x214>)
 80015ec:	fba2 2303 	umull	r2, r3, r2, r3
 80015f0:	0c9b      	lsrs	r3, r3, #18
 80015f2:	4619      	mov	r1, r3
 80015f4:	484b      	ldr	r0, [pc, #300]	@ (8001724 <main+0x218>)
 80015f6:	f008 f8c5 	bl	8009784 <iprintf>

  /////////start bno055 code ///
  printf("\r\n=== Prosthetic Knee Controller (IMUPLUS Mode) ===\r\n");
 80015fa:	484b      	ldr	r0, [pc, #300]	@ (8001728 <main+0x21c>)
 80015fc:	f008 f92a 	bl	8009854 <puts>
  // Flash LED to indicate startup
  for(int i = 0; i < 5; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e009      	b.n	800161a <main+0x10e>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001606:	2120      	movs	r1, #32
 8001608:	4848      	ldr	r0, [pc, #288]	@ (800172c <main+0x220>)
 800160a:	f002 f874 	bl	80036f6 <HAL_GPIO_TogglePin>
      HAL_Delay(200);
 800160e:	20c8      	movs	r0, #200	@ 0xc8
 8001610:	f001 fa04 	bl	8002a1c <HAL_Delay>
  for(int i = 0; i < 5; i++) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b04      	cmp	r3, #4
 800161e:	ddf2      	ble.n	8001606 <main+0xfa>
  }
  printf("System Clock: %lu Hz\r\n", HAL_RCC_GetSysClockFreq());
 8001620:	f005 f878 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 8001624:	4603      	mov	r3, r0
 8001626:	4619      	mov	r1, r3
 8001628:	4841      	ldr	r0, [pc, #260]	@ (8001730 <main+0x224>)
 800162a:	f008 f8ab 	bl	8009784 <iprintf>
  Debug_I2C_Status();
 800162e:	f000 faab 	bl	8001b88 <Debug_I2C_Status>
  // Wait for sensors to power up
  printf("Waiting for sensors to boot...\r\n");
 8001632:	4840      	ldr	r0, [pc, #256]	@ (8001734 <main+0x228>)
 8001634:	f008 f90e 	bl	8009854 <puts>
  BNO055_Delay(BNO055_BOOT_DELAY_MS);  // Minimum 650ms per datasheet
 8001638:	f240 208a 	movw	r0, #650	@ 0x28a
 800163c:	f7ff ff5a 	bl	80014f4 <BNO055_Delay>
  // Scan I2C bus
  I2C_Scan_And_Assign();
 8001640:	f000 fad2 	bl	8001be8 <I2C_Scan_And_Assign>
  // Initialize sensors
  printf("Initializing sensors...\r\n");
 8001644:	483c      	ldr	r0, [pc, #240]	@ (8001738 <main+0x22c>)
 8001646:	f008 f905 	bl	8009854 <puts>
  BNO055_Init_Dual();
 800164a:	f000 fb91 	bl	8001d70 <BNO055_Init_Dual>
  // Calibration phase
  printf("Calibrating sensors - keep stationary!\r\n");
 800164e:	483b      	ldr	r0, [pc, #236]	@ (800173c <main+0x230>)
 8001650:	f008 f900 	bl	8009854 <puts>
  u32 calib_start = HAL_GetTick();
 8001654:	f001 f9d6 	bl	8002a04 <HAL_GetTick>
 8001658:	6078      	str	r0, [r7, #4]
  u8 calib_printed = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	72fb      	strb	r3, [r7, #11]
  while(1) {
      Read_Dual_Calibration();
 800165e:	f000 fc21 	bl	8001ea4 <Read_Dual_Calibration>
      // Print calibration status every second
      if(HAL_GetTick() - calib_start > calib_printed * 1000) {
 8001662:	f001 f9cf 	bl	8002a04 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	7afa      	ldrb	r2, [r7, #11]
 800166e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001672:	fb01 f202 	mul.w	r2, r1, r2
 8001676:	4293      	cmp	r3, r2
 8001678:	d912      	bls.n	80016a0 <main+0x194>
          printf("Calib: Thigh(G:%d A:%d) Shank(G:%d A:%d)\r\n",
                 thigh.calib[1], thigh.calib[2],
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <main+0x234>)
 800167c:	7e5b      	ldrb	r3, [r3, #25]
          printf("Calib: Thigh(G:%d A:%d) Shank(G:%d A:%d)\r\n",
 800167e:	4619      	mov	r1, r3
                 thigh.calib[1], thigh.calib[2],
 8001680:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <main+0x234>)
 8001682:	7e9b      	ldrb	r3, [r3, #26]
          printf("Calib: Thigh(G:%d A:%d) Shank(G:%d A:%d)\r\n",
 8001684:	461a      	mov	r2, r3
                 shank.calib[1], shank.calib[2]);
 8001686:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <main+0x238>)
 8001688:	7e5b      	ldrb	r3, [r3, #25]
          printf("Calib: Thigh(G:%d A:%d) Shank(G:%d A:%d)\r\n",
 800168a:	4618      	mov	r0, r3
                 shank.calib[1], shank.calib[2]);
 800168c:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <main+0x238>)
 800168e:	7e9b      	ldrb	r3, [r3, #26]
          printf("Calib: Thigh(G:%d A:%d) Shank(G:%d A:%d)\r\n",
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4603      	mov	r3, r0
 8001694:	482c      	ldr	r0, [pc, #176]	@ (8001748 <main+0x23c>)
 8001696:	f008 f875 	bl	8009784 <iprintf>
          calib_printed++;
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	3301      	adds	r3, #1
 800169e:	72fb      	strb	r3, [r7, #11]
      }
      // Exit when gyros are calibrated
      if(thigh.calib[1] >= 2 && shank.calib[1] >= 2) {
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <main+0x234>)
 80016a2:	7e5b      	ldrb	r3, [r3, #25]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d907      	bls.n	80016b8 <main+0x1ac>
 80016a8:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <main+0x238>)
 80016aa:	7e5b      	ldrb	r3, [r3, #25]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d903      	bls.n	80016b8 <main+0x1ac>
          printf("Calibration complete!\r\n");
 80016b0:	4826      	ldr	r0, [pc, #152]	@ (800174c <main+0x240>)
 80016b2:	f008 f8cf 	bl	8009854 <puts>
          break;
 80016b6:	e010      	b.n	80016da <main+0x1ce>
      }
      if(HAL_GetTick() - calib_start > CALIBRATION_TIMEOUT_MS) {
 80016b8:	f001 f9a4 	bl	8002a04 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d903      	bls.n	80016d2 <main+0x1c6>
          printf("Calibration timeout! Continuing...\r\n");
 80016ca:	4821      	ldr	r0, [pc, #132]	@ (8001750 <main+0x244>)
 80016cc:	f008 f8c2 	bl	8009854 <puts>
          break;
 80016d0:	e003      	b.n	80016da <main+0x1ce>
      }
// or change to  Delay input = BNO055_BOOT_DELAY_MS
      BNO055_Delay(100);
 80016d2:	2064      	movs	r0, #100	@ 0x64
 80016d4:	f7ff ff0e 	bl	80014f4 <BNO055_Delay>
      Read_Dual_Calibration();
 80016d8:	e7c1      	b.n	800165e <main+0x152>
  }
  last_update = HAL_GetTick();
 80016da:	f001 f993 	bl	8002a04 <HAL_GetTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001754 <main+0x248>)
 80016e2:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
      // 100Hz update rate (10ms interval)
      if(HAL_GetTick() - last_update >= BNO055_UPDATE_INTERVAL_MS) {
 80016e4:	f001 f98e 	bl	8002a04 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <main+0x248>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d906      	bls.n	8001702 <main+0x1f6>
      	Read_Dual_Orientation();
 80016f4:	f000 fc80 	bl	8001ff8 <Read_Dual_Orientation>
          last_update = HAL_GetTick();
 80016f8:	f001 f984 	bl	8002a04 <HAL_GetTick>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <main+0x248>)
 8001700:	6013      	str	r3, [r2, #0]
      }
      BNO055_Delay(1); // Prevent watchdog issues
 8001702:	2001      	movs	r0, #1
 8001704:	f7ff fef6 	bl	80014f4 <BNO055_Delay>
      if(HAL_GetTick() - last_update >= BNO055_UPDATE_INTERVAL_MS) {
 8001708:	e7ec      	b.n	80016e4 <main+0x1d8>
 800170a:	bf00      	nop
 800170c:	2000024c 	.word	0x2000024c
 8001710:	200002a0 	.word	0x200002a0
 8001714:	20000070 	.word	0x20000070
 8001718:	40020400 	.word	0x40020400
 800171c:	0800d280 	.word	0x0800d280
 8001720:	431bde83 	.word	0x431bde83
 8001724:	0800d2a8 	.word	0x0800d2a8
 8001728:	0800d2bc 	.word	0x0800d2bc
 800172c:	40020000 	.word	0x40020000
 8001730:	0800d2f4 	.word	0x0800d2f4
 8001734:	0800d30c 	.word	0x0800d30c
 8001738:	0800d32c 	.word	0x0800d32c
 800173c:	0800d348 	.word	0x0800d348
 8001740:	20000000 	.word	0x20000000
 8001744:	2000002c 	.word	0x2000002c
 8001748:	0800d370 	.word	0x0800d370
 800174c:	0800d39c 	.word	0x0800d39c
 8001750:	0800d3b4 	.word	0x0800d3b4
 8001754:	200004b8 	.word	0x200004b8

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b094      	sub	sp, #80	@ 0x50
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2234      	movs	r2, #52	@ 0x34
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f008 fa32 	bl	8009bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <SystemClock_Config+0xd4>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	4a29      	ldr	r2, [pc, #164]	@ (800182c <SystemClock_Config+0xd4>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	@ 0x40
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <SystemClock_Config+0xd4>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001798:	2300      	movs	r3, #0
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <SystemClock_Config+0xd8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017a4:	4a22      	ldr	r2, [pc, #136]	@ (8001830 <SystemClock_Config+0xd8>)
 80017a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <SystemClock_Config+0xd8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017bc:	2301      	movs	r3, #1
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c0:	2310      	movs	r3, #16
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c4:	2302      	movs	r3, #2
 80017c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c8:	2300      	movs	r3, #0
 80017ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017cc:	2310      	movs	r3, #16
 80017ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017d6:	2304      	movs	r3, #4
 80017d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017da:	2302      	movs	r3, #2
 80017dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017de:	2302      	movs	r3, #2
 80017e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 f9c4 	bl	8006b74 <HAL_RCC_OscConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017f2:	f000 fcf9 	bl	80021e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	230f      	movs	r3, #15
 80017f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fa:	2302      	movs	r3, #2
 80017fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	2102      	movs	r1, #2
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fe64 	bl	80064e0 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800181e:	f000 fce3 	bl	80021e8 <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3750      	adds	r7, #80	@ 0x50
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000

08001834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <MX_I2C1_Init+0x50>)
 800183a:	4a13      	ldr	r2, [pc, #76]	@ (8001888 <MX_I2C1_Init+0x54>)
 800183c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <MX_I2C1_Init+0x50>)
 8001840:	4a12      	ldr	r2, [pc, #72]	@ (800188c <MX_I2C1_Init+0x58>)
 8001842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <MX_I2C1_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <MX_I2C1_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <MX_I2C1_Init+0x50>)
 8001852:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001856:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001858:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001864:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001870:	4804      	ldr	r0, [pc, #16]	@ (8001884 <MX_I2C1_Init+0x50>)
 8001872:	f001 ff5b 	bl	800372c <HAL_I2C_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800187c:	f000 fcb4 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000024c 	.word	0x2000024c
 8001888:	40005400 	.word	0x40005400
 800188c:	000186a0 	.word	0x000186a0

08001890 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <MX_I2C2_Init+0x50>)
 8001896:	4a13      	ldr	r2, [pc, #76]	@ (80018e4 <MX_I2C2_Init+0x54>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <MX_I2C2_Init+0x50>)
 800189c:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <MX_I2C2_Init+0x58>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <MX_I2C2_Init+0x50>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <MX_I2C2_Init+0x50>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_I2C2_Init+0x50>)
 80018ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b4:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <MX_I2C2_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_I2C2_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c0:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <MX_I2C2_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <MX_I2C2_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <MX_I2C2_Init+0x50>)
 80018ce:	f001 ff2d 	bl	800372c <HAL_I2C_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018d8:	f000 fc86 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200002a0 	.word	0x200002a0
 80018e4:	40005800 	.word	0x40005800
 80018e8:	000186a0 	.word	0x000186a0

080018ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001908:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <MX_TIM3_Init+0x90>)
 800190a:	4a1d      	ldr	r2, [pc, #116]	@ (8001980 <MX_TIM3_Init+0x94>)
 800190c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800190e:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <MX_TIM3_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <MX_TIM3_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_TIM3_Init+0x90>)
 800191c:	2263      	movs	r2, #99	@ 0x63
 800191e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_TIM3_Init+0x90>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <MX_TIM3_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800192c:	4813      	ldr	r0, [pc, #76]	@ (800197c <MX_TIM3_Init+0x90>)
 800192e:	f005 fbbf 	bl	80070b0 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001938:	f000 fc56 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <MX_TIM3_Init+0x90>)
 800194a:	f005 fcf0 	bl	800732e <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001954:	f000 fc48 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_TIM3_Init+0x90>)
 8001966:	f005 ff1b 	bl	80077a0 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001970:	f000 fc3a 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200003b4 	.word	0x200003b4
 8001980:	40000400 	.word	0x40000400

08001984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <MX_USART2_UART_Init+0x4c>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <MX_USART2_UART_Init+0x50>)
 800198c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <MX_USART2_UART_Init+0x4c>)
 8001990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <MX_USART2_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <MX_USART2_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019ba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	@ (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019be:	f005 ff7f 	bl	80078c0 <HAL_UART_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80019c8:	f000 fc0e 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200003fc 	.word	0x200003fc
 80019d4:	40004400 	.word	0x40004400

080019d8 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <MX_WWDG_Init+0x38>)
 80019de:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <MX_WWDG_Init+0x3c>)
 80019e0:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <MX_WWDG_Init+0x38>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_WWDG_Init+0x38>)
 80019ea:	2240      	movs	r2, #64	@ 0x40
 80019ec:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 80019ee:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <MX_WWDG_Init+0x38>)
 80019f0:	2240      	movs	r2, #64	@ 0x40
 80019f2:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <MX_WWDG_Init+0x38>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <MX_WWDG_Init+0x38>)
 80019fc:	f006 ff78 	bl	80088f0 <HAL_WWDG_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8001a06:	f000 fbef 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200004a4 	.word	0x200004a4
 8001a14:	40002c00 	.word	0x40002c00

08001a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <MX_DMA_Init+0x5c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a13      	ldr	r2, [pc, #76]	@ (8001a74 <MX_DMA_Init+0x5c>)
 8001a28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <MX_DMA_Init+0x5c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	200d      	movs	r0, #13
 8001a40:	f001 f8eb 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a44:	200d      	movs	r0, #13
 8001a46:	f001 f904 	bl	8002c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2011      	movs	r0, #17
 8001a50:	f001 f8e3 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a54:	2011      	movs	r0, #17
 8001a56:	f001 f8fc 	bl	8002c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	202f      	movs	r0, #47	@ 0x2f
 8001a60:	f001 f8db 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001a64:	202f      	movs	r0, #47	@ 0x2f
 8001a66:	f001 f8f4 	bl	8002c52 <HAL_NVIC_EnableIRQ>

}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800

08001a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b39      	ldr	r3, [pc, #228]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a38      	ldr	r2, [pc, #224]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b36      	ldr	r3, [pc, #216]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a31      	ldr	r2, [pc, #196]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a2a      	ldr	r2, [pc, #168]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a23      	ldr	r2, [pc, #140]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <MX_GPIO_Init+0x100>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_STEP_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001b04:	481d      	ldr	r0, [pc, #116]	@ (8001b7c <MX_GPIO_Init+0x104>)
 8001b06:	f001 fddd 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR_Pin|MOTOR_ENG_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f244 0103 	movw	r1, #16387	@ 0x4003
 8001b10:	481b      	ldr	r0, [pc, #108]	@ (8001b80 <MX_GPIO_Init+0x108>)
 8001b12:	f001 fdd7 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b1c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4815      	ldr	r0, [pc, #84]	@ (8001b84 <MX_GPIO_Init+0x10c>)
 8001b2e:	f001 fc35 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_STEP_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_STEP_Pin;
 8001b32:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <MX_GPIO_Init+0x104>)
 8001b4c:	f001 fc26 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DIR_Pin MOTOR_ENG_Pin DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin|MOTOR_ENG_Pin|DEBUG_LED_Pin;
 8001b50:	f244 0303 	movw	r3, #16387	@ 0x4003
 8001b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_GPIO_Init+0x108>)
 8001b6a:	f001 fc17 	bl	800339c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	@ 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800

08001b88 <Debug_I2C_Status>:

/* USER CODE BEGIN 4 */
void Debug_I2C_Status(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
   printf("I2C2 Configuration:\r\n");
 8001b8c:	480f      	ldr	r0, [pc, #60]	@ (8001bcc <Debug_I2C_Status+0x44>)
 8001b8e:	f007 fe61 	bl	8009854 <puts>
   printf("- Clock Speed: %lu Hz\r\n", hi2c2.Init.ClockSpeed);
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <Debug_I2C_Status+0x48>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4619      	mov	r1, r3
 8001b98:	480e      	ldr	r0, [pc, #56]	@ (8001bd4 <Debug_I2C_Status+0x4c>)
 8001b9a:	f007 fdf3 	bl	8009784 <iprintf>
   printf("- State: %d\r\n", hi2c2.State);
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <Debug_I2C_Status+0x48>)
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480b      	ldr	r0, [pc, #44]	@ (8001bd8 <Debug_I2C_Status+0x50>)
 8001baa:	f007 fdeb 	bl	8009784 <iprintf>
   if(__HAL_RCC_I2C2_IS_CLK_ENABLED()) {
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <Debug_I2C_Status+0x54>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <Debug_I2C_Status+0x3a>
       printf("- I2C2 Clock: ENABLED\r\n");
 8001bba:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <Debug_I2C_Status+0x58>)
 8001bbc:	f007 fe4a 	bl	8009854 <puts>
   } else {
       printf("- I2C2 Clock: DISABLED\r\n");
   }
}
 8001bc0:	e002      	b.n	8001bc8 <Debug_I2C_Status+0x40>
       printf("- I2C2 Clock: DISABLED\r\n");
 8001bc2:	4808      	ldr	r0, [pc, #32]	@ (8001be4 <Debug_I2C_Status+0x5c>)
 8001bc4:	f007 fe46 	bl	8009854 <puts>
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0800d3d8 	.word	0x0800d3d8
 8001bd0:	200002a0 	.word	0x200002a0
 8001bd4:	0800d3f0 	.word	0x0800d3f0
 8001bd8:	0800d408 	.word	0x0800d408
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	0800d418 	.word	0x0800d418
 8001be4:	0800d430 	.word	0x0800d430

08001be8 <I2C_Scan_And_Assign>:
                                                   &chip_id, 1, 100);
       printf("Addr 0x%02X: Status=%d, ChipID=0x%02X\r\n",
              addresses[i], status, chip_id);
   }
}
void I2C_Scan_And_Assign(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
   printf("Scanning I2C bus...\r\n");
 8001bee:	482b      	ldr	r0, [pc, #172]	@ (8001c9c <I2C_Scan_And_Assign+0xb4>)
 8001bf0:	f007 fe30 	bl	8009854 <puts>
   u8 found_addr[2] = {0};
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	80bb      	strh	r3, [r7, #4]
   sensors_found = 0;
 8001bf8:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <I2C_Scan_And_Assign+0xb8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
   for (u8 addr = 0x08; addr <= 0x78; addr++) {
 8001bfe:	2308      	movs	r3, #8
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	e024      	b.n	8001c4e <I2C_Scan_And_Assign+0x66>
       if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 3, 100) == HAL_OK) {
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	2364      	movs	r3, #100	@ 0x64
 8001c0e:	2203      	movs	r2, #3
 8001c10:	4824      	ldr	r0, [pc, #144]	@ (8001ca4 <I2C_Scan_And_Assign+0xbc>)
 8001c12:	f002 fa11 	bl	8004038 <HAL_I2C_IsDeviceReady>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d115      	bne.n	8001c48 <I2C_Scan_And_Assign+0x60>
           printf("Device found at 0x%02X\r\n", addr);
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4821      	ldr	r0, [pc, #132]	@ (8001ca8 <I2C_Scan_And_Assign+0xc0>)
 8001c22:	f007 fdaf 	bl	8009784 <iprintf>
           if(sensors_found < 2) {
 8001c26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <I2C_Scan_And_Assign+0xb8>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d806      	bhi.n	8001c3c <I2C_Scan_And_Assign+0x54>
               found_addr[sensors_found] = addr;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca0 <I2C_Scan_And_Assign+0xb8>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	3308      	adds	r3, #8
 8001c34:	443b      	add	r3, r7
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	f803 2c04 	strb.w	r2, [r3, #-4]
           }
           sensors_found++;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <I2C_Scan_And_Assign+0xb8>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <I2C_Scan_And_Assign+0xb8>)
 8001c46:	701a      	strb	r2, [r3, #0]
   for (u8 addr = 0x08; addr <= 0x78; addr++) {
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b78      	cmp	r3, #120	@ 0x78
 8001c52:	d9d7      	bls.n	8001c04 <I2C_Scan_And_Assign+0x1c>
       }
   }
   printf("Total devices: %d\r\n", sensors_found);
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <I2C_Scan_And_Assign+0xb8>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4814      	ldr	r0, [pc, #80]	@ (8001cac <I2C_Scan_And_Assign+0xc4>)
 8001c5c:	f007 fd92 	bl	8009784 <iprintf>
   if (sensors_found < 2) {
 8001c60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <I2C_Scan_And_Assign+0xb8>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d806      	bhi.n	8001c76 <I2C_Scan_And_Assign+0x8e>
       printf("Using default addresses\r\n");
 8001c68:	4811      	ldr	r0, [pc, #68]	@ (8001cb0 <I2C_Scan_And_Assign+0xc8>)
 8001c6a:	f007 fdf3 	bl	8009854 <puts>
       found_addr[0] = THIGH_SENSOR_ADDR;
 8001c6e:	2328      	movs	r3, #40	@ 0x28
 8001c70:	713b      	strb	r3, [r7, #4]
       found_addr[1] = SHANK_SENSOR_ADDR;
 8001c72:	2329      	movs	r3, #41	@ 0x29
 8001c74:	717b      	strb	r3, [r7, #5]
   }
thigh.dev.dev_addr = found_addr[0];
 8001c76:	793a      	ldrb	r2, [r7, #4]
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <I2C_Scan_And_Assign+0xcc>)
 8001c7a:	725a      	strb	r2, [r3, #9]
   shank.dev.dev_addr = found_addr[1];
 8001c7c:	797a      	ldrb	r2, [r7, #5]
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <I2C_Scan_And_Assign+0xd0>)
 8001c80:	725a      	strb	r2, [r3, #9]
   printf("Thigh: 0x%02X, Shank: 0x%02X\r\n",
         thigh.dev.dev_addr, shank.dev.dev_addr);
 8001c82:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <I2C_Scan_And_Assign+0xcc>)
 8001c84:	7a5b      	ldrb	r3, [r3, #9]
   printf("Thigh: 0x%02X, Shank: 0x%02X\r\n",
 8001c86:	4619      	mov	r1, r3
         thigh.dev.dev_addr, shank.dev.dev_addr);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <I2C_Scan_And_Assign+0xd0>)
 8001c8a:	7a5b      	ldrb	r3, [r3, #9]
   printf("Thigh: 0x%02X, Shank: 0x%02X\r\n",
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	480b      	ldr	r0, [pc, #44]	@ (8001cbc <I2C_Scan_And_Assign+0xd4>)
 8001c90:	f007 fd78 	bl	8009784 <iprintf>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0800d490 	.word	0x0800d490
 8001ca0:	200004bc 	.word	0x200004bc
 8001ca4:	200002a0 	.word	0x200002a0
 8001ca8:	0800d4a8 	.word	0x0800d4a8
 8001cac:	0800d4c4 	.word	0x0800d4c4
 8001cb0:	0800d4d8 	.word	0x0800d4d8
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	2000002c 	.word	0x2000002c
 8001cbc:	0800d4f4 	.word	0x0800d4f4

08001cc0 <BNO055_I2C_bus_read>:
// I2C read function
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	603a      	str	r2, [r7, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	71bb      	strb	r3, [r7, #6]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	717b      	strb	r3, [r7, #5]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, dev_addr << 1,
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	b299      	uxth	r1, r3
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	797b      	ldrb	r3, [r7, #5]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2064      	movs	r0, #100	@ 0x64
 8001ce8:	9002      	str	r0, [sp, #8]
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	4808      	ldr	r0, [pc, #32]	@ (8001d14 <BNO055_I2C_bus_read+0x54>)
 8001cf4:	f001 ff6e 	bl	8003bd4 <HAL_I2C_Mem_Read>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
                                               reg_addr, I2C_MEMADD_SIZE_8BIT,
                                               reg_data, cnt, 100);
   return (status == HAL_OK) ? BNO055_SUCCESS : BNO055_ERROR;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <BNO055_I2C_bus_read+0x46>
 8001d02:	2300      	movs	r3, #0
 8001d04:	e001      	b.n	8001d0a <BNO055_I2C_bus_read+0x4a>
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200002a0 	.word	0x200002a0

08001d18 <BNO055_I2C_bus_write>:
// I2C write function
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af04      	add	r7, sp, #16
 8001d1e:	603a      	str	r2, [r7, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	460b      	mov	r3, r1
 8001d28:	71bb      	strb	r3, [r7, #6]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	717b      	strb	r3, [r7, #5]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c2, dev_addr << 1,
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	b299      	uxth	r1, r3
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	797b      	ldrb	r3, [r7, #5]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2064      	movs	r0, #100	@ 0x64
 8001d40:	9002      	str	r0, [sp, #8]
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4808      	ldr	r0, [pc, #32]	@ (8001d6c <BNO055_I2C_bus_write+0x54>)
 8001d4c:	f001 fe48 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
                                                reg_addr, I2C_MEMADD_SIZE_8BIT,
                                                reg_data, cnt, 100);
   return (status == HAL_OK) ? BNO055_SUCCESS : BNO055_ERROR;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <BNO055_I2C_bus_write+0x46>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e001      	b.n	8001d62 <BNO055_I2C_bus_write+0x4a>
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200002a0 	.word	0x200002a0

08001d70 <BNO055_Init_Dual>:
void BNO055_Init_Dual(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
   // Initialize thigh sensor
   printf("Initializing thigh sensor...\r\n");
 8001d76:	4822      	ldr	r0, [pc, #136]	@ (8001e00 <BNO055_Init_Dual+0x90>)
 8001d78:	f007 fd6c 	bl	8009854 <puts>
  thigh.dev.bus_read = BNO055_I2C_bus_read;
 8001d7c:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <BNO055_Init_Dual+0x94>)
 8001d7e:	4a22      	ldr	r2, [pc, #136]	@ (8001e08 <BNO055_Init_Dual+0x98>)
 8001d80:	611a      	str	r2, [r3, #16]
  thigh.dev.bus_write = BNO055_I2C_bus_write;
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <BNO055_Init_Dual+0x94>)
 8001d84:	4a21      	ldr	r2, [pc, #132]	@ (8001e0c <BNO055_Init_Dual+0x9c>)
 8001d86:	60da      	str	r2, [r3, #12]
   thigh.dev.delay_msec = BNO055_Delay;
 8001d88:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <BNO055_Init_Dual+0x94>)
 8001d8a:	4a21      	ldr	r2, [pc, #132]	@ (8001e10 <BNO055_Init_Dual+0xa0>)
 8001d8c:	615a      	str	r2, [r3, #20]
   s8 result = bno055_init(&thigh.dev);
 8001d8e:	481d      	ldr	r0, [pc, #116]	@ (8001e04 <BNO055_Init_Dual+0x94>)
 8001d90:	f7ff f966 	bl	8001060 <bno055_init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
   if(result == BNO055_SUCCESS) {
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <BNO055_Init_Dual+0x3c>
       // Set IMUPLUS mode (Accelerometer + Gyroscope only)
       bno055_set_operation_mode(IMUPLUS_MODE);
 8001da0:	2008      	movs	r0, #8
 8001da2:	f7ff facd 	bl	8001340 <bno055_set_operation_mode>
       printf("Thigh: IMUPLUS mode set\r\n");
 8001da6:	481b      	ldr	r0, [pc, #108]	@ (8001e14 <BNO055_Init_Dual+0xa4>)
 8001da8:	f007 fd54 	bl	8009854 <puts>
   }
   // Initialize shank sensor
   printf("Initializing shank sensor...\r\n");
 8001dac:	481a      	ldr	r0, [pc, #104]	@ (8001e18 <BNO055_Init_Dual+0xa8>)
 8001dae:	f007 fd51 	bl	8009854 <puts>
   shank.dev.bus_read = BNO055_I2C_bus_read;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <BNO055_Init_Dual+0xac>)
 8001db4:	4a14      	ldr	r2, [pc, #80]	@ (8001e08 <BNO055_Init_Dual+0x98>)
 8001db6:	611a      	str	r2, [r3, #16]
   shank.dev.bus_write = BNO055_I2C_bus_write;
 8001db8:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <BNO055_Init_Dual+0xac>)
 8001dba:	4a14      	ldr	r2, [pc, #80]	@ (8001e0c <BNO055_Init_Dual+0x9c>)
 8001dbc:	60da      	str	r2, [r3, #12]
   shank.dev.delay_msec = BNO055_Delay;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <BNO055_Init_Dual+0xac>)
 8001dc0:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <BNO055_Init_Dual+0xa0>)
 8001dc2:	615a      	str	r2, [r3, #20]
   result = bno055_init(&shank.dev);
 8001dc4:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <BNO055_Init_Dual+0xac>)
 8001dc6:	f7ff f94b 	bl	8001060 <bno055_init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
   printf("Shank init: %s\r\n", result == BNO055_SUCCESS ? "OK" : "FAIL");
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <BNO055_Init_Dual+0x6a>
 8001dd6:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <BNO055_Init_Dual+0xb0>)
 8001dd8:	e000      	b.n	8001ddc <BNO055_Init_Dual+0x6c>
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <BNO055_Init_Dual+0xb4>)
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4812      	ldr	r0, [pc, #72]	@ (8001e28 <BNO055_Init_Dual+0xb8>)
 8001de0:	f007 fcd0 	bl	8009784 <iprintf>
   if(result == BNO055_SUCCESS) {
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <BNO055_Init_Dual+0x88>
       // Set IMUPLUS mode (Accelerometer + Gyroscope only)
       bno055_set_operation_mode(IMUPLUS_MODE);
 8001dec:	2008      	movs	r0, #8
 8001dee:	f7ff faa7 	bl	8001340 <bno055_set_operation_mode>
       printf("Shank: IMUPLUS mode set\r\n");
 8001df2:	480e      	ldr	r0, [pc, #56]	@ (8001e2c <BNO055_Init_Dual+0xbc>)
 8001df4:	f007 fd2e 	bl	8009854 <puts>
   }
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	0800d514 	.word	0x0800d514
 8001e04:	20000000 	.word	0x20000000
 8001e08:	08001cc1 	.word	0x08001cc1
 8001e0c:	08001d19 	.word	0x08001d19
 8001e10:	080014f5 	.word	0x080014f5
 8001e14:	0800d534 	.word	0x0800d534
 8001e18:	0800d550 	.word	0x0800d550
 8001e1c:	2000002c 	.word	0x2000002c
 8001e20:	0800d570 	.word	0x0800d570
 8001e24:	0800d574 	.word	0x0800d574
 8001e28:	0800d57c 	.word	0x0800d57c
 8001e2c:	0800d590 	.word	0x0800d590

08001e30 <read_calibration_status>:
// Read calibration status directly from registers
s8 read_calibration_status(u8 dev_addr, u8 *calib_data) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
   u8 calib_stat = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73bb      	strb	r3, [r7, #14]
   s8 result = BNO055_I2C_bus_read(dev_addr, BNO055_CALIB_STAT_ADDR, &calib_stat, 1);
 8001e40:	f107 020e 	add.w	r2, r7, #14
 8001e44:	79f8      	ldrb	r0, [r7, #7]
 8001e46:	2301      	movs	r3, #1
 8001e48:	2135      	movs	r1, #53	@ 0x35
 8001e4a:	f7ff ff39 	bl	8001cc0 <BNO055_I2C_bus_read>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]
   if(result == BNO055_SUCCESS) {
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11d      	bne.n	8001e96 <read_calibration_status+0x66>
       calib_data[0] = (calib_stat >> 6) & 0x03; // System status
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	099b      	lsrs	r3, r3, #6
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	701a      	strb	r2, [r3, #0]
       calib_data[1] = (calib_stat >> 4) & 0x03; // Gyroscope status
 8001e64:	7bbb      	ldrb	r3, [r7, #14]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f002 0203 	and.w	r2, r2, #3
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
       calib_data[2] = (calib_stat >> 2) & 0x03; // Accelerometer status
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]
       calib_data[3] = calib_stat & 0x03;        // Magnetometer status
 8001e88:	7bba      	ldrb	r2, [r7, #14]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	f002 0203 	and.w	r2, r2, #3
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
   }
   return result;
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <Read_Dual_Calibration>:
void Read_Dual_Calibration(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
   read_calibration_status(thigh.dev.dev_addr, thigh.calib);
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <Read_Dual_Calibration+0x20>)
 8001eaa:	7a5b      	ldrb	r3, [r3, #9]
 8001eac:	4906      	ldr	r1, [pc, #24]	@ (8001ec8 <Read_Dual_Calibration+0x24>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ffbe 	bl	8001e30 <read_calibration_status>
   read_calibration_status(shank.dev.dev_addr, shank.calib);
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <Read_Dual_Calibration+0x28>)
 8001eb6:	7a5b      	ldrb	r3, [r3, #9]
 8001eb8:	4905      	ldr	r1, [pc, #20]	@ (8001ed0 <Read_Dual_Calibration+0x2c>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ffb8 	bl	8001e30 <read_calibration_status>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	2000002c 	.word	0x2000002c
 8001ed0:	20000044 	.word	0x20000044

08001ed4 <read_euler_angles>:
// Read Euler angles directly from registers
s8 read_euler_angles(u8 dev_addr, struct bno055_euler_float_t *euler_float) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
   u8 euler_data[6];
   s8 result = BNO055_I2C_bus_read(dev_addr, BNO055_EULER_H_LSB_ADDR, euler_data, 6);
 8001ee0:	f107 0208 	add.w	r2, r7, #8
 8001ee4:	79f8      	ldrb	r0, [r7, #7]
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	211a      	movs	r1, #26
 8001eea:	f7ff fee9 	bl	8001cc0 <BNO055_I2C_bus_read>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]
   if(result == BNO055_SUCCESS) {
 8001ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d13e      	bne.n	8001f78 <read_euler_angles+0xa4>
       // Combine bytes (little-endian)
       int16_t h = (int16_t)((euler_data[1] << 8) | euler_data[0]);
 8001efa:	7a7b      	ldrb	r3, [r7, #9]
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	7a3b      	ldrb	r3, [r7, #8]
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	82bb      	strh	r3, [r7, #20]
       int16_t r = (int16_t)((euler_data[3] << 8) | euler_data[2]);
 8001f0a:	7afb      	ldrb	r3, [r7, #11]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	7abb      	ldrb	r3, [r7, #10]
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	827b      	strh	r3, [r7, #18]
       int16_t p = (int16_t)((euler_data[5] << 8) | euler_data[4]);
 8001f1a:	7b7b      	ldrb	r3, [r7, #13]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	7b3b      	ldrb	r3, [r7, #12]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	823b      	strh	r3, [r7, #16]
       // Convert to degrees (LSB = 1/16 degree)
       euler_float->h = (float)h / 16.0f;
 8001f2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f36:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	edc3 7a00 	vstr	s15, [r3]
       euler_float->r = (float)r / 16.0f;
 8001f44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f50:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	edc3 7a01 	vstr	s15, [r3, #4]
       euler_float->p = (float)p / 16.0f;
 8001f5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	edc3 7a02 	vstr	s15, [r3, #8]
   }
   return result;
 8001f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <normalize_angle>:
// Helper function to normalize angle to [-180, 180] range
float normalize_angle(float angle) {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	ed87 0a01 	vstr	s0, [r7, #4]
   while (angle > 180.0f) angle -= 360.0f;
 8001f8e:	e007      	b.n	8001fa0 <normalize_angle+0x1c>
 8001f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f94:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001fec <normalize_angle+0x68>
 8001f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001ff0 <normalize_angle+0x6c>
 8001fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	dcee      	bgt.n	8001f90 <normalize_angle+0xc>
   while (angle < -180.0f) angle += 360.0f;
 8001fb2:	e007      	b.n	8001fc4 <normalize_angle+0x40>
 8001fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001fec <normalize_angle+0x68>
 8001fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fc0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fc8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001ff4 <normalize_angle+0x70>
 8001fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd4:	d4ee      	bmi.n	8001fb4 <normalize_angle+0x30>
   return angle;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	ee07 3a90 	vmov	s15, r3
}
 8001fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	43b40000 	.word	0x43b40000
 8001ff0:	43340000 	.word	0x43340000
 8001ff4:	c3340000 	.word	0xc3340000

08001ff8 <Read_Dual_Orientation>:
// Modified Orientation Reading with angle differences
// Modified Orientation Reading with knee angle calculation
void Read_Dual_Orientation(void) {
 8001ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ffc:	b090      	sub	sp, #64	@ 0x40
 8001ffe:	af04      	add	r7, sp, #16
   struct bno055_euler_float_t euler1, euler2;
   u32 current_time = HAL_GetTick();
 8002000:	f000 fd00 	bl	8002a04 <HAL_GetTick>
 8002004:	62f8      	str	r0, [r7, #44]	@ 0x2c
   float dt = (current_time - last_update) / 1000.0f; // Convert to seconds
 8002006:	4b6b      	ldr	r3, [pc, #428]	@ (80021b4 <Read_Dual_Orientation+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002016:	eddf 6a68 	vldr	s13, [pc, #416]	@ 80021b8 <Read_Dual_Orientation+0x1c0>
 800201a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
   // Read thigh sensor directly
   if(read_euler_angles(thigh.dev.dev_addr, &euler1) != BNO055_SUCCESS) {
 8002022:	4b66      	ldr	r3, [pc, #408]	@ (80021bc <Read_Dual_Orientation+0x1c4>)
 8002024:	7a5b      	ldrb	r3, [r3, #9]
 8002026:	f107 0210 	add.w	r2, r7, #16
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff51 	bl	8001ed4 <read_euler_angles>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <Read_Dual_Orientation+0x48>
       printf("Error reading thigh sensor\r\n");
 8002038:	4861      	ldr	r0, [pc, #388]	@ (80021c0 <Read_Dual_Orientation+0x1c8>)
 800203a:	f007 fc0b 	bl	8009854 <puts>
       return;
 800203e:	e0b5      	b.n	80021ac <Read_Dual_Orientation+0x1b4>
   }
   // Read shank sensor directly
   if(read_euler_angles(shank.dev.dev_addr, &euler2) != BNO055_SUCCESS) {
 8002040:	4b60      	ldr	r3, [pc, #384]	@ (80021c4 <Read_Dual_Orientation+0x1cc>)
 8002042:	7a5b      	ldrb	r3, [r3, #9]
 8002044:	1d3a      	adds	r2, r7, #4
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff43 	bl	8001ed4 <read_euler_angles>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <Read_Dual_Orientation+0x64>
       printf("Error reading shank sensor\r\n");
 8002054:	485c      	ldr	r0, [pc, #368]	@ (80021c8 <Read_Dual_Orientation+0x1d0>)
 8002056:	f007 fbfd 	bl	8009854 <puts>
       return;
 800205a:	e0a7      	b.n	80021ac <Read_Dual_Orientation+0x1b4>
   }
   // Calculate angle differences between sensors
   float roll_diff = normalize_angle(euler2.r - euler1.r);
 800205c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002060:	edd7 7a05 	vldr	s15, [r7, #20]
 8002064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	f7ff ff8a 	bl	8001f84 <normalize_angle>
 8002070:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
   float pitch_diff = normalize_angle(euler2.p - euler1.p);
 8002074:	ed97 7a03 	vldr	s14, [r7, #12]
 8002078:	edd7 7a06 	vldr	s15, [r7, #24]
 800207c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002080:	eeb0 0a67 	vmov.f32	s0, s15
 8002084:	f7ff ff7e 	bl	8001f84 <normalize_angle>
 8002088:	ed87 0a08 	vstr	s0, [r7, #32]
   float yaw_diff = normalize_angle(euler2.h - euler1.h);
 800208c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002090:	edd7 7a04 	vldr	s15, [r7, #16]
 8002094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002098:	eeb0 0a67 	vmov.f32	s0, s15
 800209c:	f7ff ff72 	bl	8001f84 <normalize_angle>
 80020a0:	ed87 0a07 	vstr	s0, [r7, #28]
   // Store previous knee angle for velocity calculation
   prev_knee_angle = knee_angle;
 80020a4:	4b49      	ldr	r3, [pc, #292]	@ (80021cc <Read_Dual_Orientation+0x1d4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a49      	ldr	r2, [pc, #292]	@ (80021d0 <Read_Dual_Orientation+0x1d8>)
 80020aa:	6013      	str	r3, [r2, #0]
   // Calculate knee angle (typically pitch difference for knee flexion/extension)
   // Positive value = knee flexion, Negative value = knee extension
   knee_angle = -pitch_diff;  // Critical inversion for backward mounting
 80020ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80020b0:	eef1 7a67 	vneg.f32	s15, s15
 80020b4:	4b45      	ldr	r3, [pc, #276]	@ (80021cc <Read_Dual_Orientation+0x1d4>)
 80020b6:	edc3 7a00 	vstr	s15, [r3]
   // Calculate knee angular velocity (degrees per second)
   if(dt > 0) {
 80020ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80020be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c6:	dd0e      	ble.n	80020e6 <Read_Dual_Orientation+0xee>
       knee_velocity = (knee_angle - prev_knee_angle) / dt;
 80020c8:	4b40      	ldr	r3, [pc, #256]	@ (80021cc <Read_Dual_Orientation+0x1d4>)
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	4b40      	ldr	r3, [pc, #256]	@ (80021d0 <Read_Dual_Orientation+0x1d8>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80020dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e0:	4b3c      	ldr	r3, [pc, #240]	@ (80021d4 <Read_Dual_Orientation+0x1dc>)
 80020e2:	edc3 7a00 	vstr	s15, [r3]
   }
   // Print individual sensor readings
   printf("Thigh: Roll=%.1f Pitch=%.1f Yaw=%.1f | ",
          euler1.r, euler1.p, euler1.h);
 80020e6:	697b      	ldr	r3, [r7, #20]
   printf("Thigh: Roll=%.1f Pitch=%.1f Yaw=%.1f | ",
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa4d 	bl	8000588 <__aeabi_f2d>
 80020ee:	4680      	mov	r8, r0
 80020f0:	4689      	mov	r9, r1
          euler1.r, euler1.p, euler1.h);
 80020f2:	69bb      	ldr	r3, [r7, #24]
   printf("Thigh: Roll=%.1f Pitch=%.1f Yaw=%.1f | ",
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa47 	bl	8000588 <__aeabi_f2d>
 80020fa:	4604      	mov	r4, r0
 80020fc:	460d      	mov	r5, r1
          euler1.r, euler1.p, euler1.h);
 80020fe:	693b      	ldr	r3, [r7, #16]
   printf("Thigh: Roll=%.1f Pitch=%.1f Yaw=%.1f | ",
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fa41 	bl	8000588 <__aeabi_f2d>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800210e:	e9cd 4500 	strd	r4, r5, [sp]
 8002112:	4642      	mov	r2, r8
 8002114:	464b      	mov	r3, r9
 8002116:	4830      	ldr	r0, [pc, #192]	@ (80021d8 <Read_Dual_Orientation+0x1e0>)
 8002118:	f007 fb34 	bl	8009784 <iprintf>
   printf("Shank: Roll=%.1f Pitch=%.1f Yaw=%.1f\r\n",
          euler2.r, euler2.p, euler2.h);
 800211c:	68bb      	ldr	r3, [r7, #8]
   printf("Shank: Roll=%.1f Pitch=%.1f Yaw=%.1f\r\n",
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa32 	bl	8000588 <__aeabi_f2d>
 8002124:	4680      	mov	r8, r0
 8002126:	4689      	mov	r9, r1
          euler2.r, euler2.p, euler2.h);
 8002128:	68fb      	ldr	r3, [r7, #12]
   printf("Shank: Roll=%.1f Pitch=%.1f Yaw=%.1f\r\n",
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fa2c 	bl	8000588 <__aeabi_f2d>
 8002130:	4604      	mov	r4, r0
 8002132:	460d      	mov	r5, r1
          euler2.r, euler2.p, euler2.h);
 8002134:	687b      	ldr	r3, [r7, #4]
   printf("Shank: Roll=%.1f Pitch=%.1f Yaw=%.1f\r\n",
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa26 	bl	8000588 <__aeabi_f2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002144:	e9cd 4500 	strd	r4, r5, [sp]
 8002148:	4642      	mov	r2, r8
 800214a:	464b      	mov	r3, r9
 800214c:	4823      	ldr	r0, [pc, #140]	@ (80021dc <Read_Dual_Orientation+0x1e4>)
 800214e:	f007 fb19 	bl	8009784 <iprintf>
   // Print angle differences and knee measurements
   printf("Diff: Roll=%.1f Pitch=%.1f Yaw=%.1f | ",
 8002152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002154:	f7fe fa18 	bl	8000588 <__aeabi_f2d>
 8002158:	4680      	mov	r8, r0
 800215a:	4689      	mov	r9, r1
 800215c:	6a38      	ldr	r0, [r7, #32]
 800215e:	f7fe fa13 	bl	8000588 <__aeabi_f2d>
 8002162:	4604      	mov	r4, r0
 8002164:	460d      	mov	r5, r1
 8002166:	69f8      	ldr	r0, [r7, #28]
 8002168:	f7fe fa0e 	bl	8000588 <__aeabi_f2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002174:	e9cd 4500 	strd	r4, r5, [sp]
 8002178:	4642      	mov	r2, r8
 800217a:	464b      	mov	r3, r9
 800217c:	4818      	ldr	r0, [pc, #96]	@ (80021e0 <Read_Dual_Orientation+0x1e8>)
 800217e:	f007 fb01 	bl	8009784 <iprintf>
          roll_diff, pitch_diff, yaw_diff);
   printf("Knee: Angle=%.1f° Velocity=%.1f°/s\r\n",
 8002182:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <Read_Dual_Orientation+0x1d4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9fe 	bl	8000588 <__aeabi_f2d>
 800218c:	4604      	mov	r4, r0
 800218e:	460d      	mov	r5, r1
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <Read_Dual_Orientation+0x1dc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f9f7 	bl	8000588 <__aeabi_f2d>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	e9cd 2300 	strd	r2, r3, [sp]
 80021a2:	4622      	mov	r2, r4
 80021a4:	462b      	mov	r3, r5
 80021a6:	480f      	ldr	r0, [pc, #60]	@ (80021e4 <Read_Dual_Orientation+0x1ec>)
 80021a8:	f007 faec 	bl	8009784 <iprintf>
          knee_angle, knee_velocity);
}
 80021ac:	3730      	adds	r7, #48	@ 0x30
 80021ae:	46bd      	mov	sp, r7
 80021b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021b4:	200004b8 	.word	0x200004b8
 80021b8:	447a0000 	.word	0x447a0000
 80021bc:	20000000 	.word	0x20000000
 80021c0:	0800d5ac 	.word	0x0800d5ac
 80021c4:	2000002c 	.word	0x2000002c
 80021c8:	0800d5c8 	.word	0x0800d5c8
 80021cc:	200004c0 	.word	0x200004c0
 80021d0:	200004c8 	.word	0x200004c8
 80021d4:	200004c4 	.word	0x200004c4
 80021d8:	0800d5e4 	.word	0x0800d5e4
 80021dc:	0800d60c 	.word	0x0800d60c
 80021e0:	0800d634 	.word	0x0800d634
 80021e4:	0800d65c 	.word	0x0800d65c

080021e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ec:	b672      	cpsid	i
}
 80021ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <Error_Handler+0x8>

080021f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_MspInit+0x4c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	4a0f      	ldr	r2, [pc, #60]	@ (8002240 <HAL_MspInit+0x4c>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002208:	6453      	str	r3, [r2, #68]	@ 0x44
 800220a:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <HAL_MspInit+0x4c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_MspInit+0x4c>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	4a08      	ldr	r2, [pc, #32]	@ (8002240 <HAL_MspInit+0x4c>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	@ 0x40
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_MspInit+0x4c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002232:	2007      	movs	r0, #7
 8002234:	f000 fce6 	bl	8002c04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	@ 0x30
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a80      	ldr	r2, [pc, #512]	@ (8002464 <HAL_I2C_MspInit+0x220>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d13c      	bne.n	80022e0 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	4b7f      	ldr	r3, [pc, #508]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a7e      	ldr	r2, [pc, #504]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b7c      	ldr	r3, [pc, #496]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002282:	23c0      	movs	r3, #192	@ 0xc0
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002286:	2312      	movs	r3, #18
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002292:	2304      	movs	r3, #4
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	4873      	ldr	r0, [pc, #460]	@ (800246c <HAL_I2C_MspInit+0x228>)
 800229e:	f001 f87d 	bl	800339c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	4b70      	ldr	r3, [pc, #448]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 80022ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	201f      	movs	r0, #31
 80022c4:	f000 fca9 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022c8:	201f      	movs	r0, #31
 80022ca:	f000 fcc2 	bl	8002c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	2020      	movs	r0, #32
 80022d4:	f000 fca1 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80022d8:	2020      	movs	r0, #32
 80022da:	f000 fcba 	bl	8002c52 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022de:	e0bd      	b.n	800245c <HAL_I2C_MspInit+0x218>
  else if(hi2c->Instance==I2C2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a62      	ldr	r2, [pc, #392]	@ (8002470 <HAL_I2C_MspInit+0x22c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	f040 80b8 	bne.w	800245c <HAL_I2C_MspInit+0x218>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	4a5c      	ldr	r2, [pc, #368]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	4b56      	ldr	r3, [pc, #344]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002310:	4a55      	ldr	r2, [pc, #340]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6313      	str	r3, [r2, #48]	@ 0x30
 8002318:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800232a:	2312      	movs	r3, #18
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002336:	2304      	movs	r3, #4
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	484a      	ldr	r0, [pc, #296]	@ (800246c <HAL_I2C_MspInit+0x228>)
 8002342:	f001 f82b 	bl	800339c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002346:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800234a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234c:	2312      	movs	r3, #18
 800234e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002358:	2304      	movs	r3, #4
 800235a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	4844      	ldr	r0, [pc, #272]	@ (8002474 <HAL_I2C_MspInit+0x230>)
 8002364:	f001 f81a 	bl	800339c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	4a3d      	ldr	r2, [pc, #244]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 8002372:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002376:	6413      	str	r3, [r2, #64]	@ 0x40
 8002378:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <HAL_I2C_MspInit+0x224>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8002384:	4b3c      	ldr	r3, [pc, #240]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 8002386:	4a3d      	ldr	r2, [pc, #244]	@ (800247c <HAL_I2C_MspInit+0x238>)
 8002388:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800238a:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 800238c:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002390:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002392:	4b39      	ldr	r3, [pc, #228]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002398:	4b37      	ldr	r3, [pc, #220]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800239e:	4b36      	ldr	r3, [pc, #216]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 80023a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023a4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a6:	4b34      	ldr	r3, [pc, #208]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ac:	4b32      	ldr	r3, [pc, #200]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80023b2:	4b31      	ldr	r3, [pc, #196]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023be:	4b2e      	ldr	r3, [pc, #184]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80023c4:	482c      	ldr	r0, [pc, #176]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 80023c6:	f000 fc5f 	bl	8002c88 <HAL_DMA_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_MspInit+0x190>
      Error_Handler();
 80023d0:	f7ff ff0a 	bl	80021e8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a28      	ldr	r2, [pc, #160]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 80023d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80023da:	4a27      	ldr	r2, [pc, #156]	@ (8002478 <HAL_I2C_MspInit+0x234>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80023e0:	4b27      	ldr	r3, [pc, #156]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 80023e2:	4a28      	ldr	r2, [pc, #160]	@ (8002484 <HAL_I2C_MspInit+0x240>)
 80023e4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80023e6:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 80023e8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80023ec:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ee:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f4:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023fa:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 80023fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002400:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002402:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002408:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002420:	4817      	ldr	r0, [pc, #92]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 8002422:	f000 fc31 	bl	8002c88 <HAL_DMA_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_MspInit+0x1ec>
      Error_Handler();
 800242c:	f7ff fedc 	bl	80021e8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a13      	ldr	r2, [pc, #76]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 8002434:	635a      	str	r2, [r3, #52]	@ 0x34
 8002436:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <HAL_I2C_MspInit+0x23c>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	2021      	movs	r0, #33	@ 0x21
 8002442:	f000 fbea 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002446:	2021      	movs	r0, #33	@ 0x21
 8002448:	f000 fc03 	bl	8002c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	2022      	movs	r0, #34	@ 0x22
 8002452:	f000 fbe2 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002456:	2022      	movs	r0, #34	@ 0x22
 8002458:	f000 fbfb 	bl	8002c52 <HAL_NVIC_EnableIRQ>
}
 800245c:	bf00      	nop
 800245e:	3730      	adds	r7, #48	@ 0x30
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40005400 	.word	0x40005400
 8002468:	40023800 	.word	0x40023800
 800246c:	40020400 	.word	0x40020400
 8002470:	40005800 	.word	0x40005800
 8002474:	40020800 	.word	0x40020800
 8002478:	200002f4 	.word	0x200002f4
 800247c:	40026040 	.word	0x40026040
 8002480:	20000354 	.word	0x20000354
 8002484:	400260b8 	.word	0x400260b8

08002488 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0e      	ldr	r2, [pc, #56]	@ (80024d0 <HAL_TIM_Base_MspInit+0x48>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d115      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b0d      	ldr	r3, [pc, #52]	@ (80024d4 <HAL_TIM_Base_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	4a0c      	ldr	r2, [pc, #48]	@ (80024d4 <HAL_TIM_Base_MspInit+0x4c>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024aa:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <HAL_TIM_Base_MspInit+0x4c>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	201d      	movs	r0, #29
 80024bc:	f000 fbad 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024c0:	201d      	movs	r0, #29
 80024c2:	f000 fbc6 	bl	8002c52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	@ 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a34      	ldr	r2, [pc, #208]	@ (80025c8 <HAL_UART_MspInit+0xf0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d161      	bne.n	80025be <HAL_UART_MspInit+0xe6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b33      	ldr	r3, [pc, #204]	@ (80025cc <HAL_UART_MspInit+0xf4>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	4a32      	ldr	r2, [pc, #200]	@ (80025cc <HAL_UART_MspInit+0xf4>)
 8002504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002508:	6413      	str	r3, [r2, #64]	@ 0x40
 800250a:	4b30      	ldr	r3, [pc, #192]	@ (80025cc <HAL_UART_MspInit+0xf4>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b2c      	ldr	r3, [pc, #176]	@ (80025cc <HAL_UART_MspInit+0xf4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a2b      	ldr	r2, [pc, #172]	@ (80025cc <HAL_UART_MspInit+0xf4>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b29      	ldr	r3, [pc, #164]	@ (80025cc <HAL_UART_MspInit+0xf4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002532:	230c      	movs	r3, #12
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002542:	2307      	movs	r3, #7
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4820      	ldr	r0, [pc, #128]	@ (80025d0 <HAL_UART_MspInit+0xf8>)
 800254e:	f000 ff25 	bl	800339c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002552:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 8002554:	4a20      	ldr	r2, [pc, #128]	@ (80025d8 <HAL_UART_MspInit+0x100>)
 8002556:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002558:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 800255a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800255e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002560:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 8002562:	2240      	movs	r2, #64	@ 0x40
 8002564:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002566:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 8002568:	2200      	movs	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800256c:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 800256e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002572:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002574:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 8002576:	2200      	movs	r2, #0
 8002578:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800257a:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002580:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002586:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 8002588:	2200      	movs	r2, #0
 800258a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 800258e:	2200      	movs	r2, #0
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002592:	4810      	ldr	r0, [pc, #64]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 8002594:	f000 fb78 	bl	8002c88 <HAL_DMA_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800259e:	f7ff fe23 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a0b      	ldr	r2, [pc, #44]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 80025a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80025a8:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_UART_MspInit+0xfc>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2026      	movs	r0, #38	@ 0x26
 80025b4:	f000 fb31 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025b8:	2026      	movs	r0, #38	@ 0x26
 80025ba:	f000 fb4a 	bl	8002c52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	@ 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40004400 	.word	0x40004400
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	20000444 	.word	0x20000444
 80025d8:	400260a0 	.word	0x400260a0

080025dc <HAL_WWDG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hwwdg: WWDG handle pointer
  * @retval None
  */
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002618 <HAL_WWDG_MspInit+0x3c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10d      	bne.n	800260a <HAL_WWDG_MspInit+0x2e>
  {
    /* USER CODE BEGIN WWDG_MspInit 0 */

    /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <HAL_WWDG_MspInit+0x40>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	4a09      	ldr	r2, [pc, #36]	@ (800261c <HAL_WWDG_MspInit+0x40>)
 80025f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025fe:	4b07      	ldr	r3, [pc, #28]	@ (800261c <HAL_WWDG_MspInit+0x40>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END WWDG_MspInit 1 */

  }

}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40002c00 	.word	0x40002c00
 800261c:	40023800 	.word	0x40023800

08002620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <NMI_Handler+0x4>

08002628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <HardFault_Handler+0x4>

08002630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <MemManage_Handler+0x4>

08002638 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <BusFault_Handler+0x4>

08002640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <UsageFault_Handler+0x4>

08002648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002676:	f000 f9b1 	bl	80029dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002684:	4802      	ldr	r0, [pc, #8]	@ (8002690 <DMA1_Stream2_IRQHandler+0x10>)
 8002686:	f000 fc3f 	bl	8002f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200002f4 	.word	0x200002f4

08002694 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002698:	4802      	ldr	r0, [pc, #8]	@ (80026a4 <DMA1_Stream6_IRQHandler+0x10>)
 800269a:	f000 fc35 	bl	8002f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000444 	.word	0x20000444

080026a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026ac:	4802      	ldr	r0, [pc, #8]	@ (80026b8 <TIM3_IRQHandler+0x10>)
 80026ae:	f004 fd4e 	bl	800714e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200003b4 	.word	0x200003b4

080026bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026c0:	4802      	ldr	r0, [pc, #8]	@ (80026cc <I2C1_EV_IRQHandler+0x10>)
 80026c2:	f001 fde7 	bl	8004294 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000024c 	.word	0x2000024c

080026d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80026d4:	4802      	ldr	r0, [pc, #8]	@ (80026e0 <I2C1_ER_IRQHandler+0x10>)
 80026d6:	f001 ff4e 	bl	8004576 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000024c 	.word	0x2000024c

080026e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80026e8:	4802      	ldr	r0, [pc, #8]	@ (80026f4 <I2C2_EV_IRQHandler+0x10>)
 80026ea:	f001 fdd3 	bl	8004294 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200002a0 	.word	0x200002a0

080026f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80026fc:	4802      	ldr	r0, [pc, #8]	@ (8002708 <I2C2_ER_IRQHandler+0x10>)
 80026fe:	f001 ff3a 	bl	8004576 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200002a0 	.word	0x200002a0

0800270c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002710:	4802      	ldr	r0, [pc, #8]	@ (800271c <USART2_IRQHandler+0x10>)
 8002712:	f005 f9b1 	bl	8007a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200003fc 	.word	0x200003fc

08002720 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002724:	4802      	ldr	r0, [pc, #8]	@ (8002730 <DMA1_Stream7_IRQHandler+0x10>)
 8002726:	f000 fbef 	bl	8002f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000354 	.word	0x20000354

08002734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return 1;
 8002738:	2301      	movs	r3, #1
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_kill>:

int _kill(int pid, int sig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800274e:	f007 fa91 	bl	8009c74 <__errno>
 8002752:	4603      	mov	r3, r0
 8002754:	2216      	movs	r2, #22
 8002756:	601a      	str	r2, [r3, #0]
  return -1;
 8002758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <_exit>:

void _exit (int status)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ffe7 	bl	8002744 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002776:	bf00      	nop
 8002778:	e7fd      	b.n	8002776 <_exit+0x12>

0800277a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	e00a      	b.n	80027a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800278c:	f3af 8000 	nop.w
 8002790:	4601      	mov	r1, r0
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	60ba      	str	r2, [r7, #8]
 8002798:	b2ca      	uxtb	r2, r1
 800279a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	dbf0      	blt.n	800278c <_read+0x12>
  }

  return len;
 80027aa:	687b      	ldr	r3, [r7, #4]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	e009      	b.n	80027da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	60ba      	str	r2, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fe7e 	bl	80014d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3301      	adds	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	dbf1      	blt.n	80027c6 <_write+0x12>
  }
  return len;
 80027e2:	687b      	ldr	r3, [r7, #4]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_close>:

int _close(int file)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002814:	605a      	str	r2, [r3, #4]
  return 0;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_isatty>:

int _isatty(int file)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800282c:	2301      	movs	r3, #1
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800285c:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <_sbrk+0x5c>)
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <_sbrk+0x60>)
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <_sbrk+0x64>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <_sbrk+0x64>)
 8002872:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <_sbrk+0x68>)
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d207      	bcs.n	8002894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002884:	f007 f9f6 	bl	8009c74 <__errno>
 8002888:	4603      	mov	r3, r0
 800288a:	220c      	movs	r2, #12
 800288c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	e009      	b.n	80028a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289a:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <_sbrk+0x64>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	4a05      	ldr	r2, [pc, #20]	@ (80028b8 <_sbrk+0x64>)
 80028a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20020000 	.word	0x20020000
 80028b4:	00000400 	.word	0x00000400
 80028b8:	200004cc 	.word	0x200004cc
 80028bc:	20000620 	.word	0x20000620

080028c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c4:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <SystemInit+0x20>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	4a05      	ldr	r2, [pc, #20]	@ (80028e0 <SystemInit+0x20>)
 80028cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800291c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028e8:	f7ff ffea 	bl	80028c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028ec:	480c      	ldr	r0, [pc, #48]	@ (8002920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ee:	490d      	ldr	r1, [pc, #52]	@ (8002924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002902:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002904:	4c0a      	ldr	r4, [pc, #40]	@ (8002930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002912:	f007 f9b5 	bl	8009c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002916:	f7fe fdf9 	bl	800150c <main>
  bx  lr    
 800291a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800291c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002924:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8002928:	0800db14 	.word	0x0800db14
  ldr r2, =_sbss
 800292c:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8002930:	20000620 	.word	0x20000620

08002934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC_IRQHandler>
	...

08002938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800293c:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <HAL_Init+0x40>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0d      	ldr	r2, [pc, #52]	@ (8002978 <HAL_Init+0x40>)
 8002942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_Init+0x40>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <HAL_Init+0x40>)
 800294e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002954:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <HAL_Init+0x40>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a07      	ldr	r2, [pc, #28]	@ (8002978 <HAL_Init+0x40>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002960:	2003      	movs	r0, #3
 8002962:	f000 f94f 	bl	8002c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002966:	2000      	movs	r0, #0
 8002968:	f000 f808 	bl	800297c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800296c:	f7ff fc42 	bl	80021f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40023c00 	.word	0x40023c00

0800297c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002984:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <HAL_InitTick+0x54>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <HAL_InitTick+0x58>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002992:	fbb3 f3f1 	udiv	r3, r3, r1
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f967 	bl	8002c6e <HAL_SYSTICK_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00e      	b.n	80029c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d80a      	bhi.n	80029c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b0:	2200      	movs	r2, #0
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	f000 f92f 	bl	8002c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029bc:	4a06      	ldr	r2, [pc, #24]	@ (80029d8 <HAL_InitTick+0x5c>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000058 	.word	0x20000058
 80029d4:	20000060 	.word	0x20000060
 80029d8:	2000005c 	.word	0x2000005c

080029dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_IncTick+0x20>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_IncTick+0x24>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	@ (8002a00 <HAL_IncTick+0x24>)
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000060 	.word	0x20000060
 8002a00:	200004d0 	.word	0x200004d0

08002a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return uwTick;
 8002a08:	4b03      	ldr	r3, [pc, #12]	@ (8002a18 <HAL_GetTick+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	200004d0 	.word	0x200004d0

08002a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff ffee 	bl	8002a04 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d005      	beq.n	8002a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_Delay+0x44>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a42:	bf00      	nop
 8002a44:	f7ff ffde 	bl	8002a04 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d8f7      	bhi.n	8002a44 <HAL_Delay+0x28>
  {
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000060 	.word	0x20000060

08002a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a74:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a80:	4013      	ands	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a96:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	60d3      	str	r3, [r2, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab0:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	f003 0307 	and.w	r3, r3, #7
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	db0b      	blt.n	8002af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	4907      	ldr	r1, [pc, #28]	@ (8002b00 <__NVIC_EnableIRQ+0x38>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	2001      	movs	r0, #1
 8002aea:	fa00 f202 	lsl.w	r2, r0, r2
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	db0a      	blt.n	8002b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	490c      	ldr	r1, [pc, #48]	@ (8002b50 <__NVIC_SetPriority+0x4c>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	0112      	lsls	r2, r2, #4
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	440b      	add	r3, r1
 8002b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b2c:	e00a      	b.n	8002b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4908      	ldr	r1, [pc, #32]	@ (8002b54 <__NVIC_SetPriority+0x50>)
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	3b04      	subs	r3, #4
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	440b      	add	r3, r1
 8002b42:	761a      	strb	r2, [r3, #24]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000e100 	.word	0xe000e100
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	@ 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f1c3 0307 	rsb	r3, r3, #7
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	bf28      	it	cs
 8002b76:	2304      	movcs	r3, #4
 8002b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d902      	bls.n	8002b88 <NVIC_EncodePriority+0x30>
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3b03      	subs	r3, #3
 8002b86:	e000      	b.n	8002b8a <NVIC_EncodePriority+0x32>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43da      	mvns	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43d9      	mvns	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	4313      	orrs	r3, r2
         );
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3724      	adds	r7, #36	@ 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd0:	d301      	bcc.n	8002bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00f      	b.n	8002bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <SysTick_Config+0x40>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bde:	210f      	movs	r1, #15
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f7ff ff8e 	bl	8002b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <SysTick_Config+0x40>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bee:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <SysTick_Config+0x40>)
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	e000e010 	.word	0xe000e010

08002c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff29 	bl	8002a64 <__NVIC_SetPriorityGrouping>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c2c:	f7ff ff3e 	bl	8002aac <__NVIC_GetPriorityGrouping>
 8002c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	6978      	ldr	r0, [r7, #20]
 8002c38:	f7ff ff8e 	bl	8002b58 <NVIC_EncodePriority>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff5d 	bl	8002b04 <__NVIC_SetPriority>
}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff31 	bl	8002ac8 <__NVIC_EnableIRQ>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ffa2 	bl	8002bc0 <SysTick_Config>
 8002c7c:	4603      	mov	r3, r0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff feb6 	bl	8002a04 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e099      	b.n	8002dd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc4:	e00f      	b.n	8002ce6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cc6:	f7ff fe9d 	bl	8002a04 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d908      	bls.n	8002ce6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e078      	b.n	8002dd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e8      	bne.n	8002cc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4b38      	ldr	r3, [pc, #224]	@ (8002de0 <HAL_DMA_Init+0x158>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d107      	bne.n	8002d50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f023 0307 	bic.w	r3, r3, #7
 8002d66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d117      	bne.n	8002daa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00e      	beq.n	8002daa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fa89 	bl	80032a4 <DMA_CheckFifoParam>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2240      	movs	r2, #64	@ 0x40
 8002d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002da6:	2301      	movs	r3, #1
 8002da8:	e016      	b.n	8002dd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa40 	bl	8003238 <DMA_CalcBaseAndBitshift>
 8002db8:	4603      	mov	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc0:	223f      	movs	r2, #63	@ 0x3f
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	f010803f 	.word	0xf010803f

08002de4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df2:	f7ff fe07 	bl	8002a04 <HAL_GetTick>
 8002df6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d008      	beq.n	8002e16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2280      	movs	r2, #128	@ 0x80
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e052      	b.n	8002ebc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0216 	bic.w	r2, r2, #22
 8002e24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <HAL_DMA_Abort+0x62>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0208 	bic.w	r2, r2, #8
 8002e54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e66:	e013      	b.n	8002e90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e68:	f7ff fdcc 	bl	8002a04 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d90c      	bls.n	8002e90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2203      	movs	r2, #3
 8002e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e015      	b.n	8002ebc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e4      	bne.n	8002e68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	223f      	movs	r2, #63	@ 0x3f
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2280      	movs	r2, #128	@ 0x80
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00c      	b.n	8002efc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2205      	movs	r2, #5
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f14:	4b8e      	ldr	r3, [pc, #568]	@ (8003150 <HAL_DMA_IRQHandler+0x248>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a8e      	ldr	r2, [pc, #568]	@ (8003154 <HAL_DMA_IRQHandler+0x24c>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0a9b      	lsrs	r3, r3, #10
 8002f20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f32:	2208      	movs	r2, #8
 8002f34:	409a      	lsls	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01a      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0204 	bic.w	r2, r2, #4
 8002f5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	2208      	movs	r2, #8
 8002f62:	409a      	lsls	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f78:	2201      	movs	r2, #1
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	2201      	movs	r2, #1
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	2204      	movs	r2, #4
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d012      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fcc:	2204      	movs	r2, #4
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d043      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03c      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003002:	2210      	movs	r2, #16
 8003004:	409a      	lsls	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d018      	beq.n	800304a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d024      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
 8003036:	e01f      	b.n	8003078 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
 8003048:	e016      	b.n	8003078 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0208 	bic.w	r2, r2, #8
 8003066:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	2220      	movs	r2, #32
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 808f 	beq.w	80031a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8087 	beq.w	80031a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	2220      	movs	r2, #32
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d136      	bne.n	8003120 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0216 	bic.w	r2, r2, #22
 80030c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <HAL_DMA_IRQHandler+0x1da>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0208 	bic.w	r2, r2, #8
 80030f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	223f      	movs	r2, #63	@ 0x3f
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d07e      	beq.n	8003214 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
        }
        return;
 800311e:	e079      	b.n	8003214 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01d      	beq.n	800316a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10d      	bne.n	8003158 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003140:	2b00      	cmp	r3, #0
 8003142:	d031      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e02c      	b.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
 800314e:	bf00      	nop
 8003150:	20000058 	.word	0x20000058
 8003154:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d023      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
 8003168:	e01e      	b.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10f      	bne.n	8003198 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0210 	bic.w	r2, r2, #16
 8003186:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d032      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d022      	beq.n	8003202 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2205      	movs	r2, #5
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d307      	bcc.n	80031f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f2      	bne.n	80031d4 <HAL_DMA_IRQHandler+0x2cc>
 80031ee:	e000      	b.n	80031f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
 8003212:	e000      	b.n	8003216 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003214:	bf00      	nop
    }
  }
}
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800322a:	b2db      	uxtb	r3, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3b10      	subs	r3, #16
 8003248:	4a14      	ldr	r2, [pc, #80]	@ (800329c <DMA_CalcBaseAndBitshift+0x64>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003252:	4a13      	ldr	r2, [pc, #76]	@ (80032a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d909      	bls.n	800327a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	1d1a      	adds	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	659a      	str	r2, [r3, #88]	@ 0x58
 8003278:	e007      	b.n	800328a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	aaaaaaab 	.word	0xaaaaaaab
 80032a0:	0800d6d4 	.word	0x0800d6d4

080032a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11f      	bne.n	80032fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d856      	bhi.n	8003372 <DMA_CheckFifoParam+0xce>
 80032c4:	a201      	add	r2, pc, #4	@ (adr r2, 80032cc <DMA_CheckFifoParam+0x28>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032ef 	.word	0x080032ef
 80032d4:	080032dd 	.word	0x080032dd
 80032d8:	08003373 	.word	0x08003373
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d046      	beq.n	8003376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ec:	e043      	b.n	8003376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032f6:	d140      	bne.n	800337a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fc:	e03d      	b.n	800337a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003306:	d121      	bne.n	800334c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d837      	bhi.n	800337e <DMA_CheckFifoParam+0xda>
 800330e:	a201      	add	r2, pc, #4	@ (adr r2, 8003314 <DMA_CheckFifoParam+0x70>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003325 	.word	0x08003325
 8003318:	0800332b 	.word	0x0800332b
 800331c:	08003325 	.word	0x08003325
 8003320:	0800333d 	.word	0x0800333d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      break;
 8003328:	e030      	b.n	800338c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d025      	beq.n	8003382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333a:	e022      	b.n	8003382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003344:	d11f      	bne.n	8003386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800334a:	e01c      	b.n	8003386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d903      	bls.n	800335a <DMA_CheckFifoParam+0xb6>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d003      	beq.n	8003360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003358:	e018      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
      break;
 800335e:	e015      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00e      	beq.n	800338a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      break;
 8003370:	e00b      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003372:	bf00      	nop
 8003374:	e00a      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e008      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 800337a:	bf00      	nop
 800337c:	e006      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
 8003380:	e004      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
 8003384:	e002      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;   
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
    }
  } 
  
  return status; 
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	@ 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e165      	b.n	8003684 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b8:	2201      	movs	r2, #1
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	f040 8154 	bne.w	800367e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d005      	beq.n	80033ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d130      	bne.n	8003450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 0201 	and.w	r2, r3, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b03      	cmp	r3, #3
 800345a:	d017      	beq.n	800348c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d123      	bne.n	80034e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	220f      	movs	r2, #15
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80ae 	beq.w	800367e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	4b5d      	ldr	r3, [pc, #372]	@ (800369c <HAL_GPIO_Init+0x300>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	4a5c      	ldr	r2, [pc, #368]	@ (800369c <HAL_GPIO_Init+0x300>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003530:	6453      	str	r3, [r2, #68]	@ 0x44
 8003532:	4b5a      	ldr	r3, [pc, #360]	@ (800369c <HAL_GPIO_Init+0x300>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353e:	4a58      	ldr	r2, [pc, #352]	@ (80036a0 <HAL_GPIO_Init+0x304>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4f      	ldr	r2, [pc, #316]	@ (80036a4 <HAL_GPIO_Init+0x308>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d025      	beq.n	80035b6 <HAL_GPIO_Init+0x21a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4e      	ldr	r2, [pc, #312]	@ (80036a8 <HAL_GPIO_Init+0x30c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01f      	beq.n	80035b2 <HAL_GPIO_Init+0x216>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4d      	ldr	r2, [pc, #308]	@ (80036ac <HAL_GPIO_Init+0x310>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d019      	beq.n	80035ae <HAL_GPIO_Init+0x212>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4c      	ldr	r2, [pc, #304]	@ (80036b0 <HAL_GPIO_Init+0x314>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <HAL_GPIO_Init+0x20e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4b      	ldr	r2, [pc, #300]	@ (80036b4 <HAL_GPIO_Init+0x318>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00d      	beq.n	80035a6 <HAL_GPIO_Init+0x20a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4a      	ldr	r2, [pc, #296]	@ (80036b8 <HAL_GPIO_Init+0x31c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <HAL_GPIO_Init+0x206>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a49      	ldr	r2, [pc, #292]	@ (80036bc <HAL_GPIO_Init+0x320>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_GPIO_Init+0x202>
 800359a:	2306      	movs	r3, #6
 800359c:	e00c      	b.n	80035b8 <HAL_GPIO_Init+0x21c>
 800359e:	2307      	movs	r3, #7
 80035a0:	e00a      	b.n	80035b8 <HAL_GPIO_Init+0x21c>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x21c>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x21c>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x21c>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x21c>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x21c>
 80035b6:	2300      	movs	r3, #0
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c8:	4935      	ldr	r1, [pc, #212]	@ (80036a0 <HAL_GPIO_Init+0x304>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d6:	4b3a      	ldr	r3, [pc, #232]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fa:	4a31      	ldr	r2, [pc, #196]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003600:	4b2f      	ldr	r3, [pc, #188]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003624:	4a26      	ldr	r2, [pc, #152]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362a:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364e:	4a1c      	ldr	r2, [pc, #112]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003654:	4b1a      	ldr	r3, [pc, #104]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003678:	4a11      	ldr	r2, [pc, #68]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f ae96 	bls.w	80033b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40021400 	.word	0x40021400
 80036bc:	40021800 	.word	0x40021800
 80036c0:	40013c00 	.word	0x40013c00

080036c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
 80036d0:	4613      	mov	r3, r2
 80036d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e0:	e003      	b.n	80036ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	041a      	lsls	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	619a      	str	r2, [r3, #24]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003708:	887a      	ldrh	r2, [r7, #2]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4013      	ands	r3, r2
 800370e:	041a      	lsls	r2, r3, #16
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	43d9      	mvns	r1, r3
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	400b      	ands	r3, r1
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e12b      	b.n	8003996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe fd76 	bl	8002244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	@ 0x24
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800377e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800378e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003790:	f002 ff98 	bl	80066c4 <HAL_RCC_GetPCLK1Freq>
 8003794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a81      	ldr	r2, [pc, #516]	@ (80039a0 <HAL_I2C_Init+0x274>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d807      	bhi.n	80037b0 <HAL_I2C_Init+0x84>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a80      	ldr	r2, [pc, #512]	@ (80039a4 <HAL_I2C_Init+0x278>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	bf94      	ite	ls
 80037a8:	2301      	movls	r3, #1
 80037aa:	2300      	movhi	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e006      	b.n	80037be <HAL_I2C_Init+0x92>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a7d      	ldr	r2, [pc, #500]	@ (80039a8 <HAL_I2C_Init+0x27c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	bf94      	ite	ls
 80037b8:	2301      	movls	r3, #1
 80037ba:	2300      	movhi	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0e7      	b.n	8003996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a78      	ldr	r2, [pc, #480]	@ (80039ac <HAL_I2C_Init+0x280>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a6a      	ldr	r2, [pc, #424]	@ (80039a0 <HAL_I2C_Init+0x274>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d802      	bhi.n	8003800 <HAL_I2C_Init+0xd4>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3301      	adds	r3, #1
 80037fe:	e009      	b.n	8003814 <HAL_I2C_Init+0xe8>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	4a69      	ldr	r2, [pc, #420]	@ (80039b0 <HAL_I2C_Init+0x284>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	3301      	adds	r3, #1
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	430b      	orrs	r3, r1
 800381a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003826:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	495c      	ldr	r1, [pc, #368]	@ (80039a0 <HAL_I2C_Init+0x274>)
 8003830:	428b      	cmp	r3, r1
 8003832:	d819      	bhi.n	8003868 <HAL_I2C_Init+0x13c>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e59      	subs	r1, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003848:	400b      	ands	r3, r1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_I2C_Init+0x138>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1e59      	subs	r1, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fbb1 f3f3 	udiv	r3, r1, r3
 800385c:	3301      	adds	r3, #1
 800385e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003862:	e051      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 8003864:	2304      	movs	r3, #4
 8003866:	e04f      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d111      	bne.n	8003894 <HAL_I2C_Init+0x168>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e58      	subs	r0, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	440b      	add	r3, r1
 800387e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003882:	3301      	adds	r3, #1
 8003884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e012      	b.n	80038ba <HAL_I2C_Init+0x18e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e58      	subs	r0, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	0099      	lsls	r1, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Init+0x196>
 80038be:	2301      	movs	r3, #1
 80038c0:	e022      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10e      	bne.n	80038e8 <HAL_I2C_Init+0x1bc>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1e58      	subs	r0, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	440b      	add	r3, r1
 80038d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e6:	e00f      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1e58      	subs	r0, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	0099      	lsls	r1, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	6809      	ldr	r1, [r1, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003936:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6911      	ldr	r1, [r2, #16]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68d2      	ldr	r2, [r2, #12]
 8003942:	4311      	orrs	r1, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	000186a0 	.word	0x000186a0
 80039a4:	001e847f 	.word	0x001e847f
 80039a8:	003d08ff 	.word	0x003d08ff
 80039ac:	431bde83 	.word	0x431bde83
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c6:	2b80      	cmp	r3, #128	@ 0x80
 80039c8:	d103      	bne.n	80039d2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2200      	movs	r2, #0
 80039d0:	611a      	str	r2, [r3, #16]
  }
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	817b      	strh	r3, [r7, #10]
 80039f2:	460b      	mov	r3, r1
 80039f4:	813b      	strh	r3, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fa:	f7ff f803 	bl	8002a04 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	f040 80d9 	bne.w	8003bc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2319      	movs	r3, #25
 8003a14:	2201      	movs	r2, #1
 8003a16:	496d      	ldr	r1, [pc, #436]	@ (8003bcc <HAL_I2C_Mem_Write+0x1ec>)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f002 fa63 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
 8003a26:	e0cc      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Mem_Write+0x56>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e0c5      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d007      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2221      	movs	r2, #33	@ 0x21
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2240      	movs	r2, #64	@ 0x40
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd0 <HAL_I2C_Mem_Write+0x1f0>)
 8003a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a9e:	88f8      	ldrh	r0, [r7, #6]
 8003aa0:	893a      	ldrh	r2, [r7, #8]
 8003aa2:	8979      	ldrh	r1, [r7, #10]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	4603      	mov	r3, r0
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f001 fff2 	bl	8005a98 <I2C_RequestMemoryWrite>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d052      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e081      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f002 fb28 	bl	8006118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d107      	bne.n	8003ae6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06b      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d11b      	bne.n	8003b60 <HAL_I2C_Mem_Write+0x180>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d017      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1aa      	bne.n	8003abe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f002 fb1b 	bl	80061a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00d      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d107      	bne.n	8003b90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e016      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e000      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
  }
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	00100002 	.word	0x00100002
 8003bd0:	ffff0000 	.word	0xffff0000

08003bd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	@ 0x30
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	460b      	mov	r3, r1
 8003be8:	813b      	strh	r3, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bee:	f7fe ff09 	bl	8002a04 <HAL_GetTick>
 8003bf2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	f040 8214 	bne.w	800402a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2319      	movs	r3, #25
 8003c08:	2201      	movs	r2, #1
 8003c0a:	497b      	ldr	r1, [pc, #492]	@ (8003df8 <HAL_I2C_Mem_Read+0x224>)
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f002 f969 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e207      	b.n	800402c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Mem_Read+0x56>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e200      	b.n	800402c <HAL_I2C_Mem_Read+0x458>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d007      	beq.n	8003c50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2222      	movs	r2, #34	@ 0x22
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2240      	movs	r2, #64	@ 0x40
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003dfc <HAL_I2C_Mem_Read+0x228>)
 8003c90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c92:	88f8      	ldrh	r0, [r7, #6]
 8003c94:	893a      	ldrh	r2, [r7, #8]
 8003c96:	8979      	ldrh	r1, [r7, #10]
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f001 ff8e 	bl	8005bc4 <I2C_RequestMemoryRead>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e1bc      	b.n	800402c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d113      	bne.n	8003ce2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e190      	b.n	8004004 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d11b      	bne.n	8003d22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e170      	b.n	8004004 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d11b      	bne.n	8003d62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	e150      	b.n	8004004 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d78:	e144      	b.n	8004004 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	f200 80f1 	bhi.w	8003f66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d123      	bne.n	8003dd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f002 fa83 	bl	800629c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e145      	b.n	800402c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dd2:	e117      	b.n	8004004 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d14e      	bne.n	8003e7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de2:	2200      	movs	r2, #0
 8003de4:	4906      	ldr	r1, [pc, #24]	@ (8003e00 <HAL_I2C_Mem_Read+0x22c>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f002 f87c 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e11a      	b.n	800402c <HAL_I2C_Mem_Read+0x458>
 8003df6:	bf00      	nop
 8003df8:	00100002 	.word	0x00100002
 8003dfc:	ffff0000 	.word	0xffff0000
 8003e00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e78:	e0c4      	b.n	8004004 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e80:	2200      	movs	r2, #0
 8003e82:	496c      	ldr	r1, [pc, #432]	@ (8004034 <HAL_I2C_Mem_Read+0x460>)
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f002 f82d 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0cb      	b.n	800402c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003edc:	2200      	movs	r2, #0
 8003ede:	4955      	ldr	r1, [pc, #340]	@ (8004034 <HAL_I2C_Mem_Read+0x460>)
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f001 ffff 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e09d      	b.n	800402c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f64:	e04e      	b.n	8004004 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f002 f996 	bl	800629c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e058      	b.n	800402c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d124      	bne.n	8004004 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d107      	bne.n	8003fd2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fd0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	f47f aeb6 	bne.w	8003d7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e000      	b.n	800402c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
  }
}
 800402c:	4618      	mov	r0, r3
 800402e:	3728      	adds	r7, #40	@ 0x28
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	00010004 	.word	0x00010004

08004038 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	@ 0x28
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	460b      	mov	r3, r1
 8004046:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004048:	f7fe fcdc 	bl	8002a04 <HAL_GetTick>
 800404c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b20      	cmp	r3, #32
 800405c:	f040 8111 	bne.w	8004282 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2319      	movs	r3, #25
 8004066:	2201      	movs	r2, #1
 8004068:	4988      	ldr	r1, [pc, #544]	@ (800428c <HAL_I2C_IsDeviceReady+0x254>)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f001 ff3a 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
 8004078:	e104      	b.n	8004284 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_I2C_IsDeviceReady+0x50>
 8004084:	2302      	movs	r3, #2
 8004086:	e0fd      	b.n	8004284 <HAL_I2C_IsDeviceReady+0x24c>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d007      	beq.n	80040ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2224      	movs	r2, #36	@ 0x24
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4a70      	ldr	r2, [pc, #448]	@ (8004290 <HAL_I2C_IsDeviceReady+0x258>)
 80040d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f001 fef8 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004108:	d103      	bne.n	8004112 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004110:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e0b6      	b.n	8004284 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004124:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004126:	f7fe fc6d 	bl	8002a04 <HAL_GetTick>
 800412a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b02      	cmp	r3, #2
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800415a:	e025      	b.n	80041a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800415c:	f7fe fc52 	bl	8002a04 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <HAL_I2C_IsDeviceReady+0x13a>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	22a0      	movs	r2, #160	@ 0xa0
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b02      	cmp	r3, #2
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2ba0      	cmp	r3, #160	@ 0xa0
 80041b2:	d005      	beq.n	80041c0 <HAL_I2C_IsDeviceReady+0x188>
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_I2C_IsDeviceReady+0x188>
 80041ba:	7dbb      	ldrb	r3, [r7, #22]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0cd      	beq.n	800415c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d129      	bne.n	800422a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	2319      	movs	r3, #25
 8004202:	2201      	movs	r2, #1
 8004204:	4921      	ldr	r1, [pc, #132]	@ (800428c <HAL_I2C_IsDeviceReady+0x254>)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f001 fe6c 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e036      	b.n	8004284 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e02c      	b.n	8004284 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004238:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004242:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2319      	movs	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	490f      	ldr	r1, [pc, #60]	@ (800428c <HAL_I2C_IsDeviceReady+0x254>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f001 fe48 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e012      	b.n	8004284 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	3301      	adds	r3, #1
 8004262:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	f4ff af32 	bcc.w	80040d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	00100002 	.word	0x00100002
 8004290:	ffff0000 	.word	0xffff0000

08004294 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d003      	beq.n	80042cc <HAL_I2C_EV_IRQHandler+0x38>
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b40      	cmp	r3, #64	@ 0x40
 80042c8:	f040 80c1 	bne.w	800444e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <HAL_I2C_EV_IRQHandler+0x6e>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80042ec:	d003      	beq.n	80042f6 <HAL_I2C_EV_IRQHandler+0x62>
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_EV_IRQHandler+0x66>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_I2C_EV_IRQHandler+0x68>
 80042fa:	2300      	movs	r3, #0
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	f000 8132 	beq.w	8004566 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <HAL_I2C_EV_IRQHandler+0x92>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	0a5b      	lsrs	r3, r3, #9
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f002 f84b 	bl	80063b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fd9b 	bl	8004e5a <I2C_Master_SB>
 8004324:	e092      	b.n	800444c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	08db      	lsrs	r3, r3, #3
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0xb2>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	0a5b      	lsrs	r3, r3, #9
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fe11 	bl	8004f66 <I2C_Master_ADD10>
 8004344:	e082      	b.n	800444c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_I2C_EV_IRQHandler+0xd2>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	0a5b      	lsrs	r3, r3, #9
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fe2b 	bl	8004fba <I2C_Master_ADDR>
 8004364:	e072      	b.n	800444c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d03b      	beq.n	80043ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004380:	f000 80f3 	beq.w	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	09db      	lsrs	r3, r3, #7
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00f      	beq.n	80043b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d009      	beq.n	80043b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f9f3 	bl	8004794 <I2C_MasterTransmit_TXE>
 80043ae:	e04d      	b.n	800444c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80d6 	beq.w	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	0a5b      	lsrs	r3, r3, #9
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 80cf 	beq.w	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043cc:	7bbb      	ldrb	r3, [r7, #14]
 80043ce:	2b21      	cmp	r3, #33	@ 0x21
 80043d0:	d103      	bne.n	80043da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa7a 	bl	80048cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d8:	e0c7      	b.n	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b40      	cmp	r3, #64	@ 0x40
 80043de:	f040 80c4 	bne.w	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fae8 	bl	80049b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e8:	e0bf      	b.n	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043f8:	f000 80b7 	beq.w	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00f      	beq.n	8004428 <HAL_I2C_EV_IRQHandler+0x194>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	0a9b      	lsrs	r3, r3, #10
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <HAL_I2C_EV_IRQHandler+0x194>
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fb61 	bl	8004ae8 <I2C_MasterReceive_RXNE>
 8004426:	e011      	b.n	800444c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 809a 	beq.w	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	0a5b      	lsrs	r3, r3, #9
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8093 	beq.w	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fc17 	bl	8004c78 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800444a:	e08e      	b.n	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
 800444c:	e08d      	b.n	800456a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e007      	b.n	8004470 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d012      	beq.n	80044a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	0a5b      	lsrs	r3, r3, #9
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00c      	beq.n	80044a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 ffdc 	bl	8005458 <I2C_Slave_ADDR>
 80044a0:	e066      	b.n	8004570 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	0a5b      	lsrs	r3, r3, #9
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f001 f816 	bl	80054ec <I2C_Slave_STOPF>
 80044c0:	e056      	b.n	8004570 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044c2:	7bbb      	ldrb	r3, [r7, #14]
 80044c4:	2b21      	cmp	r3, #33	@ 0x21
 80044c6:	d002      	beq.n	80044ce <HAL_I2C_EV_IRQHandler+0x23a>
 80044c8:	7bbb      	ldrb	r3, [r7, #14]
 80044ca:	2b29      	cmp	r3, #41	@ 0x29
 80044cc:	d125      	bne.n	800451a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	09db      	lsrs	r3, r3, #7
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00f      	beq.n	80044fa <HAL_I2C_EV_IRQHandler+0x266>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	0a9b      	lsrs	r3, r3, #10
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_I2C_EV_IRQHandler+0x266>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fef2 	bl	80052dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044f8:	e039      	b.n	800456e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	089b      	lsrs	r3, r3, #2
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d033      	beq.n	800456e <HAL_I2C_EV_IRQHandler+0x2da>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	0a5b      	lsrs	r3, r3, #9
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d02d      	beq.n	800456e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 ff1f 	bl	8005356 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004518:	e029      	b.n	800456e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00f      	beq.n	8004546 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	0a9b      	lsrs	r3, r3, #10
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	089b      	lsrs	r3, r3, #2
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 ff2a 	bl	8005398 <I2C_SlaveReceive_RXNE>
 8004544:	e014      	b.n	8004570 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00e      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	0a5b      	lsrs	r3, r3, #9
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 ff58 	bl	8005414 <I2C_SlaveReceive_BTF>
 8004564:	e004      	b.n	8004570 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004566:	bf00      	nop
 8004568:	e002      	b.n	8004570 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800456a:	bf00      	nop
 800456c:	e000      	b.n	8004570 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800456e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08a      	sub	sp, #40	@ 0x28
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800458e:	2300      	movs	r3, #0
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004598:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00e      	beq.n	80045c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	0a1b      	lsrs	r3, r3, #8
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	0a5b      	lsrs	r3, r3, #9
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00e      	beq.n	80045ee <HAL_I2C_ER_IRQHandler+0x78>
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	f043 0302 	orr.w	r3, r3, #2
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80045ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	0a9b      	lsrs	r3, r3, #10
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d03f      	beq.n	800467a <HAL_I2C_ER_IRQHandler+0x104>
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d039      	beq.n	800467a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004606:	7efb      	ldrb	r3, [r7, #27]
 8004608:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004618:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004620:	7ebb      	ldrb	r3, [r7, #26]
 8004622:	2b20      	cmp	r3, #32
 8004624:	d112      	bne.n	800464c <HAL_I2C_ER_IRQHandler+0xd6>
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10f      	bne.n	800464c <HAL_I2C_ER_IRQHandler+0xd6>
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	2b21      	cmp	r3, #33	@ 0x21
 8004630:	d008      	beq.n	8004644 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	2b29      	cmp	r3, #41	@ 0x29
 8004636:	d005      	beq.n	8004644 <HAL_I2C_ER_IRQHandler+0xce>
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	2b28      	cmp	r3, #40	@ 0x28
 800463c:	d106      	bne.n	800464c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b21      	cmp	r3, #33	@ 0x21
 8004642:	d103      	bne.n	800464c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f001 f881 	bl	800574c <I2C_Slave_AF>
 800464a:	e016      	b.n	800467a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004654:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800465e:	7efb      	ldrb	r3, [r7, #27]
 8004660:	2b10      	cmp	r3, #16
 8004662:	d002      	beq.n	800466a <HAL_I2C_ER_IRQHandler+0xf4>
 8004664:	7efb      	ldrb	r3, [r7, #27]
 8004666:	2b40      	cmp	r3, #64	@ 0x40
 8004668:	d107      	bne.n	800467a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004678:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	0adb      	lsrs	r3, r3, #11
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00e      	beq.n	80046a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80046a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f001 f8bc 	bl	8005834 <I2C_ITError>
  }
}
 80046bc:	bf00      	nop
 80046be:	3728      	adds	r7, #40	@ 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
 8004720:	4613      	mov	r3, r2
 8004722:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d150      	bne.n	800485c <I2C_MasterTransmit_TXE+0xc8>
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b21      	cmp	r3, #33	@ 0x21
 80047be:	d14d      	bne.n	800485c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d01d      	beq.n	8004802 <I2C_MasterTransmit_TXE+0x6e>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d01a      	beq.n	8004802 <I2C_MasterTransmit_TXE+0x6e>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047d2:	d016      	beq.n	8004802 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2211      	movs	r2, #17
 80047e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ff62 	bl	80046c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004800:	e060      	b.n	80048c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004810:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004820:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b40      	cmp	r3, #64	@ 0x40
 800483a:	d107      	bne.n	800484c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff7d 	bl	8004744 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800484a:	e03b      	b.n	80048c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff35 	bl	80046c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800485a:	e033      	b.n	80048c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b21      	cmp	r3, #33	@ 0x21
 8004860:	d005      	beq.n	800486e <I2C_MasterTransmit_TXE+0xda>
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	2b40      	cmp	r3, #64	@ 0x40
 8004866:	d12d      	bne.n	80048c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	2b22      	cmp	r3, #34	@ 0x22
 800486c:	d12a      	bne.n	80048c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004886:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004888:	e01c      	b.n	80048c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b40      	cmp	r3, #64	@ 0x40
 8004894:	d103      	bne.n	800489e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f88e 	bl	80049b8 <I2C_MemoryTransmit_TXE_BTF>
}
 800489c:	e012      	b.n	80048c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	781a      	ldrb	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80048c2:	e7ff      	b.n	80048c4 <I2C_MasterTransmit_TXE+0x130>
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b21      	cmp	r3, #33	@ 0x21
 80048e4:	d164      	bne.n	80049b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004914:	e04c      	b.n	80049b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d01d      	beq.n	8004958 <I2C_MasterTransmit_BTF+0x8c>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b20      	cmp	r3, #32
 8004920:	d01a      	beq.n	8004958 <I2C_MasterTransmit_BTF+0x8c>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004928:	d016      	beq.n	8004958 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004938:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2211      	movs	r2, #17
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff feb7 	bl	80046c4 <HAL_I2C_MasterTxCpltCallback>
}
 8004956:	e02b      	b.n	80049b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004966:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004976:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b40      	cmp	r3, #64	@ 0x40
 8004990:	d107      	bne.n	80049a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff fed2 	bl	8004744 <HAL_I2C_MemTxCpltCallback>
}
 80049a0:	e006      	b.n	80049b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff fe8a 	bl	80046c4 <HAL_I2C_MasterTxCpltCallback>
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d11d      	bne.n	8004a0c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d10b      	bne.n	80049f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e8:	1c9a      	adds	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80049ee:	e077      	b.n	8004ae0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	121b      	asrs	r3, r3, #8
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a0a:	e069      	b.n	8004ae0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d10b      	bne.n	8004a2c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a2a:	e059      	b.n	8004ae0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d152      	bne.n	8004ada <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b22      	cmp	r3, #34	@ 0x22
 8004a38:	d10d      	bne.n	8004a56 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a48:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a54:	e044      	b.n	8004ae0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b21      	cmp	r3, #33	@ 0x21
 8004a64:	d112      	bne.n	8004a8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a8a:	e029      	b.n	8004ae0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d124      	bne.n	8004ae0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b21      	cmp	r3, #33	@ 0x21
 8004a9a:	d121      	bne.n	8004ae0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004aaa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff fe36 	bl	8004744 <HAL_I2C_MemTxCpltCallback>
}
 8004ad8:	e002      	b.n	8004ae0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fe ff6a 	bl	80039b4 <I2C_Flush_DR>
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b22      	cmp	r3, #34	@ 0x22
 8004afa:	f040 80b9 	bne.w	8004c70 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d921      	bls.n	8004b56 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	f040 8096 	bne.w	8004c70 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b52:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004b54:	e08c      	b.n	8004c70 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d07f      	beq.n	8004c5e <I2C_MasterReceive_RXNE+0x176>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d002      	beq.n	8004b6a <I2C_MasterReceive_RXNE+0x82>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d179      	bne.n	8004c5e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f001 fb64 	bl	8006238 <I2C_WaitOnSTOPRequestThroughIT>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d14c      	bne.n	8004c10 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b84:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b94:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b40      	cmp	r3, #64	@ 0x40
 8004bce:	d10a      	bne.n	8004be6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fdba 	bl	8004758 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004be4:	e044      	b.n	8004c70 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d002      	beq.n	8004bfa <I2C_MasterReceive_RXNE+0x112>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d103      	bne.n	8004c02 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c00:	e002      	b.n	8004c08 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2212      	movs	r2, #18
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fd65 	bl	80046d8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c0e:	e02f      	b.n	8004c70 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fd88 	bl	800476c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c5c:	e008      	b.n	8004c70 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c6c:	605a      	str	r2, [r3, #4]
}
 8004c6e:	e7ff      	b.n	8004c70 <I2C_MasterReceive_RXNE+0x188>
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c84:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d11b      	bne.n	8004cc8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c9e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004cc6:	e0c4      	b.n	8004e52 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d129      	bne.n	8004d26 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d00a      	beq.n	8004cfe <I2C_MasterReceive_BTF+0x86>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d007      	beq.n	8004cfe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cfc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d24:	e095      	b.n	8004e52 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d17d      	bne.n	8004e2c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d002      	beq.n	8004d3c <I2C_MasterReceive_BTF+0xc4>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d108      	bne.n	8004d4e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e016      	b.n	8004d7c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d002      	beq.n	8004d5a <I2C_MasterReceive_BTF+0xe2>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d108      	bne.n	8004d6c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e007      	b.n	8004d7c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004dd6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b40      	cmp	r3, #64	@ 0x40
 8004dea:	d10a      	bne.n	8004e02 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff fcac 	bl	8004758 <HAL_I2C_MemRxCpltCallback>
}
 8004e00:	e027      	b.n	8004e52 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d002      	beq.n	8004e16 <I2C_MasterReceive_BTF+0x19e>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d103      	bne.n	8004e1e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e1c:	e002      	b.n	8004e24 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2212      	movs	r2, #18
 8004e22:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fc57 	bl	80046d8 <HAL_I2C_MasterRxCpltCallback>
}
 8004e2a:	e012      	b.n	8004e52 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b40      	cmp	r3, #64	@ 0x40
 8004e6c:	d117      	bne.n	8004e9e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e86:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e88:	e067      	b.n	8004f5a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	611a      	str	r2, [r3, #16]
}
 8004e9c:	e05d      	b.n	8004f5a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ea6:	d133      	bne.n	8004f10 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b21      	cmp	r3, #33	@ 0x21
 8004eb2:	d109      	bne.n	8004ec8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ec4:	611a      	str	r2, [r3, #16]
 8004ec6:	e008      	b.n	8004eda <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <I2C_Master_SB+0x92>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d032      	beq.n	8004f5a <I2C_Master_SB+0x100>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d02d      	beq.n	8004f5a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f0c:	605a      	str	r2, [r3, #4]
}
 8004f0e:	e024      	b.n	8004f5a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10e      	bne.n	8004f36 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	11db      	asrs	r3, r3, #7
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	f003 0306 	and.w	r3, r3, #6
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f063 030f 	orn	r3, r3, #15
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	611a      	str	r2, [r3, #16]
}
 8004f34:	e011      	b.n	8004f5a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10d      	bne.n	8004f5a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	11db      	asrs	r3, r3, #7
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f003 0306 	and.w	r3, r3, #6
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	f063 030e 	orn	r3, r3, #14
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	611a      	str	r2, [r3, #16]
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <I2C_Master_ADD10+0x26>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d108      	bne.n	8004f9e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00c      	beq.n	8004fae <I2C_Master_ADD10+0x48>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fac:	605a      	str	r2, [r3, #4]
  }
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b091      	sub	sp, #68	@ 0x44
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b22      	cmp	r3, #34	@ 0x22
 8004fe2:	f040 8169 	bne.w	80052b8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10f      	bne.n	800500e <I2C_Master_ADDR+0x54>
 8004fee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004ff2:	2b40      	cmp	r3, #64	@ 0x40
 8004ff4:	d10b      	bne.n	800500e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	633b      	str	r3, [r7, #48]	@ 0x30
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	633b      	str	r3, [r7, #48]	@ 0x30
 800500a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500c:	e160      	b.n	80052d0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005012:	2b00      	cmp	r3, #0
 8005014:	d11d      	bne.n	8005052 <I2C_Master_ADDR+0x98>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800501e:	d118      	bne.n	8005052 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005020:	2300      	movs	r3, #0
 8005022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005044:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005050:	e13e      	b.n	80052d0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d113      	bne.n	8005084 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505c:	2300      	movs	r3, #0
 800505e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005070:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e115      	b.n	80052b0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	f040 808a 	bne.w	80051a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005092:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005096:	d137      	bne.n	8005108 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b6:	d113      	bne.n	80050e0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050c6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c8:	2300      	movs	r3, #0
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	e0e7      	b.n	80052b0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e0:	2300      	movs	r3, #0
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	623b      	str	r3, [r7, #32]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	623b      	str	r3, [r7, #32]
 80050f4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e0d3      	b.n	80052b0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	2b08      	cmp	r3, #8
 800510c:	d02e      	beq.n	800516c <I2C_Master_ADDR+0x1b2>
 800510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005110:	2b20      	cmp	r3, #32
 8005112:	d02b      	beq.n	800516c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005116:	2b12      	cmp	r3, #18
 8005118:	d102      	bne.n	8005120 <I2C_Master_ADDR+0x166>
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	2b01      	cmp	r3, #1
 800511e:	d125      	bne.n	800516c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005122:	2b04      	cmp	r3, #4
 8005124:	d00e      	beq.n	8005144 <I2C_Master_ADDR+0x18a>
 8005126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005128:	2b02      	cmp	r3, #2
 800512a:	d00b      	beq.n	8005144 <I2C_Master_ADDR+0x18a>
 800512c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512e:	2b10      	cmp	r3, #16
 8005130:	d008      	beq.n	8005144 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e007      	b.n	8005154 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005152:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005154:	2300      	movs	r3, #0
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	e0a1      	b.n	80052b0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800517a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	61bb      	str	r3, [r7, #24]
 8005190:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e085      	b.n	80052b0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d14d      	bne.n	800524a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d016      	beq.n	80051e2 <I2C_Master_ADDR+0x228>
 80051b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d013      	beq.n	80051e2 <I2C_Master_ADDR+0x228>
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d010      	beq.n	80051e2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ce:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e007      	b.n	80051f2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051f0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005200:	d117      	bne.n	8005232 <I2C_Master_ADDR+0x278>
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005208:	d00b      	beq.n	8005222 <I2C_Master_ADDR+0x268>
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	2b01      	cmp	r3, #1
 800520e:	d008      	beq.n	8005222 <I2C_Master_ADDR+0x268>
 8005210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005212:	2b08      	cmp	r3, #8
 8005214:	d005      	beq.n	8005222 <I2C_Master_ADDR+0x268>
 8005216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005218:	2b10      	cmp	r3, #16
 800521a:	d002      	beq.n	8005222 <I2C_Master_ADDR+0x268>
 800521c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521e:	2b20      	cmp	r3, #32
 8005220:	d107      	bne.n	8005232 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005230:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	e032      	b.n	80052b0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005258:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005268:	d117      	bne.n	800529a <I2C_Master_ADDR+0x2e0>
 800526a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005270:	d00b      	beq.n	800528a <I2C_Master_ADDR+0x2d0>
 8005272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005274:	2b01      	cmp	r3, #1
 8005276:	d008      	beq.n	800528a <I2C_Master_ADDR+0x2d0>
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	2b08      	cmp	r3, #8
 800527c:	d005      	beq.n	800528a <I2C_Master_ADDR+0x2d0>
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	2b10      	cmp	r3, #16
 8005282:	d002      	beq.n	800528a <I2C_Master_ADDR+0x2d0>
 8005284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005286:	2b20      	cmp	r3, #32
 8005288:	d107      	bne.n	800529a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005298:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80052b6:	e00b      	b.n	80052d0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
}
 80052ce:	e7ff      	b.n	80052d0 <I2C_Master_ADDR+0x316>
 80052d0:	bf00      	nop
 80052d2:	3744      	adds	r7, #68	@ 0x44
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d02b      	beq.n	800534e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	781a      	ldrb	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d114      	bne.n	800534e <I2C_SlaveTransmit_TXE+0x72>
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b29      	cmp	r3, #41	@ 0x29
 8005328:	d111      	bne.n	800534e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005338:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2221      	movs	r2, #33	@ 0x21
 800533e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2228      	movs	r2, #40	@ 0x28
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff f9cf 	bl	80046ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d011      	beq.n	800538c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d02c      	beq.n	800540c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d114      	bne.n	800540c <I2C_SlaveReceive_RXNE+0x74>
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053e6:	d111      	bne.n	800540c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2222      	movs	r2, #34	@ 0x22
 80053fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2228      	movs	r2, #40	@ 0x28
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff f97a 	bl	8004700 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d012      	beq.n	800544c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005462:	2300      	movs	r3, #0
 8005464:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005472:	2b28      	cmp	r3, #40	@ 0x28
 8005474:	d127      	bne.n	80054c6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005484:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005492:	2301      	movs	r3, #1
 8005494:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	09db      	lsrs	r3, r3, #7
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	81bb      	strh	r3, [r7, #12]
 80054a8:	e002      	b.n	80054b0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80054b8:	89ba      	ldrh	r2, [r7, #12]
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff f928 	bl	8004714 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80054c4:	e00e      	b.n	80054e4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800550a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800550c:	2300      	movs	r3, #0
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005538:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005548:	d172      	bne.n	8005630 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b22      	cmp	r3, #34	@ 0x22
 800554e:	d002      	beq.n	8005556 <I2C_Slave_STOPF+0x6a>
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b2a      	cmp	r3, #42	@ 0x2a
 8005554:	d135      	bne.n	80055c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	f043 0204 	orr.w	r2, r3, #4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005588:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	4618      	mov	r0, r3
 8005590:	f7fd fe44 	bl	800321c <HAL_DMA_GetState>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d049      	beq.n	800562e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	4a69      	ldr	r2, [pc, #420]	@ (8005744 <I2C_Slave_STOPF+0x258>)
 80055a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd fc8c 	bl	8002ec4 <HAL_DMA_Abort_IT>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03d      	beq.n	800562e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80055bc:	4610      	mov	r0, r2
 80055be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055c0:	e035      	b.n	800562e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	f043 0204 	orr.w	r2, r3, #4
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fd fe0e 	bl	800321c <HAL_DMA_GetState>
 8005600:	4603      	mov	r3, r0
 8005602:	2b01      	cmp	r3, #1
 8005604:	d014      	beq.n	8005630 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800560a:	4a4e      	ldr	r2, [pc, #312]	@ (8005744 <I2C_Slave_STOPF+0x258>)
 800560c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd fc56 	bl	8002ec4 <HAL_DMA_Abort_IT>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005628:	4610      	mov	r0, r2
 800562a:	4798      	blx	r3
 800562c:	e000      	b.n	8005630 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800562e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d03e      	beq.n	80056b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b04      	cmp	r3, #4
 8005646:	d112      	bne.n	800566e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005678:	2b40      	cmp	r3, #64	@ 0x40
 800567a:	d112      	bne.n	80056a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b0:	f043 0204 	orr.w	r2, r3, #4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f8b7 	bl	8005834 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80056c6:	e039      	b.n	800573c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80056cc:	d109      	bne.n	80056e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2228      	movs	r2, #40	@ 0x28
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff f80f 	bl	8004700 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b28      	cmp	r3, #40	@ 0x28
 80056ec:	d111      	bne.n	8005712 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a15      	ldr	r2, [pc, #84]	@ (8005748 <I2C_Slave_STOPF+0x25c>)
 80056f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff f810 	bl	8004730 <HAL_I2C_ListenCpltCallback>
}
 8005710:	e014      	b.n	800573c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005716:	2b22      	cmp	r3, #34	@ 0x22
 8005718:	d002      	beq.n	8005720 <I2C_Slave_STOPF+0x234>
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	2b22      	cmp	r3, #34	@ 0x22
 800571e:	d10d      	bne.n	800573c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fe ffe2 	bl	8004700 <HAL_I2C_SlaveRxCpltCallback>
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	08005d95 	.word	0x08005d95
 8005748:	ffff0000 	.word	0xffff0000

0800574c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d002      	beq.n	800576e <I2C_Slave_AF+0x22>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b20      	cmp	r3, #32
 800576c:	d129      	bne.n	80057c2 <I2C_Slave_AF+0x76>
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	2b28      	cmp	r3, #40	@ 0x28
 8005772:	d126      	bne.n	80057c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2e      	ldr	r2, [pc, #184]	@ (8005830 <I2C_Slave_AF+0xe4>)
 8005778:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005788:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005792:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fe ffb8 	bl	8004730 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80057c0:	e031      	b.n	8005826 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b21      	cmp	r3, #33	@ 0x21
 80057c6:	d129      	bne.n	800581c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a19      	ldr	r2, [pc, #100]	@ (8005830 <I2C_Slave_AF+0xe4>)
 80057cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2221      	movs	r2, #33	@ 0x21
 80057d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800580c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fe f8d0 	bl	80039b4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7fe ff69 	bl	80046ec <HAL_I2C_SlaveTxCpltCallback>
}
 800581a:	e004      	b.n	8005826 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005824:	615a      	str	r2, [r3, #20]
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	ffff0000 	.word	0xffff0000

08005834 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005842:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800584a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	2b10      	cmp	r3, #16
 8005850:	d002      	beq.n	8005858 <I2C_ITError+0x24>
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d10a      	bne.n	800586e <I2C_ITError+0x3a>
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b22      	cmp	r3, #34	@ 0x22
 800585c:	d107      	bne.n	800586e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800586c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005874:	2b28      	cmp	r3, #40	@ 0x28
 8005876:	d107      	bne.n	8005888 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2228      	movs	r2, #40	@ 0x28
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005886:	e015      	b.n	80058b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005896:	d00a      	beq.n	80058ae <I2C_ITError+0x7a>
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	2b60      	cmp	r3, #96	@ 0x60
 800589c:	d007      	beq.n	80058ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c2:	d162      	bne.n	800598a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d020      	beq.n	8005924 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e6:	4a6a      	ldr	r2, [pc, #424]	@ (8005a90 <I2C_ITError+0x25c>)
 80058e8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fd fae8 	bl	8002ec4 <HAL_DMA_Abort_IT>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8089 	beq.w	8005a0e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800591e:	4610      	mov	r0, r2
 8005920:	4798      	blx	r3
 8005922:	e074      	b.n	8005a0e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	4a59      	ldr	r2, [pc, #356]	@ (8005a90 <I2C_ITError+0x25c>)
 800592a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	4618      	mov	r0, r3
 8005932:	f7fd fac7 	bl	8002ec4 <HAL_DMA_Abort_IT>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d068      	beq.n	8005a0e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005946:	2b40      	cmp	r3, #64	@ 0x40
 8005948:	d10b      	bne.n	8005962 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005984:	4610      	mov	r0, r2
 8005986:	4798      	blx	r3
 8005988:	e041      	b.n	8005a0e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b60      	cmp	r3, #96	@ 0x60
 8005994:	d125      	bne.n	80059e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ae:	2b40      	cmp	r3, #64	@ 0x40
 80059b0:	d10b      	bne.n	80059ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fe fed0 	bl	8004780 <HAL_I2C_AbortCpltCallback>
 80059e0:	e015      	b.n	8005a0e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d10b      	bne.n	8005a08 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fe feaf 	bl	800476c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a12:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10e      	bne.n	8005a3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d109      	bne.n	8005a3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a4a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a52:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d113      	bne.n	8005a88 <I2C_ITError+0x254>
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	2b28      	cmp	r3, #40	@ 0x28
 8005a64:	d110      	bne.n	8005a88 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a0a      	ldr	r2, [pc, #40]	@ (8005a94 <I2C_ITError+0x260>)
 8005a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fe fe54 	bl	8004730 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	08005d95 	.word	0x08005d95
 8005a94:	ffff0000 	.word	0xffff0000

08005a98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	817b      	strh	r3, [r7, #10]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	813b      	strh	r3, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fa08 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae8:	d103      	bne.n	8005af2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005af0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e05f      	b.n	8005bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005af6:	897b      	ldrh	r3, [r7, #10]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	6a3a      	ldr	r2, [r7, #32]
 8005b0a:	492d      	ldr	r1, [pc, #180]	@ (8005bc0 <I2C_RequestMemoryWrite+0x128>)
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fa63 	bl	8005fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e04c      	b.n	8005bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b34:	6a39      	ldr	r1, [r7, #32]
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 faee 	bl	8006118 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00d      	beq.n	8005b5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d107      	bne.n	8005b5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e02b      	b.n	8005bb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d105      	bne.n	8005b70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b64:	893b      	ldrh	r3, [r7, #8]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	611a      	str	r2, [r3, #16]
 8005b6e:	e021      	b.n	8005bb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b70:	893b      	ldrh	r3, [r7, #8]
 8005b72:	0a1b      	lsrs	r3, r3, #8
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b80:	6a39      	ldr	r1, [r7, #32]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fac8 	bl	8006118 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d107      	bne.n	8005ba6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ba4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e005      	b.n	8005bb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005baa:	893b      	ldrh	r3, [r7, #8]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	00010002 	.word	0x00010002

08005bc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	4608      	mov	r0, r1
 8005bce:	4611      	mov	r1, r2
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	817b      	strh	r3, [r7, #10]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	813b      	strh	r3, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f96a 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c24:	d103      	bne.n	8005c2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e0aa      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c32:	897b      	ldrh	r3, [r7, #10]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	4952      	ldr	r1, [pc, #328]	@ (8005d90 <I2C_RequestMemoryRead+0x1cc>)
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f9c5 	bl	8005fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e097      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	6a39      	ldr	r1, [r7, #32]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fa50 	bl	8006118 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d107      	bne.n	8005c96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e076      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d105      	bne.n	8005cac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca0:	893b      	ldrh	r3, [r7, #8]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	611a      	str	r2, [r3, #16]
 8005caa:	e021      	b.n	8005cf0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cac:	893b      	ldrh	r3, [r7, #8]
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cbc:	6a39      	ldr	r1, [r7, #32]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 fa2a 	bl	8006118 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00d      	beq.n	8005ce6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d107      	bne.n	8005ce2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e050      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ce6:	893b      	ldrh	r3, [r7, #8]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf2:	6a39      	ldr	r1, [r7, #32]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fa0f 	bl	8006118 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d107      	bne.n	8005d18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e035      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f8d3 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00d      	beq.n	8005d60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d52:	d103      	bne.n	8005d5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e013      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d60:	897b      	ldrh	r3, [r7, #10]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f043 0301 	orr.w	r3, r3, #1
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	6a3a      	ldr	r2, [r7, #32]
 8005d74:	4906      	ldr	r1, [pc, #24]	@ (8005d90 <I2C_RequestMemoryRead+0x1cc>)
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f92e 	bl	8005fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	00010002 	.word	0x00010002

08005d94 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005dae:	4b4b      	ldr	r3, [pc, #300]	@ (8005edc <I2C_DMAAbort+0x148>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	08db      	lsrs	r3, r3, #3
 8005db4:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee0 <I2C_DMAAbort+0x14c>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	0a1a      	lsrs	r2, r3, #8
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	00da      	lsls	r2, r3, #3
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	f043 0220 	orr.w	r2, r3, #32
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005dda:	e00a      	b.n	8005df2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005df0:	d0ea      	beq.n	8005dc8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfe:	2200      	movs	r2, #0
 8005e00:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0e:	2200      	movs	r2, #0
 8005e10:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2200      	movs	r2, #0
 8005e26:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e34:	2200      	movs	r2, #0
 8005e36:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e44:	2200      	movs	r2, #0
 8005e46:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0201 	bic.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b60      	cmp	r3, #96	@ 0x60
 8005e62:	d10e      	bne.n	8005e82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2200      	movs	r2, #0
 8005e78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	f7fe fc80 	bl	8004780 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e80:	e027      	b.n	8005ed2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e82:	7cfb      	ldrb	r3, [r7, #19]
 8005e84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e88:	2b28      	cmp	r3, #40	@ 0x28
 8005e8a:	d117      	bne.n	8005ebc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005eaa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2228      	movs	r2, #40	@ 0x28
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005eba:	e007      	b.n	8005ecc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005ecc:	6978      	ldr	r0, [r7, #20]
 8005ece:	f7fe fc4d 	bl	800476c <HAL_I2C_ErrorCallback>
}
 8005ed2:	bf00      	nop
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000058 	.word	0x20000058
 8005ee0:	14f8b589 	.word	0x14f8b589

08005ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef4:	e048      	b.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d044      	beq.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7fc fd81 	bl	8002a04 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d139      	bne.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d10d      	bne.n	8005f3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	43da      	mvns	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	e00c      	b.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	43da      	mvns	r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4013      	ands	r3, r2
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d116      	bne.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f74:	f043 0220 	orr.w	r2, r3, #32
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e023      	b.n	8005fd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	0c1b      	lsrs	r3, r3, #16
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d10d      	bne.n	8005fae <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	43da      	mvns	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	e00c      	b.n	8005fc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	43da      	mvns	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d093      	beq.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fe6:	e071      	b.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff6:	d123      	bne.n	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006006:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	f043 0204 	orr.w	r2, r3, #4
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e067      	b.n	8006110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d041      	beq.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006048:	f7fc fcdc 	bl	8002a04 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d302      	bcc.n	800605e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d136      	bne.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d10c      	bne.n	8006082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	43da      	mvns	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4013      	ands	r3, r2
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	bf14      	ite	ne
 800607a:	2301      	movne	r3, #1
 800607c:	2300      	moveq	r3, #0
 800607e:	b2db      	uxtb	r3, r3
 8006080:	e00b      	b.n	800609a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	43da      	mvns	r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf14      	ite	ne
 8006094:	2301      	movne	r3, #1
 8006096:	2300      	moveq	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b8:	f043 0220 	orr.w	r2, r3, #32
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e021      	b.n	8006110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	0c1b      	lsrs	r3, r3, #16
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10c      	bne.n	80060f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	43da      	mvns	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	4013      	ands	r3, r2
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bf14      	ite	ne
 80060e8:	2301      	movne	r3, #1
 80060ea:	2300      	moveq	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	e00b      	b.n	8006108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	43da      	mvns	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bf14      	ite	ne
 8006102:	2301      	movne	r3, #1
 8006104:	2300      	moveq	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	f47f af6d 	bne.w	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006124:	e034      	b.n	8006190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f915 	bl	8006356 <I2C_IsAcknowledgeFailed>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e034      	b.n	80061a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d028      	beq.n	8006190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613e:	f7fc fc61 	bl	8002a04 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d11d      	bne.n	8006190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615e:	2b80      	cmp	r3, #128	@ 0x80
 8006160:	d016      	beq.n	8006190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e007      	b.n	80061a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619a:	2b80      	cmp	r3, #128	@ 0x80
 800619c:	d1c3      	bne.n	8006126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061b4:	e034      	b.n	8006220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f8cd 	bl	8006356 <I2C_IsAcknowledgeFailed>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e034      	b.n	8006230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061cc:	d028      	beq.n	8006220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ce:	f7fc fc19 	bl	8002a04 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d302      	bcc.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d11d      	bne.n	8006220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d016      	beq.n	8006220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620c:	f043 0220 	orr.w	r2, r3, #32
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e007      	b.n	8006230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b04      	cmp	r3, #4
 800622c:	d1c3      	bne.n	80061b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006244:	4b13      	ldr	r3, [pc, #76]	@ (8006294 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	08db      	lsrs	r3, r3, #3
 800624a:	4a13      	ldr	r2, [pc, #76]	@ (8006298 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	0a1a      	lsrs	r2, r3, #8
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3b01      	subs	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d107      	bne.n	8006276 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e008      	b.n	8006288 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006284:	d0e9      	beq.n	800625a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	20000058 	.word	0x20000058
 8006298:	14f8b589 	.word	0x14f8b589

0800629c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062a8:	e049      	b.n	800633e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b10      	cmp	r3, #16
 80062b6:	d119      	bne.n	80062ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0210 	mvn.w	r2, #16
 80062c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e030      	b.n	800634e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ec:	f7fc fb8a 	bl	8002a04 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d302      	bcc.n	8006302 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d11d      	bne.n	800633e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630c:	2b40      	cmp	r3, #64	@ 0x40
 800630e:	d016      	beq.n	800633e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e007      	b.n	800634e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006348:	2b40      	cmp	r3, #64	@ 0x40
 800634a:	d1ae      	bne.n	80062aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800636c:	d11b      	bne.n	80063a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006376:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	f043 0204 	orr.w	r2, r3, #4
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80063c4:	d103      	bne.n	80063ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063cc:	e007      	b.n	80063de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80063d6:	d102      	bne.n	80063de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2208      	movs	r2, #8
 80063dc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d129      	bne.n	8006454 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2224      	movs	r2, #36	@ 0x24
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0201 	bic.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0210 	bic.w	r2, r2, #16
 8006426:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b20      	cmp	r3, #32
 800647a:	d12a      	bne.n	80064d2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2224      	movs	r2, #36	@ 0x24
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0201 	bic.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800649c:	89fb      	ldrh	r3, [r7, #14]
 800649e:	f023 030f 	bic.w	r3, r3, #15
 80064a2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	89fb      	ldrh	r3, [r7, #14]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	89fa      	ldrh	r2, [r7, #14]
 80064b4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e000      	b.n	80064d4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
  }
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0cc      	b.n	800668e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064f4:	4b68      	ldr	r3, [pc, #416]	@ (8006698 <HAL_RCC_ClockConfig+0x1b8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d90c      	bls.n	800651c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006502:	4b65      	ldr	r3, [pc, #404]	@ (8006698 <HAL_RCC_ClockConfig+0x1b8>)
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800650a:	4b63      	ldr	r3, [pc, #396]	@ (8006698 <HAL_RCC_ClockConfig+0x1b8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d001      	beq.n	800651c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0b8      	b.n	800668e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d020      	beq.n	800656a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006534:	4b59      	ldr	r3, [pc, #356]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4a58      	ldr	r2, [pc, #352]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800653e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800654c:	4b53      	ldr	r3, [pc, #332]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4a52      	ldr	r2, [pc, #328]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006558:	4b50      	ldr	r3, [pc, #320]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	494d      	ldr	r1, [pc, #308]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	4313      	orrs	r3, r2
 8006568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d044      	beq.n	8006600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d107      	bne.n	800658e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800657e:	4b47      	ldr	r3, [pc, #284]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d119      	bne.n	80065be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e07f      	b.n	800668e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d003      	beq.n	800659e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800659a:	2b03      	cmp	r3, #3
 800659c:	d107      	bne.n	80065ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800659e:	4b3f      	ldr	r3, [pc, #252]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d109      	bne.n	80065be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e06f      	b.n	800668e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ae:	4b3b      	ldr	r3, [pc, #236]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e067      	b.n	800668e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065be:	4b37      	ldr	r3, [pc, #220]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f023 0203 	bic.w	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	4934      	ldr	r1, [pc, #208]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d0:	f7fc fa18 	bl	8002a04 <HAL_GetTick>
 80065d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d6:	e00a      	b.n	80065ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d8:	f7fc fa14 	bl	8002a04 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e04f      	b.n	800668e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ee:	4b2b      	ldr	r3, [pc, #172]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 020c 	and.w	r2, r3, #12
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d1eb      	bne.n	80065d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006600:	4b25      	ldr	r3, [pc, #148]	@ (8006698 <HAL_RCC_ClockConfig+0x1b8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d20c      	bcs.n	8006628 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800660e:	4b22      	ldr	r3, [pc, #136]	@ (8006698 <HAL_RCC_ClockConfig+0x1b8>)
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006616:	4b20      	ldr	r3, [pc, #128]	@ (8006698 <HAL_RCC_ClockConfig+0x1b8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d001      	beq.n	8006628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e032      	b.n	800668e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006634:	4b19      	ldr	r3, [pc, #100]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	4916      	ldr	r1, [pc, #88]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	4313      	orrs	r3, r2
 8006644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006652:	4b12      	ldr	r3, [pc, #72]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	490e      	ldr	r1, [pc, #56]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	4313      	orrs	r3, r2
 8006664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006666:	f000 f855 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 800666a:	4602      	mov	r2, r0
 800666c:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <HAL_RCC_ClockConfig+0x1bc>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	490a      	ldr	r1, [pc, #40]	@ (80066a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006678:	5ccb      	ldrb	r3, [r1, r3]
 800667a:	fa22 f303 	lsr.w	r3, r2, r3
 800667e:	4a09      	ldr	r2, [pc, #36]	@ (80066a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006682:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f7fc f978 	bl	800297c <HAL_InitTick>

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40023c00 	.word	0x40023c00
 800669c:	40023800 	.word	0x40023800
 80066a0:	0800d6bc 	.word	0x0800d6bc
 80066a4:	20000058 	.word	0x20000058
 80066a8:	2000005c 	.word	0x2000005c

080066ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066b0:	4b03      	ldr	r3, [pc, #12]	@ (80066c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066b2:	681b      	ldr	r3, [r3, #0]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000058 	.word	0x20000058

080066c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066c8:	f7ff fff0 	bl	80066ac <HAL_RCC_GetHCLKFreq>
 80066cc:	4602      	mov	r2, r0
 80066ce:	4b05      	ldr	r3, [pc, #20]	@ (80066e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	0a9b      	lsrs	r3, r3, #10
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	4903      	ldr	r1, [pc, #12]	@ (80066e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066da:	5ccb      	ldrb	r3, [r1, r3]
 80066dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40023800 	.word	0x40023800
 80066e8:	0800d6cc 	.word	0x0800d6cc

080066ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066f0:	f7ff ffdc 	bl	80066ac <HAL_RCC_GetHCLKFreq>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b05      	ldr	r3, [pc, #20]	@ (800670c <HAL_RCC_GetPCLK2Freq+0x20>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	0b5b      	lsrs	r3, r3, #13
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	4903      	ldr	r1, [pc, #12]	@ (8006710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006702:	5ccb      	ldrb	r3, [r1, r3]
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006708:	4618      	mov	r0, r3
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40023800 	.word	0x40023800
 8006710:	0800d6cc 	.word	0x0800d6cc

08006714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006718:	b0ae      	sub	sp, #184	@ 0xb8
 800671a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800673a:	4bcb      	ldr	r3, [pc, #812]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	2b0c      	cmp	r3, #12
 8006744:	f200 8206 	bhi.w	8006b54 <HAL_RCC_GetSysClockFreq+0x440>
 8006748:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <HAL_RCC_GetSysClockFreq+0x3c>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	08006785 	.word	0x08006785
 8006754:	08006b55 	.word	0x08006b55
 8006758:	08006b55 	.word	0x08006b55
 800675c:	08006b55 	.word	0x08006b55
 8006760:	0800678d 	.word	0x0800678d
 8006764:	08006b55 	.word	0x08006b55
 8006768:	08006b55 	.word	0x08006b55
 800676c:	08006b55 	.word	0x08006b55
 8006770:	08006795 	.word	0x08006795
 8006774:	08006b55 	.word	0x08006b55
 8006778:	08006b55 	.word	0x08006b55
 800677c:	08006b55 	.word	0x08006b55
 8006780:	08006985 	.word	0x08006985
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006784:	4bb9      	ldr	r3, [pc, #740]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x358>)
 8006786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800678a:	e1e7      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800678c:	4bb8      	ldr	r3, [pc, #736]	@ (8006a70 <HAL_RCC_GetSysClockFreq+0x35c>)
 800678e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006792:	e1e3      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006794:	4bb4      	ldr	r3, [pc, #720]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800679c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067a0:	4bb1      	ldr	r3, [pc, #708]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d071      	beq.n	8006890 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ac:	4bae      	ldr	r3, [pc, #696]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	099b      	lsrs	r3, r3, #6
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80067bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067c8:	2300      	movs	r3, #0
 80067ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80067d2:	4622      	mov	r2, r4
 80067d4:	462b      	mov	r3, r5
 80067d6:	f04f 0000 	mov.w	r0, #0
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	0159      	lsls	r1, r3, #5
 80067e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067e4:	0150      	lsls	r0, r2, #5
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4621      	mov	r1, r4
 80067ec:	1a51      	subs	r1, r2, r1
 80067ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80067f0:	4629      	mov	r1, r5
 80067f2:	eb63 0301 	sbc.w	r3, r3, r1
 80067f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006804:	4649      	mov	r1, r9
 8006806:	018b      	lsls	r3, r1, #6
 8006808:	4641      	mov	r1, r8
 800680a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800680e:	4641      	mov	r1, r8
 8006810:	018a      	lsls	r2, r1, #6
 8006812:	4641      	mov	r1, r8
 8006814:	1a51      	subs	r1, r2, r1
 8006816:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006818:	4649      	mov	r1, r9
 800681a:	eb63 0301 	sbc.w	r3, r3, r1
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800682c:	4649      	mov	r1, r9
 800682e:	00cb      	lsls	r3, r1, #3
 8006830:	4641      	mov	r1, r8
 8006832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006836:	4641      	mov	r1, r8
 8006838:	00ca      	lsls	r2, r1, #3
 800683a:	4610      	mov	r0, r2
 800683c:	4619      	mov	r1, r3
 800683e:	4603      	mov	r3, r0
 8006840:	4622      	mov	r2, r4
 8006842:	189b      	adds	r3, r3, r2
 8006844:	633b      	str	r3, [r7, #48]	@ 0x30
 8006846:	462b      	mov	r3, r5
 8006848:	460a      	mov	r2, r1
 800684a:	eb42 0303 	adc.w	r3, r2, r3
 800684e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800685c:	4629      	mov	r1, r5
 800685e:	024b      	lsls	r3, r1, #9
 8006860:	4621      	mov	r1, r4
 8006862:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006866:	4621      	mov	r1, r4
 8006868:	024a      	lsls	r2, r1, #9
 800686a:	4610      	mov	r0, r2
 800686c:	4619      	mov	r1, r3
 800686e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006872:	2200      	movs	r2, #0
 8006874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006878:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800687c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006880:	f7fa fa22 	bl	8000cc8 <__aeabi_uldivmod>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4613      	mov	r3, r2
 800688a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800688e:	e067      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006890:	4b75      	ldr	r3, [pc, #468]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	2200      	movs	r2, #0
 8006898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800689c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80068a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068aa:	2300      	movs	r3, #0
 80068ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	f04f 0000 	mov.w	r0, #0
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	0159      	lsls	r1, r3, #5
 80068c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068c4:	0150      	lsls	r0, r2, #5
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4621      	mov	r1, r4
 80068cc:	1a51      	subs	r1, r2, r1
 80068ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80068d0:	4629      	mov	r1, r5
 80068d2:	eb63 0301 	sbc.w	r3, r3, r1
 80068d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80068e4:	4649      	mov	r1, r9
 80068e6:	018b      	lsls	r3, r1, #6
 80068e8:	4641      	mov	r1, r8
 80068ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068ee:	4641      	mov	r1, r8
 80068f0:	018a      	lsls	r2, r1, #6
 80068f2:	4641      	mov	r1, r8
 80068f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80068f8:	4649      	mov	r1, r9
 80068fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800690a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800690e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006912:	4692      	mov	sl, r2
 8006914:	469b      	mov	fp, r3
 8006916:	4623      	mov	r3, r4
 8006918:	eb1a 0303 	adds.w	r3, sl, r3
 800691c:	623b      	str	r3, [r7, #32]
 800691e:	462b      	mov	r3, r5
 8006920:	eb4b 0303 	adc.w	r3, fp, r3
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006932:	4629      	mov	r1, r5
 8006934:	028b      	lsls	r3, r1, #10
 8006936:	4621      	mov	r1, r4
 8006938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800693c:	4621      	mov	r1, r4
 800693e:	028a      	lsls	r2, r1, #10
 8006940:	4610      	mov	r0, r2
 8006942:	4619      	mov	r1, r3
 8006944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006948:	2200      	movs	r2, #0
 800694a:	673b      	str	r3, [r7, #112]	@ 0x70
 800694c:	677a      	str	r2, [r7, #116]	@ 0x74
 800694e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006952:	f7fa f9b9 	bl	8000cc8 <__aeabi_uldivmod>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4613      	mov	r3, r2
 800695c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006960:	4b41      	ldr	r3, [pc, #260]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	0c1b      	lsrs	r3, r3, #16
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	3301      	adds	r3, #1
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006982:	e0eb      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006984:	4b38      	ldr	r3, [pc, #224]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800698c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006990:	4b35      	ldr	r3, [pc, #212]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d06b      	beq.n	8006a74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699c:	4b32      	ldr	r3, [pc, #200]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	099b      	lsrs	r3, r3, #6
 80069a2:	2200      	movs	r2, #0
 80069a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80069b0:	2300      	movs	r3, #0
 80069b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80069b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80069b8:	4622      	mov	r2, r4
 80069ba:	462b      	mov	r3, r5
 80069bc:	f04f 0000 	mov.w	r0, #0
 80069c0:	f04f 0100 	mov.w	r1, #0
 80069c4:	0159      	lsls	r1, r3, #5
 80069c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ca:	0150      	lsls	r0, r2, #5
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4621      	mov	r1, r4
 80069d2:	1a51      	subs	r1, r2, r1
 80069d4:	61b9      	str	r1, [r7, #24]
 80069d6:	4629      	mov	r1, r5
 80069d8:	eb63 0301 	sbc.w	r3, r3, r1
 80069dc:	61fb      	str	r3, [r7, #28]
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80069ea:	4659      	mov	r1, fp
 80069ec:	018b      	lsls	r3, r1, #6
 80069ee:	4651      	mov	r1, sl
 80069f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069f4:	4651      	mov	r1, sl
 80069f6:	018a      	lsls	r2, r1, #6
 80069f8:	4651      	mov	r1, sl
 80069fa:	ebb2 0801 	subs.w	r8, r2, r1
 80069fe:	4659      	mov	r1, fp
 8006a00:	eb63 0901 	sbc.w	r9, r3, r1
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a18:	4690      	mov	r8, r2
 8006a1a:	4699      	mov	r9, r3
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	eb18 0303 	adds.w	r3, r8, r3
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	462b      	mov	r3, r5
 8006a26:	eb49 0303 	adc.w	r3, r9, r3
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006a38:	4629      	mov	r1, r5
 8006a3a:	024b      	lsls	r3, r1, #9
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a42:	4621      	mov	r1, r4
 8006a44:	024a      	lsls	r2, r1, #9
 8006a46:	4610      	mov	r0, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a4e:	2200      	movs	r2, #0
 8006a50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006a54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a58:	f7fa f936 	bl	8000cc8 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4613      	mov	r3, r2
 8006a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a66:	e065      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x420>
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	00f42400 	.word	0x00f42400
 8006a70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a74:	4b3d      	ldr	r3, [pc, #244]	@ (8006b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	099b      	lsrs	r3, r3, #6
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	4611      	mov	r1, r2
 8006a80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a84:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a86:	2300      	movs	r3, #0
 8006a88:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006a8e:	4642      	mov	r2, r8
 8006a90:	464b      	mov	r3, r9
 8006a92:	f04f 0000 	mov.w	r0, #0
 8006a96:	f04f 0100 	mov.w	r1, #0
 8006a9a:	0159      	lsls	r1, r3, #5
 8006a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aa0:	0150      	lsls	r0, r2, #5
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	1a51      	subs	r1, r2, r1
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	4649      	mov	r1, r9
 8006aae:	eb63 0301 	sbc.w	r3, r3, r1
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006ac0:	4659      	mov	r1, fp
 8006ac2:	018b      	lsls	r3, r1, #6
 8006ac4:	4651      	mov	r1, sl
 8006ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006aca:	4651      	mov	r1, sl
 8006acc:	018a      	lsls	r2, r1, #6
 8006ace:	4651      	mov	r1, sl
 8006ad0:	1a54      	subs	r4, r2, r1
 8006ad2:	4659      	mov	r1, fp
 8006ad4:	eb63 0501 	sbc.w	r5, r3, r1
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	f04f 0300 	mov.w	r3, #0
 8006ae0:	00eb      	lsls	r3, r5, #3
 8006ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ae6:	00e2      	lsls	r2, r4, #3
 8006ae8:	4614      	mov	r4, r2
 8006aea:	461d      	mov	r5, r3
 8006aec:	4643      	mov	r3, r8
 8006aee:	18e3      	adds	r3, r4, r3
 8006af0:	603b      	str	r3, [r7, #0]
 8006af2:	464b      	mov	r3, r9
 8006af4:	eb45 0303 	adc.w	r3, r5, r3
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b06:	4629      	mov	r1, r5
 8006b08:	028b      	lsls	r3, r1, #10
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b10:	4621      	mov	r1, r4
 8006b12:	028a      	lsls	r2, r1, #10
 8006b14:	4610      	mov	r0, r2
 8006b16:	4619      	mov	r1, r3
 8006b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006b22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b26:	f7fa f8cf 	bl	8000cc8 <__aeabi_uldivmod>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4613      	mov	r3, r2
 8006b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006b34:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	0f1b      	lsrs	r3, r3, #28
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b52:	e003      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b54:	4b06      	ldr	r3, [pc, #24]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	37b8      	adds	r7, #184	@ 0xb8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	00f42400 	.word	0x00f42400

08006b74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e28d      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8083 	beq.w	8006c9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b94:	4b94      	ldr	r3, [pc, #592]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 030c 	and.w	r3, r3, #12
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d019      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006ba0:	4b91      	ldr	r3, [pc, #580]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 030c 	and.w	r3, r3, #12
        || \
 8006ba8:	2b08      	cmp	r3, #8
 8006baa:	d106      	bne.n	8006bba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006bac:	4b8e      	ldr	r3, [pc, #568]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bb8:	d00c      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bba:	4b8b      	ldr	r3, [pc, #556]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006bc2:	2b0c      	cmp	r3, #12
 8006bc4:	d112      	bne.n	8006bec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bc6:	4b88      	ldr	r3, [pc, #544]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd2:	d10b      	bne.n	8006bec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd4:	4b84      	ldr	r3, [pc, #528]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d05b      	beq.n	8006c98 <HAL_RCC_OscConfig+0x124>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d157      	bne.n	8006c98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e25a      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf4:	d106      	bne.n	8006c04 <HAL_RCC_OscConfig+0x90>
 8006bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a7b      	ldr	r2, [pc, #492]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e01d      	b.n	8006c40 <HAL_RCC_OscConfig+0xcc>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c0c:	d10c      	bne.n	8006c28 <HAL_RCC_OscConfig+0xb4>
 8006c0e:	4b76      	ldr	r3, [pc, #472]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a75      	ldr	r2, [pc, #468]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	4b73      	ldr	r3, [pc, #460]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a72      	ldr	r2, [pc, #456]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e00b      	b.n	8006c40 <HAL_RCC_OscConfig+0xcc>
 8006c28:	4b6f      	ldr	r3, [pc, #444]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	4b6c      	ldr	r3, [pc, #432]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a6b      	ldr	r2, [pc, #428]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d013      	beq.n	8006c70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c48:	f7fb fedc 	bl	8002a04 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c50:	f7fb fed8 	bl	8002a04 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b64      	cmp	r3, #100	@ 0x64
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e21f      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c62:	4b61      	ldr	r3, [pc, #388]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0xdc>
 8006c6e:	e014      	b.n	8006c9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fb fec8 	bl	8002a04 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c78:	f7fb fec4 	bl	8002a04 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	@ 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e20b      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8a:	4b57      	ldr	r3, [pc, #348]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0x104>
 8006c96:	e000      	b.n	8006c9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d06f      	beq.n	8006d86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ca6:	4b50      	ldr	r3, [pc, #320]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d017      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d105      	bne.n	8006cca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00b      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cca:	4b47      	ldr	r3, [pc, #284]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006cd2:	2b0c      	cmp	r3, #12
 8006cd4:	d11c      	bne.n	8006d10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cd6:	4b44      	ldr	r3, [pc, #272]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d116      	bne.n	8006d10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ce2:	4b41      	ldr	r3, [pc, #260]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <HAL_RCC_OscConfig+0x186>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d001      	beq.n	8006cfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e1d3      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4937      	ldr	r1, [pc, #220]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0e:	e03a      	b.n	8006d86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d020      	beq.n	8006d5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d18:	4b34      	ldr	r3, [pc, #208]	@ (8006dec <HAL_RCC_OscConfig+0x278>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1e:	f7fb fe71 	bl	8002a04 <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d26:	f7fb fe6d 	bl	8002a04 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e1b4      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d38:	4b2b      	ldr	r3, [pc, #172]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0f0      	beq.n	8006d26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d44:	4b28      	ldr	r3, [pc, #160]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	4925      	ldr	r1, [pc, #148]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	600b      	str	r3, [r1, #0]
 8006d58:	e015      	b.n	8006d86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d5a:	4b24      	ldr	r3, [pc, #144]	@ (8006dec <HAL_RCC_OscConfig+0x278>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fb fe50 	bl	8002a04 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d68:	f7fb fe4c 	bl	8002a04 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e193      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d036      	beq.n	8006e00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d016      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d9a:	4b15      	ldr	r3, [pc, #84]	@ (8006df0 <HAL_RCC_OscConfig+0x27c>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da0:	f7fb fe30 	bl	8002a04 <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006da8:	f7fb fe2c 	bl	8002a04 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e173      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dba:	4b0b      	ldr	r3, [pc, #44]	@ (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f0      	beq.n	8006da8 <HAL_RCC_OscConfig+0x234>
 8006dc6:	e01b      	b.n	8006e00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dc8:	4b09      	ldr	r3, [pc, #36]	@ (8006df0 <HAL_RCC_OscConfig+0x27c>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dce:	f7fb fe19 	bl	8002a04 <HAL_GetTick>
 8006dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd4:	e00e      	b.n	8006df4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd6:	f7fb fe15 	bl	8002a04 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d907      	bls.n	8006df4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e15c      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
 8006de8:	40023800 	.word	0x40023800
 8006dec:	42470000 	.word	0x42470000
 8006df0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df4:	4b8a      	ldr	r3, [pc, #552]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1ea      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8097 	beq.w	8006f3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e12:	4b83      	ldr	r3, [pc, #524]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10f      	bne.n	8006e3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	4b7f      	ldr	r3, [pc, #508]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	4a7e      	ldr	r2, [pc, #504]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e36:	60bb      	str	r3, [r7, #8]
 8006e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3e:	4b79      	ldr	r3, [pc, #484]	@ (8007024 <HAL_RCC_OscConfig+0x4b0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d118      	bne.n	8006e7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e4a:	4b76      	ldr	r3, [pc, #472]	@ (8007024 <HAL_RCC_OscConfig+0x4b0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a75      	ldr	r2, [pc, #468]	@ (8007024 <HAL_RCC_OscConfig+0x4b0>)
 8006e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e56:	f7fb fdd5 	bl	8002a04 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e5e:	f7fb fdd1 	bl	8002a04 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e118      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e70:	4b6c      	ldr	r3, [pc, #432]	@ (8007024 <HAL_RCC_OscConfig+0x4b0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d106      	bne.n	8006e92 <HAL_RCC_OscConfig+0x31e>
 8006e84:	4b66      	ldr	r3, [pc, #408]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e88:	4a65      	ldr	r2, [pc, #404]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e90:	e01c      	b.n	8006ecc <HAL_RCC_OscConfig+0x358>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d10c      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x340>
 8006e9a:	4b61      	ldr	r3, [pc, #388]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e9e:	4a60      	ldr	r2, [pc, #384]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006ea0:	f043 0304 	orr.w	r3, r3, #4
 8006ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eaa:	4a5d      	ldr	r2, [pc, #372]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eb2:	e00b      	b.n	8006ecc <HAL_RCC_OscConfig+0x358>
 8006eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb8:	4a59      	ldr	r2, [pc, #356]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ec0:	4b57      	ldr	r3, [pc, #348]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec4:	4a56      	ldr	r2, [pc, #344]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006ec6:	f023 0304 	bic.w	r3, r3, #4
 8006eca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d015      	beq.n	8006f00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed4:	f7fb fd96 	bl	8002a04 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eda:	e00a      	b.n	8006ef2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006edc:	f7fb fd92 	bl	8002a04 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e0d7      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0ee      	beq.n	8006edc <HAL_RCC_OscConfig+0x368>
 8006efe:	e014      	b.n	8006f2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f00:	f7fb fd80 	bl	8002a04 <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f06:	e00a      	b.n	8006f1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f08:	f7fb fd7c 	bl	8002a04 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e0c1      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f1e:	4b40      	ldr	r3, [pc, #256]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1ee      	bne.n	8006f08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d105      	bne.n	8006f3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f30:	4b3b      	ldr	r3, [pc, #236]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f34:	4a3a      	ldr	r2, [pc, #232]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80ad 	beq.w	80070a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f46:	4b36      	ldr	r3, [pc, #216]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 030c 	and.w	r3, r3, #12
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d060      	beq.n	8007014 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d145      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f5a:	4b33      	ldr	r3, [pc, #204]	@ (8007028 <HAL_RCC_OscConfig+0x4b4>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f60:	f7fb fd50 	bl	8002a04 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f68:	f7fb fd4c 	bl	8002a04 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e093      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	4b29      	ldr	r3, [pc, #164]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f0      	bne.n	8006f68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69da      	ldr	r2, [r3, #28]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f94:	019b      	lsls	r3, r3, #6
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	061b      	lsls	r3, r3, #24
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb0:	071b      	lsls	r3, r3, #28
 8006fb2:	491b      	ldr	r1, [pc, #108]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8007028 <HAL_RCC_OscConfig+0x4b4>)
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbe:	f7fb fd21 	bl	8002a04 <HAL_GetTick>
 8006fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc6:	f7fb fd1d 	bl	8002a04 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e064      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fd8:	4b11      	ldr	r3, [pc, #68]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0f0      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x452>
 8006fe4:	e05c      	b.n	80070a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fe6:	4b10      	ldr	r3, [pc, #64]	@ (8007028 <HAL_RCC_OscConfig+0x4b4>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fec:	f7fb fd0a 	bl	8002a04 <HAL_GetTick>
 8006ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ff4:	f7fb fd06 	bl	8002a04 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e04d      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007006:	4b06      	ldr	r3, [pc, #24]	@ (8007020 <HAL_RCC_OscConfig+0x4ac>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1f0      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x480>
 8007012:	e045      	b.n	80070a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d107      	bne.n	800702c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e040      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
 8007020:	40023800 	.word	0x40023800
 8007024:	40007000 	.word	0x40007000
 8007028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800702c:	4b1f      	ldr	r3, [pc, #124]	@ (80070ac <HAL_RCC_OscConfig+0x538>)
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d030      	beq.n	800709c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007044:	429a      	cmp	r2, r3
 8007046:	d129      	bne.n	800709c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007052:	429a      	cmp	r2, r3
 8007054:	d122      	bne.n	800709c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800705c:	4013      	ands	r3, r2
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007064:	4293      	cmp	r3, r2
 8007066:	d119      	bne.n	800709c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	3b01      	subs	r3, #1
 8007076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007078:	429a      	cmp	r2, r3
 800707a:	d10f      	bne.n	800709c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007088:	429a      	cmp	r2, r3
 800708a:	d107      	bne.n	800709c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007096:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007098:	429a      	cmp	r2, r3
 800709a:	d001      	beq.n	80070a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e000      	b.n	80070a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	40023800 	.word	0x40023800

080070b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e041      	b.n	8007146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fb f9d6 	bl	8002488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f000 fa16 	bl	8007520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d020      	beq.n	80071b2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01b      	beq.n	80071b2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f06f 0202 	mvn.w	r2, #2
 8007182:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f9a3 	bl	80074e4 <HAL_TIM_IC_CaptureCallback>
 800719e:	e005      	b.n	80071ac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f995 	bl	80074d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9a6 	bl	80074f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d020      	beq.n	80071fe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01b      	beq.n	80071fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f06f 0204 	mvn.w	r2, #4
 80071ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f97d 	bl	80074e4 <HAL_TIM_IC_CaptureCallback>
 80071ea:	e005      	b.n	80071f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f96f 	bl	80074d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f980 	bl	80074f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	2b00      	cmp	r3, #0
 8007206:	d020      	beq.n	800724a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01b      	beq.n	800724a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f06f 0208 	mvn.w	r2, #8
 800721a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2204      	movs	r2, #4
 8007220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f957 	bl	80074e4 <HAL_TIM_IC_CaptureCallback>
 8007236:	e005      	b.n	8007244 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f949 	bl	80074d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f95a 	bl	80074f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b00      	cmp	r3, #0
 8007252:	d020      	beq.n	8007296 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 0310 	and.w	r3, r3, #16
 800725a:	2b00      	cmp	r3, #0
 800725c:	d01b      	beq.n	8007296 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f06f 0210 	mvn.w	r2, #16
 8007266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2208      	movs	r2, #8
 800726c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f931 	bl	80074e4 <HAL_TIM_IC_CaptureCallback>
 8007282:	e005      	b.n	8007290 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f923 	bl	80074d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f934 	bl	80074f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00c      	beq.n	80072ba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d007      	beq.n	80072ba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f06f 0201 	mvn.w	r2, #1
 80072b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f901 	bl	80074bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00c      	beq.n	80072de <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80072d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fae7 	bl	80078ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00c      	beq.n	8007302 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f905 	bl	800750c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00c      	beq.n	8007326 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f06f 0220 	mvn.w	r2, #32
 800731e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fab9 	bl	8007898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_TIM_ConfigClockSource+0x1c>
 8007346:	2302      	movs	r3, #2
 8007348:	e0b4      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x186>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007368:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007370:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007382:	d03e      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0xd4>
 8007384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007388:	f200 8087 	bhi.w	800749a <HAL_TIM_ConfigClockSource+0x16c>
 800738c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007390:	f000 8086 	beq.w	80074a0 <HAL_TIM_ConfigClockSource+0x172>
 8007394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007398:	d87f      	bhi.n	800749a <HAL_TIM_ConfigClockSource+0x16c>
 800739a:	2b70      	cmp	r3, #112	@ 0x70
 800739c:	d01a      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0xa6>
 800739e:	2b70      	cmp	r3, #112	@ 0x70
 80073a0:	d87b      	bhi.n	800749a <HAL_TIM_ConfigClockSource+0x16c>
 80073a2:	2b60      	cmp	r3, #96	@ 0x60
 80073a4:	d050      	beq.n	8007448 <HAL_TIM_ConfigClockSource+0x11a>
 80073a6:	2b60      	cmp	r3, #96	@ 0x60
 80073a8:	d877      	bhi.n	800749a <HAL_TIM_ConfigClockSource+0x16c>
 80073aa:	2b50      	cmp	r3, #80	@ 0x50
 80073ac:	d03c      	beq.n	8007428 <HAL_TIM_ConfigClockSource+0xfa>
 80073ae:	2b50      	cmp	r3, #80	@ 0x50
 80073b0:	d873      	bhi.n	800749a <HAL_TIM_ConfigClockSource+0x16c>
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d058      	beq.n	8007468 <HAL_TIM_ConfigClockSource+0x13a>
 80073b6:	2b40      	cmp	r3, #64	@ 0x40
 80073b8:	d86f      	bhi.n	800749a <HAL_TIM_ConfigClockSource+0x16c>
 80073ba:	2b30      	cmp	r3, #48	@ 0x30
 80073bc:	d064      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x15a>
 80073be:	2b30      	cmp	r3, #48	@ 0x30
 80073c0:	d86b      	bhi.n	800749a <HAL_TIM_ConfigClockSource+0x16c>
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d060      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x15a>
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d867      	bhi.n	800749a <HAL_TIM_ConfigClockSource+0x16c>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d05c      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x15a>
 80073ce:	2b10      	cmp	r3, #16
 80073d0:	d05a      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x15a>
 80073d2:	e062      	b.n	800749a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073e4:	f000 f9bc 	bl	8007760 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	609a      	str	r2, [r3, #8]
      break;
 8007400:	e04f      	b.n	80074a2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007412:	f000 f9a5 	bl	8007760 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007424:	609a      	str	r2, [r3, #8]
      break;
 8007426:	e03c      	b.n	80074a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007434:	461a      	mov	r2, r3
 8007436:	f000 f919 	bl	800766c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2150      	movs	r1, #80	@ 0x50
 8007440:	4618      	mov	r0, r3
 8007442:	f000 f972 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 8007446:	e02c      	b.n	80074a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007454:	461a      	mov	r2, r3
 8007456:	f000 f938 	bl	80076ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2160      	movs	r1, #96	@ 0x60
 8007460:	4618      	mov	r0, r3
 8007462:	f000 f962 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 8007466:	e01c      	b.n	80074a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007474:	461a      	mov	r2, r3
 8007476:	f000 f8f9 	bl	800766c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2140      	movs	r1, #64	@ 0x40
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f952 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 8007486:	e00c      	b.n	80074a2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f000 f949 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 8007498:	e003      	b.n	80074a2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	73fb      	strb	r3, [r7, #15]
      break;
 800749e:	e000      	b.n	80074a2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a43      	ldr	r2, [pc, #268]	@ (8007640 <TIM_Base_SetConfig+0x120>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d013      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753e:	d00f      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a40      	ldr	r2, [pc, #256]	@ (8007644 <TIM_Base_SetConfig+0x124>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a3f      	ldr	r2, [pc, #252]	@ (8007648 <TIM_Base_SetConfig+0x128>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a3e      	ldr	r2, [pc, #248]	@ (800764c <TIM_Base_SetConfig+0x12c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a3d      	ldr	r2, [pc, #244]	@ (8007650 <TIM_Base_SetConfig+0x130>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d108      	bne.n	8007572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a32      	ldr	r2, [pc, #200]	@ (8007640 <TIM_Base_SetConfig+0x120>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d02b      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007580:	d027      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a2f      	ldr	r2, [pc, #188]	@ (8007644 <TIM_Base_SetConfig+0x124>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d023      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a2e      	ldr	r2, [pc, #184]	@ (8007648 <TIM_Base_SetConfig+0x128>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01f      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a2d      	ldr	r2, [pc, #180]	@ (800764c <TIM_Base_SetConfig+0x12c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01b      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2c      	ldr	r2, [pc, #176]	@ (8007650 <TIM_Base_SetConfig+0x130>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d017      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007654 <TIM_Base_SetConfig+0x134>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007658 <TIM_Base_SetConfig+0x138>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00f      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a29      	ldr	r2, [pc, #164]	@ (800765c <TIM_Base_SetConfig+0x13c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00b      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a28      	ldr	r2, [pc, #160]	@ (8007660 <TIM_Base_SetConfig+0x140>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d007      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a27      	ldr	r2, [pc, #156]	@ (8007664 <TIM_Base_SetConfig+0x144>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d003      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a26      	ldr	r2, [pc, #152]	@ (8007668 <TIM_Base_SetConfig+0x148>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d108      	bne.n	80075e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a0e      	ldr	r2, [pc, #56]	@ (8007640 <TIM_Base_SetConfig+0x120>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <TIM_Base_SetConfig+0xf2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a10      	ldr	r2, [pc, #64]	@ (8007650 <TIM_Base_SetConfig+0x130>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d103      	bne.n	800761a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f043 0204 	orr.w	r2, r3, #4
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	601a      	str	r2, [r3, #0]
}
 8007632:	bf00      	nop
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40010000 	.word	0x40010000
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800
 800764c:	40000c00 	.word	0x40000c00
 8007650:	40010400 	.word	0x40010400
 8007654:	40014000 	.word	0x40014000
 8007658:	40014400 	.word	0x40014400
 800765c:	40014800 	.word	0x40014800
 8007660:	40001800 	.word	0x40001800
 8007664:	40001c00 	.word	0x40001c00
 8007668:	40002000 	.word	0x40002000

0800766c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f023 0201 	bic.w	r2, r3, #1
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f023 030a 	bic.w	r3, r3, #10
 80076a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	621a      	str	r2, [r3, #32]
}
 80076be:	bf00      	nop
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b087      	sub	sp, #28
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f023 0210 	bic.w	r2, r3, #16
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	031b      	lsls	r3, r3, #12
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	f043 0307 	orr.w	r3, r3, #7
 800774c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	609a      	str	r2, [r3, #8]
}
 8007754:	bf00      	nop
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800777a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	021a      	lsls	r2, r3, #8
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	431a      	orrs	r2, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4313      	orrs	r3, r2
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	4313      	orrs	r3, r2
 800778c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	609a      	str	r2, [r3, #8]
}
 8007794:	bf00      	nop
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e05a      	b.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a21      	ldr	r2, [pc, #132]	@ (800787c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d022      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007804:	d01d      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a1d      	ldr	r2, [pc, #116]	@ (8007880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d018      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1b      	ldr	r2, [pc, #108]	@ (8007884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d013      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a1a      	ldr	r2, [pc, #104]	@ (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00e      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a18      	ldr	r2, [pc, #96]	@ (800788c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d009      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a17      	ldr	r2, [pc, #92]	@ (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d004      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a15      	ldr	r2, [pc, #84]	@ (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d10c      	bne.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4313      	orrs	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40010000 	.word	0x40010000
 8007880:	40000400 	.word	0x40000400
 8007884:	40000800 	.word	0x40000800
 8007888:	40000c00 	.word	0x40000c00
 800788c:	40010400 	.word	0x40010400
 8007890:	40014000 	.word	0x40014000
 8007894:	40001800 	.word	0x40001800

08007898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e042      	b.n	8007958 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fa fdf6 	bl	80024d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2224      	movs	r2, #36	@ 0x24
 80078f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fd7f 	bl	8008408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695a      	ldr	r2, [r3, #20]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08a      	sub	sp, #40	@ 0x28
 8007964:	af02      	add	r7, sp, #8
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	4613      	mov	r3, r2
 800796e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b20      	cmp	r3, #32
 800797e:	d175      	bne.n	8007a6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <HAL_UART_Transmit+0x2c>
 8007986:	88fb      	ldrh	r3, [r7, #6]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e06e      	b.n	8007a6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2221      	movs	r2, #33	@ 0x21
 800799a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800799e:	f7fb f831 	bl	8002a04 <HAL_GetTick>
 80079a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	88fa      	ldrh	r2, [r7, #6]
 80079ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b8:	d108      	bne.n	80079cc <HAL_UART_Transmit+0x6c>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d104      	bne.n	80079cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	e003      	b.n	80079d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079d4:	e02e      	b.n	8007a34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2200      	movs	r2, #0
 80079de:	2180      	movs	r1, #128	@ 0x80
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 fb1d 	bl	8008020 <UART_WaitOnFlagUntilTimeout>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e03a      	b.n	8007a6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	3302      	adds	r3, #2
 8007a12:	61bb      	str	r3, [r7, #24]
 8007a14:	e007      	b.n	8007a26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1cb      	bne.n	80079d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2200      	movs	r2, #0
 8007a46:	2140      	movs	r1, #64	@ 0x40
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 fae9 	bl	8008020 <UART_WaitOnFlagUntilTimeout>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e006      	b.n	8007a6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e000      	b.n	8007a6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007a6c:	2302      	movs	r3, #2
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3720      	adds	r7, #32
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b0ba      	sub	sp, #232	@ 0xe8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10f      	bne.n	8007ade <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac2:	f003 0320 	and.w	r3, r3, #32
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <HAL_UART_IRQHandler+0x66>
 8007aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fbd7 	bl	800828a <UART_Receive_IT>
      return;
 8007adc:	e273      	b.n	8007fc6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80de 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x22c>
 8007ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d106      	bne.n	8007b02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80d1 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <HAL_UART_IRQHandler+0xae>
 8007b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1e:	f043 0201 	orr.w	r2, r3, #1
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b2a:	f003 0304 	and.w	r3, r3, #4
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <HAL_UART_IRQHandler+0xd2>
 8007b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d005      	beq.n	8007b4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b42:	f043 0202 	orr.w	r2, r3, #2
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <HAL_UART_IRQHandler+0xf6>
 8007b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b66:	f043 0204 	orr.w	r2, r3, #4
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d011      	beq.n	8007b9e <HAL_UART_IRQHandler+0x126>
 8007b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b96:	f043 0208 	orr.w	r2, r3, #8
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 820a 	beq.w	8007fbc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x14e>
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fb62 	bl	800828a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd0:	2b40      	cmp	r3, #64	@ 0x40
 8007bd2:	bf0c      	ite	eq
 8007bd4:	2301      	moveq	r3, #1
 8007bd6:	2300      	movne	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d103      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x17a>
 8007bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04f      	beq.n	8007c92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa6d 	bl	80080d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c02:	2b40      	cmp	r3, #64	@ 0x40
 8007c04:	d141      	bne.n	8007c8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3314      	adds	r3, #20
 8007c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3314      	adds	r3, #20
 8007c2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1d9      	bne.n	8007c06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d013      	beq.n	8007c82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5e:	4a8a      	ldr	r2, [pc, #552]	@ (8007e88 <HAL_UART_IRQHandler+0x410>)
 8007c60:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fb f92c 	bl	8002ec4 <HAL_DMA_Abort_IT>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d016      	beq.n	8007ca0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c80:	e00e      	b.n	8007ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f9b6 	bl	8007ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c88:	e00a      	b.n	8007ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9b2 	bl	8007ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c90:	e006      	b.n	8007ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9ae 	bl	8007ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007c9e:	e18d      	b.n	8007fbc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca0:	bf00      	nop
    return;
 8007ca2:	e18b      	b.n	8007fbc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	f040 8167 	bne.w	8007f7c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8160 	beq.w	8007f7c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 8159 	beq.w	8007f7c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60bb      	str	r3, [r7, #8]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	60bb      	str	r3, [r7, #8]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	60bb      	str	r3, [r7, #8]
 8007cde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cea:	2b40      	cmp	r3, #64	@ 0x40
 8007cec:	f040 80ce 	bne.w	8007e8c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 80a9 	beq.w	8007e58 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	f080 80a2 	bcs.w	8007e58 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d26:	f000 8088 	beq.w	8007e3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1d9      	bne.n	8007d2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3314      	adds	r3, #20
 8007d7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3314      	adds	r3, #20
 8007d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e1      	bne.n	8007d76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3314      	adds	r3, #20
 8007db8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007dd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ddc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007de4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e3      	bne.n	8007db2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e0a:	f023 0310 	bic.w	r3, r3, #16
 8007e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	330c      	adds	r3, #12
 8007e18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007e1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e3      	bne.n	8007df8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fa ffd5 	bl	8002de4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f8d9 	bl	8008008 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007e56:	e0b3      	b.n	8007fc0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e60:	429a      	cmp	r2, r3
 8007e62:	f040 80ad 	bne.w	8007fc0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e70:	f040 80a6 	bne.w	8007fc0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f8c1 	bl	8008008 <HAL_UARTEx_RxEventCallback>
      return;
 8007e86:	e09b      	b.n	8007fc0 <HAL_UART_IRQHandler+0x548>
 8007e88:	08008199 	.word	0x08008199
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 808e 	beq.w	8007fc4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007ea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8089 	beq.w	8007fc4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	330c      	adds	r3, #12
 8007eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	e853 3f00 	ldrex	r3, [r3]
 8007ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ec8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	330c      	adds	r3, #12
 8007ed2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ed6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ed8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007edc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e3      	bne.n	8007eb2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3314      	adds	r3, #20
 8007ef0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	623b      	str	r3, [r7, #32]
   return(result);
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3314      	adds	r3, #20
 8007f0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e3      	bne.n	8007eea <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	330c      	adds	r3, #12
 8007f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0310 	bic.w	r3, r3, #16
 8007f46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	330c      	adds	r3, #12
 8007f50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f54:	61fa      	str	r2, [r7, #28]
 8007f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	69b9      	ldr	r1, [r7, #24]
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	617b      	str	r3, [r7, #20]
   return(result);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e3      	bne.n	8007f30 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f847 	bl	8008008 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f7a:	e023      	b.n	8007fc4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d009      	beq.n	8007f9c <HAL_UART_IRQHandler+0x524>
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f910 	bl	80081ba <UART_Transmit_IT>
    return;
 8007f9a:	e014      	b.n	8007fc6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00e      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x54e>
 8007fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d008      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f950 	bl	800825a <UART_EndTransmit_IT>
    return;
 8007fba:	e004      	b.n	8007fc6 <HAL_UART_IRQHandler+0x54e>
    return;
 8007fbc:	bf00      	nop
 8007fbe:	e002      	b.n	8007fc6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007fc0:	bf00      	nop
 8007fc2:	e000      	b.n	8007fc6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007fc4:	bf00      	nop
  }
}
 8007fc6:	37e8      	adds	r7, #232	@ 0xe8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008030:	e03b      	b.n	80080aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d037      	beq.n	80080aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803a:	f7fa fce3 	bl	8002a04 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	6a3a      	ldr	r2, [r7, #32]
 8008046:	429a      	cmp	r2, r3
 8008048:	d302      	bcc.n	8008050 <UART_WaitOnFlagUntilTimeout+0x30>
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e03a      	b.n	80080ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d023      	beq.n	80080aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2b80      	cmp	r3, #128	@ 0x80
 8008066:	d020      	beq.n	80080aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b40      	cmp	r3, #64	@ 0x40
 800806c:	d01d      	beq.n	80080aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b08      	cmp	r3, #8
 800807a:	d116      	bne.n	80080aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800807c:	2300      	movs	r3, #0
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 f81d 	bl	80080d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2208      	movs	r2, #8
 800809c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e00f      	b.n	80080ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	4013      	ands	r3, r2
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	bf0c      	ite	eq
 80080ba:	2301      	moveq	r3, #1
 80080bc:	2300      	movne	r3, #0
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	461a      	mov	r2, r3
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d0b4      	beq.n	8008032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b095      	sub	sp, #84	@ 0x54
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	330c      	adds	r3, #12
 80080e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	330c      	adds	r3, #12
 80080f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80080fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e5      	bne.n	80080da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3314      	adds	r3, #20
 8008114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	61fb      	str	r3, [r7, #28]
   return(result);
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	f023 0301 	bic.w	r3, r3, #1
 8008124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3314      	adds	r3, #20
 800812c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800812e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e5      	bne.n	800810e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008146:	2b01      	cmp	r3, #1
 8008148:	d119      	bne.n	800817e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	330c      	adds	r3, #12
 8008150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	e853 3f00 	ldrex	r3, [r3]
 8008158:	60bb      	str	r3, [r7, #8]
   return(result);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f023 0310 	bic.w	r3, r3, #16
 8008160:	647b      	str	r3, [r7, #68]	@ 0x44
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	330c      	adds	r3, #12
 8008168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800816a:	61ba      	str	r2, [r7, #24]
 800816c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816e:	6979      	ldr	r1, [r7, #20]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	613b      	str	r3, [r7, #16]
   return(result);
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e5      	bne.n	800814a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800818c:	bf00      	nop
 800818e:	3754      	adds	r7, #84	@ 0x54
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f7ff ff21 	bl	8007ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b21      	cmp	r3, #33	@ 0x21
 80081cc:	d13e      	bne.n	800824c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d6:	d114      	bne.n	8008202 <UART_Transmit_IT+0x48>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d110      	bne.n	8008202 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	1c9a      	adds	r2, r3, #2
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	621a      	str	r2, [r3, #32]
 8008200:	e008      	b.n	8008214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	1c59      	adds	r1, r3, #1
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6211      	str	r1, [r2, #32]
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29b      	uxth	r3, r3
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4619      	mov	r1, r3
 8008222:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10f      	bne.n	8008248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	e000      	b.n	800824e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800824c:	2302      	movs	r3, #2
  }
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b082      	sub	sp, #8
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008270:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2220      	movs	r2, #32
 8008276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fea6 	bl	8007fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b08c      	sub	sp, #48	@ 0x30
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008296:	2300      	movs	r3, #0
 8008298:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b22      	cmp	r3, #34	@ 0x22
 80082a4:	f040 80aa 	bne.w	80083fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b0:	d115      	bne.n	80082de <UART_Receive_IT+0x54>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d111      	bne.n	80082de <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082be:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d6:	1c9a      	adds	r2, r3, #2
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	629a      	str	r2, [r3, #40]	@ 0x28
 80082dc:	e024      	b.n	8008328 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ec:	d007      	beq.n	80082fe <UART_Receive_IT+0x74>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10a      	bne.n	800830c <UART_Receive_IT+0x82>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d106      	bne.n	800830c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	b2da      	uxtb	r2, r3
 8008306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e008      	b.n	800831e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008318:	b2da      	uxtb	r2, r3
 800831a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800832c:	b29b      	uxth	r3, r3
 800832e:	3b01      	subs	r3, #1
 8008330:	b29b      	uxth	r3, r3
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	4619      	mov	r1, r3
 8008336:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008338:	2b00      	cmp	r3, #0
 800833a:	d15d      	bne.n	80083f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0220 	bic.w	r2, r2, #32
 800834a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800835a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695a      	ldr	r2, [r3, #20]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0201 	bic.w	r2, r2, #1
 800836a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800837e:	2b01      	cmp	r3, #1
 8008380:	d135      	bne.n	80083ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	330c      	adds	r3, #12
 800838e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	613b      	str	r3, [r7, #16]
   return(result);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f023 0310 	bic.w	r3, r3, #16
 800839e:	627b      	str	r3, [r7, #36]	@ 0x24
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	330c      	adds	r3, #12
 80083a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083a8:	623a      	str	r2, [r7, #32]
 80083aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	69f9      	ldr	r1, [r7, #28]
 80083ae:	6a3a      	ldr	r2, [r7, #32]
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e5      	bne.n	8008388 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0310 	and.w	r3, r3, #16
 80083c6:	2b10      	cmp	r3, #16
 80083c8:	d10a      	bne.n	80083e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff fe0e 	bl	8008008 <HAL_UARTEx_RxEventCallback>
 80083ec:	e002      	b.n	80083f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff fdf6 	bl	8007fe0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	e002      	b.n	80083fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	e000      	b.n	80083fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80083fc:	2302      	movs	r3, #2
  }
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3730      	adds	r7, #48	@ 0x30
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800840c:	b0c0      	sub	sp, #256	@ 0x100
 800840e:	af00      	add	r7, sp, #0
 8008410:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008424:	68d9      	ldr	r1, [r3, #12]
 8008426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	ea40 0301 	orr.w	r3, r0, r1
 8008430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	431a      	orrs	r2, r3
 8008440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	431a      	orrs	r2, r3
 8008448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008460:	f021 010c 	bic.w	r1, r1, #12
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800846e:	430b      	orrs	r3, r1
 8008470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800847e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008482:	6999      	ldr	r1, [r3, #24]
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	ea40 0301 	orr.w	r3, r0, r1
 800848e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	4b8f      	ldr	r3, [pc, #572]	@ (80086d4 <UART_SetConfig+0x2cc>)
 8008498:	429a      	cmp	r2, r3
 800849a:	d005      	beq.n	80084a8 <UART_SetConfig+0xa0>
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	4b8d      	ldr	r3, [pc, #564]	@ (80086d8 <UART_SetConfig+0x2d0>)
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d104      	bne.n	80084b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084a8:	f7fe f920 	bl	80066ec <HAL_RCC_GetPCLK2Freq>
 80084ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80084b0:	e003      	b.n	80084ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084b2:	f7fe f907 	bl	80066c4 <HAL_RCC_GetPCLK1Freq>
 80084b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084c4:	f040 810c 	bne.w	80086e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80084d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80084d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80084da:	4622      	mov	r2, r4
 80084dc:	462b      	mov	r3, r5
 80084de:	1891      	adds	r1, r2, r2
 80084e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80084e2:	415b      	adcs	r3, r3
 80084e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80084ea:	4621      	mov	r1, r4
 80084ec:	eb12 0801 	adds.w	r8, r2, r1
 80084f0:	4629      	mov	r1, r5
 80084f2:	eb43 0901 	adc.w	r9, r3, r1
 80084f6:	f04f 0200 	mov.w	r2, #0
 80084fa:	f04f 0300 	mov.w	r3, #0
 80084fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800850a:	4690      	mov	r8, r2
 800850c:	4699      	mov	r9, r3
 800850e:	4623      	mov	r3, r4
 8008510:	eb18 0303 	adds.w	r3, r8, r3
 8008514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008518:	462b      	mov	r3, r5
 800851a:	eb49 0303 	adc.w	r3, r9, r3
 800851e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800852e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008536:	460b      	mov	r3, r1
 8008538:	18db      	adds	r3, r3, r3
 800853a:	653b      	str	r3, [r7, #80]	@ 0x50
 800853c:	4613      	mov	r3, r2
 800853e:	eb42 0303 	adc.w	r3, r2, r3
 8008542:	657b      	str	r3, [r7, #84]	@ 0x54
 8008544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800854c:	f7f8 fbbc 	bl	8000cc8 <__aeabi_uldivmod>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4b61      	ldr	r3, [pc, #388]	@ (80086dc <UART_SetConfig+0x2d4>)
 8008556:	fba3 2302 	umull	r2, r3, r3, r2
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	011c      	lsls	r4, r3, #4
 800855e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008562:	2200      	movs	r2, #0
 8008564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008568:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800856c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008570:	4642      	mov	r2, r8
 8008572:	464b      	mov	r3, r9
 8008574:	1891      	adds	r1, r2, r2
 8008576:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008578:	415b      	adcs	r3, r3
 800857a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800857c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008580:	4641      	mov	r1, r8
 8008582:	eb12 0a01 	adds.w	sl, r2, r1
 8008586:	4649      	mov	r1, r9
 8008588:	eb43 0b01 	adc.w	fp, r3, r1
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800859c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085a0:	4692      	mov	sl, r2
 80085a2:	469b      	mov	fp, r3
 80085a4:	4643      	mov	r3, r8
 80085a6:	eb1a 0303 	adds.w	r3, sl, r3
 80085aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085ae:	464b      	mov	r3, r9
 80085b0:	eb4b 0303 	adc.w	r3, fp, r3
 80085b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80085c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80085cc:	460b      	mov	r3, r1
 80085ce:	18db      	adds	r3, r3, r3
 80085d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80085d2:	4613      	mov	r3, r2
 80085d4:	eb42 0303 	adc.w	r3, r2, r3
 80085d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80085de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80085e2:	f7f8 fb71 	bl	8000cc8 <__aeabi_uldivmod>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4611      	mov	r1, r2
 80085ec:	4b3b      	ldr	r3, [pc, #236]	@ (80086dc <UART_SetConfig+0x2d4>)
 80085ee:	fba3 2301 	umull	r2, r3, r3, r1
 80085f2:	095b      	lsrs	r3, r3, #5
 80085f4:	2264      	movs	r2, #100	@ 0x64
 80085f6:	fb02 f303 	mul.w	r3, r2, r3
 80085fa:	1acb      	subs	r3, r1, r3
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008602:	4b36      	ldr	r3, [pc, #216]	@ (80086dc <UART_SetConfig+0x2d4>)
 8008604:	fba3 2302 	umull	r2, r3, r3, r2
 8008608:	095b      	lsrs	r3, r3, #5
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008610:	441c      	add	r4, r3
 8008612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008616:	2200      	movs	r2, #0
 8008618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800861c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008624:	4642      	mov	r2, r8
 8008626:	464b      	mov	r3, r9
 8008628:	1891      	adds	r1, r2, r2
 800862a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800862c:	415b      	adcs	r3, r3
 800862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008634:	4641      	mov	r1, r8
 8008636:	1851      	adds	r1, r2, r1
 8008638:	6339      	str	r1, [r7, #48]	@ 0x30
 800863a:	4649      	mov	r1, r9
 800863c:	414b      	adcs	r3, r1
 800863e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008640:	f04f 0200 	mov.w	r2, #0
 8008644:	f04f 0300 	mov.w	r3, #0
 8008648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800864c:	4659      	mov	r1, fp
 800864e:	00cb      	lsls	r3, r1, #3
 8008650:	4651      	mov	r1, sl
 8008652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008656:	4651      	mov	r1, sl
 8008658:	00ca      	lsls	r2, r1, #3
 800865a:	4610      	mov	r0, r2
 800865c:	4619      	mov	r1, r3
 800865e:	4603      	mov	r3, r0
 8008660:	4642      	mov	r2, r8
 8008662:	189b      	adds	r3, r3, r2
 8008664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008668:	464b      	mov	r3, r9
 800866a:	460a      	mov	r2, r1
 800866c:	eb42 0303 	adc.w	r3, r2, r3
 8008670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008680:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008688:	460b      	mov	r3, r1
 800868a:	18db      	adds	r3, r3, r3
 800868c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800868e:	4613      	mov	r3, r2
 8008690:	eb42 0303 	adc.w	r3, r2, r3
 8008694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800869a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800869e:	f7f8 fb13 	bl	8000cc8 <__aeabi_uldivmod>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <UART_SetConfig+0x2d4>)
 80086a8:	fba3 1302 	umull	r1, r3, r3, r2
 80086ac:	095b      	lsrs	r3, r3, #5
 80086ae:	2164      	movs	r1, #100	@ 0x64
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	3332      	adds	r3, #50	@ 0x32
 80086ba:	4a08      	ldr	r2, [pc, #32]	@ (80086dc <UART_SetConfig+0x2d4>)
 80086bc:	fba2 2303 	umull	r2, r3, r2, r3
 80086c0:	095b      	lsrs	r3, r3, #5
 80086c2:	f003 0207 	and.w	r2, r3, #7
 80086c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4422      	add	r2, r4
 80086ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086d0:	e106      	b.n	80088e0 <UART_SetConfig+0x4d8>
 80086d2:	bf00      	nop
 80086d4:	40011000 	.word	0x40011000
 80086d8:	40011400 	.word	0x40011400
 80086dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086e4:	2200      	movs	r2, #0
 80086e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80086ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80086ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80086f2:	4642      	mov	r2, r8
 80086f4:	464b      	mov	r3, r9
 80086f6:	1891      	adds	r1, r2, r2
 80086f8:	6239      	str	r1, [r7, #32]
 80086fa:	415b      	adcs	r3, r3
 80086fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80086fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008702:	4641      	mov	r1, r8
 8008704:	1854      	adds	r4, r2, r1
 8008706:	4649      	mov	r1, r9
 8008708:	eb43 0501 	adc.w	r5, r3, r1
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	00eb      	lsls	r3, r5, #3
 8008716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800871a:	00e2      	lsls	r2, r4, #3
 800871c:	4614      	mov	r4, r2
 800871e:	461d      	mov	r5, r3
 8008720:	4643      	mov	r3, r8
 8008722:	18e3      	adds	r3, r4, r3
 8008724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008728:	464b      	mov	r3, r9
 800872a:	eb45 0303 	adc.w	r3, r5, r3
 800872e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800873e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008742:	f04f 0200 	mov.w	r2, #0
 8008746:	f04f 0300 	mov.w	r3, #0
 800874a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800874e:	4629      	mov	r1, r5
 8008750:	008b      	lsls	r3, r1, #2
 8008752:	4621      	mov	r1, r4
 8008754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008758:	4621      	mov	r1, r4
 800875a:	008a      	lsls	r2, r1, #2
 800875c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008760:	f7f8 fab2 	bl	8000cc8 <__aeabi_uldivmod>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4b60      	ldr	r3, [pc, #384]	@ (80088ec <UART_SetConfig+0x4e4>)
 800876a:	fba3 2302 	umull	r2, r3, r3, r2
 800876e:	095b      	lsrs	r3, r3, #5
 8008770:	011c      	lsls	r4, r3, #4
 8008772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008776:	2200      	movs	r2, #0
 8008778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800877c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008784:	4642      	mov	r2, r8
 8008786:	464b      	mov	r3, r9
 8008788:	1891      	adds	r1, r2, r2
 800878a:	61b9      	str	r1, [r7, #24]
 800878c:	415b      	adcs	r3, r3
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008794:	4641      	mov	r1, r8
 8008796:	1851      	adds	r1, r2, r1
 8008798:	6139      	str	r1, [r7, #16]
 800879a:	4649      	mov	r1, r9
 800879c:	414b      	adcs	r3, r1
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087ac:	4659      	mov	r1, fp
 80087ae:	00cb      	lsls	r3, r1, #3
 80087b0:	4651      	mov	r1, sl
 80087b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087b6:	4651      	mov	r1, sl
 80087b8:	00ca      	lsls	r2, r1, #3
 80087ba:	4610      	mov	r0, r2
 80087bc:	4619      	mov	r1, r3
 80087be:	4603      	mov	r3, r0
 80087c0:	4642      	mov	r2, r8
 80087c2:	189b      	adds	r3, r3, r2
 80087c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087c8:	464b      	mov	r3, r9
 80087ca:	460a      	mov	r2, r1
 80087cc:	eb42 0303 	adc.w	r3, r2, r3
 80087d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	f04f 0300 	mov.w	r3, #0
 80087e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80087ec:	4649      	mov	r1, r9
 80087ee:	008b      	lsls	r3, r1, #2
 80087f0:	4641      	mov	r1, r8
 80087f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087f6:	4641      	mov	r1, r8
 80087f8:	008a      	lsls	r2, r1, #2
 80087fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80087fe:	f7f8 fa63 	bl	8000cc8 <__aeabi_uldivmod>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4611      	mov	r1, r2
 8008808:	4b38      	ldr	r3, [pc, #224]	@ (80088ec <UART_SetConfig+0x4e4>)
 800880a:	fba3 2301 	umull	r2, r3, r3, r1
 800880e:	095b      	lsrs	r3, r3, #5
 8008810:	2264      	movs	r2, #100	@ 0x64
 8008812:	fb02 f303 	mul.w	r3, r2, r3
 8008816:	1acb      	subs	r3, r1, r3
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	3332      	adds	r3, #50	@ 0x32
 800881c:	4a33      	ldr	r2, [pc, #204]	@ (80088ec <UART_SetConfig+0x4e4>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	095b      	lsrs	r3, r3, #5
 8008824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008828:	441c      	add	r4, r3
 800882a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800882e:	2200      	movs	r2, #0
 8008830:	673b      	str	r3, [r7, #112]	@ 0x70
 8008832:	677a      	str	r2, [r7, #116]	@ 0x74
 8008834:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008838:	4642      	mov	r2, r8
 800883a:	464b      	mov	r3, r9
 800883c:	1891      	adds	r1, r2, r2
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	415b      	adcs	r3, r3
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008848:	4641      	mov	r1, r8
 800884a:	1851      	adds	r1, r2, r1
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	4649      	mov	r1, r9
 8008850:	414b      	adcs	r3, r1
 8008852:	607b      	str	r3, [r7, #4]
 8008854:	f04f 0200 	mov.w	r2, #0
 8008858:	f04f 0300 	mov.w	r3, #0
 800885c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008860:	4659      	mov	r1, fp
 8008862:	00cb      	lsls	r3, r1, #3
 8008864:	4651      	mov	r1, sl
 8008866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800886a:	4651      	mov	r1, sl
 800886c:	00ca      	lsls	r2, r1, #3
 800886e:	4610      	mov	r0, r2
 8008870:	4619      	mov	r1, r3
 8008872:	4603      	mov	r3, r0
 8008874:	4642      	mov	r2, r8
 8008876:	189b      	adds	r3, r3, r2
 8008878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800887a:	464b      	mov	r3, r9
 800887c:	460a      	mov	r2, r1
 800887e:	eb42 0303 	adc.w	r3, r2, r3
 8008882:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	663b      	str	r3, [r7, #96]	@ 0x60
 800888e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	f04f 0300 	mov.w	r3, #0
 8008898:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800889c:	4649      	mov	r1, r9
 800889e:	008b      	lsls	r3, r1, #2
 80088a0:	4641      	mov	r1, r8
 80088a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088a6:	4641      	mov	r1, r8
 80088a8:	008a      	lsls	r2, r1, #2
 80088aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80088ae:	f7f8 fa0b 	bl	8000cc8 <__aeabi_uldivmod>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4b0d      	ldr	r3, [pc, #52]	@ (80088ec <UART_SetConfig+0x4e4>)
 80088b8:	fba3 1302 	umull	r1, r3, r3, r2
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	2164      	movs	r1, #100	@ 0x64
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	3332      	adds	r3, #50	@ 0x32
 80088ca:	4a08      	ldr	r2, [pc, #32]	@ (80088ec <UART_SetConfig+0x4e4>)
 80088cc:	fba2 2303 	umull	r2, r3, r2, r3
 80088d0:	095b      	lsrs	r3, r3, #5
 80088d2:	f003 020f 	and.w	r2, r3, #15
 80088d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4422      	add	r2, r4
 80088de:	609a      	str	r2, [r3, #8]
}
 80088e0:	bf00      	nop
 80088e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80088e6:	46bd      	mov	sp, r7
 80088e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ec:	51eb851f 	.word	0x51eb851f

080088f0 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e016      	b.n	8008930 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7f9 fe6a 	bl	80025dc <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008914:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691a      	ldr	r2, [r3, #16]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	ea42 0103 	orr.w	r1, r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <__cvt>:
 8008938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800893c:	ec57 6b10 	vmov	r6, r7, d0
 8008940:	2f00      	cmp	r7, #0
 8008942:	460c      	mov	r4, r1
 8008944:	4619      	mov	r1, r3
 8008946:	463b      	mov	r3, r7
 8008948:	bfbb      	ittet	lt
 800894a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800894e:	461f      	movlt	r7, r3
 8008950:	2300      	movge	r3, #0
 8008952:	232d      	movlt	r3, #45	@ 0x2d
 8008954:	700b      	strb	r3, [r1, #0]
 8008956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008958:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800895c:	4691      	mov	r9, r2
 800895e:	f023 0820 	bic.w	r8, r3, #32
 8008962:	bfbc      	itt	lt
 8008964:	4632      	movlt	r2, r6
 8008966:	4616      	movlt	r6, r2
 8008968:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800896c:	d005      	beq.n	800897a <__cvt+0x42>
 800896e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008972:	d100      	bne.n	8008976 <__cvt+0x3e>
 8008974:	3401      	adds	r4, #1
 8008976:	2102      	movs	r1, #2
 8008978:	e000      	b.n	800897c <__cvt+0x44>
 800897a:	2103      	movs	r1, #3
 800897c:	ab03      	add	r3, sp, #12
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	ab02      	add	r3, sp, #8
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	ec47 6b10 	vmov	d0, r6, r7
 8008988:	4653      	mov	r3, sl
 800898a:	4622      	mov	r2, r4
 800898c:	f001 fa30 	bl	8009df0 <_dtoa_r>
 8008990:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008994:	4605      	mov	r5, r0
 8008996:	d119      	bne.n	80089cc <__cvt+0x94>
 8008998:	f019 0f01 	tst.w	r9, #1
 800899c:	d00e      	beq.n	80089bc <__cvt+0x84>
 800899e:	eb00 0904 	add.w	r9, r0, r4
 80089a2:	2200      	movs	r2, #0
 80089a4:	2300      	movs	r3, #0
 80089a6:	4630      	mov	r0, r6
 80089a8:	4639      	mov	r1, r7
 80089aa:	f7f8 f8ad 	bl	8000b08 <__aeabi_dcmpeq>
 80089ae:	b108      	cbz	r0, 80089b4 <__cvt+0x7c>
 80089b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80089b4:	2230      	movs	r2, #48	@ 0x30
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	454b      	cmp	r3, r9
 80089ba:	d31e      	bcc.n	80089fa <__cvt+0xc2>
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089c0:	1b5b      	subs	r3, r3, r5
 80089c2:	4628      	mov	r0, r5
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	b004      	add	sp, #16
 80089c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089d0:	eb00 0904 	add.w	r9, r0, r4
 80089d4:	d1e5      	bne.n	80089a2 <__cvt+0x6a>
 80089d6:	7803      	ldrb	r3, [r0, #0]
 80089d8:	2b30      	cmp	r3, #48	@ 0x30
 80089da:	d10a      	bne.n	80089f2 <__cvt+0xba>
 80089dc:	2200      	movs	r2, #0
 80089de:	2300      	movs	r3, #0
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f8 f890 	bl	8000b08 <__aeabi_dcmpeq>
 80089e8:	b918      	cbnz	r0, 80089f2 <__cvt+0xba>
 80089ea:	f1c4 0401 	rsb	r4, r4, #1
 80089ee:	f8ca 4000 	str.w	r4, [sl]
 80089f2:	f8da 3000 	ldr.w	r3, [sl]
 80089f6:	4499      	add	r9, r3
 80089f8:	e7d3      	b.n	80089a2 <__cvt+0x6a>
 80089fa:	1c59      	adds	r1, r3, #1
 80089fc:	9103      	str	r1, [sp, #12]
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	e7d9      	b.n	80089b6 <__cvt+0x7e>

08008a02 <__exponent>:
 8008a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a04:	2900      	cmp	r1, #0
 8008a06:	bfba      	itte	lt
 8008a08:	4249      	neglt	r1, r1
 8008a0a:	232d      	movlt	r3, #45	@ 0x2d
 8008a0c:	232b      	movge	r3, #43	@ 0x2b
 8008a0e:	2909      	cmp	r1, #9
 8008a10:	7002      	strb	r2, [r0, #0]
 8008a12:	7043      	strb	r3, [r0, #1]
 8008a14:	dd29      	ble.n	8008a6a <__exponent+0x68>
 8008a16:	f10d 0307 	add.w	r3, sp, #7
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	270a      	movs	r7, #10
 8008a1e:	461a      	mov	r2, r3
 8008a20:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a24:	fb07 1416 	mls	r4, r7, r6, r1
 8008a28:	3430      	adds	r4, #48	@ 0x30
 8008a2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a2e:	460c      	mov	r4, r1
 8008a30:	2c63      	cmp	r4, #99	@ 0x63
 8008a32:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a36:	4631      	mov	r1, r6
 8008a38:	dcf1      	bgt.n	8008a1e <__exponent+0x1c>
 8008a3a:	3130      	adds	r1, #48	@ 0x30
 8008a3c:	1e94      	subs	r4, r2, #2
 8008a3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a42:	1c41      	adds	r1, r0, #1
 8008a44:	4623      	mov	r3, r4
 8008a46:	42ab      	cmp	r3, r5
 8008a48:	d30a      	bcc.n	8008a60 <__exponent+0x5e>
 8008a4a:	f10d 0309 	add.w	r3, sp, #9
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	42ac      	cmp	r4, r5
 8008a52:	bf88      	it	hi
 8008a54:	2300      	movhi	r3, #0
 8008a56:	3302      	adds	r3, #2
 8008a58:	4403      	add	r3, r0
 8008a5a:	1a18      	subs	r0, r3, r0
 8008a5c:	b003      	add	sp, #12
 8008a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a60:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a64:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008a68:	e7ed      	b.n	8008a46 <__exponent+0x44>
 8008a6a:	2330      	movs	r3, #48	@ 0x30
 8008a6c:	3130      	adds	r1, #48	@ 0x30
 8008a6e:	7083      	strb	r3, [r0, #2]
 8008a70:	70c1      	strb	r1, [r0, #3]
 8008a72:	1d03      	adds	r3, r0, #4
 8008a74:	e7f1      	b.n	8008a5a <__exponent+0x58>
	...

08008a78 <_printf_float>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	b08d      	sub	sp, #52	@ 0x34
 8008a7e:	460c      	mov	r4, r1
 8008a80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008a84:	4616      	mov	r6, r2
 8008a86:	461f      	mov	r7, r3
 8008a88:	4605      	mov	r5, r0
 8008a8a:	f001 f8a9 	bl	8009be0 <_localeconv_r>
 8008a8e:	6803      	ldr	r3, [r0, #0]
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7f7 fc0c 	bl	80002b0 <strlen>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008aa0:	9005      	str	r0, [sp, #20]
 8008aa2:	3307      	adds	r3, #7
 8008aa4:	f023 0307 	bic.w	r3, r3, #7
 8008aa8:	f103 0208 	add.w	r2, r3, #8
 8008aac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ab0:	f8d4 b000 	ldr.w	fp, [r4]
 8008ab4:	f8c8 2000 	str.w	r2, [r8]
 8008ab8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008abc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008ac0:	9307      	str	r3, [sp, #28]
 8008ac2:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ac6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ace:	4b9c      	ldr	r3, [pc, #624]	@ (8008d40 <_printf_float+0x2c8>)
 8008ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad4:	f7f8 f84a 	bl	8000b6c <__aeabi_dcmpun>
 8008ad8:	bb70      	cbnz	r0, 8008b38 <_printf_float+0xc0>
 8008ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ade:	4b98      	ldr	r3, [pc, #608]	@ (8008d40 <_printf_float+0x2c8>)
 8008ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae4:	f7f8 f824 	bl	8000b30 <__aeabi_dcmple>
 8008ae8:	bb30      	cbnz	r0, 8008b38 <_printf_float+0xc0>
 8008aea:	2200      	movs	r2, #0
 8008aec:	2300      	movs	r3, #0
 8008aee:	4640      	mov	r0, r8
 8008af0:	4649      	mov	r1, r9
 8008af2:	f7f8 f813 	bl	8000b1c <__aeabi_dcmplt>
 8008af6:	b110      	cbz	r0, 8008afe <_printf_float+0x86>
 8008af8:	232d      	movs	r3, #45	@ 0x2d
 8008afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008afe:	4a91      	ldr	r2, [pc, #580]	@ (8008d44 <_printf_float+0x2cc>)
 8008b00:	4b91      	ldr	r3, [pc, #580]	@ (8008d48 <_printf_float+0x2d0>)
 8008b02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b06:	bf8c      	ite	hi
 8008b08:	4690      	movhi	r8, r2
 8008b0a:	4698      	movls	r8, r3
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	6123      	str	r3, [r4, #16]
 8008b10:	f02b 0304 	bic.w	r3, fp, #4
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	f04f 0900 	mov.w	r9, #0
 8008b1a:	9700      	str	r7, [sp, #0]
 8008b1c:	4633      	mov	r3, r6
 8008b1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b20:	4621      	mov	r1, r4
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 f9d2 	bl	8008ecc <_printf_common>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	f040 808d 	bne.w	8008c48 <_printf_float+0x1d0>
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b32:	b00d      	add	sp, #52	@ 0x34
 8008b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b38:	4642      	mov	r2, r8
 8008b3a:	464b      	mov	r3, r9
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	4649      	mov	r1, r9
 8008b40:	f7f8 f814 	bl	8000b6c <__aeabi_dcmpun>
 8008b44:	b140      	cbz	r0, 8008b58 <_printf_float+0xe0>
 8008b46:	464b      	mov	r3, r9
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	bfbc      	itt	lt
 8008b4c:	232d      	movlt	r3, #45	@ 0x2d
 8008b4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b52:	4a7e      	ldr	r2, [pc, #504]	@ (8008d4c <_printf_float+0x2d4>)
 8008b54:	4b7e      	ldr	r3, [pc, #504]	@ (8008d50 <_printf_float+0x2d8>)
 8008b56:	e7d4      	b.n	8008b02 <_printf_float+0x8a>
 8008b58:	6863      	ldr	r3, [r4, #4]
 8008b5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008b5e:	9206      	str	r2, [sp, #24]
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	d13b      	bne.n	8008bdc <_printf_float+0x164>
 8008b64:	2306      	movs	r3, #6
 8008b66:	6063      	str	r3, [r4, #4]
 8008b68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6022      	str	r2, [r4, #0]
 8008b70:	9303      	str	r3, [sp, #12]
 8008b72:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b74:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008b78:	ab09      	add	r3, sp, #36	@ 0x24
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	6861      	ldr	r1, [r4, #4]
 8008b7e:	ec49 8b10 	vmov	d0, r8, r9
 8008b82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008b86:	4628      	mov	r0, r5
 8008b88:	f7ff fed6 	bl	8008938 <__cvt>
 8008b8c:	9b06      	ldr	r3, [sp, #24]
 8008b8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b90:	2b47      	cmp	r3, #71	@ 0x47
 8008b92:	4680      	mov	r8, r0
 8008b94:	d129      	bne.n	8008bea <_printf_float+0x172>
 8008b96:	1cc8      	adds	r0, r1, #3
 8008b98:	db02      	blt.n	8008ba0 <_printf_float+0x128>
 8008b9a:	6863      	ldr	r3, [r4, #4]
 8008b9c:	4299      	cmp	r1, r3
 8008b9e:	dd41      	ble.n	8008c24 <_printf_float+0x1ac>
 8008ba0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ba4:	fa5f fa8a 	uxtb.w	sl, sl
 8008ba8:	3901      	subs	r1, #1
 8008baa:	4652      	mov	r2, sl
 8008bac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008bb0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008bb2:	f7ff ff26 	bl	8008a02 <__exponent>
 8008bb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bb8:	1813      	adds	r3, r2, r0
 8008bba:	2a01      	cmp	r2, #1
 8008bbc:	4681      	mov	r9, r0
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	dc02      	bgt.n	8008bc8 <_printf_float+0x150>
 8008bc2:	6822      	ldr	r2, [r4, #0]
 8008bc4:	07d2      	lsls	r2, r2, #31
 8008bc6:	d501      	bpl.n	8008bcc <_printf_float+0x154>
 8008bc8:	3301      	adds	r3, #1
 8008bca:	6123      	str	r3, [r4, #16]
 8008bcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0a2      	beq.n	8008b1a <_printf_float+0xa2>
 8008bd4:	232d      	movs	r3, #45	@ 0x2d
 8008bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bda:	e79e      	b.n	8008b1a <_printf_float+0xa2>
 8008bdc:	9a06      	ldr	r2, [sp, #24]
 8008bde:	2a47      	cmp	r2, #71	@ 0x47
 8008be0:	d1c2      	bne.n	8008b68 <_printf_float+0xf0>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1c0      	bne.n	8008b68 <_printf_float+0xf0>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e7bd      	b.n	8008b66 <_printf_float+0xee>
 8008bea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008bee:	d9db      	bls.n	8008ba8 <_printf_float+0x130>
 8008bf0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008bf4:	d118      	bne.n	8008c28 <_printf_float+0x1b0>
 8008bf6:	2900      	cmp	r1, #0
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	dd0b      	ble.n	8008c14 <_printf_float+0x19c>
 8008bfc:	6121      	str	r1, [r4, #16]
 8008bfe:	b913      	cbnz	r3, 8008c06 <_printf_float+0x18e>
 8008c00:	6822      	ldr	r2, [r4, #0]
 8008c02:	07d0      	lsls	r0, r2, #31
 8008c04:	d502      	bpl.n	8008c0c <_printf_float+0x194>
 8008c06:	3301      	adds	r3, #1
 8008c08:	440b      	add	r3, r1
 8008c0a:	6123      	str	r3, [r4, #16]
 8008c0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c0e:	f04f 0900 	mov.w	r9, #0
 8008c12:	e7db      	b.n	8008bcc <_printf_float+0x154>
 8008c14:	b913      	cbnz	r3, 8008c1c <_printf_float+0x1a4>
 8008c16:	6822      	ldr	r2, [r4, #0]
 8008c18:	07d2      	lsls	r2, r2, #31
 8008c1a:	d501      	bpl.n	8008c20 <_printf_float+0x1a8>
 8008c1c:	3302      	adds	r3, #2
 8008c1e:	e7f4      	b.n	8008c0a <_printf_float+0x192>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e7f2      	b.n	8008c0a <_printf_float+0x192>
 8008c24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	db05      	blt.n	8008c3a <_printf_float+0x1c2>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	6121      	str	r1, [r4, #16]
 8008c32:	07d8      	lsls	r0, r3, #31
 8008c34:	d5ea      	bpl.n	8008c0c <_printf_float+0x194>
 8008c36:	1c4b      	adds	r3, r1, #1
 8008c38:	e7e7      	b.n	8008c0a <_printf_float+0x192>
 8008c3a:	2900      	cmp	r1, #0
 8008c3c:	bfd4      	ite	le
 8008c3e:	f1c1 0202 	rsble	r2, r1, #2
 8008c42:	2201      	movgt	r2, #1
 8008c44:	4413      	add	r3, r2
 8008c46:	e7e0      	b.n	8008c0a <_printf_float+0x192>
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	055a      	lsls	r2, r3, #21
 8008c4c:	d407      	bmi.n	8008c5e <_printf_float+0x1e6>
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	4642      	mov	r2, r8
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d12b      	bne.n	8008cb4 <_printf_float+0x23c>
 8008c5c:	e767      	b.n	8008b2e <_printf_float+0xb6>
 8008c5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c62:	f240 80dd 	bls.w	8008e20 <_printf_float+0x3a8>
 8008c66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f7f7 ff4b 	bl	8000b08 <__aeabi_dcmpeq>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d033      	beq.n	8008cde <_printf_float+0x266>
 8008c76:	4a37      	ldr	r2, [pc, #220]	@ (8008d54 <_printf_float+0x2dc>)
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	47b8      	blx	r7
 8008c80:	3001      	adds	r0, #1
 8008c82:	f43f af54 	beq.w	8008b2e <_printf_float+0xb6>
 8008c86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008c8a:	4543      	cmp	r3, r8
 8008c8c:	db02      	blt.n	8008c94 <_printf_float+0x21c>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	07d8      	lsls	r0, r3, #31
 8008c92:	d50f      	bpl.n	8008cb4 <_printf_float+0x23c>
 8008c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	47b8      	blx	r7
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	f43f af45 	beq.w	8008b2e <_printf_float+0xb6>
 8008ca4:	f04f 0900 	mov.w	r9, #0
 8008ca8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cac:	f104 0a1a 	add.w	sl, r4, #26
 8008cb0:	45c8      	cmp	r8, r9
 8008cb2:	dc09      	bgt.n	8008cc8 <_printf_float+0x250>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	079b      	lsls	r3, r3, #30
 8008cb8:	f100 8103 	bmi.w	8008ec2 <_printf_float+0x44a>
 8008cbc:	68e0      	ldr	r0, [r4, #12]
 8008cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cc0:	4298      	cmp	r0, r3
 8008cc2:	bfb8      	it	lt
 8008cc4:	4618      	movlt	r0, r3
 8008cc6:	e734      	b.n	8008b32 <_printf_float+0xba>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	4652      	mov	r2, sl
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b8      	blx	r7
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	f43f af2b 	beq.w	8008b2e <_printf_float+0xb6>
 8008cd8:	f109 0901 	add.w	r9, r9, #1
 8008cdc:	e7e8      	b.n	8008cb0 <_printf_float+0x238>
 8008cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	dc39      	bgt.n	8008d58 <_printf_float+0x2e0>
 8008ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d54 <_printf_float+0x2dc>)
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f43f af1d 	beq.w	8008b2e <_printf_float+0xb6>
 8008cf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008cf8:	ea59 0303 	orrs.w	r3, r9, r3
 8008cfc:	d102      	bne.n	8008d04 <_printf_float+0x28c>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	07d9      	lsls	r1, r3, #31
 8008d02:	d5d7      	bpl.n	8008cb4 <_printf_float+0x23c>
 8008d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d08:	4631      	mov	r1, r6
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47b8      	blx	r7
 8008d0e:	3001      	adds	r0, #1
 8008d10:	f43f af0d 	beq.w	8008b2e <_printf_float+0xb6>
 8008d14:	f04f 0a00 	mov.w	sl, #0
 8008d18:	f104 0b1a 	add.w	fp, r4, #26
 8008d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1e:	425b      	negs	r3, r3
 8008d20:	4553      	cmp	r3, sl
 8008d22:	dc01      	bgt.n	8008d28 <_printf_float+0x2b0>
 8008d24:	464b      	mov	r3, r9
 8008d26:	e793      	b.n	8008c50 <_printf_float+0x1d8>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	465a      	mov	r2, fp
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	f43f aefb 	beq.w	8008b2e <_printf_float+0xb6>
 8008d38:	f10a 0a01 	add.w	sl, sl, #1
 8008d3c:	e7ee      	b.n	8008d1c <_printf_float+0x2a4>
 8008d3e:	bf00      	nop
 8008d40:	7fefffff 	.word	0x7fefffff
 8008d44:	0800d6e0 	.word	0x0800d6e0
 8008d48:	0800d6dc 	.word	0x0800d6dc
 8008d4c:	0800d6e8 	.word	0x0800d6e8
 8008d50:	0800d6e4 	.word	0x0800d6e4
 8008d54:	0800d6ec 	.word	0x0800d6ec
 8008d58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d5e:	4553      	cmp	r3, sl
 8008d60:	bfa8      	it	ge
 8008d62:	4653      	movge	r3, sl
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	4699      	mov	r9, r3
 8008d68:	dc36      	bgt.n	8008dd8 <_printf_float+0x360>
 8008d6a:	f04f 0b00 	mov.w	fp, #0
 8008d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d72:	f104 021a 	add.w	r2, r4, #26
 8008d76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d78:	9306      	str	r3, [sp, #24]
 8008d7a:	eba3 0309 	sub.w	r3, r3, r9
 8008d7e:	455b      	cmp	r3, fp
 8008d80:	dc31      	bgt.n	8008de6 <_printf_float+0x36e>
 8008d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d84:	459a      	cmp	sl, r3
 8008d86:	dc3a      	bgt.n	8008dfe <_printf_float+0x386>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	07da      	lsls	r2, r3, #31
 8008d8c:	d437      	bmi.n	8008dfe <_printf_float+0x386>
 8008d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d90:	ebaa 0903 	sub.w	r9, sl, r3
 8008d94:	9b06      	ldr	r3, [sp, #24]
 8008d96:	ebaa 0303 	sub.w	r3, sl, r3
 8008d9a:	4599      	cmp	r9, r3
 8008d9c:	bfa8      	it	ge
 8008d9e:	4699      	movge	r9, r3
 8008da0:	f1b9 0f00 	cmp.w	r9, #0
 8008da4:	dc33      	bgt.n	8008e0e <_printf_float+0x396>
 8008da6:	f04f 0800 	mov.w	r8, #0
 8008daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dae:	f104 0b1a 	add.w	fp, r4, #26
 8008db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db4:	ebaa 0303 	sub.w	r3, sl, r3
 8008db8:	eba3 0309 	sub.w	r3, r3, r9
 8008dbc:	4543      	cmp	r3, r8
 8008dbe:	f77f af79 	ble.w	8008cb4 <_printf_float+0x23c>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	465a      	mov	r2, fp
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b8      	blx	r7
 8008dcc:	3001      	adds	r0, #1
 8008dce:	f43f aeae 	beq.w	8008b2e <_printf_float+0xb6>
 8008dd2:	f108 0801 	add.w	r8, r8, #1
 8008dd6:	e7ec      	b.n	8008db2 <_printf_float+0x33a>
 8008dd8:	4642      	mov	r2, r8
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4628      	mov	r0, r5
 8008dde:	47b8      	blx	r7
 8008de0:	3001      	adds	r0, #1
 8008de2:	d1c2      	bne.n	8008d6a <_printf_float+0x2f2>
 8008de4:	e6a3      	b.n	8008b2e <_printf_float+0xb6>
 8008de6:	2301      	movs	r3, #1
 8008de8:	4631      	mov	r1, r6
 8008dea:	4628      	mov	r0, r5
 8008dec:	9206      	str	r2, [sp, #24]
 8008dee:	47b8      	blx	r7
 8008df0:	3001      	adds	r0, #1
 8008df2:	f43f ae9c 	beq.w	8008b2e <_printf_float+0xb6>
 8008df6:	9a06      	ldr	r2, [sp, #24]
 8008df8:	f10b 0b01 	add.w	fp, fp, #1
 8008dfc:	e7bb      	b.n	8008d76 <_printf_float+0x2fe>
 8008dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e02:	4631      	mov	r1, r6
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b8      	blx	r7
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d1c0      	bne.n	8008d8e <_printf_float+0x316>
 8008e0c:	e68f      	b.n	8008b2e <_printf_float+0xb6>
 8008e0e:	9a06      	ldr	r2, [sp, #24]
 8008e10:	464b      	mov	r3, r9
 8008e12:	4442      	add	r2, r8
 8008e14:	4631      	mov	r1, r6
 8008e16:	4628      	mov	r0, r5
 8008e18:	47b8      	blx	r7
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d1c3      	bne.n	8008da6 <_printf_float+0x32e>
 8008e1e:	e686      	b.n	8008b2e <_printf_float+0xb6>
 8008e20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e24:	f1ba 0f01 	cmp.w	sl, #1
 8008e28:	dc01      	bgt.n	8008e2e <_printf_float+0x3b6>
 8008e2a:	07db      	lsls	r3, r3, #31
 8008e2c:	d536      	bpl.n	8008e9c <_printf_float+0x424>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4642      	mov	r2, r8
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	f43f ae78 	beq.w	8008b2e <_printf_float+0xb6>
 8008e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e42:	4631      	mov	r1, r6
 8008e44:	4628      	mov	r0, r5
 8008e46:	47b8      	blx	r7
 8008e48:	3001      	adds	r0, #1
 8008e4a:	f43f ae70 	beq.w	8008b2e <_printf_float+0xb6>
 8008e4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e52:	2200      	movs	r2, #0
 8008e54:	2300      	movs	r3, #0
 8008e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e5a:	f7f7 fe55 	bl	8000b08 <__aeabi_dcmpeq>
 8008e5e:	b9c0      	cbnz	r0, 8008e92 <_printf_float+0x41a>
 8008e60:	4653      	mov	r3, sl
 8008e62:	f108 0201 	add.w	r2, r8, #1
 8008e66:	4631      	mov	r1, r6
 8008e68:	4628      	mov	r0, r5
 8008e6a:	47b8      	blx	r7
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d10c      	bne.n	8008e8a <_printf_float+0x412>
 8008e70:	e65d      	b.n	8008b2e <_printf_float+0xb6>
 8008e72:	2301      	movs	r3, #1
 8008e74:	465a      	mov	r2, fp
 8008e76:	4631      	mov	r1, r6
 8008e78:	4628      	mov	r0, r5
 8008e7a:	47b8      	blx	r7
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	f43f ae56 	beq.w	8008b2e <_printf_float+0xb6>
 8008e82:	f108 0801 	add.w	r8, r8, #1
 8008e86:	45d0      	cmp	r8, sl
 8008e88:	dbf3      	blt.n	8008e72 <_printf_float+0x3fa>
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008e90:	e6df      	b.n	8008c52 <_printf_float+0x1da>
 8008e92:	f04f 0800 	mov.w	r8, #0
 8008e96:	f104 0b1a 	add.w	fp, r4, #26
 8008e9a:	e7f4      	b.n	8008e86 <_printf_float+0x40e>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	4642      	mov	r2, r8
 8008ea0:	e7e1      	b.n	8008e66 <_printf_float+0x3ee>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	464a      	mov	r2, r9
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	47b8      	blx	r7
 8008eac:	3001      	adds	r0, #1
 8008eae:	f43f ae3e 	beq.w	8008b2e <_printf_float+0xb6>
 8008eb2:	f108 0801 	add.w	r8, r8, #1
 8008eb6:	68e3      	ldr	r3, [r4, #12]
 8008eb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eba:	1a5b      	subs	r3, r3, r1
 8008ebc:	4543      	cmp	r3, r8
 8008ebe:	dcf0      	bgt.n	8008ea2 <_printf_float+0x42a>
 8008ec0:	e6fc      	b.n	8008cbc <_printf_float+0x244>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	f104 0919 	add.w	r9, r4, #25
 8008eca:	e7f4      	b.n	8008eb6 <_printf_float+0x43e>

08008ecc <_printf_common>:
 8008ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed0:	4616      	mov	r6, r2
 8008ed2:	4698      	mov	r8, r3
 8008ed4:	688a      	ldr	r2, [r1, #8]
 8008ed6:	690b      	ldr	r3, [r1, #16]
 8008ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008edc:	4293      	cmp	r3, r2
 8008ede:	bfb8      	it	lt
 8008ee0:	4613      	movlt	r3, r2
 8008ee2:	6033      	str	r3, [r6, #0]
 8008ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ee8:	4607      	mov	r7, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	b10a      	cbz	r2, 8008ef2 <_printf_common+0x26>
 8008eee:	3301      	adds	r3, #1
 8008ef0:	6033      	str	r3, [r6, #0]
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	0699      	lsls	r1, r3, #26
 8008ef6:	bf42      	ittt	mi
 8008ef8:	6833      	ldrmi	r3, [r6, #0]
 8008efa:	3302      	addmi	r3, #2
 8008efc:	6033      	strmi	r3, [r6, #0]
 8008efe:	6825      	ldr	r5, [r4, #0]
 8008f00:	f015 0506 	ands.w	r5, r5, #6
 8008f04:	d106      	bne.n	8008f14 <_printf_common+0x48>
 8008f06:	f104 0a19 	add.w	sl, r4, #25
 8008f0a:	68e3      	ldr	r3, [r4, #12]
 8008f0c:	6832      	ldr	r2, [r6, #0]
 8008f0e:	1a9b      	subs	r3, r3, r2
 8008f10:	42ab      	cmp	r3, r5
 8008f12:	dc26      	bgt.n	8008f62 <_printf_common+0x96>
 8008f14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	3b00      	subs	r3, #0
 8008f1c:	bf18      	it	ne
 8008f1e:	2301      	movne	r3, #1
 8008f20:	0692      	lsls	r2, r2, #26
 8008f22:	d42b      	bmi.n	8008f7c <_printf_common+0xb0>
 8008f24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f28:	4641      	mov	r1, r8
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	47c8      	blx	r9
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d01e      	beq.n	8008f70 <_printf_common+0xa4>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	6922      	ldr	r2, [r4, #16]
 8008f36:	f003 0306 	and.w	r3, r3, #6
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	bf02      	ittt	eq
 8008f3e:	68e5      	ldreq	r5, [r4, #12]
 8008f40:	6833      	ldreq	r3, [r6, #0]
 8008f42:	1aed      	subeq	r5, r5, r3
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	bf0c      	ite	eq
 8008f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f4c:	2500      	movne	r5, #0
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	bfc4      	itt	gt
 8008f52:	1a9b      	subgt	r3, r3, r2
 8008f54:	18ed      	addgt	r5, r5, r3
 8008f56:	2600      	movs	r6, #0
 8008f58:	341a      	adds	r4, #26
 8008f5a:	42b5      	cmp	r5, r6
 8008f5c:	d11a      	bne.n	8008f94 <_printf_common+0xc8>
 8008f5e:	2000      	movs	r0, #0
 8008f60:	e008      	b.n	8008f74 <_printf_common+0xa8>
 8008f62:	2301      	movs	r3, #1
 8008f64:	4652      	mov	r2, sl
 8008f66:	4641      	mov	r1, r8
 8008f68:	4638      	mov	r0, r7
 8008f6a:	47c8      	blx	r9
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d103      	bne.n	8008f78 <_printf_common+0xac>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f78:	3501      	adds	r5, #1
 8008f7a:	e7c6      	b.n	8008f0a <_printf_common+0x3e>
 8008f7c:	18e1      	adds	r1, r4, r3
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	2030      	movs	r0, #48	@ 0x30
 8008f82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f86:	4422      	add	r2, r4
 8008f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f90:	3302      	adds	r3, #2
 8008f92:	e7c7      	b.n	8008f24 <_printf_common+0x58>
 8008f94:	2301      	movs	r3, #1
 8008f96:	4622      	mov	r2, r4
 8008f98:	4641      	mov	r1, r8
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	47c8      	blx	r9
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d0e6      	beq.n	8008f70 <_printf_common+0xa4>
 8008fa2:	3601      	adds	r6, #1
 8008fa4:	e7d9      	b.n	8008f5a <_printf_common+0x8e>
	...

08008fa8 <_printf_i>:
 8008fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fac:	7e0f      	ldrb	r7, [r1, #24]
 8008fae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fb0:	2f78      	cmp	r7, #120	@ 0x78
 8008fb2:	4691      	mov	r9, r2
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	469a      	mov	sl, r3
 8008fba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fbe:	d807      	bhi.n	8008fd0 <_printf_i+0x28>
 8008fc0:	2f62      	cmp	r7, #98	@ 0x62
 8008fc2:	d80a      	bhi.n	8008fda <_printf_i+0x32>
 8008fc4:	2f00      	cmp	r7, #0
 8008fc6:	f000 80d1 	beq.w	800916c <_printf_i+0x1c4>
 8008fca:	2f58      	cmp	r7, #88	@ 0x58
 8008fcc:	f000 80b8 	beq.w	8009140 <_printf_i+0x198>
 8008fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fd8:	e03a      	b.n	8009050 <_printf_i+0xa8>
 8008fda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fde:	2b15      	cmp	r3, #21
 8008fe0:	d8f6      	bhi.n	8008fd0 <_printf_i+0x28>
 8008fe2:	a101      	add	r1, pc, #4	@ (adr r1, 8008fe8 <_printf_i+0x40>)
 8008fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fe8:	08009041 	.word	0x08009041
 8008fec:	08009055 	.word	0x08009055
 8008ff0:	08008fd1 	.word	0x08008fd1
 8008ff4:	08008fd1 	.word	0x08008fd1
 8008ff8:	08008fd1 	.word	0x08008fd1
 8008ffc:	08008fd1 	.word	0x08008fd1
 8009000:	08009055 	.word	0x08009055
 8009004:	08008fd1 	.word	0x08008fd1
 8009008:	08008fd1 	.word	0x08008fd1
 800900c:	08008fd1 	.word	0x08008fd1
 8009010:	08008fd1 	.word	0x08008fd1
 8009014:	08009153 	.word	0x08009153
 8009018:	0800907f 	.word	0x0800907f
 800901c:	0800910d 	.word	0x0800910d
 8009020:	08008fd1 	.word	0x08008fd1
 8009024:	08008fd1 	.word	0x08008fd1
 8009028:	08009175 	.word	0x08009175
 800902c:	08008fd1 	.word	0x08008fd1
 8009030:	0800907f 	.word	0x0800907f
 8009034:	08008fd1 	.word	0x08008fd1
 8009038:	08008fd1 	.word	0x08008fd1
 800903c:	08009115 	.word	0x08009115
 8009040:	6833      	ldr	r3, [r6, #0]
 8009042:	1d1a      	adds	r2, r3, #4
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6032      	str	r2, [r6, #0]
 8009048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800904c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009050:	2301      	movs	r3, #1
 8009052:	e09c      	b.n	800918e <_printf_i+0x1e6>
 8009054:	6833      	ldr	r3, [r6, #0]
 8009056:	6820      	ldr	r0, [r4, #0]
 8009058:	1d19      	adds	r1, r3, #4
 800905a:	6031      	str	r1, [r6, #0]
 800905c:	0606      	lsls	r6, r0, #24
 800905e:	d501      	bpl.n	8009064 <_printf_i+0xbc>
 8009060:	681d      	ldr	r5, [r3, #0]
 8009062:	e003      	b.n	800906c <_printf_i+0xc4>
 8009064:	0645      	lsls	r5, r0, #25
 8009066:	d5fb      	bpl.n	8009060 <_printf_i+0xb8>
 8009068:	f9b3 5000 	ldrsh.w	r5, [r3]
 800906c:	2d00      	cmp	r5, #0
 800906e:	da03      	bge.n	8009078 <_printf_i+0xd0>
 8009070:	232d      	movs	r3, #45	@ 0x2d
 8009072:	426d      	negs	r5, r5
 8009074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009078:	4858      	ldr	r0, [pc, #352]	@ (80091dc <_printf_i+0x234>)
 800907a:	230a      	movs	r3, #10
 800907c:	e011      	b.n	80090a2 <_printf_i+0xfa>
 800907e:	6821      	ldr	r1, [r4, #0]
 8009080:	6833      	ldr	r3, [r6, #0]
 8009082:	0608      	lsls	r0, r1, #24
 8009084:	f853 5b04 	ldr.w	r5, [r3], #4
 8009088:	d402      	bmi.n	8009090 <_printf_i+0xe8>
 800908a:	0649      	lsls	r1, r1, #25
 800908c:	bf48      	it	mi
 800908e:	b2ad      	uxthmi	r5, r5
 8009090:	2f6f      	cmp	r7, #111	@ 0x6f
 8009092:	4852      	ldr	r0, [pc, #328]	@ (80091dc <_printf_i+0x234>)
 8009094:	6033      	str	r3, [r6, #0]
 8009096:	bf14      	ite	ne
 8009098:	230a      	movne	r3, #10
 800909a:	2308      	moveq	r3, #8
 800909c:	2100      	movs	r1, #0
 800909e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090a2:	6866      	ldr	r6, [r4, #4]
 80090a4:	60a6      	str	r6, [r4, #8]
 80090a6:	2e00      	cmp	r6, #0
 80090a8:	db05      	blt.n	80090b6 <_printf_i+0x10e>
 80090aa:	6821      	ldr	r1, [r4, #0]
 80090ac:	432e      	orrs	r6, r5
 80090ae:	f021 0104 	bic.w	r1, r1, #4
 80090b2:	6021      	str	r1, [r4, #0]
 80090b4:	d04b      	beq.n	800914e <_printf_i+0x1a6>
 80090b6:	4616      	mov	r6, r2
 80090b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80090bc:	fb03 5711 	mls	r7, r3, r1, r5
 80090c0:	5dc7      	ldrb	r7, [r0, r7]
 80090c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090c6:	462f      	mov	r7, r5
 80090c8:	42bb      	cmp	r3, r7
 80090ca:	460d      	mov	r5, r1
 80090cc:	d9f4      	bls.n	80090b8 <_printf_i+0x110>
 80090ce:	2b08      	cmp	r3, #8
 80090d0:	d10b      	bne.n	80090ea <_printf_i+0x142>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	07df      	lsls	r7, r3, #31
 80090d6:	d508      	bpl.n	80090ea <_printf_i+0x142>
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	6861      	ldr	r1, [r4, #4]
 80090dc:	4299      	cmp	r1, r3
 80090de:	bfde      	ittt	le
 80090e0:	2330      	movle	r3, #48	@ 0x30
 80090e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090ea:	1b92      	subs	r2, r2, r6
 80090ec:	6122      	str	r2, [r4, #16]
 80090ee:	f8cd a000 	str.w	sl, [sp]
 80090f2:	464b      	mov	r3, r9
 80090f4:	aa03      	add	r2, sp, #12
 80090f6:	4621      	mov	r1, r4
 80090f8:	4640      	mov	r0, r8
 80090fa:	f7ff fee7 	bl	8008ecc <_printf_common>
 80090fe:	3001      	adds	r0, #1
 8009100:	d14a      	bne.n	8009198 <_printf_i+0x1f0>
 8009102:	f04f 30ff 	mov.w	r0, #4294967295
 8009106:	b004      	add	sp, #16
 8009108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	f043 0320 	orr.w	r3, r3, #32
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	4832      	ldr	r0, [pc, #200]	@ (80091e0 <_printf_i+0x238>)
 8009116:	2778      	movs	r7, #120	@ 0x78
 8009118:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	6831      	ldr	r1, [r6, #0]
 8009120:	061f      	lsls	r7, r3, #24
 8009122:	f851 5b04 	ldr.w	r5, [r1], #4
 8009126:	d402      	bmi.n	800912e <_printf_i+0x186>
 8009128:	065f      	lsls	r7, r3, #25
 800912a:	bf48      	it	mi
 800912c:	b2ad      	uxthmi	r5, r5
 800912e:	6031      	str	r1, [r6, #0]
 8009130:	07d9      	lsls	r1, r3, #31
 8009132:	bf44      	itt	mi
 8009134:	f043 0320 	orrmi.w	r3, r3, #32
 8009138:	6023      	strmi	r3, [r4, #0]
 800913a:	b11d      	cbz	r5, 8009144 <_printf_i+0x19c>
 800913c:	2310      	movs	r3, #16
 800913e:	e7ad      	b.n	800909c <_printf_i+0xf4>
 8009140:	4826      	ldr	r0, [pc, #152]	@ (80091dc <_printf_i+0x234>)
 8009142:	e7e9      	b.n	8009118 <_printf_i+0x170>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	f023 0320 	bic.w	r3, r3, #32
 800914a:	6023      	str	r3, [r4, #0]
 800914c:	e7f6      	b.n	800913c <_printf_i+0x194>
 800914e:	4616      	mov	r6, r2
 8009150:	e7bd      	b.n	80090ce <_printf_i+0x126>
 8009152:	6833      	ldr	r3, [r6, #0]
 8009154:	6825      	ldr	r5, [r4, #0]
 8009156:	6961      	ldr	r1, [r4, #20]
 8009158:	1d18      	adds	r0, r3, #4
 800915a:	6030      	str	r0, [r6, #0]
 800915c:	062e      	lsls	r6, r5, #24
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	d501      	bpl.n	8009166 <_printf_i+0x1be>
 8009162:	6019      	str	r1, [r3, #0]
 8009164:	e002      	b.n	800916c <_printf_i+0x1c4>
 8009166:	0668      	lsls	r0, r5, #25
 8009168:	d5fb      	bpl.n	8009162 <_printf_i+0x1ba>
 800916a:	8019      	strh	r1, [r3, #0]
 800916c:	2300      	movs	r3, #0
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	4616      	mov	r6, r2
 8009172:	e7bc      	b.n	80090ee <_printf_i+0x146>
 8009174:	6833      	ldr	r3, [r6, #0]
 8009176:	1d1a      	adds	r2, r3, #4
 8009178:	6032      	str	r2, [r6, #0]
 800917a:	681e      	ldr	r6, [r3, #0]
 800917c:	6862      	ldr	r2, [r4, #4]
 800917e:	2100      	movs	r1, #0
 8009180:	4630      	mov	r0, r6
 8009182:	f7f7 f845 	bl	8000210 <memchr>
 8009186:	b108      	cbz	r0, 800918c <_printf_i+0x1e4>
 8009188:	1b80      	subs	r0, r0, r6
 800918a:	6060      	str	r0, [r4, #4]
 800918c:	6863      	ldr	r3, [r4, #4]
 800918e:	6123      	str	r3, [r4, #16]
 8009190:	2300      	movs	r3, #0
 8009192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009196:	e7aa      	b.n	80090ee <_printf_i+0x146>
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	4632      	mov	r2, r6
 800919c:	4649      	mov	r1, r9
 800919e:	4640      	mov	r0, r8
 80091a0:	47d0      	blx	sl
 80091a2:	3001      	adds	r0, #1
 80091a4:	d0ad      	beq.n	8009102 <_printf_i+0x15a>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	079b      	lsls	r3, r3, #30
 80091aa:	d413      	bmi.n	80091d4 <_printf_i+0x22c>
 80091ac:	68e0      	ldr	r0, [r4, #12]
 80091ae:	9b03      	ldr	r3, [sp, #12]
 80091b0:	4298      	cmp	r0, r3
 80091b2:	bfb8      	it	lt
 80091b4:	4618      	movlt	r0, r3
 80091b6:	e7a6      	b.n	8009106 <_printf_i+0x15e>
 80091b8:	2301      	movs	r3, #1
 80091ba:	4632      	mov	r2, r6
 80091bc:	4649      	mov	r1, r9
 80091be:	4640      	mov	r0, r8
 80091c0:	47d0      	blx	sl
 80091c2:	3001      	adds	r0, #1
 80091c4:	d09d      	beq.n	8009102 <_printf_i+0x15a>
 80091c6:	3501      	adds	r5, #1
 80091c8:	68e3      	ldr	r3, [r4, #12]
 80091ca:	9903      	ldr	r1, [sp, #12]
 80091cc:	1a5b      	subs	r3, r3, r1
 80091ce:	42ab      	cmp	r3, r5
 80091d0:	dcf2      	bgt.n	80091b8 <_printf_i+0x210>
 80091d2:	e7eb      	b.n	80091ac <_printf_i+0x204>
 80091d4:	2500      	movs	r5, #0
 80091d6:	f104 0619 	add.w	r6, r4, #25
 80091da:	e7f5      	b.n	80091c8 <_printf_i+0x220>
 80091dc:	0800d6ee 	.word	0x0800d6ee
 80091e0:	0800d6ff 	.word	0x0800d6ff

080091e4 <_scanf_float>:
 80091e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	b087      	sub	sp, #28
 80091ea:	4691      	mov	r9, r2
 80091ec:	9303      	str	r3, [sp, #12]
 80091ee:	688b      	ldr	r3, [r1, #8]
 80091f0:	1e5a      	subs	r2, r3, #1
 80091f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80091f6:	bf81      	itttt	hi
 80091f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80091fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8009200:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009204:	608b      	strhi	r3, [r1, #8]
 8009206:	680b      	ldr	r3, [r1, #0]
 8009208:	460a      	mov	r2, r1
 800920a:	f04f 0500 	mov.w	r5, #0
 800920e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009212:	f842 3b1c 	str.w	r3, [r2], #28
 8009216:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800921a:	4680      	mov	r8, r0
 800921c:	460c      	mov	r4, r1
 800921e:	bf98      	it	ls
 8009220:	f04f 0b00 	movls.w	fp, #0
 8009224:	9201      	str	r2, [sp, #4]
 8009226:	4616      	mov	r6, r2
 8009228:	46aa      	mov	sl, r5
 800922a:	462f      	mov	r7, r5
 800922c:	9502      	str	r5, [sp, #8]
 800922e:	68a2      	ldr	r2, [r4, #8]
 8009230:	b15a      	cbz	r2, 800924a <_scanf_float+0x66>
 8009232:	f8d9 3000 	ldr.w	r3, [r9]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b4e      	cmp	r3, #78	@ 0x4e
 800923a:	d863      	bhi.n	8009304 <_scanf_float+0x120>
 800923c:	2b40      	cmp	r3, #64	@ 0x40
 800923e:	d83b      	bhi.n	80092b8 <_scanf_float+0xd4>
 8009240:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009244:	b2c8      	uxtb	r0, r1
 8009246:	280e      	cmp	r0, #14
 8009248:	d939      	bls.n	80092be <_scanf_float+0xda>
 800924a:	b11f      	cbz	r7, 8009254 <_scanf_float+0x70>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009258:	f1ba 0f01 	cmp.w	sl, #1
 800925c:	f200 8114 	bhi.w	8009488 <_scanf_float+0x2a4>
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	429e      	cmp	r6, r3
 8009264:	f200 8105 	bhi.w	8009472 <_scanf_float+0x28e>
 8009268:	2001      	movs	r0, #1
 800926a:	b007      	add	sp, #28
 800926c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009270:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009274:	2a0d      	cmp	r2, #13
 8009276:	d8e8      	bhi.n	800924a <_scanf_float+0x66>
 8009278:	a101      	add	r1, pc, #4	@ (adr r1, 8009280 <_scanf_float+0x9c>)
 800927a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800927e:	bf00      	nop
 8009280:	080093c9 	.word	0x080093c9
 8009284:	0800924b 	.word	0x0800924b
 8009288:	0800924b 	.word	0x0800924b
 800928c:	0800924b 	.word	0x0800924b
 8009290:	08009425 	.word	0x08009425
 8009294:	080093ff 	.word	0x080093ff
 8009298:	0800924b 	.word	0x0800924b
 800929c:	0800924b 	.word	0x0800924b
 80092a0:	080093d7 	.word	0x080093d7
 80092a4:	0800924b 	.word	0x0800924b
 80092a8:	0800924b 	.word	0x0800924b
 80092ac:	0800924b 	.word	0x0800924b
 80092b0:	0800924b 	.word	0x0800924b
 80092b4:	08009393 	.word	0x08009393
 80092b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80092bc:	e7da      	b.n	8009274 <_scanf_float+0x90>
 80092be:	290e      	cmp	r1, #14
 80092c0:	d8c3      	bhi.n	800924a <_scanf_float+0x66>
 80092c2:	a001      	add	r0, pc, #4	@ (adr r0, 80092c8 <_scanf_float+0xe4>)
 80092c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80092c8:	08009383 	.word	0x08009383
 80092cc:	0800924b 	.word	0x0800924b
 80092d0:	08009383 	.word	0x08009383
 80092d4:	08009413 	.word	0x08009413
 80092d8:	0800924b 	.word	0x0800924b
 80092dc:	08009325 	.word	0x08009325
 80092e0:	08009369 	.word	0x08009369
 80092e4:	08009369 	.word	0x08009369
 80092e8:	08009369 	.word	0x08009369
 80092ec:	08009369 	.word	0x08009369
 80092f0:	08009369 	.word	0x08009369
 80092f4:	08009369 	.word	0x08009369
 80092f8:	08009369 	.word	0x08009369
 80092fc:	08009369 	.word	0x08009369
 8009300:	08009369 	.word	0x08009369
 8009304:	2b6e      	cmp	r3, #110	@ 0x6e
 8009306:	d809      	bhi.n	800931c <_scanf_float+0x138>
 8009308:	2b60      	cmp	r3, #96	@ 0x60
 800930a:	d8b1      	bhi.n	8009270 <_scanf_float+0x8c>
 800930c:	2b54      	cmp	r3, #84	@ 0x54
 800930e:	d07b      	beq.n	8009408 <_scanf_float+0x224>
 8009310:	2b59      	cmp	r3, #89	@ 0x59
 8009312:	d19a      	bne.n	800924a <_scanf_float+0x66>
 8009314:	2d07      	cmp	r5, #7
 8009316:	d198      	bne.n	800924a <_scanf_float+0x66>
 8009318:	2508      	movs	r5, #8
 800931a:	e02f      	b.n	800937c <_scanf_float+0x198>
 800931c:	2b74      	cmp	r3, #116	@ 0x74
 800931e:	d073      	beq.n	8009408 <_scanf_float+0x224>
 8009320:	2b79      	cmp	r3, #121	@ 0x79
 8009322:	e7f6      	b.n	8009312 <_scanf_float+0x12e>
 8009324:	6821      	ldr	r1, [r4, #0]
 8009326:	05c8      	lsls	r0, r1, #23
 8009328:	d51e      	bpl.n	8009368 <_scanf_float+0x184>
 800932a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800932e:	6021      	str	r1, [r4, #0]
 8009330:	3701      	adds	r7, #1
 8009332:	f1bb 0f00 	cmp.w	fp, #0
 8009336:	d003      	beq.n	8009340 <_scanf_float+0x15c>
 8009338:	3201      	adds	r2, #1
 800933a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800933e:	60a2      	str	r2, [r4, #8]
 8009340:	68a3      	ldr	r3, [r4, #8]
 8009342:	3b01      	subs	r3, #1
 8009344:	60a3      	str	r3, [r4, #8]
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	3301      	adds	r3, #1
 800934a:	6123      	str	r3, [r4, #16]
 800934c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009350:	3b01      	subs	r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	f8c9 3004 	str.w	r3, [r9, #4]
 8009358:	f340 8082 	ble.w	8009460 <_scanf_float+0x27c>
 800935c:	f8d9 3000 	ldr.w	r3, [r9]
 8009360:	3301      	adds	r3, #1
 8009362:	f8c9 3000 	str.w	r3, [r9]
 8009366:	e762      	b.n	800922e <_scanf_float+0x4a>
 8009368:	eb1a 0105 	adds.w	r1, sl, r5
 800936c:	f47f af6d 	bne.w	800924a <_scanf_float+0x66>
 8009370:	6822      	ldr	r2, [r4, #0]
 8009372:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009376:	6022      	str	r2, [r4, #0]
 8009378:	460d      	mov	r5, r1
 800937a:	468a      	mov	sl, r1
 800937c:	f806 3b01 	strb.w	r3, [r6], #1
 8009380:	e7de      	b.n	8009340 <_scanf_float+0x15c>
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	0610      	lsls	r0, r2, #24
 8009386:	f57f af60 	bpl.w	800924a <_scanf_float+0x66>
 800938a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800938e:	6022      	str	r2, [r4, #0]
 8009390:	e7f4      	b.n	800937c <_scanf_float+0x198>
 8009392:	f1ba 0f00 	cmp.w	sl, #0
 8009396:	d10c      	bne.n	80093b2 <_scanf_float+0x1ce>
 8009398:	b977      	cbnz	r7, 80093b8 <_scanf_float+0x1d4>
 800939a:	6822      	ldr	r2, [r4, #0]
 800939c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80093a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80093a4:	d108      	bne.n	80093b8 <_scanf_float+0x1d4>
 80093a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80093aa:	6022      	str	r2, [r4, #0]
 80093ac:	f04f 0a01 	mov.w	sl, #1
 80093b0:	e7e4      	b.n	800937c <_scanf_float+0x198>
 80093b2:	f1ba 0f02 	cmp.w	sl, #2
 80093b6:	d050      	beq.n	800945a <_scanf_float+0x276>
 80093b8:	2d01      	cmp	r5, #1
 80093ba:	d002      	beq.n	80093c2 <_scanf_float+0x1de>
 80093bc:	2d04      	cmp	r5, #4
 80093be:	f47f af44 	bne.w	800924a <_scanf_float+0x66>
 80093c2:	3501      	adds	r5, #1
 80093c4:	b2ed      	uxtb	r5, r5
 80093c6:	e7d9      	b.n	800937c <_scanf_float+0x198>
 80093c8:	f1ba 0f01 	cmp.w	sl, #1
 80093cc:	f47f af3d 	bne.w	800924a <_scanf_float+0x66>
 80093d0:	f04f 0a02 	mov.w	sl, #2
 80093d4:	e7d2      	b.n	800937c <_scanf_float+0x198>
 80093d6:	b975      	cbnz	r5, 80093f6 <_scanf_float+0x212>
 80093d8:	2f00      	cmp	r7, #0
 80093da:	f47f af37 	bne.w	800924c <_scanf_float+0x68>
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80093e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80093e8:	f040 8103 	bne.w	80095f2 <_scanf_float+0x40e>
 80093ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80093f0:	6022      	str	r2, [r4, #0]
 80093f2:	2501      	movs	r5, #1
 80093f4:	e7c2      	b.n	800937c <_scanf_float+0x198>
 80093f6:	2d03      	cmp	r5, #3
 80093f8:	d0e3      	beq.n	80093c2 <_scanf_float+0x1de>
 80093fa:	2d05      	cmp	r5, #5
 80093fc:	e7df      	b.n	80093be <_scanf_float+0x1da>
 80093fe:	2d02      	cmp	r5, #2
 8009400:	f47f af23 	bne.w	800924a <_scanf_float+0x66>
 8009404:	2503      	movs	r5, #3
 8009406:	e7b9      	b.n	800937c <_scanf_float+0x198>
 8009408:	2d06      	cmp	r5, #6
 800940a:	f47f af1e 	bne.w	800924a <_scanf_float+0x66>
 800940e:	2507      	movs	r5, #7
 8009410:	e7b4      	b.n	800937c <_scanf_float+0x198>
 8009412:	6822      	ldr	r2, [r4, #0]
 8009414:	0591      	lsls	r1, r2, #22
 8009416:	f57f af18 	bpl.w	800924a <_scanf_float+0x66>
 800941a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800941e:	6022      	str	r2, [r4, #0]
 8009420:	9702      	str	r7, [sp, #8]
 8009422:	e7ab      	b.n	800937c <_scanf_float+0x198>
 8009424:	6822      	ldr	r2, [r4, #0]
 8009426:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800942a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800942e:	d005      	beq.n	800943c <_scanf_float+0x258>
 8009430:	0550      	lsls	r0, r2, #21
 8009432:	f57f af0a 	bpl.w	800924a <_scanf_float+0x66>
 8009436:	2f00      	cmp	r7, #0
 8009438:	f000 80db 	beq.w	80095f2 <_scanf_float+0x40e>
 800943c:	0591      	lsls	r1, r2, #22
 800943e:	bf58      	it	pl
 8009440:	9902      	ldrpl	r1, [sp, #8]
 8009442:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009446:	bf58      	it	pl
 8009448:	1a79      	subpl	r1, r7, r1
 800944a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800944e:	bf58      	it	pl
 8009450:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009454:	6022      	str	r2, [r4, #0]
 8009456:	2700      	movs	r7, #0
 8009458:	e790      	b.n	800937c <_scanf_float+0x198>
 800945a:	f04f 0a03 	mov.w	sl, #3
 800945e:	e78d      	b.n	800937c <_scanf_float+0x198>
 8009460:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009464:	4649      	mov	r1, r9
 8009466:	4640      	mov	r0, r8
 8009468:	4798      	blx	r3
 800946a:	2800      	cmp	r0, #0
 800946c:	f43f aedf 	beq.w	800922e <_scanf_float+0x4a>
 8009470:	e6eb      	b.n	800924a <_scanf_float+0x66>
 8009472:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009476:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800947a:	464a      	mov	r2, r9
 800947c:	4640      	mov	r0, r8
 800947e:	4798      	blx	r3
 8009480:	6923      	ldr	r3, [r4, #16]
 8009482:	3b01      	subs	r3, #1
 8009484:	6123      	str	r3, [r4, #16]
 8009486:	e6eb      	b.n	8009260 <_scanf_float+0x7c>
 8009488:	1e6b      	subs	r3, r5, #1
 800948a:	2b06      	cmp	r3, #6
 800948c:	d824      	bhi.n	80094d8 <_scanf_float+0x2f4>
 800948e:	2d02      	cmp	r5, #2
 8009490:	d836      	bhi.n	8009500 <_scanf_float+0x31c>
 8009492:	9b01      	ldr	r3, [sp, #4]
 8009494:	429e      	cmp	r6, r3
 8009496:	f67f aee7 	bls.w	8009268 <_scanf_float+0x84>
 800949a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800949e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094a2:	464a      	mov	r2, r9
 80094a4:	4640      	mov	r0, r8
 80094a6:	4798      	blx	r3
 80094a8:	6923      	ldr	r3, [r4, #16]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	6123      	str	r3, [r4, #16]
 80094ae:	e7f0      	b.n	8009492 <_scanf_float+0x2ae>
 80094b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80094b8:	464a      	mov	r2, r9
 80094ba:	4640      	mov	r0, r8
 80094bc:	4798      	blx	r3
 80094be:	6923      	ldr	r3, [r4, #16]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	6123      	str	r3, [r4, #16]
 80094c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094c8:	fa5f fa8a 	uxtb.w	sl, sl
 80094cc:	f1ba 0f02 	cmp.w	sl, #2
 80094d0:	d1ee      	bne.n	80094b0 <_scanf_float+0x2cc>
 80094d2:	3d03      	subs	r5, #3
 80094d4:	b2ed      	uxtb	r5, r5
 80094d6:	1b76      	subs	r6, r6, r5
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	05da      	lsls	r2, r3, #23
 80094dc:	d530      	bpl.n	8009540 <_scanf_float+0x35c>
 80094de:	055b      	lsls	r3, r3, #21
 80094e0:	d511      	bpl.n	8009506 <_scanf_float+0x322>
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	429e      	cmp	r6, r3
 80094e6:	f67f aebf 	bls.w	8009268 <_scanf_float+0x84>
 80094ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094f2:	464a      	mov	r2, r9
 80094f4:	4640      	mov	r0, r8
 80094f6:	4798      	blx	r3
 80094f8:	6923      	ldr	r3, [r4, #16]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	e7f0      	b.n	80094e2 <_scanf_float+0x2fe>
 8009500:	46aa      	mov	sl, r5
 8009502:	46b3      	mov	fp, r6
 8009504:	e7de      	b.n	80094c4 <_scanf_float+0x2e0>
 8009506:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800950a:	6923      	ldr	r3, [r4, #16]
 800950c:	2965      	cmp	r1, #101	@ 0x65
 800950e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009512:	f106 35ff 	add.w	r5, r6, #4294967295
 8009516:	6123      	str	r3, [r4, #16]
 8009518:	d00c      	beq.n	8009534 <_scanf_float+0x350>
 800951a:	2945      	cmp	r1, #69	@ 0x45
 800951c:	d00a      	beq.n	8009534 <_scanf_float+0x350>
 800951e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009522:	464a      	mov	r2, r9
 8009524:	4640      	mov	r0, r8
 8009526:	4798      	blx	r3
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800952e:	3b01      	subs	r3, #1
 8009530:	1eb5      	subs	r5, r6, #2
 8009532:	6123      	str	r3, [r4, #16]
 8009534:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009538:	464a      	mov	r2, r9
 800953a:	4640      	mov	r0, r8
 800953c:	4798      	blx	r3
 800953e:	462e      	mov	r6, r5
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	f012 0210 	ands.w	r2, r2, #16
 8009546:	d001      	beq.n	800954c <_scanf_float+0x368>
 8009548:	2000      	movs	r0, #0
 800954a:	e68e      	b.n	800926a <_scanf_float+0x86>
 800954c:	7032      	strb	r2, [r6, #0]
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009558:	d125      	bne.n	80095a6 <_scanf_float+0x3c2>
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	429f      	cmp	r7, r3
 800955e:	d00a      	beq.n	8009576 <_scanf_float+0x392>
 8009560:	1bda      	subs	r2, r3, r7
 8009562:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009566:	429e      	cmp	r6, r3
 8009568:	bf28      	it	cs
 800956a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800956e:	4922      	ldr	r1, [pc, #136]	@ (80095f8 <_scanf_float+0x414>)
 8009570:	4630      	mov	r0, r6
 8009572:	f000 fa33 	bl	80099dc <siprintf>
 8009576:	9901      	ldr	r1, [sp, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	4640      	mov	r0, r8
 800957c:	f002 fdb4 	bl	800c0e8 <_strtod_r>
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	6821      	ldr	r1, [r4, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f011 0f02 	tst.w	r1, #2
 800958a:	ec57 6b10 	vmov	r6, r7, d0
 800958e:	f103 0204 	add.w	r2, r3, #4
 8009592:	d015      	beq.n	80095c0 <_scanf_float+0x3dc>
 8009594:	9903      	ldr	r1, [sp, #12]
 8009596:	600a      	str	r2, [r1, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	e9c3 6700 	strd	r6, r7, [r3]
 800959e:	68e3      	ldr	r3, [r4, #12]
 80095a0:	3301      	adds	r3, #1
 80095a2:	60e3      	str	r3, [r4, #12]
 80095a4:	e7d0      	b.n	8009548 <_scanf_float+0x364>
 80095a6:	9b04      	ldr	r3, [sp, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0e4      	beq.n	8009576 <_scanf_float+0x392>
 80095ac:	9905      	ldr	r1, [sp, #20]
 80095ae:	230a      	movs	r3, #10
 80095b0:	3101      	adds	r1, #1
 80095b2:	4640      	mov	r0, r8
 80095b4:	f002 fe18 	bl	800c1e8 <_strtol_r>
 80095b8:	9b04      	ldr	r3, [sp, #16]
 80095ba:	9e05      	ldr	r6, [sp, #20]
 80095bc:	1ac2      	subs	r2, r0, r3
 80095be:	e7d0      	b.n	8009562 <_scanf_float+0x37e>
 80095c0:	f011 0f04 	tst.w	r1, #4
 80095c4:	9903      	ldr	r1, [sp, #12]
 80095c6:	600a      	str	r2, [r1, #0]
 80095c8:	d1e6      	bne.n	8009598 <_scanf_float+0x3b4>
 80095ca:	681d      	ldr	r5, [r3, #0]
 80095cc:	4632      	mov	r2, r6
 80095ce:	463b      	mov	r3, r7
 80095d0:	4630      	mov	r0, r6
 80095d2:	4639      	mov	r1, r7
 80095d4:	f7f7 faca 	bl	8000b6c <__aeabi_dcmpun>
 80095d8:	b128      	cbz	r0, 80095e6 <_scanf_float+0x402>
 80095da:	4808      	ldr	r0, [pc, #32]	@ (80095fc <_scanf_float+0x418>)
 80095dc:	f000 fb78 	bl	8009cd0 <nanf>
 80095e0:	ed85 0a00 	vstr	s0, [r5]
 80095e4:	e7db      	b.n	800959e <_scanf_float+0x3ba>
 80095e6:	4630      	mov	r0, r6
 80095e8:	4639      	mov	r1, r7
 80095ea:	f7f7 fb1d 	bl	8000c28 <__aeabi_d2f>
 80095ee:	6028      	str	r0, [r5, #0]
 80095f0:	e7d5      	b.n	800959e <_scanf_float+0x3ba>
 80095f2:	2700      	movs	r7, #0
 80095f4:	e62e      	b.n	8009254 <_scanf_float+0x70>
 80095f6:	bf00      	nop
 80095f8:	0800d710 	.word	0x0800d710
 80095fc:	0800d851 	.word	0x0800d851

08009600 <std>:
 8009600:	2300      	movs	r3, #0
 8009602:	b510      	push	{r4, lr}
 8009604:	4604      	mov	r4, r0
 8009606:	e9c0 3300 	strd	r3, r3, [r0]
 800960a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800960e:	6083      	str	r3, [r0, #8]
 8009610:	8181      	strh	r1, [r0, #12]
 8009612:	6643      	str	r3, [r0, #100]	@ 0x64
 8009614:	81c2      	strh	r2, [r0, #14]
 8009616:	6183      	str	r3, [r0, #24]
 8009618:	4619      	mov	r1, r3
 800961a:	2208      	movs	r2, #8
 800961c:	305c      	adds	r0, #92	@ 0x5c
 800961e:	f000 fad7 	bl	8009bd0 <memset>
 8009622:	4b0d      	ldr	r3, [pc, #52]	@ (8009658 <std+0x58>)
 8009624:	6263      	str	r3, [r4, #36]	@ 0x24
 8009626:	4b0d      	ldr	r3, [pc, #52]	@ (800965c <std+0x5c>)
 8009628:	62a3      	str	r3, [r4, #40]	@ 0x28
 800962a:	4b0d      	ldr	r3, [pc, #52]	@ (8009660 <std+0x60>)
 800962c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800962e:	4b0d      	ldr	r3, [pc, #52]	@ (8009664 <std+0x64>)
 8009630:	6323      	str	r3, [r4, #48]	@ 0x30
 8009632:	4b0d      	ldr	r3, [pc, #52]	@ (8009668 <std+0x68>)
 8009634:	6224      	str	r4, [r4, #32]
 8009636:	429c      	cmp	r4, r3
 8009638:	d006      	beq.n	8009648 <std+0x48>
 800963a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800963e:	4294      	cmp	r4, r2
 8009640:	d002      	beq.n	8009648 <std+0x48>
 8009642:	33d0      	adds	r3, #208	@ 0xd0
 8009644:	429c      	cmp	r4, r3
 8009646:	d105      	bne.n	8009654 <std+0x54>
 8009648:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800964c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009650:	f000 bb3a 	b.w	8009cc8 <__retarget_lock_init_recursive>
 8009654:	bd10      	pop	{r4, pc}
 8009656:	bf00      	nop
 8009658:	08009a21 	.word	0x08009a21
 800965c:	08009a43 	.word	0x08009a43
 8009660:	08009a7b 	.word	0x08009a7b
 8009664:	08009a9f 	.word	0x08009a9f
 8009668:	200004d4 	.word	0x200004d4

0800966c <stdio_exit_handler>:
 800966c:	4a02      	ldr	r2, [pc, #8]	@ (8009678 <stdio_exit_handler+0xc>)
 800966e:	4903      	ldr	r1, [pc, #12]	@ (800967c <stdio_exit_handler+0x10>)
 8009670:	4803      	ldr	r0, [pc, #12]	@ (8009680 <stdio_exit_handler+0x14>)
 8009672:	f000 b869 	b.w	8009748 <_fwalk_sglue>
 8009676:	bf00      	nop
 8009678:	20000064 	.word	0x20000064
 800967c:	0800c829 	.word	0x0800c829
 8009680:	20000074 	.word	0x20000074

08009684 <cleanup_stdio>:
 8009684:	6841      	ldr	r1, [r0, #4]
 8009686:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <cleanup_stdio+0x34>)
 8009688:	4299      	cmp	r1, r3
 800968a:	b510      	push	{r4, lr}
 800968c:	4604      	mov	r4, r0
 800968e:	d001      	beq.n	8009694 <cleanup_stdio+0x10>
 8009690:	f003 f8ca 	bl	800c828 <_fflush_r>
 8009694:	68a1      	ldr	r1, [r4, #8]
 8009696:	4b09      	ldr	r3, [pc, #36]	@ (80096bc <cleanup_stdio+0x38>)
 8009698:	4299      	cmp	r1, r3
 800969a:	d002      	beq.n	80096a2 <cleanup_stdio+0x1e>
 800969c:	4620      	mov	r0, r4
 800969e:	f003 f8c3 	bl	800c828 <_fflush_r>
 80096a2:	68e1      	ldr	r1, [r4, #12]
 80096a4:	4b06      	ldr	r3, [pc, #24]	@ (80096c0 <cleanup_stdio+0x3c>)
 80096a6:	4299      	cmp	r1, r3
 80096a8:	d004      	beq.n	80096b4 <cleanup_stdio+0x30>
 80096aa:	4620      	mov	r0, r4
 80096ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b0:	f003 b8ba 	b.w	800c828 <_fflush_r>
 80096b4:	bd10      	pop	{r4, pc}
 80096b6:	bf00      	nop
 80096b8:	200004d4 	.word	0x200004d4
 80096bc:	2000053c 	.word	0x2000053c
 80096c0:	200005a4 	.word	0x200005a4

080096c4 <global_stdio_init.part.0>:
 80096c4:	b510      	push	{r4, lr}
 80096c6:	4b0b      	ldr	r3, [pc, #44]	@ (80096f4 <global_stdio_init.part.0+0x30>)
 80096c8:	4c0b      	ldr	r4, [pc, #44]	@ (80096f8 <global_stdio_init.part.0+0x34>)
 80096ca:	4a0c      	ldr	r2, [pc, #48]	@ (80096fc <global_stdio_init.part.0+0x38>)
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	4620      	mov	r0, r4
 80096d0:	2200      	movs	r2, #0
 80096d2:	2104      	movs	r1, #4
 80096d4:	f7ff ff94 	bl	8009600 <std>
 80096d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80096dc:	2201      	movs	r2, #1
 80096de:	2109      	movs	r1, #9
 80096e0:	f7ff ff8e 	bl	8009600 <std>
 80096e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096e8:	2202      	movs	r2, #2
 80096ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ee:	2112      	movs	r1, #18
 80096f0:	f7ff bf86 	b.w	8009600 <std>
 80096f4:	2000060c 	.word	0x2000060c
 80096f8:	200004d4 	.word	0x200004d4
 80096fc:	0800966d 	.word	0x0800966d

08009700 <__sfp_lock_acquire>:
 8009700:	4801      	ldr	r0, [pc, #4]	@ (8009708 <__sfp_lock_acquire+0x8>)
 8009702:	f000 bae2 	b.w	8009cca <__retarget_lock_acquire_recursive>
 8009706:	bf00      	nop
 8009708:	20000615 	.word	0x20000615

0800970c <__sfp_lock_release>:
 800970c:	4801      	ldr	r0, [pc, #4]	@ (8009714 <__sfp_lock_release+0x8>)
 800970e:	f000 badd 	b.w	8009ccc <__retarget_lock_release_recursive>
 8009712:	bf00      	nop
 8009714:	20000615 	.word	0x20000615

08009718 <__sinit>:
 8009718:	b510      	push	{r4, lr}
 800971a:	4604      	mov	r4, r0
 800971c:	f7ff fff0 	bl	8009700 <__sfp_lock_acquire>
 8009720:	6a23      	ldr	r3, [r4, #32]
 8009722:	b11b      	cbz	r3, 800972c <__sinit+0x14>
 8009724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009728:	f7ff bff0 	b.w	800970c <__sfp_lock_release>
 800972c:	4b04      	ldr	r3, [pc, #16]	@ (8009740 <__sinit+0x28>)
 800972e:	6223      	str	r3, [r4, #32]
 8009730:	4b04      	ldr	r3, [pc, #16]	@ (8009744 <__sinit+0x2c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1f5      	bne.n	8009724 <__sinit+0xc>
 8009738:	f7ff ffc4 	bl	80096c4 <global_stdio_init.part.0>
 800973c:	e7f2      	b.n	8009724 <__sinit+0xc>
 800973e:	bf00      	nop
 8009740:	08009685 	.word	0x08009685
 8009744:	2000060c 	.word	0x2000060c

08009748 <_fwalk_sglue>:
 8009748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800974c:	4607      	mov	r7, r0
 800974e:	4688      	mov	r8, r1
 8009750:	4614      	mov	r4, r2
 8009752:	2600      	movs	r6, #0
 8009754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009758:	f1b9 0901 	subs.w	r9, r9, #1
 800975c:	d505      	bpl.n	800976a <_fwalk_sglue+0x22>
 800975e:	6824      	ldr	r4, [r4, #0]
 8009760:	2c00      	cmp	r4, #0
 8009762:	d1f7      	bne.n	8009754 <_fwalk_sglue+0xc>
 8009764:	4630      	mov	r0, r6
 8009766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800976a:	89ab      	ldrh	r3, [r5, #12]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d907      	bls.n	8009780 <_fwalk_sglue+0x38>
 8009770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009774:	3301      	adds	r3, #1
 8009776:	d003      	beq.n	8009780 <_fwalk_sglue+0x38>
 8009778:	4629      	mov	r1, r5
 800977a:	4638      	mov	r0, r7
 800977c:	47c0      	blx	r8
 800977e:	4306      	orrs	r6, r0
 8009780:	3568      	adds	r5, #104	@ 0x68
 8009782:	e7e9      	b.n	8009758 <_fwalk_sglue+0x10>

08009784 <iprintf>:
 8009784:	b40f      	push	{r0, r1, r2, r3}
 8009786:	b507      	push	{r0, r1, r2, lr}
 8009788:	4906      	ldr	r1, [pc, #24]	@ (80097a4 <iprintf+0x20>)
 800978a:	ab04      	add	r3, sp, #16
 800978c:	6808      	ldr	r0, [r1, #0]
 800978e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009792:	6881      	ldr	r1, [r0, #8]
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	f002 feab 	bl	800c4f0 <_vfiprintf_r>
 800979a:	b003      	add	sp, #12
 800979c:	f85d eb04 	ldr.w	lr, [sp], #4
 80097a0:	b004      	add	sp, #16
 80097a2:	4770      	bx	lr
 80097a4:	20000070 	.word	0x20000070

080097a8 <_puts_r>:
 80097a8:	6a03      	ldr	r3, [r0, #32]
 80097aa:	b570      	push	{r4, r5, r6, lr}
 80097ac:	6884      	ldr	r4, [r0, #8]
 80097ae:	4605      	mov	r5, r0
 80097b0:	460e      	mov	r6, r1
 80097b2:	b90b      	cbnz	r3, 80097b8 <_puts_r+0x10>
 80097b4:	f7ff ffb0 	bl	8009718 <__sinit>
 80097b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097ba:	07db      	lsls	r3, r3, #31
 80097bc:	d405      	bmi.n	80097ca <_puts_r+0x22>
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	0598      	lsls	r0, r3, #22
 80097c2:	d402      	bmi.n	80097ca <_puts_r+0x22>
 80097c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097c6:	f000 fa80 	bl	8009cca <__retarget_lock_acquire_recursive>
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	0719      	lsls	r1, r3, #28
 80097ce:	d502      	bpl.n	80097d6 <_puts_r+0x2e>
 80097d0:	6923      	ldr	r3, [r4, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d135      	bne.n	8009842 <_puts_r+0x9a>
 80097d6:	4621      	mov	r1, r4
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 f9a3 	bl	8009b24 <__swsetup_r>
 80097de:	b380      	cbz	r0, 8009842 <_puts_r+0x9a>
 80097e0:	f04f 35ff 	mov.w	r5, #4294967295
 80097e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097e6:	07da      	lsls	r2, r3, #31
 80097e8:	d405      	bmi.n	80097f6 <_puts_r+0x4e>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	059b      	lsls	r3, r3, #22
 80097ee:	d402      	bmi.n	80097f6 <_puts_r+0x4e>
 80097f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097f2:	f000 fa6b 	bl	8009ccc <__retarget_lock_release_recursive>
 80097f6:	4628      	mov	r0, r5
 80097f8:	bd70      	pop	{r4, r5, r6, pc}
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	da04      	bge.n	8009808 <_puts_r+0x60>
 80097fe:	69a2      	ldr	r2, [r4, #24]
 8009800:	429a      	cmp	r2, r3
 8009802:	dc17      	bgt.n	8009834 <_puts_r+0x8c>
 8009804:	290a      	cmp	r1, #10
 8009806:	d015      	beq.n	8009834 <_puts_r+0x8c>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	6022      	str	r2, [r4, #0]
 800980e:	7019      	strb	r1, [r3, #0]
 8009810:	68a3      	ldr	r3, [r4, #8]
 8009812:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009816:	3b01      	subs	r3, #1
 8009818:	60a3      	str	r3, [r4, #8]
 800981a:	2900      	cmp	r1, #0
 800981c:	d1ed      	bne.n	80097fa <_puts_r+0x52>
 800981e:	2b00      	cmp	r3, #0
 8009820:	da11      	bge.n	8009846 <_puts_r+0x9e>
 8009822:	4622      	mov	r2, r4
 8009824:	210a      	movs	r1, #10
 8009826:	4628      	mov	r0, r5
 8009828:	f000 f93d 	bl	8009aa6 <__swbuf_r>
 800982c:	3001      	adds	r0, #1
 800982e:	d0d7      	beq.n	80097e0 <_puts_r+0x38>
 8009830:	250a      	movs	r5, #10
 8009832:	e7d7      	b.n	80097e4 <_puts_r+0x3c>
 8009834:	4622      	mov	r2, r4
 8009836:	4628      	mov	r0, r5
 8009838:	f000 f935 	bl	8009aa6 <__swbuf_r>
 800983c:	3001      	adds	r0, #1
 800983e:	d1e7      	bne.n	8009810 <_puts_r+0x68>
 8009840:	e7ce      	b.n	80097e0 <_puts_r+0x38>
 8009842:	3e01      	subs	r6, #1
 8009844:	e7e4      	b.n	8009810 <_puts_r+0x68>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	6022      	str	r2, [r4, #0]
 800984c:	220a      	movs	r2, #10
 800984e:	701a      	strb	r2, [r3, #0]
 8009850:	e7ee      	b.n	8009830 <_puts_r+0x88>
	...

08009854 <puts>:
 8009854:	4b02      	ldr	r3, [pc, #8]	@ (8009860 <puts+0xc>)
 8009856:	4601      	mov	r1, r0
 8009858:	6818      	ldr	r0, [r3, #0]
 800985a:	f7ff bfa5 	b.w	80097a8 <_puts_r>
 800985e:	bf00      	nop
 8009860:	20000070 	.word	0x20000070

08009864 <setbuf>:
 8009864:	fab1 f281 	clz	r2, r1
 8009868:	0952      	lsrs	r2, r2, #5
 800986a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800986e:	0052      	lsls	r2, r2, #1
 8009870:	f000 b800 	b.w	8009874 <setvbuf>

08009874 <setvbuf>:
 8009874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009878:	461d      	mov	r5, r3
 800987a:	4b57      	ldr	r3, [pc, #348]	@ (80099d8 <setvbuf+0x164>)
 800987c:	681f      	ldr	r7, [r3, #0]
 800987e:	4604      	mov	r4, r0
 8009880:	460e      	mov	r6, r1
 8009882:	4690      	mov	r8, r2
 8009884:	b127      	cbz	r7, 8009890 <setvbuf+0x1c>
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	b913      	cbnz	r3, 8009890 <setvbuf+0x1c>
 800988a:	4638      	mov	r0, r7
 800988c:	f7ff ff44 	bl	8009718 <__sinit>
 8009890:	f1b8 0f02 	cmp.w	r8, #2
 8009894:	d006      	beq.n	80098a4 <setvbuf+0x30>
 8009896:	f1b8 0f01 	cmp.w	r8, #1
 800989a:	f200 809a 	bhi.w	80099d2 <setvbuf+0x15e>
 800989e:	2d00      	cmp	r5, #0
 80098a0:	f2c0 8097 	blt.w	80099d2 <setvbuf+0x15e>
 80098a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098a6:	07d9      	lsls	r1, r3, #31
 80098a8:	d405      	bmi.n	80098b6 <setvbuf+0x42>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	059a      	lsls	r2, r3, #22
 80098ae:	d402      	bmi.n	80098b6 <setvbuf+0x42>
 80098b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098b2:	f000 fa0a 	bl	8009cca <__retarget_lock_acquire_recursive>
 80098b6:	4621      	mov	r1, r4
 80098b8:	4638      	mov	r0, r7
 80098ba:	f002 ffb5 	bl	800c828 <_fflush_r>
 80098be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098c0:	b141      	cbz	r1, 80098d4 <setvbuf+0x60>
 80098c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098c6:	4299      	cmp	r1, r3
 80098c8:	d002      	beq.n	80098d0 <setvbuf+0x5c>
 80098ca:	4638      	mov	r0, r7
 80098cc:	f001 f860 	bl	800a990 <_free_r>
 80098d0:	2300      	movs	r3, #0
 80098d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80098d4:	2300      	movs	r3, #0
 80098d6:	61a3      	str	r3, [r4, #24]
 80098d8:	6063      	str	r3, [r4, #4]
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	061b      	lsls	r3, r3, #24
 80098de:	d503      	bpl.n	80098e8 <setvbuf+0x74>
 80098e0:	6921      	ldr	r1, [r4, #16]
 80098e2:	4638      	mov	r0, r7
 80098e4:	f001 f854 	bl	800a990 <_free_r>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80098ee:	f023 0303 	bic.w	r3, r3, #3
 80098f2:	f1b8 0f02 	cmp.w	r8, #2
 80098f6:	81a3      	strh	r3, [r4, #12]
 80098f8:	d061      	beq.n	80099be <setvbuf+0x14a>
 80098fa:	ab01      	add	r3, sp, #4
 80098fc:	466a      	mov	r2, sp
 80098fe:	4621      	mov	r1, r4
 8009900:	4638      	mov	r0, r7
 8009902:	f002 ffb9 	bl	800c878 <__swhatbuf_r>
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	4318      	orrs	r0, r3
 800990a:	81a0      	strh	r0, [r4, #12]
 800990c:	bb2d      	cbnz	r5, 800995a <setvbuf+0xe6>
 800990e:	9d00      	ldr	r5, [sp, #0]
 8009910:	4628      	mov	r0, r5
 8009912:	f001 f887 	bl	800aa24 <malloc>
 8009916:	4606      	mov	r6, r0
 8009918:	2800      	cmp	r0, #0
 800991a:	d152      	bne.n	80099c2 <setvbuf+0x14e>
 800991c:	f8dd 9000 	ldr.w	r9, [sp]
 8009920:	45a9      	cmp	r9, r5
 8009922:	d140      	bne.n	80099a6 <setvbuf+0x132>
 8009924:	f04f 35ff 	mov.w	r5, #4294967295
 8009928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992c:	f043 0202 	orr.w	r2, r3, #2
 8009930:	81a2      	strh	r2, [r4, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	60a2      	str	r2, [r4, #8]
 8009936:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800993a:	6022      	str	r2, [r4, #0]
 800993c:	6122      	str	r2, [r4, #16]
 800993e:	2201      	movs	r2, #1
 8009940:	6162      	str	r2, [r4, #20]
 8009942:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009944:	07d6      	lsls	r6, r2, #31
 8009946:	d404      	bmi.n	8009952 <setvbuf+0xde>
 8009948:	0598      	lsls	r0, r3, #22
 800994a:	d402      	bmi.n	8009952 <setvbuf+0xde>
 800994c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800994e:	f000 f9bd 	bl	8009ccc <__retarget_lock_release_recursive>
 8009952:	4628      	mov	r0, r5
 8009954:	b003      	add	sp, #12
 8009956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800995a:	2e00      	cmp	r6, #0
 800995c:	d0d8      	beq.n	8009910 <setvbuf+0x9c>
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	b913      	cbnz	r3, 8009968 <setvbuf+0xf4>
 8009962:	4638      	mov	r0, r7
 8009964:	f7ff fed8 	bl	8009718 <__sinit>
 8009968:	f1b8 0f01 	cmp.w	r8, #1
 800996c:	bf08      	it	eq
 800996e:	89a3      	ldrheq	r3, [r4, #12]
 8009970:	6026      	str	r6, [r4, #0]
 8009972:	bf04      	itt	eq
 8009974:	f043 0301 	orreq.w	r3, r3, #1
 8009978:	81a3      	strheq	r3, [r4, #12]
 800997a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997e:	f013 0208 	ands.w	r2, r3, #8
 8009982:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009986:	d01e      	beq.n	80099c6 <setvbuf+0x152>
 8009988:	07d9      	lsls	r1, r3, #31
 800998a:	bf41      	itttt	mi
 800998c:	2200      	movmi	r2, #0
 800998e:	426d      	negmi	r5, r5
 8009990:	60a2      	strmi	r2, [r4, #8]
 8009992:	61a5      	strmi	r5, [r4, #24]
 8009994:	bf58      	it	pl
 8009996:	60a5      	strpl	r5, [r4, #8]
 8009998:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800999a:	07d2      	lsls	r2, r2, #31
 800999c:	d401      	bmi.n	80099a2 <setvbuf+0x12e>
 800999e:	059b      	lsls	r3, r3, #22
 80099a0:	d513      	bpl.n	80099ca <setvbuf+0x156>
 80099a2:	2500      	movs	r5, #0
 80099a4:	e7d5      	b.n	8009952 <setvbuf+0xde>
 80099a6:	4648      	mov	r0, r9
 80099a8:	f001 f83c 	bl	800aa24 <malloc>
 80099ac:	4606      	mov	r6, r0
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d0b8      	beq.n	8009924 <setvbuf+0xb0>
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	464d      	mov	r5, r9
 80099bc:	e7cf      	b.n	800995e <setvbuf+0xea>
 80099be:	2500      	movs	r5, #0
 80099c0:	e7b2      	b.n	8009928 <setvbuf+0xb4>
 80099c2:	46a9      	mov	r9, r5
 80099c4:	e7f5      	b.n	80099b2 <setvbuf+0x13e>
 80099c6:	60a2      	str	r2, [r4, #8]
 80099c8:	e7e6      	b.n	8009998 <setvbuf+0x124>
 80099ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099cc:	f000 f97e 	bl	8009ccc <__retarget_lock_release_recursive>
 80099d0:	e7e7      	b.n	80099a2 <setvbuf+0x12e>
 80099d2:	f04f 35ff 	mov.w	r5, #4294967295
 80099d6:	e7bc      	b.n	8009952 <setvbuf+0xde>
 80099d8:	20000070 	.word	0x20000070

080099dc <siprintf>:
 80099dc:	b40e      	push	{r1, r2, r3}
 80099de:	b510      	push	{r4, lr}
 80099e0:	b09d      	sub	sp, #116	@ 0x74
 80099e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80099e4:	9002      	str	r0, [sp, #8]
 80099e6:	9006      	str	r0, [sp, #24]
 80099e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80099ec:	480a      	ldr	r0, [pc, #40]	@ (8009a18 <siprintf+0x3c>)
 80099ee:	9107      	str	r1, [sp, #28]
 80099f0:	9104      	str	r1, [sp, #16]
 80099f2:	490a      	ldr	r1, [pc, #40]	@ (8009a1c <siprintf+0x40>)
 80099f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80099f8:	9105      	str	r1, [sp, #20]
 80099fa:	2400      	movs	r4, #0
 80099fc:	a902      	add	r1, sp, #8
 80099fe:	6800      	ldr	r0, [r0, #0]
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009a04:	f002 fc4e 	bl	800c2a4 <_svfiprintf_r>
 8009a08:	9b02      	ldr	r3, [sp, #8]
 8009a0a:	701c      	strb	r4, [r3, #0]
 8009a0c:	b01d      	add	sp, #116	@ 0x74
 8009a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a12:	b003      	add	sp, #12
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20000070 	.word	0x20000070
 8009a1c:	ffff0208 	.word	0xffff0208

08009a20 <__sread>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	460c      	mov	r4, r1
 8009a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a28:	f000 f900 	bl	8009c2c <_read_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	bfab      	itete	ge
 8009a30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a32:	89a3      	ldrhlt	r3, [r4, #12]
 8009a34:	181b      	addge	r3, r3, r0
 8009a36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a3a:	bfac      	ite	ge
 8009a3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a3e:	81a3      	strhlt	r3, [r4, #12]
 8009a40:	bd10      	pop	{r4, pc}

08009a42 <__swrite>:
 8009a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a46:	461f      	mov	r7, r3
 8009a48:	898b      	ldrh	r3, [r1, #12]
 8009a4a:	05db      	lsls	r3, r3, #23
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	4616      	mov	r6, r2
 8009a52:	d505      	bpl.n	8009a60 <__swrite+0x1e>
 8009a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a58:	2302      	movs	r3, #2
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f000 f8d4 	bl	8009c08 <_lseek_r>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	463b      	mov	r3, r7
 8009a70:	4628      	mov	r0, r5
 8009a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a76:	f000 b8eb 	b.w	8009c50 <_write_r>

08009a7a <__sseek>:
 8009a7a:	b510      	push	{r4, lr}
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a82:	f000 f8c1 	bl	8009c08 <_lseek_r>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	bf15      	itete	ne
 8009a8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a96:	81a3      	strheq	r3, [r4, #12]
 8009a98:	bf18      	it	ne
 8009a9a:	81a3      	strhne	r3, [r4, #12]
 8009a9c:	bd10      	pop	{r4, pc}

08009a9e <__sclose>:
 8009a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa2:	f000 b8a1 	b.w	8009be8 <_close_r>

08009aa6 <__swbuf_r>:
 8009aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa8:	460e      	mov	r6, r1
 8009aaa:	4614      	mov	r4, r2
 8009aac:	4605      	mov	r5, r0
 8009aae:	b118      	cbz	r0, 8009ab8 <__swbuf_r+0x12>
 8009ab0:	6a03      	ldr	r3, [r0, #32]
 8009ab2:	b90b      	cbnz	r3, 8009ab8 <__swbuf_r+0x12>
 8009ab4:	f7ff fe30 	bl	8009718 <__sinit>
 8009ab8:	69a3      	ldr	r3, [r4, #24]
 8009aba:	60a3      	str	r3, [r4, #8]
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	071a      	lsls	r2, r3, #28
 8009ac0:	d501      	bpl.n	8009ac6 <__swbuf_r+0x20>
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	b943      	cbnz	r3, 8009ad8 <__swbuf_r+0x32>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f000 f82b 	bl	8009b24 <__swsetup_r>
 8009ace:	b118      	cbz	r0, 8009ad8 <__swbuf_r+0x32>
 8009ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	6922      	ldr	r2, [r4, #16]
 8009adc:	1a98      	subs	r0, r3, r2
 8009ade:	6963      	ldr	r3, [r4, #20]
 8009ae0:	b2f6      	uxtb	r6, r6
 8009ae2:	4283      	cmp	r3, r0
 8009ae4:	4637      	mov	r7, r6
 8009ae6:	dc05      	bgt.n	8009af4 <__swbuf_r+0x4e>
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4628      	mov	r0, r5
 8009aec:	f002 fe9c 	bl	800c828 <_fflush_r>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1ed      	bne.n	8009ad0 <__swbuf_r+0x2a>
 8009af4:	68a3      	ldr	r3, [r4, #8]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	60a3      	str	r3, [r4, #8]
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	6022      	str	r2, [r4, #0]
 8009b00:	701e      	strb	r6, [r3, #0]
 8009b02:	6962      	ldr	r2, [r4, #20]
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d004      	beq.n	8009b14 <__swbuf_r+0x6e>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	07db      	lsls	r3, r3, #31
 8009b0e:	d5e1      	bpl.n	8009ad4 <__swbuf_r+0x2e>
 8009b10:	2e0a      	cmp	r6, #10
 8009b12:	d1df      	bne.n	8009ad4 <__swbuf_r+0x2e>
 8009b14:	4621      	mov	r1, r4
 8009b16:	4628      	mov	r0, r5
 8009b18:	f002 fe86 	bl	800c828 <_fflush_r>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d0d9      	beq.n	8009ad4 <__swbuf_r+0x2e>
 8009b20:	e7d6      	b.n	8009ad0 <__swbuf_r+0x2a>
	...

08009b24 <__swsetup_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4b29      	ldr	r3, [pc, #164]	@ (8009bcc <__swsetup_r+0xa8>)
 8009b28:	4605      	mov	r5, r0
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	b118      	cbz	r0, 8009b38 <__swsetup_r+0x14>
 8009b30:	6a03      	ldr	r3, [r0, #32]
 8009b32:	b90b      	cbnz	r3, 8009b38 <__swsetup_r+0x14>
 8009b34:	f7ff fdf0 	bl	8009718 <__sinit>
 8009b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b3c:	0719      	lsls	r1, r3, #28
 8009b3e:	d422      	bmi.n	8009b86 <__swsetup_r+0x62>
 8009b40:	06da      	lsls	r2, r3, #27
 8009b42:	d407      	bmi.n	8009b54 <__swsetup_r+0x30>
 8009b44:	2209      	movs	r2, #9
 8009b46:	602a      	str	r2, [r5, #0]
 8009b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b4c:	81a3      	strh	r3, [r4, #12]
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	e033      	b.n	8009bbc <__swsetup_r+0x98>
 8009b54:	0758      	lsls	r0, r3, #29
 8009b56:	d512      	bpl.n	8009b7e <__swsetup_r+0x5a>
 8009b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b5a:	b141      	cbz	r1, 8009b6e <__swsetup_r+0x4a>
 8009b5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b60:	4299      	cmp	r1, r3
 8009b62:	d002      	beq.n	8009b6a <__swsetup_r+0x46>
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 ff13 	bl	800a990 <_free_r>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b74:	81a3      	strh	r3, [r4, #12]
 8009b76:	2300      	movs	r3, #0
 8009b78:	6063      	str	r3, [r4, #4]
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	f043 0308 	orr.w	r3, r3, #8
 8009b84:	81a3      	strh	r3, [r4, #12]
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	b94b      	cbnz	r3, 8009b9e <__swsetup_r+0x7a>
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b94:	d003      	beq.n	8009b9e <__swsetup_r+0x7a>
 8009b96:	4621      	mov	r1, r4
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f002 fe93 	bl	800c8c4 <__smakebuf_r>
 8009b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba2:	f013 0201 	ands.w	r2, r3, #1
 8009ba6:	d00a      	beq.n	8009bbe <__swsetup_r+0x9a>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	60a2      	str	r2, [r4, #8]
 8009bac:	6962      	ldr	r2, [r4, #20]
 8009bae:	4252      	negs	r2, r2
 8009bb0:	61a2      	str	r2, [r4, #24]
 8009bb2:	6922      	ldr	r2, [r4, #16]
 8009bb4:	b942      	cbnz	r2, 8009bc8 <__swsetup_r+0xa4>
 8009bb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009bba:	d1c5      	bne.n	8009b48 <__swsetup_r+0x24>
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	0799      	lsls	r1, r3, #30
 8009bc0:	bf58      	it	pl
 8009bc2:	6962      	ldrpl	r2, [r4, #20]
 8009bc4:	60a2      	str	r2, [r4, #8]
 8009bc6:	e7f4      	b.n	8009bb2 <__swsetup_r+0x8e>
 8009bc8:	2000      	movs	r0, #0
 8009bca:	e7f7      	b.n	8009bbc <__swsetup_r+0x98>
 8009bcc:	20000070 	.word	0x20000070

08009bd0 <memset>:
 8009bd0:	4402      	add	r2, r0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d100      	bne.n	8009bda <memset+0xa>
 8009bd8:	4770      	bx	lr
 8009bda:	f803 1b01 	strb.w	r1, [r3], #1
 8009bde:	e7f9      	b.n	8009bd4 <memset+0x4>

08009be0 <_localeconv_r>:
 8009be0:	4800      	ldr	r0, [pc, #0]	@ (8009be4 <_localeconv_r+0x4>)
 8009be2:	4770      	bx	lr
 8009be4:	200001b0 	.word	0x200001b0

08009be8 <_close_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d06      	ldr	r5, [pc, #24]	@ (8009c04 <_close_r+0x1c>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f8 fdfa 	bl	80027ec <_close>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_close_r+0x1a>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_close_r+0x1a>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	20000610 	.word	0x20000610

08009c08 <_lseek_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d07      	ldr	r5, [pc, #28]	@ (8009c28 <_lseek_r+0x20>)
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	4608      	mov	r0, r1
 8009c10:	4611      	mov	r1, r2
 8009c12:	2200      	movs	r2, #0
 8009c14:	602a      	str	r2, [r5, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	f7f8 fe0f 	bl	800283a <_lseek>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_lseek_r+0x1e>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_lseek_r+0x1e>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	20000610 	.word	0x20000610

08009c2c <_read_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d07      	ldr	r5, [pc, #28]	@ (8009c4c <_read_r+0x20>)
 8009c30:	4604      	mov	r4, r0
 8009c32:	4608      	mov	r0, r1
 8009c34:	4611      	mov	r1, r2
 8009c36:	2200      	movs	r2, #0
 8009c38:	602a      	str	r2, [r5, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f7f8 fd9d 	bl	800277a <_read>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d102      	bne.n	8009c4a <_read_r+0x1e>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	b103      	cbz	r3, 8009c4a <_read_r+0x1e>
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	20000610 	.word	0x20000610

08009c50 <_write_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d07      	ldr	r5, [pc, #28]	@ (8009c70 <_write_r+0x20>)
 8009c54:	4604      	mov	r4, r0
 8009c56:	4608      	mov	r0, r1
 8009c58:	4611      	mov	r1, r2
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	602a      	str	r2, [r5, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f7f8 fda8 	bl	80027b4 <_write>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_write_r+0x1e>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_write_r+0x1e>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	20000610 	.word	0x20000610

08009c74 <__errno>:
 8009c74:	4b01      	ldr	r3, [pc, #4]	@ (8009c7c <__errno+0x8>)
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	20000070 	.word	0x20000070

08009c80 <__libc_init_array>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	4d0d      	ldr	r5, [pc, #52]	@ (8009cb8 <__libc_init_array+0x38>)
 8009c84:	4c0d      	ldr	r4, [pc, #52]	@ (8009cbc <__libc_init_array+0x3c>)
 8009c86:	1b64      	subs	r4, r4, r5
 8009c88:	10a4      	asrs	r4, r4, #2
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	42a6      	cmp	r6, r4
 8009c8e:	d109      	bne.n	8009ca4 <__libc_init_array+0x24>
 8009c90:	4d0b      	ldr	r5, [pc, #44]	@ (8009cc0 <__libc_init_array+0x40>)
 8009c92:	4c0c      	ldr	r4, [pc, #48]	@ (8009cc4 <__libc_init_array+0x44>)
 8009c94:	f003 fae6 	bl	800d264 <_init>
 8009c98:	1b64      	subs	r4, r4, r5
 8009c9a:	10a4      	asrs	r4, r4, #2
 8009c9c:	2600      	movs	r6, #0
 8009c9e:	42a6      	cmp	r6, r4
 8009ca0:	d105      	bne.n	8009cae <__libc_init_array+0x2e>
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca8:	4798      	blx	r3
 8009caa:	3601      	adds	r6, #1
 8009cac:	e7ee      	b.n	8009c8c <__libc_init_array+0xc>
 8009cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb2:	4798      	blx	r3
 8009cb4:	3601      	adds	r6, #1
 8009cb6:	e7f2      	b.n	8009c9e <__libc_init_array+0x1e>
 8009cb8:	0800db0c 	.word	0x0800db0c
 8009cbc:	0800db0c 	.word	0x0800db0c
 8009cc0:	0800db0c 	.word	0x0800db0c
 8009cc4:	0800db10 	.word	0x0800db10

08009cc8 <__retarget_lock_init_recursive>:
 8009cc8:	4770      	bx	lr

08009cca <__retarget_lock_acquire_recursive>:
 8009cca:	4770      	bx	lr

08009ccc <__retarget_lock_release_recursive>:
 8009ccc:	4770      	bx	lr
	...

08009cd0 <nanf>:
 8009cd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009cd8 <nanf+0x8>
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	7fc00000 	.word	0x7fc00000

08009cdc <quorem>:
 8009cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	6903      	ldr	r3, [r0, #16]
 8009ce2:	690c      	ldr	r4, [r1, #16]
 8009ce4:	42a3      	cmp	r3, r4
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	db7e      	blt.n	8009de8 <quorem+0x10c>
 8009cea:	3c01      	subs	r4, #1
 8009cec:	f101 0814 	add.w	r8, r1, #20
 8009cf0:	00a3      	lsls	r3, r4, #2
 8009cf2:	f100 0514 	add.w	r5, r0, #20
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d06:	3301      	adds	r3, #1
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d12:	d32e      	bcc.n	8009d72 <quorem+0x96>
 8009d14:	f04f 0a00 	mov.w	sl, #0
 8009d18:	46c4      	mov	ip, r8
 8009d1a:	46ae      	mov	lr, r5
 8009d1c:	46d3      	mov	fp, sl
 8009d1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d22:	b298      	uxth	r0, r3
 8009d24:	fb06 a000 	mla	r0, r6, r0, sl
 8009d28:	0c02      	lsrs	r2, r0, #16
 8009d2a:	0c1b      	lsrs	r3, r3, #16
 8009d2c:	fb06 2303 	mla	r3, r6, r3, r2
 8009d30:	f8de 2000 	ldr.w	r2, [lr]
 8009d34:	b280      	uxth	r0, r0
 8009d36:	b292      	uxth	r2, r2
 8009d38:	1a12      	subs	r2, r2, r0
 8009d3a:	445a      	add	r2, fp
 8009d3c:	f8de 0000 	ldr.w	r0, [lr]
 8009d40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d4e:	b292      	uxth	r2, r2
 8009d50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d54:	45e1      	cmp	r9, ip
 8009d56:	f84e 2b04 	str.w	r2, [lr], #4
 8009d5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d5e:	d2de      	bcs.n	8009d1e <quorem+0x42>
 8009d60:	9b00      	ldr	r3, [sp, #0]
 8009d62:	58eb      	ldr	r3, [r5, r3]
 8009d64:	b92b      	cbnz	r3, 8009d72 <quorem+0x96>
 8009d66:	9b01      	ldr	r3, [sp, #4]
 8009d68:	3b04      	subs	r3, #4
 8009d6a:	429d      	cmp	r5, r3
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	d32f      	bcc.n	8009dd0 <quorem+0xf4>
 8009d70:	613c      	str	r4, [r7, #16]
 8009d72:	4638      	mov	r0, r7
 8009d74:	f001 f9c8 	bl	800b108 <__mcmp>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	db25      	blt.n	8009dc8 <quorem+0xec>
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	2000      	movs	r0, #0
 8009d80:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d84:	f8d1 c000 	ldr.w	ip, [r1]
 8009d88:	fa1f fe82 	uxth.w	lr, r2
 8009d8c:	fa1f f38c 	uxth.w	r3, ip
 8009d90:	eba3 030e 	sub.w	r3, r3, lr
 8009d94:	4403      	add	r3, r0
 8009d96:	0c12      	lsrs	r2, r2, #16
 8009d98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009da6:	45c1      	cmp	r9, r8
 8009da8:	f841 3b04 	str.w	r3, [r1], #4
 8009dac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009db0:	d2e6      	bcs.n	8009d80 <quorem+0xa4>
 8009db2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009db6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dba:	b922      	cbnz	r2, 8009dc6 <quorem+0xea>
 8009dbc:	3b04      	subs	r3, #4
 8009dbe:	429d      	cmp	r5, r3
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	d30b      	bcc.n	8009ddc <quorem+0x100>
 8009dc4:	613c      	str	r4, [r7, #16]
 8009dc6:	3601      	adds	r6, #1
 8009dc8:	4630      	mov	r0, r6
 8009dca:	b003      	add	sp, #12
 8009dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd0:	6812      	ldr	r2, [r2, #0]
 8009dd2:	3b04      	subs	r3, #4
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	d1cb      	bne.n	8009d70 <quorem+0x94>
 8009dd8:	3c01      	subs	r4, #1
 8009dda:	e7c6      	b.n	8009d6a <quorem+0x8e>
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	3b04      	subs	r3, #4
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	d1ef      	bne.n	8009dc4 <quorem+0xe8>
 8009de4:	3c01      	subs	r4, #1
 8009de6:	e7ea      	b.n	8009dbe <quorem+0xe2>
 8009de8:	2000      	movs	r0, #0
 8009dea:	e7ee      	b.n	8009dca <quorem+0xee>
 8009dec:	0000      	movs	r0, r0
	...

08009df0 <_dtoa_r>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	69c7      	ldr	r7, [r0, #28]
 8009df6:	b097      	sub	sp, #92	@ 0x5c
 8009df8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009dfc:	ec55 4b10 	vmov	r4, r5, d0
 8009e00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009e02:	9107      	str	r1, [sp, #28]
 8009e04:	4681      	mov	r9, r0
 8009e06:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e08:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e0a:	b97f      	cbnz	r7, 8009e2c <_dtoa_r+0x3c>
 8009e0c:	2010      	movs	r0, #16
 8009e0e:	f000 fe09 	bl	800aa24 <malloc>
 8009e12:	4602      	mov	r2, r0
 8009e14:	f8c9 001c 	str.w	r0, [r9, #28]
 8009e18:	b920      	cbnz	r0, 8009e24 <_dtoa_r+0x34>
 8009e1a:	4ba9      	ldr	r3, [pc, #676]	@ (800a0c0 <_dtoa_r+0x2d0>)
 8009e1c:	21ef      	movs	r1, #239	@ 0xef
 8009e1e:	48a9      	ldr	r0, [pc, #676]	@ (800a0c4 <_dtoa_r+0x2d4>)
 8009e20:	f002 fe02 	bl	800ca28 <__assert_func>
 8009e24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e28:	6007      	str	r7, [r0, #0]
 8009e2a:	60c7      	str	r7, [r0, #12]
 8009e2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e30:	6819      	ldr	r1, [r3, #0]
 8009e32:	b159      	cbz	r1, 8009e4c <_dtoa_r+0x5c>
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	604a      	str	r2, [r1, #4]
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4093      	lsls	r3, r2
 8009e3c:	608b      	str	r3, [r1, #8]
 8009e3e:	4648      	mov	r0, r9
 8009e40:	f000 fee6 	bl	800ac10 <_Bfree>
 8009e44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	1e2b      	subs	r3, r5, #0
 8009e4e:	bfb9      	ittee	lt
 8009e50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e54:	9305      	strlt	r3, [sp, #20]
 8009e56:	2300      	movge	r3, #0
 8009e58:	6033      	strge	r3, [r6, #0]
 8009e5a:	9f05      	ldr	r7, [sp, #20]
 8009e5c:	4b9a      	ldr	r3, [pc, #616]	@ (800a0c8 <_dtoa_r+0x2d8>)
 8009e5e:	bfbc      	itt	lt
 8009e60:	2201      	movlt	r2, #1
 8009e62:	6032      	strlt	r2, [r6, #0]
 8009e64:	43bb      	bics	r3, r7
 8009e66:	d112      	bne.n	8009e8e <_dtoa_r+0x9e>
 8009e68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e74:	4323      	orrs	r3, r4
 8009e76:	f000 855a 	beq.w	800a92e <_dtoa_r+0xb3e>
 8009e7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e7c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a0dc <_dtoa_r+0x2ec>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 855c 	beq.w	800a93e <_dtoa_r+0xb4e>
 8009e86:	f10a 0303 	add.w	r3, sl, #3
 8009e8a:	f000 bd56 	b.w	800a93a <_dtoa_r+0xb4a>
 8009e8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009e92:	2200      	movs	r2, #0
 8009e94:	ec51 0b17 	vmov	r0, r1, d7
 8009e98:	2300      	movs	r3, #0
 8009e9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009e9e:	f7f6 fe33 	bl	8000b08 <__aeabi_dcmpeq>
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	b158      	cbz	r0, 8009ebe <_dtoa_r+0xce>
 8009ea6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009eae:	b113      	cbz	r3, 8009eb6 <_dtoa_r+0xc6>
 8009eb0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009eb2:	4b86      	ldr	r3, [pc, #536]	@ (800a0cc <_dtoa_r+0x2dc>)
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a0e0 <_dtoa_r+0x2f0>
 8009eba:	f000 bd40 	b.w	800a93e <_dtoa_r+0xb4e>
 8009ebe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009ec2:	aa14      	add	r2, sp, #80	@ 0x50
 8009ec4:	a915      	add	r1, sp, #84	@ 0x54
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f001 fa3e 	bl	800b348 <__d2b>
 8009ecc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ed0:	9002      	str	r0, [sp, #8]
 8009ed2:	2e00      	cmp	r6, #0
 8009ed4:	d078      	beq.n	8009fc8 <_dtoa_r+0x1d8>
 8009ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ed8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ee0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009ee4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ee8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009eec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4b76      	ldr	r3, [pc, #472]	@ (800a0d0 <_dtoa_r+0x2e0>)
 8009ef6:	f7f6 f9e7 	bl	80002c8 <__aeabi_dsub>
 8009efa:	a36b      	add	r3, pc, #428	@ (adr r3, 800a0a8 <_dtoa_r+0x2b8>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 fb9a 	bl	8000638 <__aeabi_dmul>
 8009f04:	a36a      	add	r3, pc, #424	@ (adr r3, 800a0b0 <_dtoa_r+0x2c0>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f9df 	bl	80002cc <__adddf3>
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4630      	mov	r0, r6
 8009f12:	460d      	mov	r5, r1
 8009f14:	f7f6 fb26 	bl	8000564 <__aeabi_i2d>
 8009f18:	a367      	add	r3, pc, #412	@ (adr r3, 800a0b8 <_dtoa_r+0x2c8>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 fb8b 	bl	8000638 <__aeabi_dmul>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4620      	mov	r0, r4
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7f6 f9cf 	bl	80002cc <__adddf3>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	460d      	mov	r5, r1
 8009f32:	f7f6 fe31 	bl	8000b98 <__aeabi_d2iz>
 8009f36:	2200      	movs	r2, #0
 8009f38:	4607      	mov	r7, r0
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f7f6 fdec 	bl	8000b1c <__aeabi_dcmplt>
 8009f44:	b140      	cbz	r0, 8009f58 <_dtoa_r+0x168>
 8009f46:	4638      	mov	r0, r7
 8009f48:	f7f6 fb0c 	bl	8000564 <__aeabi_i2d>
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	462b      	mov	r3, r5
 8009f50:	f7f6 fdda 	bl	8000b08 <__aeabi_dcmpeq>
 8009f54:	b900      	cbnz	r0, 8009f58 <_dtoa_r+0x168>
 8009f56:	3f01      	subs	r7, #1
 8009f58:	2f16      	cmp	r7, #22
 8009f5a:	d852      	bhi.n	800a002 <_dtoa_r+0x212>
 8009f5c:	4b5d      	ldr	r3, [pc, #372]	@ (800a0d4 <_dtoa_r+0x2e4>)
 8009f5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f6a:	f7f6 fdd7 	bl	8000b1c <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d049      	beq.n	800a006 <_dtoa_r+0x216>
 8009f72:	3f01      	subs	r7, #1
 8009f74:	2300      	movs	r3, #0
 8009f76:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f7a:	1b9b      	subs	r3, r3, r6
 8009f7c:	1e5a      	subs	r2, r3, #1
 8009f7e:	bf45      	ittet	mi
 8009f80:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f84:	9300      	strmi	r3, [sp, #0]
 8009f86:	2300      	movpl	r3, #0
 8009f88:	2300      	movmi	r3, #0
 8009f8a:	9206      	str	r2, [sp, #24]
 8009f8c:	bf54      	ite	pl
 8009f8e:	9300      	strpl	r3, [sp, #0]
 8009f90:	9306      	strmi	r3, [sp, #24]
 8009f92:	2f00      	cmp	r7, #0
 8009f94:	db39      	blt.n	800a00a <_dtoa_r+0x21a>
 8009f96:	9b06      	ldr	r3, [sp, #24]
 8009f98:	970d      	str	r7, [sp, #52]	@ 0x34
 8009f9a:	443b      	add	r3, r7
 8009f9c:	9306      	str	r3, [sp, #24]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	9308      	str	r3, [sp, #32]
 8009fa2:	9b07      	ldr	r3, [sp, #28]
 8009fa4:	2b09      	cmp	r3, #9
 8009fa6:	d863      	bhi.n	800a070 <_dtoa_r+0x280>
 8009fa8:	2b05      	cmp	r3, #5
 8009faa:	bfc4      	itt	gt
 8009fac:	3b04      	subgt	r3, #4
 8009fae:	9307      	strgt	r3, [sp, #28]
 8009fb0:	9b07      	ldr	r3, [sp, #28]
 8009fb2:	f1a3 0302 	sub.w	r3, r3, #2
 8009fb6:	bfcc      	ite	gt
 8009fb8:	2400      	movgt	r4, #0
 8009fba:	2401      	movle	r4, #1
 8009fbc:	2b03      	cmp	r3, #3
 8009fbe:	d863      	bhi.n	800a088 <_dtoa_r+0x298>
 8009fc0:	e8df f003 	tbb	[pc, r3]
 8009fc4:	2b375452 	.word	0x2b375452
 8009fc8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009fcc:	441e      	add	r6, r3
 8009fce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009fd2:	2b20      	cmp	r3, #32
 8009fd4:	bfc1      	itttt	gt
 8009fd6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009fda:	409f      	lslgt	r7, r3
 8009fdc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009fe0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009fe4:	bfd6      	itet	le
 8009fe6:	f1c3 0320 	rsble	r3, r3, #32
 8009fea:	ea47 0003 	orrgt.w	r0, r7, r3
 8009fee:	fa04 f003 	lslle.w	r0, r4, r3
 8009ff2:	f7f6 faa7 	bl	8000544 <__aeabi_ui2d>
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ffc:	3e01      	subs	r6, #1
 8009ffe:	9212      	str	r2, [sp, #72]	@ 0x48
 800a000:	e776      	b.n	8009ef0 <_dtoa_r+0x100>
 800a002:	2301      	movs	r3, #1
 800a004:	e7b7      	b.n	8009f76 <_dtoa_r+0x186>
 800a006:	9010      	str	r0, [sp, #64]	@ 0x40
 800a008:	e7b6      	b.n	8009f78 <_dtoa_r+0x188>
 800a00a:	9b00      	ldr	r3, [sp, #0]
 800a00c:	1bdb      	subs	r3, r3, r7
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	427b      	negs	r3, r7
 800a012:	9308      	str	r3, [sp, #32]
 800a014:	2300      	movs	r3, #0
 800a016:	930d      	str	r3, [sp, #52]	@ 0x34
 800a018:	e7c3      	b.n	8009fa2 <_dtoa_r+0x1b2>
 800a01a:	2301      	movs	r3, #1
 800a01c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a01e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a020:	eb07 0b03 	add.w	fp, r7, r3
 800a024:	f10b 0301 	add.w	r3, fp, #1
 800a028:	2b01      	cmp	r3, #1
 800a02a:	9303      	str	r3, [sp, #12]
 800a02c:	bfb8      	it	lt
 800a02e:	2301      	movlt	r3, #1
 800a030:	e006      	b.n	800a040 <_dtoa_r+0x250>
 800a032:	2301      	movs	r3, #1
 800a034:	9309      	str	r3, [sp, #36]	@ 0x24
 800a036:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dd28      	ble.n	800a08e <_dtoa_r+0x29e>
 800a03c:	469b      	mov	fp, r3
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a044:	2100      	movs	r1, #0
 800a046:	2204      	movs	r2, #4
 800a048:	f102 0514 	add.w	r5, r2, #20
 800a04c:	429d      	cmp	r5, r3
 800a04e:	d926      	bls.n	800a09e <_dtoa_r+0x2ae>
 800a050:	6041      	str	r1, [r0, #4]
 800a052:	4648      	mov	r0, r9
 800a054:	f000 fd9c 	bl	800ab90 <_Balloc>
 800a058:	4682      	mov	sl, r0
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d142      	bne.n	800a0e4 <_dtoa_r+0x2f4>
 800a05e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0d8 <_dtoa_r+0x2e8>)
 800a060:	4602      	mov	r2, r0
 800a062:	f240 11af 	movw	r1, #431	@ 0x1af
 800a066:	e6da      	b.n	8009e1e <_dtoa_r+0x2e>
 800a068:	2300      	movs	r3, #0
 800a06a:	e7e3      	b.n	800a034 <_dtoa_r+0x244>
 800a06c:	2300      	movs	r3, #0
 800a06e:	e7d5      	b.n	800a01c <_dtoa_r+0x22c>
 800a070:	2401      	movs	r4, #1
 800a072:	2300      	movs	r3, #0
 800a074:	9307      	str	r3, [sp, #28]
 800a076:	9409      	str	r4, [sp, #36]	@ 0x24
 800a078:	f04f 3bff 	mov.w	fp, #4294967295
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a082:	2312      	movs	r3, #18
 800a084:	920c      	str	r2, [sp, #48]	@ 0x30
 800a086:	e7db      	b.n	800a040 <_dtoa_r+0x250>
 800a088:	2301      	movs	r3, #1
 800a08a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a08c:	e7f4      	b.n	800a078 <_dtoa_r+0x288>
 800a08e:	f04f 0b01 	mov.w	fp, #1
 800a092:	f8cd b00c 	str.w	fp, [sp, #12]
 800a096:	465b      	mov	r3, fp
 800a098:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a09c:	e7d0      	b.n	800a040 <_dtoa_r+0x250>
 800a09e:	3101      	adds	r1, #1
 800a0a0:	0052      	lsls	r2, r2, #1
 800a0a2:	e7d1      	b.n	800a048 <_dtoa_r+0x258>
 800a0a4:	f3af 8000 	nop.w
 800a0a8:	636f4361 	.word	0x636f4361
 800a0ac:	3fd287a7 	.word	0x3fd287a7
 800a0b0:	8b60c8b3 	.word	0x8b60c8b3
 800a0b4:	3fc68a28 	.word	0x3fc68a28
 800a0b8:	509f79fb 	.word	0x509f79fb
 800a0bc:	3fd34413 	.word	0x3fd34413
 800a0c0:	0800d722 	.word	0x0800d722
 800a0c4:	0800d739 	.word	0x0800d739
 800a0c8:	7ff00000 	.word	0x7ff00000
 800a0cc:	0800d6ed 	.word	0x0800d6ed
 800a0d0:	3ff80000 	.word	0x3ff80000
 800a0d4:	0800d8e8 	.word	0x0800d8e8
 800a0d8:	0800d791 	.word	0x0800d791
 800a0dc:	0800d71e 	.word	0x0800d71e
 800a0e0:	0800d6ec 	.word	0x0800d6ec
 800a0e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a0e8:	6018      	str	r0, [r3, #0]
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	2b0e      	cmp	r3, #14
 800a0ee:	f200 80a1 	bhi.w	800a234 <_dtoa_r+0x444>
 800a0f2:	2c00      	cmp	r4, #0
 800a0f4:	f000 809e 	beq.w	800a234 <_dtoa_r+0x444>
 800a0f8:	2f00      	cmp	r7, #0
 800a0fa:	dd33      	ble.n	800a164 <_dtoa_r+0x374>
 800a0fc:	4b9c      	ldr	r3, [pc, #624]	@ (800a370 <_dtoa_r+0x580>)
 800a0fe:	f007 020f 	and.w	r2, r7, #15
 800a102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a106:	ed93 7b00 	vldr	d7, [r3]
 800a10a:	05f8      	lsls	r0, r7, #23
 800a10c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a110:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a114:	d516      	bpl.n	800a144 <_dtoa_r+0x354>
 800a116:	4b97      	ldr	r3, [pc, #604]	@ (800a374 <_dtoa_r+0x584>)
 800a118:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a11c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a120:	f7f6 fbb4 	bl	800088c <__aeabi_ddiv>
 800a124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a128:	f004 040f 	and.w	r4, r4, #15
 800a12c:	2603      	movs	r6, #3
 800a12e:	4d91      	ldr	r5, [pc, #580]	@ (800a374 <_dtoa_r+0x584>)
 800a130:	b954      	cbnz	r4, 800a148 <_dtoa_r+0x358>
 800a132:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a13a:	f7f6 fba7 	bl	800088c <__aeabi_ddiv>
 800a13e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a142:	e028      	b.n	800a196 <_dtoa_r+0x3a6>
 800a144:	2602      	movs	r6, #2
 800a146:	e7f2      	b.n	800a12e <_dtoa_r+0x33e>
 800a148:	07e1      	lsls	r1, r4, #31
 800a14a:	d508      	bpl.n	800a15e <_dtoa_r+0x36e>
 800a14c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a150:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a154:	f7f6 fa70 	bl	8000638 <__aeabi_dmul>
 800a158:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a15c:	3601      	adds	r6, #1
 800a15e:	1064      	asrs	r4, r4, #1
 800a160:	3508      	adds	r5, #8
 800a162:	e7e5      	b.n	800a130 <_dtoa_r+0x340>
 800a164:	f000 80af 	beq.w	800a2c6 <_dtoa_r+0x4d6>
 800a168:	427c      	negs	r4, r7
 800a16a:	4b81      	ldr	r3, [pc, #516]	@ (800a370 <_dtoa_r+0x580>)
 800a16c:	4d81      	ldr	r5, [pc, #516]	@ (800a374 <_dtoa_r+0x584>)
 800a16e:	f004 020f 	and.w	r2, r4, #15
 800a172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a17e:	f7f6 fa5b 	bl	8000638 <__aeabi_dmul>
 800a182:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a186:	1124      	asrs	r4, r4, #4
 800a188:	2300      	movs	r3, #0
 800a18a:	2602      	movs	r6, #2
 800a18c:	2c00      	cmp	r4, #0
 800a18e:	f040 808f 	bne.w	800a2b0 <_dtoa_r+0x4c0>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1d3      	bne.n	800a13e <_dtoa_r+0x34e>
 800a196:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a198:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 8094 	beq.w	800a2ca <_dtoa_r+0x4da>
 800a1a2:	4b75      	ldr	r3, [pc, #468]	@ (800a378 <_dtoa_r+0x588>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f7f6 fcb7 	bl	8000b1c <__aeabi_dcmplt>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f000 808b 	beq.w	800a2ca <_dtoa_r+0x4da>
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 8087 	beq.w	800a2ca <_dtoa_r+0x4da>
 800a1bc:	f1bb 0f00 	cmp.w	fp, #0
 800a1c0:	dd34      	ble.n	800a22c <_dtoa_r+0x43c>
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	4b6d      	ldr	r3, [pc, #436]	@ (800a37c <_dtoa_r+0x58c>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	f7f6 fa35 	bl	8000638 <__aeabi_dmul>
 800a1ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1d2:	f107 38ff 	add.w	r8, r7, #4294967295
 800a1d6:	3601      	adds	r6, #1
 800a1d8:	465c      	mov	r4, fp
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7f6 f9c2 	bl	8000564 <__aeabi_i2d>
 800a1e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1e4:	f7f6 fa28 	bl	8000638 <__aeabi_dmul>
 800a1e8:	4b65      	ldr	r3, [pc, #404]	@ (800a380 <_dtoa_r+0x590>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f7f6 f86e 	bl	80002cc <__adddf3>
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a1f6:	2c00      	cmp	r4, #0
 800a1f8:	d16a      	bne.n	800a2d0 <_dtoa_r+0x4e0>
 800a1fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1fe:	4b61      	ldr	r3, [pc, #388]	@ (800a384 <_dtoa_r+0x594>)
 800a200:	2200      	movs	r2, #0
 800a202:	f7f6 f861 	bl	80002c8 <__aeabi_dsub>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a20e:	462a      	mov	r2, r5
 800a210:	4633      	mov	r3, r6
 800a212:	f7f6 fca1 	bl	8000b58 <__aeabi_dcmpgt>
 800a216:	2800      	cmp	r0, #0
 800a218:	f040 8298 	bne.w	800a74c <_dtoa_r+0x95c>
 800a21c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a220:	462a      	mov	r2, r5
 800a222:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a226:	f7f6 fc79 	bl	8000b1c <__aeabi_dcmplt>
 800a22a:	bb38      	cbnz	r0, 800a27c <_dtoa_r+0x48c>
 800a22c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a230:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a234:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a236:	2b00      	cmp	r3, #0
 800a238:	f2c0 8157 	blt.w	800a4ea <_dtoa_r+0x6fa>
 800a23c:	2f0e      	cmp	r7, #14
 800a23e:	f300 8154 	bgt.w	800a4ea <_dtoa_r+0x6fa>
 800a242:	4b4b      	ldr	r3, [pc, #300]	@ (800a370 <_dtoa_r+0x580>)
 800a244:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a248:	ed93 7b00 	vldr	d7, [r3]
 800a24c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a24e:	2b00      	cmp	r3, #0
 800a250:	ed8d 7b00 	vstr	d7, [sp]
 800a254:	f280 80e5 	bge.w	800a422 <_dtoa_r+0x632>
 800a258:	9b03      	ldr	r3, [sp, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f300 80e1 	bgt.w	800a422 <_dtoa_r+0x632>
 800a260:	d10c      	bne.n	800a27c <_dtoa_r+0x48c>
 800a262:	4b48      	ldr	r3, [pc, #288]	@ (800a384 <_dtoa_r+0x594>)
 800a264:	2200      	movs	r2, #0
 800a266:	ec51 0b17 	vmov	r0, r1, d7
 800a26a:	f7f6 f9e5 	bl	8000638 <__aeabi_dmul>
 800a26e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a272:	f7f6 fc67 	bl	8000b44 <__aeabi_dcmpge>
 800a276:	2800      	cmp	r0, #0
 800a278:	f000 8266 	beq.w	800a748 <_dtoa_r+0x958>
 800a27c:	2400      	movs	r4, #0
 800a27e:	4625      	mov	r5, r4
 800a280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a282:	4656      	mov	r6, sl
 800a284:	ea6f 0803 	mvn.w	r8, r3
 800a288:	2700      	movs	r7, #0
 800a28a:	4621      	mov	r1, r4
 800a28c:	4648      	mov	r0, r9
 800a28e:	f000 fcbf 	bl	800ac10 <_Bfree>
 800a292:	2d00      	cmp	r5, #0
 800a294:	f000 80bd 	beq.w	800a412 <_dtoa_r+0x622>
 800a298:	b12f      	cbz	r7, 800a2a6 <_dtoa_r+0x4b6>
 800a29a:	42af      	cmp	r7, r5
 800a29c:	d003      	beq.n	800a2a6 <_dtoa_r+0x4b6>
 800a29e:	4639      	mov	r1, r7
 800a2a0:	4648      	mov	r0, r9
 800a2a2:	f000 fcb5 	bl	800ac10 <_Bfree>
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f000 fcb1 	bl	800ac10 <_Bfree>
 800a2ae:	e0b0      	b.n	800a412 <_dtoa_r+0x622>
 800a2b0:	07e2      	lsls	r2, r4, #31
 800a2b2:	d505      	bpl.n	800a2c0 <_dtoa_r+0x4d0>
 800a2b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2b8:	f7f6 f9be 	bl	8000638 <__aeabi_dmul>
 800a2bc:	3601      	adds	r6, #1
 800a2be:	2301      	movs	r3, #1
 800a2c0:	1064      	asrs	r4, r4, #1
 800a2c2:	3508      	adds	r5, #8
 800a2c4:	e762      	b.n	800a18c <_dtoa_r+0x39c>
 800a2c6:	2602      	movs	r6, #2
 800a2c8:	e765      	b.n	800a196 <_dtoa_r+0x3a6>
 800a2ca:	9c03      	ldr	r4, [sp, #12]
 800a2cc:	46b8      	mov	r8, r7
 800a2ce:	e784      	b.n	800a1da <_dtoa_r+0x3ea>
 800a2d0:	4b27      	ldr	r3, [pc, #156]	@ (800a370 <_dtoa_r+0x580>)
 800a2d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2dc:	4454      	add	r4, sl
 800a2de:	2900      	cmp	r1, #0
 800a2e0:	d054      	beq.n	800a38c <_dtoa_r+0x59c>
 800a2e2:	4929      	ldr	r1, [pc, #164]	@ (800a388 <_dtoa_r+0x598>)
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f7f6 fad1 	bl	800088c <__aeabi_ddiv>
 800a2ea:	4633      	mov	r3, r6
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	f7f5 ffeb 	bl	80002c8 <__aeabi_dsub>
 800a2f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2f6:	4656      	mov	r6, sl
 800a2f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2fc:	f7f6 fc4c 	bl	8000b98 <__aeabi_d2iz>
 800a300:	4605      	mov	r5, r0
 800a302:	f7f6 f92f 	bl	8000564 <__aeabi_i2d>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a30e:	f7f5 ffdb 	bl	80002c8 <__aeabi_dsub>
 800a312:	3530      	adds	r5, #48	@ 0x30
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a31c:	f806 5b01 	strb.w	r5, [r6], #1
 800a320:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a324:	f7f6 fbfa 	bl	8000b1c <__aeabi_dcmplt>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d172      	bne.n	800a412 <_dtoa_r+0x622>
 800a32c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a330:	4911      	ldr	r1, [pc, #68]	@ (800a378 <_dtoa_r+0x588>)
 800a332:	2000      	movs	r0, #0
 800a334:	f7f5 ffc8 	bl	80002c8 <__aeabi_dsub>
 800a338:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a33c:	f7f6 fbee 	bl	8000b1c <__aeabi_dcmplt>
 800a340:	2800      	cmp	r0, #0
 800a342:	f040 80b4 	bne.w	800a4ae <_dtoa_r+0x6be>
 800a346:	42a6      	cmp	r6, r4
 800a348:	f43f af70 	beq.w	800a22c <_dtoa_r+0x43c>
 800a34c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a350:	4b0a      	ldr	r3, [pc, #40]	@ (800a37c <_dtoa_r+0x58c>)
 800a352:	2200      	movs	r2, #0
 800a354:	f7f6 f970 	bl	8000638 <__aeabi_dmul>
 800a358:	4b08      	ldr	r3, [pc, #32]	@ (800a37c <_dtoa_r+0x58c>)
 800a35a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a35e:	2200      	movs	r2, #0
 800a360:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a364:	f7f6 f968 	bl	8000638 <__aeabi_dmul>
 800a368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a36c:	e7c4      	b.n	800a2f8 <_dtoa_r+0x508>
 800a36e:	bf00      	nop
 800a370:	0800d8e8 	.word	0x0800d8e8
 800a374:	0800d8c0 	.word	0x0800d8c0
 800a378:	3ff00000 	.word	0x3ff00000
 800a37c:	40240000 	.word	0x40240000
 800a380:	401c0000 	.word	0x401c0000
 800a384:	40140000 	.word	0x40140000
 800a388:	3fe00000 	.word	0x3fe00000
 800a38c:	4631      	mov	r1, r6
 800a38e:	4628      	mov	r0, r5
 800a390:	f7f6 f952 	bl	8000638 <__aeabi_dmul>
 800a394:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a398:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a39a:	4656      	mov	r6, sl
 800a39c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3a0:	f7f6 fbfa 	bl	8000b98 <__aeabi_d2iz>
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	f7f6 f8dd 	bl	8000564 <__aeabi_i2d>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3b2:	f7f5 ff89 	bl	80002c8 <__aeabi_dsub>
 800a3b6:	3530      	adds	r5, #48	@ 0x30
 800a3b8:	f806 5b01 	strb.w	r5, [r6], #1
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	42a6      	cmp	r6, r4
 800a3c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3c6:	f04f 0200 	mov.w	r2, #0
 800a3ca:	d124      	bne.n	800a416 <_dtoa_r+0x626>
 800a3cc:	4baf      	ldr	r3, [pc, #700]	@ (800a68c <_dtoa_r+0x89c>)
 800a3ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a3d2:	f7f5 ff7b 	bl	80002cc <__adddf3>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3de:	f7f6 fbbb 	bl	8000b58 <__aeabi_dcmpgt>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d163      	bne.n	800a4ae <_dtoa_r+0x6be>
 800a3e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a3ea:	49a8      	ldr	r1, [pc, #672]	@ (800a68c <_dtoa_r+0x89c>)
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f7f5 ff6b 	bl	80002c8 <__aeabi_dsub>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3fa:	f7f6 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f43f af14 	beq.w	800a22c <_dtoa_r+0x43c>
 800a404:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a406:	1e73      	subs	r3, r6, #1
 800a408:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a40a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a40e:	2b30      	cmp	r3, #48	@ 0x30
 800a410:	d0f8      	beq.n	800a404 <_dtoa_r+0x614>
 800a412:	4647      	mov	r7, r8
 800a414:	e03b      	b.n	800a48e <_dtoa_r+0x69e>
 800a416:	4b9e      	ldr	r3, [pc, #632]	@ (800a690 <_dtoa_r+0x8a0>)
 800a418:	f7f6 f90e 	bl	8000638 <__aeabi_dmul>
 800a41c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a420:	e7bc      	b.n	800a39c <_dtoa_r+0x5ac>
 800a422:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a426:	4656      	mov	r6, sl
 800a428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f6 fa2c 	bl	800088c <__aeabi_ddiv>
 800a434:	f7f6 fbb0 	bl	8000b98 <__aeabi_d2iz>
 800a438:	4680      	mov	r8, r0
 800a43a:	f7f6 f893 	bl	8000564 <__aeabi_i2d>
 800a43e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a442:	f7f6 f8f9 	bl	8000638 <__aeabi_dmul>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4620      	mov	r0, r4
 800a44c:	4629      	mov	r1, r5
 800a44e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a452:	f7f5 ff39 	bl	80002c8 <__aeabi_dsub>
 800a456:	f806 4b01 	strb.w	r4, [r6], #1
 800a45a:	9d03      	ldr	r5, [sp, #12]
 800a45c:	eba6 040a 	sub.w	r4, r6, sl
 800a460:	42a5      	cmp	r5, r4
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	d133      	bne.n	800a4d0 <_dtoa_r+0x6e0>
 800a468:	f7f5 ff30 	bl	80002cc <__adddf3>
 800a46c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a470:	4604      	mov	r4, r0
 800a472:	460d      	mov	r5, r1
 800a474:	f7f6 fb70 	bl	8000b58 <__aeabi_dcmpgt>
 800a478:	b9c0      	cbnz	r0, 800a4ac <_dtoa_r+0x6bc>
 800a47a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a47e:	4620      	mov	r0, r4
 800a480:	4629      	mov	r1, r5
 800a482:	f7f6 fb41 	bl	8000b08 <__aeabi_dcmpeq>
 800a486:	b110      	cbz	r0, 800a48e <_dtoa_r+0x69e>
 800a488:	f018 0f01 	tst.w	r8, #1
 800a48c:	d10e      	bne.n	800a4ac <_dtoa_r+0x6bc>
 800a48e:	9902      	ldr	r1, [sp, #8]
 800a490:	4648      	mov	r0, r9
 800a492:	f000 fbbd 	bl	800ac10 <_Bfree>
 800a496:	2300      	movs	r3, #0
 800a498:	7033      	strb	r3, [r6, #0]
 800a49a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a49c:	3701      	adds	r7, #1
 800a49e:	601f      	str	r7, [r3, #0]
 800a4a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 824b 	beq.w	800a93e <_dtoa_r+0xb4e>
 800a4a8:	601e      	str	r6, [r3, #0]
 800a4aa:	e248      	b.n	800a93e <_dtoa_r+0xb4e>
 800a4ac:	46b8      	mov	r8, r7
 800a4ae:	4633      	mov	r3, r6
 800a4b0:	461e      	mov	r6, r3
 800a4b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4b6:	2a39      	cmp	r2, #57	@ 0x39
 800a4b8:	d106      	bne.n	800a4c8 <_dtoa_r+0x6d8>
 800a4ba:	459a      	cmp	sl, r3
 800a4bc:	d1f8      	bne.n	800a4b0 <_dtoa_r+0x6c0>
 800a4be:	2230      	movs	r2, #48	@ 0x30
 800a4c0:	f108 0801 	add.w	r8, r8, #1
 800a4c4:	f88a 2000 	strb.w	r2, [sl]
 800a4c8:	781a      	ldrb	r2, [r3, #0]
 800a4ca:	3201      	adds	r2, #1
 800a4cc:	701a      	strb	r2, [r3, #0]
 800a4ce:	e7a0      	b.n	800a412 <_dtoa_r+0x622>
 800a4d0:	4b6f      	ldr	r3, [pc, #444]	@ (800a690 <_dtoa_r+0x8a0>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f7f6 f8b0 	bl	8000638 <__aeabi_dmul>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2300      	movs	r3, #0
 800a4dc:	4604      	mov	r4, r0
 800a4de:	460d      	mov	r5, r1
 800a4e0:	f7f6 fb12 	bl	8000b08 <__aeabi_dcmpeq>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d09f      	beq.n	800a428 <_dtoa_r+0x638>
 800a4e8:	e7d1      	b.n	800a48e <_dtoa_r+0x69e>
 800a4ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4ec:	2a00      	cmp	r2, #0
 800a4ee:	f000 80ea 	beq.w	800a6c6 <_dtoa_r+0x8d6>
 800a4f2:	9a07      	ldr	r2, [sp, #28]
 800a4f4:	2a01      	cmp	r2, #1
 800a4f6:	f300 80cd 	bgt.w	800a694 <_dtoa_r+0x8a4>
 800a4fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a4fc:	2a00      	cmp	r2, #0
 800a4fe:	f000 80c1 	beq.w	800a684 <_dtoa_r+0x894>
 800a502:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a506:	9c08      	ldr	r4, [sp, #32]
 800a508:	9e00      	ldr	r6, [sp, #0]
 800a50a:	9a00      	ldr	r2, [sp, #0]
 800a50c:	441a      	add	r2, r3
 800a50e:	9200      	str	r2, [sp, #0]
 800a510:	9a06      	ldr	r2, [sp, #24]
 800a512:	2101      	movs	r1, #1
 800a514:	441a      	add	r2, r3
 800a516:	4648      	mov	r0, r9
 800a518:	9206      	str	r2, [sp, #24]
 800a51a:	f000 fc77 	bl	800ae0c <__i2b>
 800a51e:	4605      	mov	r5, r0
 800a520:	b166      	cbz	r6, 800a53c <_dtoa_r+0x74c>
 800a522:	9b06      	ldr	r3, [sp, #24]
 800a524:	2b00      	cmp	r3, #0
 800a526:	dd09      	ble.n	800a53c <_dtoa_r+0x74c>
 800a528:	42b3      	cmp	r3, r6
 800a52a:	9a00      	ldr	r2, [sp, #0]
 800a52c:	bfa8      	it	ge
 800a52e:	4633      	movge	r3, r6
 800a530:	1ad2      	subs	r2, r2, r3
 800a532:	9200      	str	r2, [sp, #0]
 800a534:	9a06      	ldr	r2, [sp, #24]
 800a536:	1af6      	subs	r6, r6, r3
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	9306      	str	r3, [sp, #24]
 800a53c:	9b08      	ldr	r3, [sp, #32]
 800a53e:	b30b      	cbz	r3, 800a584 <_dtoa_r+0x794>
 800a540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 80c6 	beq.w	800a6d4 <_dtoa_r+0x8e4>
 800a548:	2c00      	cmp	r4, #0
 800a54a:	f000 80c0 	beq.w	800a6ce <_dtoa_r+0x8de>
 800a54e:	4629      	mov	r1, r5
 800a550:	4622      	mov	r2, r4
 800a552:	4648      	mov	r0, r9
 800a554:	f000 fd12 	bl	800af7c <__pow5mult>
 800a558:	9a02      	ldr	r2, [sp, #8]
 800a55a:	4601      	mov	r1, r0
 800a55c:	4605      	mov	r5, r0
 800a55e:	4648      	mov	r0, r9
 800a560:	f000 fc6a 	bl	800ae38 <__multiply>
 800a564:	9902      	ldr	r1, [sp, #8]
 800a566:	4680      	mov	r8, r0
 800a568:	4648      	mov	r0, r9
 800a56a:	f000 fb51 	bl	800ac10 <_Bfree>
 800a56e:	9b08      	ldr	r3, [sp, #32]
 800a570:	1b1b      	subs	r3, r3, r4
 800a572:	9308      	str	r3, [sp, #32]
 800a574:	f000 80b1 	beq.w	800a6da <_dtoa_r+0x8ea>
 800a578:	9a08      	ldr	r2, [sp, #32]
 800a57a:	4641      	mov	r1, r8
 800a57c:	4648      	mov	r0, r9
 800a57e:	f000 fcfd 	bl	800af7c <__pow5mult>
 800a582:	9002      	str	r0, [sp, #8]
 800a584:	2101      	movs	r1, #1
 800a586:	4648      	mov	r0, r9
 800a588:	f000 fc40 	bl	800ae0c <__i2b>
 800a58c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a58e:	4604      	mov	r4, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 81d8 	beq.w	800a946 <_dtoa_r+0xb56>
 800a596:	461a      	mov	r2, r3
 800a598:	4601      	mov	r1, r0
 800a59a:	4648      	mov	r0, r9
 800a59c:	f000 fcee 	bl	800af7c <__pow5mult>
 800a5a0:	9b07      	ldr	r3, [sp, #28]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	f300 809f 	bgt.w	800a6e8 <_dtoa_r+0x8f8>
 800a5aa:	9b04      	ldr	r3, [sp, #16]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f040 8097 	bne.w	800a6e0 <_dtoa_r+0x8f0>
 800a5b2:	9b05      	ldr	r3, [sp, #20]
 800a5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f040 8093 	bne.w	800a6e4 <_dtoa_r+0x8f4>
 800a5be:	9b05      	ldr	r3, [sp, #20]
 800a5c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5c4:	0d1b      	lsrs	r3, r3, #20
 800a5c6:	051b      	lsls	r3, r3, #20
 800a5c8:	b133      	cbz	r3, 800a5d8 <_dtoa_r+0x7e8>
 800a5ca:	9b00      	ldr	r3, [sp, #0]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	9b06      	ldr	r3, [sp, #24]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	9306      	str	r3, [sp, #24]
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	9308      	str	r3, [sp, #32]
 800a5da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 81b8 	beq.w	800a952 <_dtoa_r+0xb62>
 800a5e2:	6923      	ldr	r3, [r4, #16]
 800a5e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5e8:	6918      	ldr	r0, [r3, #16]
 800a5ea:	f000 fbc3 	bl	800ad74 <__hi0bits>
 800a5ee:	f1c0 0020 	rsb	r0, r0, #32
 800a5f2:	9b06      	ldr	r3, [sp, #24]
 800a5f4:	4418      	add	r0, r3
 800a5f6:	f010 001f 	ands.w	r0, r0, #31
 800a5fa:	f000 8082 	beq.w	800a702 <_dtoa_r+0x912>
 800a5fe:	f1c0 0320 	rsb	r3, r0, #32
 800a602:	2b04      	cmp	r3, #4
 800a604:	dd73      	ble.n	800a6ee <_dtoa_r+0x8fe>
 800a606:	9b00      	ldr	r3, [sp, #0]
 800a608:	f1c0 001c 	rsb	r0, r0, #28
 800a60c:	4403      	add	r3, r0
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	9b06      	ldr	r3, [sp, #24]
 800a612:	4403      	add	r3, r0
 800a614:	4406      	add	r6, r0
 800a616:	9306      	str	r3, [sp, #24]
 800a618:	9b00      	ldr	r3, [sp, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dd05      	ble.n	800a62a <_dtoa_r+0x83a>
 800a61e:	9902      	ldr	r1, [sp, #8]
 800a620:	461a      	mov	r2, r3
 800a622:	4648      	mov	r0, r9
 800a624:	f000 fd04 	bl	800b030 <__lshift>
 800a628:	9002      	str	r0, [sp, #8]
 800a62a:	9b06      	ldr	r3, [sp, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	dd05      	ble.n	800a63c <_dtoa_r+0x84c>
 800a630:	4621      	mov	r1, r4
 800a632:	461a      	mov	r2, r3
 800a634:	4648      	mov	r0, r9
 800a636:	f000 fcfb 	bl	800b030 <__lshift>
 800a63a:	4604      	mov	r4, r0
 800a63c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d061      	beq.n	800a706 <_dtoa_r+0x916>
 800a642:	9802      	ldr	r0, [sp, #8]
 800a644:	4621      	mov	r1, r4
 800a646:	f000 fd5f 	bl	800b108 <__mcmp>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	da5b      	bge.n	800a706 <_dtoa_r+0x916>
 800a64e:	2300      	movs	r3, #0
 800a650:	9902      	ldr	r1, [sp, #8]
 800a652:	220a      	movs	r2, #10
 800a654:	4648      	mov	r0, r9
 800a656:	f000 fafd 	bl	800ac54 <__multadd>
 800a65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65c:	9002      	str	r0, [sp, #8]
 800a65e:	f107 38ff 	add.w	r8, r7, #4294967295
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 8177 	beq.w	800a956 <_dtoa_r+0xb66>
 800a668:	4629      	mov	r1, r5
 800a66a:	2300      	movs	r3, #0
 800a66c:	220a      	movs	r2, #10
 800a66e:	4648      	mov	r0, r9
 800a670:	f000 faf0 	bl	800ac54 <__multadd>
 800a674:	f1bb 0f00 	cmp.w	fp, #0
 800a678:	4605      	mov	r5, r0
 800a67a:	dc6f      	bgt.n	800a75c <_dtoa_r+0x96c>
 800a67c:	9b07      	ldr	r3, [sp, #28]
 800a67e:	2b02      	cmp	r3, #2
 800a680:	dc49      	bgt.n	800a716 <_dtoa_r+0x926>
 800a682:	e06b      	b.n	800a75c <_dtoa_r+0x96c>
 800a684:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a686:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a68a:	e73c      	b.n	800a506 <_dtoa_r+0x716>
 800a68c:	3fe00000 	.word	0x3fe00000
 800a690:	40240000 	.word	0x40240000
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	1e5c      	subs	r4, r3, #1
 800a698:	9b08      	ldr	r3, [sp, #32]
 800a69a:	42a3      	cmp	r3, r4
 800a69c:	db09      	blt.n	800a6b2 <_dtoa_r+0x8c2>
 800a69e:	1b1c      	subs	r4, r3, r4
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f6bf af30 	bge.w	800a508 <_dtoa_r+0x718>
 800a6a8:	9b00      	ldr	r3, [sp, #0]
 800a6aa:	9a03      	ldr	r2, [sp, #12]
 800a6ac:	1a9e      	subs	r6, r3, r2
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e72b      	b.n	800a50a <_dtoa_r+0x71a>
 800a6b2:	9b08      	ldr	r3, [sp, #32]
 800a6b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6b6:	9408      	str	r4, [sp, #32]
 800a6b8:	1ae3      	subs	r3, r4, r3
 800a6ba:	441a      	add	r2, r3
 800a6bc:	9e00      	ldr	r6, [sp, #0]
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	920d      	str	r2, [sp, #52]	@ 0x34
 800a6c2:	2400      	movs	r4, #0
 800a6c4:	e721      	b.n	800a50a <_dtoa_r+0x71a>
 800a6c6:	9c08      	ldr	r4, [sp, #32]
 800a6c8:	9e00      	ldr	r6, [sp, #0]
 800a6ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a6cc:	e728      	b.n	800a520 <_dtoa_r+0x730>
 800a6ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a6d2:	e751      	b.n	800a578 <_dtoa_r+0x788>
 800a6d4:	9a08      	ldr	r2, [sp, #32]
 800a6d6:	9902      	ldr	r1, [sp, #8]
 800a6d8:	e750      	b.n	800a57c <_dtoa_r+0x78c>
 800a6da:	f8cd 8008 	str.w	r8, [sp, #8]
 800a6de:	e751      	b.n	800a584 <_dtoa_r+0x794>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e779      	b.n	800a5d8 <_dtoa_r+0x7e8>
 800a6e4:	9b04      	ldr	r3, [sp, #16]
 800a6e6:	e777      	b.n	800a5d8 <_dtoa_r+0x7e8>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9308      	str	r3, [sp, #32]
 800a6ec:	e779      	b.n	800a5e2 <_dtoa_r+0x7f2>
 800a6ee:	d093      	beq.n	800a618 <_dtoa_r+0x828>
 800a6f0:	9a00      	ldr	r2, [sp, #0]
 800a6f2:	331c      	adds	r3, #28
 800a6f4:	441a      	add	r2, r3
 800a6f6:	9200      	str	r2, [sp, #0]
 800a6f8:	9a06      	ldr	r2, [sp, #24]
 800a6fa:	441a      	add	r2, r3
 800a6fc:	441e      	add	r6, r3
 800a6fe:	9206      	str	r2, [sp, #24]
 800a700:	e78a      	b.n	800a618 <_dtoa_r+0x828>
 800a702:	4603      	mov	r3, r0
 800a704:	e7f4      	b.n	800a6f0 <_dtoa_r+0x900>
 800a706:	9b03      	ldr	r3, [sp, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	46b8      	mov	r8, r7
 800a70c:	dc20      	bgt.n	800a750 <_dtoa_r+0x960>
 800a70e:	469b      	mov	fp, r3
 800a710:	9b07      	ldr	r3, [sp, #28]
 800a712:	2b02      	cmp	r3, #2
 800a714:	dd1e      	ble.n	800a754 <_dtoa_r+0x964>
 800a716:	f1bb 0f00 	cmp.w	fp, #0
 800a71a:	f47f adb1 	bne.w	800a280 <_dtoa_r+0x490>
 800a71e:	4621      	mov	r1, r4
 800a720:	465b      	mov	r3, fp
 800a722:	2205      	movs	r2, #5
 800a724:	4648      	mov	r0, r9
 800a726:	f000 fa95 	bl	800ac54 <__multadd>
 800a72a:	4601      	mov	r1, r0
 800a72c:	4604      	mov	r4, r0
 800a72e:	9802      	ldr	r0, [sp, #8]
 800a730:	f000 fcea 	bl	800b108 <__mcmp>
 800a734:	2800      	cmp	r0, #0
 800a736:	f77f ada3 	ble.w	800a280 <_dtoa_r+0x490>
 800a73a:	4656      	mov	r6, sl
 800a73c:	2331      	movs	r3, #49	@ 0x31
 800a73e:	f806 3b01 	strb.w	r3, [r6], #1
 800a742:	f108 0801 	add.w	r8, r8, #1
 800a746:	e59f      	b.n	800a288 <_dtoa_r+0x498>
 800a748:	9c03      	ldr	r4, [sp, #12]
 800a74a:	46b8      	mov	r8, r7
 800a74c:	4625      	mov	r5, r4
 800a74e:	e7f4      	b.n	800a73a <_dtoa_r+0x94a>
 800a750:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 8101 	beq.w	800a95e <_dtoa_r+0xb6e>
 800a75c:	2e00      	cmp	r6, #0
 800a75e:	dd05      	ble.n	800a76c <_dtoa_r+0x97c>
 800a760:	4629      	mov	r1, r5
 800a762:	4632      	mov	r2, r6
 800a764:	4648      	mov	r0, r9
 800a766:	f000 fc63 	bl	800b030 <__lshift>
 800a76a:	4605      	mov	r5, r0
 800a76c:	9b08      	ldr	r3, [sp, #32]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d05c      	beq.n	800a82c <_dtoa_r+0xa3c>
 800a772:	6869      	ldr	r1, [r5, #4]
 800a774:	4648      	mov	r0, r9
 800a776:	f000 fa0b 	bl	800ab90 <_Balloc>
 800a77a:	4606      	mov	r6, r0
 800a77c:	b928      	cbnz	r0, 800a78a <_dtoa_r+0x99a>
 800a77e:	4b82      	ldr	r3, [pc, #520]	@ (800a988 <_dtoa_r+0xb98>)
 800a780:	4602      	mov	r2, r0
 800a782:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a786:	f7ff bb4a 	b.w	8009e1e <_dtoa_r+0x2e>
 800a78a:	692a      	ldr	r2, [r5, #16]
 800a78c:	3202      	adds	r2, #2
 800a78e:	0092      	lsls	r2, r2, #2
 800a790:	f105 010c 	add.w	r1, r5, #12
 800a794:	300c      	adds	r0, #12
 800a796:	f002 f92f 	bl	800c9f8 <memcpy>
 800a79a:	2201      	movs	r2, #1
 800a79c:	4631      	mov	r1, r6
 800a79e:	4648      	mov	r0, r9
 800a7a0:	f000 fc46 	bl	800b030 <__lshift>
 800a7a4:	f10a 0301 	add.w	r3, sl, #1
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	eb0a 030b 	add.w	r3, sl, fp
 800a7ae:	9308      	str	r3, [sp, #32]
 800a7b0:	9b04      	ldr	r3, [sp, #16]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	462f      	mov	r7, r5
 800a7b8:	9306      	str	r3, [sp, #24]
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	9b00      	ldr	r3, [sp, #0]
 800a7be:	9802      	ldr	r0, [sp, #8]
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a7c6:	f7ff fa89 	bl	8009cdc <quorem>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	3330      	adds	r3, #48	@ 0x30
 800a7ce:	9003      	str	r0, [sp, #12]
 800a7d0:	4639      	mov	r1, r7
 800a7d2:	9802      	ldr	r0, [sp, #8]
 800a7d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7d6:	f000 fc97 	bl	800b108 <__mcmp>
 800a7da:	462a      	mov	r2, r5
 800a7dc:	9004      	str	r0, [sp, #16]
 800a7de:	4621      	mov	r1, r4
 800a7e0:	4648      	mov	r0, r9
 800a7e2:	f000 fcad 	bl	800b140 <__mdiff>
 800a7e6:	68c2      	ldr	r2, [r0, #12]
 800a7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	bb02      	cbnz	r2, 800a830 <_dtoa_r+0xa40>
 800a7ee:	4601      	mov	r1, r0
 800a7f0:	9802      	ldr	r0, [sp, #8]
 800a7f2:	f000 fc89 	bl	800b108 <__mcmp>
 800a7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4648      	mov	r0, r9
 800a7fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800a800:	9309      	str	r3, [sp, #36]	@ 0x24
 800a802:	f000 fa05 	bl	800ac10 <_Bfree>
 800a806:	9b07      	ldr	r3, [sp, #28]
 800a808:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a80a:	9e00      	ldr	r6, [sp, #0]
 800a80c:	ea42 0103 	orr.w	r1, r2, r3
 800a810:	9b06      	ldr	r3, [sp, #24]
 800a812:	4319      	orrs	r1, r3
 800a814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a816:	d10d      	bne.n	800a834 <_dtoa_r+0xa44>
 800a818:	2b39      	cmp	r3, #57	@ 0x39
 800a81a:	d027      	beq.n	800a86c <_dtoa_r+0xa7c>
 800a81c:	9a04      	ldr	r2, [sp, #16]
 800a81e:	2a00      	cmp	r2, #0
 800a820:	dd01      	ble.n	800a826 <_dtoa_r+0xa36>
 800a822:	9b03      	ldr	r3, [sp, #12]
 800a824:	3331      	adds	r3, #49	@ 0x31
 800a826:	f88b 3000 	strb.w	r3, [fp]
 800a82a:	e52e      	b.n	800a28a <_dtoa_r+0x49a>
 800a82c:	4628      	mov	r0, r5
 800a82e:	e7b9      	b.n	800a7a4 <_dtoa_r+0x9b4>
 800a830:	2201      	movs	r2, #1
 800a832:	e7e2      	b.n	800a7fa <_dtoa_r+0xa0a>
 800a834:	9904      	ldr	r1, [sp, #16]
 800a836:	2900      	cmp	r1, #0
 800a838:	db04      	blt.n	800a844 <_dtoa_r+0xa54>
 800a83a:	9807      	ldr	r0, [sp, #28]
 800a83c:	4301      	orrs	r1, r0
 800a83e:	9806      	ldr	r0, [sp, #24]
 800a840:	4301      	orrs	r1, r0
 800a842:	d120      	bne.n	800a886 <_dtoa_r+0xa96>
 800a844:	2a00      	cmp	r2, #0
 800a846:	ddee      	ble.n	800a826 <_dtoa_r+0xa36>
 800a848:	9902      	ldr	r1, [sp, #8]
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	2201      	movs	r2, #1
 800a84e:	4648      	mov	r0, r9
 800a850:	f000 fbee 	bl	800b030 <__lshift>
 800a854:	4621      	mov	r1, r4
 800a856:	9002      	str	r0, [sp, #8]
 800a858:	f000 fc56 	bl	800b108 <__mcmp>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	9b00      	ldr	r3, [sp, #0]
 800a860:	dc02      	bgt.n	800a868 <_dtoa_r+0xa78>
 800a862:	d1e0      	bne.n	800a826 <_dtoa_r+0xa36>
 800a864:	07da      	lsls	r2, r3, #31
 800a866:	d5de      	bpl.n	800a826 <_dtoa_r+0xa36>
 800a868:	2b39      	cmp	r3, #57	@ 0x39
 800a86a:	d1da      	bne.n	800a822 <_dtoa_r+0xa32>
 800a86c:	2339      	movs	r3, #57	@ 0x39
 800a86e:	f88b 3000 	strb.w	r3, [fp]
 800a872:	4633      	mov	r3, r6
 800a874:	461e      	mov	r6, r3
 800a876:	3b01      	subs	r3, #1
 800a878:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a87c:	2a39      	cmp	r2, #57	@ 0x39
 800a87e:	d04e      	beq.n	800a91e <_dtoa_r+0xb2e>
 800a880:	3201      	adds	r2, #1
 800a882:	701a      	strb	r2, [r3, #0]
 800a884:	e501      	b.n	800a28a <_dtoa_r+0x49a>
 800a886:	2a00      	cmp	r2, #0
 800a888:	dd03      	ble.n	800a892 <_dtoa_r+0xaa2>
 800a88a:	2b39      	cmp	r3, #57	@ 0x39
 800a88c:	d0ee      	beq.n	800a86c <_dtoa_r+0xa7c>
 800a88e:	3301      	adds	r3, #1
 800a890:	e7c9      	b.n	800a826 <_dtoa_r+0xa36>
 800a892:	9a00      	ldr	r2, [sp, #0]
 800a894:	9908      	ldr	r1, [sp, #32]
 800a896:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a89a:	428a      	cmp	r2, r1
 800a89c:	d028      	beq.n	800a8f0 <_dtoa_r+0xb00>
 800a89e:	9902      	ldr	r1, [sp, #8]
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	220a      	movs	r2, #10
 800a8a4:	4648      	mov	r0, r9
 800a8a6:	f000 f9d5 	bl	800ac54 <__multadd>
 800a8aa:	42af      	cmp	r7, r5
 800a8ac:	9002      	str	r0, [sp, #8]
 800a8ae:	f04f 0300 	mov.w	r3, #0
 800a8b2:	f04f 020a 	mov.w	r2, #10
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	4648      	mov	r0, r9
 800a8ba:	d107      	bne.n	800a8cc <_dtoa_r+0xadc>
 800a8bc:	f000 f9ca 	bl	800ac54 <__multadd>
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	9b00      	ldr	r3, [sp, #0]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	e777      	b.n	800a7bc <_dtoa_r+0x9cc>
 800a8cc:	f000 f9c2 	bl	800ac54 <__multadd>
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4607      	mov	r7, r0
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	220a      	movs	r2, #10
 800a8d8:	4648      	mov	r0, r9
 800a8da:	f000 f9bb 	bl	800ac54 <__multadd>
 800a8de:	4605      	mov	r5, r0
 800a8e0:	e7f0      	b.n	800a8c4 <_dtoa_r+0xad4>
 800a8e2:	f1bb 0f00 	cmp.w	fp, #0
 800a8e6:	bfcc      	ite	gt
 800a8e8:	465e      	movgt	r6, fp
 800a8ea:	2601      	movle	r6, #1
 800a8ec:	4456      	add	r6, sl
 800a8ee:	2700      	movs	r7, #0
 800a8f0:	9902      	ldr	r1, [sp, #8]
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	4648      	mov	r0, r9
 800a8f8:	f000 fb9a 	bl	800b030 <__lshift>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	9002      	str	r0, [sp, #8]
 800a900:	f000 fc02 	bl	800b108 <__mcmp>
 800a904:	2800      	cmp	r0, #0
 800a906:	dcb4      	bgt.n	800a872 <_dtoa_r+0xa82>
 800a908:	d102      	bne.n	800a910 <_dtoa_r+0xb20>
 800a90a:	9b00      	ldr	r3, [sp, #0]
 800a90c:	07db      	lsls	r3, r3, #31
 800a90e:	d4b0      	bmi.n	800a872 <_dtoa_r+0xa82>
 800a910:	4633      	mov	r3, r6
 800a912:	461e      	mov	r6, r3
 800a914:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a918:	2a30      	cmp	r2, #48	@ 0x30
 800a91a:	d0fa      	beq.n	800a912 <_dtoa_r+0xb22>
 800a91c:	e4b5      	b.n	800a28a <_dtoa_r+0x49a>
 800a91e:	459a      	cmp	sl, r3
 800a920:	d1a8      	bne.n	800a874 <_dtoa_r+0xa84>
 800a922:	2331      	movs	r3, #49	@ 0x31
 800a924:	f108 0801 	add.w	r8, r8, #1
 800a928:	f88a 3000 	strb.w	r3, [sl]
 800a92c:	e4ad      	b.n	800a28a <_dtoa_r+0x49a>
 800a92e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a930:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a98c <_dtoa_r+0xb9c>
 800a934:	b11b      	cbz	r3, 800a93e <_dtoa_r+0xb4e>
 800a936:	f10a 0308 	add.w	r3, sl, #8
 800a93a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a93c:	6013      	str	r3, [r2, #0]
 800a93e:	4650      	mov	r0, sl
 800a940:	b017      	add	sp, #92	@ 0x5c
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	9b07      	ldr	r3, [sp, #28]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	f77f ae2e 	ble.w	800a5aa <_dtoa_r+0x7ba>
 800a94e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a950:	9308      	str	r3, [sp, #32]
 800a952:	2001      	movs	r0, #1
 800a954:	e64d      	b.n	800a5f2 <_dtoa_r+0x802>
 800a956:	f1bb 0f00 	cmp.w	fp, #0
 800a95a:	f77f aed9 	ble.w	800a710 <_dtoa_r+0x920>
 800a95e:	4656      	mov	r6, sl
 800a960:	9802      	ldr	r0, [sp, #8]
 800a962:	4621      	mov	r1, r4
 800a964:	f7ff f9ba 	bl	8009cdc <quorem>
 800a968:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a96c:	f806 3b01 	strb.w	r3, [r6], #1
 800a970:	eba6 020a 	sub.w	r2, r6, sl
 800a974:	4593      	cmp	fp, r2
 800a976:	ddb4      	ble.n	800a8e2 <_dtoa_r+0xaf2>
 800a978:	9902      	ldr	r1, [sp, #8]
 800a97a:	2300      	movs	r3, #0
 800a97c:	220a      	movs	r2, #10
 800a97e:	4648      	mov	r0, r9
 800a980:	f000 f968 	bl	800ac54 <__multadd>
 800a984:	9002      	str	r0, [sp, #8]
 800a986:	e7eb      	b.n	800a960 <_dtoa_r+0xb70>
 800a988:	0800d791 	.word	0x0800d791
 800a98c:	0800d715 	.word	0x0800d715

0800a990 <_free_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4605      	mov	r5, r0
 800a994:	2900      	cmp	r1, #0
 800a996:	d041      	beq.n	800aa1c <_free_r+0x8c>
 800a998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99c:	1f0c      	subs	r4, r1, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bfb8      	it	lt
 800a9a2:	18e4      	addlt	r4, r4, r3
 800a9a4:	f000 f8e8 	bl	800ab78 <__malloc_lock>
 800a9a8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa20 <_free_r+0x90>)
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	b933      	cbnz	r3, 800a9bc <_free_r+0x2c>
 800a9ae:	6063      	str	r3, [r4, #4]
 800a9b0:	6014      	str	r4, [r2, #0]
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9b8:	f000 b8e4 	b.w	800ab84 <__malloc_unlock>
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	d908      	bls.n	800a9d2 <_free_r+0x42>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	1821      	adds	r1, r4, r0
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf01      	itttt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	1809      	addeq	r1, r1, r0
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	e7ed      	b.n	800a9ae <_free_r+0x1e>
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	b10b      	cbz	r3, 800a9dc <_free_r+0x4c>
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d9fa      	bls.n	800a9d2 <_free_r+0x42>
 800a9dc:	6811      	ldr	r1, [r2, #0]
 800a9de:	1850      	adds	r0, r2, r1
 800a9e0:	42a0      	cmp	r0, r4
 800a9e2:	d10b      	bne.n	800a9fc <_free_r+0x6c>
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	4401      	add	r1, r0
 800a9e8:	1850      	adds	r0, r2, r1
 800a9ea:	4283      	cmp	r3, r0
 800a9ec:	6011      	str	r1, [r2, #0]
 800a9ee:	d1e0      	bne.n	800a9b2 <_free_r+0x22>
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	6053      	str	r3, [r2, #4]
 800a9f6:	4408      	add	r0, r1
 800a9f8:	6010      	str	r0, [r2, #0]
 800a9fa:	e7da      	b.n	800a9b2 <_free_r+0x22>
 800a9fc:	d902      	bls.n	800aa04 <_free_r+0x74>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	e7d6      	b.n	800a9b2 <_free_r+0x22>
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	1821      	adds	r1, r4, r0
 800aa08:	428b      	cmp	r3, r1
 800aa0a:	bf04      	itt	eq
 800aa0c:	6819      	ldreq	r1, [r3, #0]
 800aa0e:	685b      	ldreq	r3, [r3, #4]
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	bf04      	itt	eq
 800aa14:	1809      	addeq	r1, r1, r0
 800aa16:	6021      	streq	r1, [r4, #0]
 800aa18:	6054      	str	r4, [r2, #4]
 800aa1a:	e7ca      	b.n	800a9b2 <_free_r+0x22>
 800aa1c:	bd38      	pop	{r3, r4, r5, pc}
 800aa1e:	bf00      	nop
 800aa20:	2000061c 	.word	0x2000061c

0800aa24 <malloc>:
 800aa24:	4b02      	ldr	r3, [pc, #8]	@ (800aa30 <malloc+0xc>)
 800aa26:	4601      	mov	r1, r0
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	f000 b825 	b.w	800aa78 <_malloc_r>
 800aa2e:	bf00      	nop
 800aa30:	20000070 	.word	0x20000070

0800aa34 <sbrk_aligned>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	4e0f      	ldr	r6, [pc, #60]	@ (800aa74 <sbrk_aligned+0x40>)
 800aa38:	460c      	mov	r4, r1
 800aa3a:	6831      	ldr	r1, [r6, #0]
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	b911      	cbnz	r1, 800aa46 <sbrk_aligned+0x12>
 800aa40:	f001 ffca 	bl	800c9d8 <_sbrk_r>
 800aa44:	6030      	str	r0, [r6, #0]
 800aa46:	4621      	mov	r1, r4
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f001 ffc5 	bl	800c9d8 <_sbrk_r>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	d103      	bne.n	800aa5a <sbrk_aligned+0x26>
 800aa52:	f04f 34ff 	mov.w	r4, #4294967295
 800aa56:	4620      	mov	r0, r4
 800aa58:	bd70      	pop	{r4, r5, r6, pc}
 800aa5a:	1cc4      	adds	r4, r0, #3
 800aa5c:	f024 0403 	bic.w	r4, r4, #3
 800aa60:	42a0      	cmp	r0, r4
 800aa62:	d0f8      	beq.n	800aa56 <sbrk_aligned+0x22>
 800aa64:	1a21      	subs	r1, r4, r0
 800aa66:	4628      	mov	r0, r5
 800aa68:	f001 ffb6 	bl	800c9d8 <_sbrk_r>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d1f2      	bne.n	800aa56 <sbrk_aligned+0x22>
 800aa70:	e7ef      	b.n	800aa52 <sbrk_aligned+0x1e>
 800aa72:	bf00      	nop
 800aa74:	20000618 	.word	0x20000618

0800aa78 <_malloc_r>:
 800aa78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa7c:	1ccd      	adds	r5, r1, #3
 800aa7e:	f025 0503 	bic.w	r5, r5, #3
 800aa82:	3508      	adds	r5, #8
 800aa84:	2d0c      	cmp	r5, #12
 800aa86:	bf38      	it	cc
 800aa88:	250c      	movcc	r5, #12
 800aa8a:	2d00      	cmp	r5, #0
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	db01      	blt.n	800aa94 <_malloc_r+0x1c>
 800aa90:	42a9      	cmp	r1, r5
 800aa92:	d904      	bls.n	800aa9e <_malloc_r+0x26>
 800aa94:	230c      	movs	r3, #12
 800aa96:	6033      	str	r3, [r6, #0]
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab74 <_malloc_r+0xfc>
 800aaa2:	f000 f869 	bl	800ab78 <__malloc_lock>
 800aaa6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaaa:	461c      	mov	r4, r3
 800aaac:	bb44      	cbnz	r4, 800ab00 <_malloc_r+0x88>
 800aaae:	4629      	mov	r1, r5
 800aab0:	4630      	mov	r0, r6
 800aab2:	f7ff ffbf 	bl	800aa34 <sbrk_aligned>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	4604      	mov	r4, r0
 800aaba:	d158      	bne.n	800ab6e <_malloc_r+0xf6>
 800aabc:	f8d8 4000 	ldr.w	r4, [r8]
 800aac0:	4627      	mov	r7, r4
 800aac2:	2f00      	cmp	r7, #0
 800aac4:	d143      	bne.n	800ab4e <_malloc_r+0xd6>
 800aac6:	2c00      	cmp	r4, #0
 800aac8:	d04b      	beq.n	800ab62 <_malloc_r+0xea>
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	4639      	mov	r1, r7
 800aace:	4630      	mov	r0, r6
 800aad0:	eb04 0903 	add.w	r9, r4, r3
 800aad4:	f001 ff80 	bl	800c9d8 <_sbrk_r>
 800aad8:	4581      	cmp	r9, r0
 800aada:	d142      	bne.n	800ab62 <_malloc_r+0xea>
 800aadc:	6821      	ldr	r1, [r4, #0]
 800aade:	1a6d      	subs	r5, r5, r1
 800aae0:	4629      	mov	r1, r5
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff ffa6 	bl	800aa34 <sbrk_aligned>
 800aae8:	3001      	adds	r0, #1
 800aaea:	d03a      	beq.n	800ab62 <_malloc_r+0xea>
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	442b      	add	r3, r5
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	f8d8 3000 	ldr.w	r3, [r8]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	bb62      	cbnz	r2, 800ab54 <_malloc_r+0xdc>
 800aafa:	f8c8 7000 	str.w	r7, [r8]
 800aafe:	e00f      	b.n	800ab20 <_malloc_r+0xa8>
 800ab00:	6822      	ldr	r2, [r4, #0]
 800ab02:	1b52      	subs	r2, r2, r5
 800ab04:	d420      	bmi.n	800ab48 <_malloc_r+0xd0>
 800ab06:	2a0b      	cmp	r2, #11
 800ab08:	d917      	bls.n	800ab3a <_malloc_r+0xc2>
 800ab0a:	1961      	adds	r1, r4, r5
 800ab0c:	42a3      	cmp	r3, r4
 800ab0e:	6025      	str	r5, [r4, #0]
 800ab10:	bf18      	it	ne
 800ab12:	6059      	strne	r1, [r3, #4]
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	bf08      	it	eq
 800ab18:	f8c8 1000 	streq.w	r1, [r8]
 800ab1c:	5162      	str	r2, [r4, r5]
 800ab1e:	604b      	str	r3, [r1, #4]
 800ab20:	4630      	mov	r0, r6
 800ab22:	f000 f82f 	bl	800ab84 <__malloc_unlock>
 800ab26:	f104 000b 	add.w	r0, r4, #11
 800ab2a:	1d23      	adds	r3, r4, #4
 800ab2c:	f020 0007 	bic.w	r0, r0, #7
 800ab30:	1ac2      	subs	r2, r0, r3
 800ab32:	bf1c      	itt	ne
 800ab34:	1a1b      	subne	r3, r3, r0
 800ab36:	50a3      	strne	r3, [r4, r2]
 800ab38:	e7af      	b.n	800aa9a <_malloc_r+0x22>
 800ab3a:	6862      	ldr	r2, [r4, #4]
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	bf0c      	ite	eq
 800ab40:	f8c8 2000 	streq.w	r2, [r8]
 800ab44:	605a      	strne	r2, [r3, #4]
 800ab46:	e7eb      	b.n	800ab20 <_malloc_r+0xa8>
 800ab48:	4623      	mov	r3, r4
 800ab4a:	6864      	ldr	r4, [r4, #4]
 800ab4c:	e7ae      	b.n	800aaac <_malloc_r+0x34>
 800ab4e:	463c      	mov	r4, r7
 800ab50:	687f      	ldr	r7, [r7, #4]
 800ab52:	e7b6      	b.n	800aac2 <_malloc_r+0x4a>
 800ab54:	461a      	mov	r2, r3
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d1fb      	bne.n	800ab54 <_malloc_r+0xdc>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	6053      	str	r3, [r2, #4]
 800ab60:	e7de      	b.n	800ab20 <_malloc_r+0xa8>
 800ab62:	230c      	movs	r3, #12
 800ab64:	6033      	str	r3, [r6, #0]
 800ab66:	4630      	mov	r0, r6
 800ab68:	f000 f80c 	bl	800ab84 <__malloc_unlock>
 800ab6c:	e794      	b.n	800aa98 <_malloc_r+0x20>
 800ab6e:	6005      	str	r5, [r0, #0]
 800ab70:	e7d6      	b.n	800ab20 <_malloc_r+0xa8>
 800ab72:	bf00      	nop
 800ab74:	2000061c 	.word	0x2000061c

0800ab78 <__malloc_lock>:
 800ab78:	4801      	ldr	r0, [pc, #4]	@ (800ab80 <__malloc_lock+0x8>)
 800ab7a:	f7ff b8a6 	b.w	8009cca <__retarget_lock_acquire_recursive>
 800ab7e:	bf00      	nop
 800ab80:	20000614 	.word	0x20000614

0800ab84 <__malloc_unlock>:
 800ab84:	4801      	ldr	r0, [pc, #4]	@ (800ab8c <__malloc_unlock+0x8>)
 800ab86:	f7ff b8a1 	b.w	8009ccc <__retarget_lock_release_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	20000614 	.word	0x20000614

0800ab90 <_Balloc>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	69c6      	ldr	r6, [r0, #28]
 800ab94:	4604      	mov	r4, r0
 800ab96:	460d      	mov	r5, r1
 800ab98:	b976      	cbnz	r6, 800abb8 <_Balloc+0x28>
 800ab9a:	2010      	movs	r0, #16
 800ab9c:	f7ff ff42 	bl	800aa24 <malloc>
 800aba0:	4602      	mov	r2, r0
 800aba2:	61e0      	str	r0, [r4, #28]
 800aba4:	b920      	cbnz	r0, 800abb0 <_Balloc+0x20>
 800aba6:	4b18      	ldr	r3, [pc, #96]	@ (800ac08 <_Balloc+0x78>)
 800aba8:	4818      	ldr	r0, [pc, #96]	@ (800ac0c <_Balloc+0x7c>)
 800abaa:	216b      	movs	r1, #107	@ 0x6b
 800abac:	f001 ff3c 	bl	800ca28 <__assert_func>
 800abb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb4:	6006      	str	r6, [r0, #0]
 800abb6:	60c6      	str	r6, [r0, #12]
 800abb8:	69e6      	ldr	r6, [r4, #28]
 800abba:	68f3      	ldr	r3, [r6, #12]
 800abbc:	b183      	cbz	r3, 800abe0 <_Balloc+0x50>
 800abbe:	69e3      	ldr	r3, [r4, #28]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abc6:	b9b8      	cbnz	r0, 800abf8 <_Balloc+0x68>
 800abc8:	2101      	movs	r1, #1
 800abca:	fa01 f605 	lsl.w	r6, r1, r5
 800abce:	1d72      	adds	r2, r6, #5
 800abd0:	0092      	lsls	r2, r2, #2
 800abd2:	4620      	mov	r0, r4
 800abd4:	f001 ff46 	bl	800ca64 <_calloc_r>
 800abd8:	b160      	cbz	r0, 800abf4 <_Balloc+0x64>
 800abda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abde:	e00e      	b.n	800abfe <_Balloc+0x6e>
 800abe0:	2221      	movs	r2, #33	@ 0x21
 800abe2:	2104      	movs	r1, #4
 800abe4:	4620      	mov	r0, r4
 800abe6:	f001 ff3d 	bl	800ca64 <_calloc_r>
 800abea:	69e3      	ldr	r3, [r4, #28]
 800abec:	60f0      	str	r0, [r6, #12]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1e4      	bne.n	800abbe <_Balloc+0x2e>
 800abf4:	2000      	movs	r0, #0
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	6802      	ldr	r2, [r0, #0]
 800abfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abfe:	2300      	movs	r3, #0
 800ac00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac04:	e7f7      	b.n	800abf6 <_Balloc+0x66>
 800ac06:	bf00      	nop
 800ac08:	0800d722 	.word	0x0800d722
 800ac0c:	0800d7a2 	.word	0x0800d7a2

0800ac10 <_Bfree>:
 800ac10:	b570      	push	{r4, r5, r6, lr}
 800ac12:	69c6      	ldr	r6, [r0, #28]
 800ac14:	4605      	mov	r5, r0
 800ac16:	460c      	mov	r4, r1
 800ac18:	b976      	cbnz	r6, 800ac38 <_Bfree+0x28>
 800ac1a:	2010      	movs	r0, #16
 800ac1c:	f7ff ff02 	bl	800aa24 <malloc>
 800ac20:	4602      	mov	r2, r0
 800ac22:	61e8      	str	r0, [r5, #28]
 800ac24:	b920      	cbnz	r0, 800ac30 <_Bfree+0x20>
 800ac26:	4b09      	ldr	r3, [pc, #36]	@ (800ac4c <_Bfree+0x3c>)
 800ac28:	4809      	ldr	r0, [pc, #36]	@ (800ac50 <_Bfree+0x40>)
 800ac2a:	218f      	movs	r1, #143	@ 0x8f
 800ac2c:	f001 fefc 	bl	800ca28 <__assert_func>
 800ac30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac34:	6006      	str	r6, [r0, #0]
 800ac36:	60c6      	str	r6, [r0, #12]
 800ac38:	b13c      	cbz	r4, 800ac4a <_Bfree+0x3a>
 800ac3a:	69eb      	ldr	r3, [r5, #28]
 800ac3c:	6862      	ldr	r2, [r4, #4]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac44:	6021      	str	r1, [r4, #0]
 800ac46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	0800d722 	.word	0x0800d722
 800ac50:	0800d7a2 	.word	0x0800d7a2

0800ac54 <__multadd>:
 800ac54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac58:	690d      	ldr	r5, [r1, #16]
 800ac5a:	4607      	mov	r7, r0
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	461e      	mov	r6, r3
 800ac60:	f101 0c14 	add.w	ip, r1, #20
 800ac64:	2000      	movs	r0, #0
 800ac66:	f8dc 3000 	ldr.w	r3, [ip]
 800ac6a:	b299      	uxth	r1, r3
 800ac6c:	fb02 6101 	mla	r1, r2, r1, r6
 800ac70:	0c1e      	lsrs	r6, r3, #16
 800ac72:	0c0b      	lsrs	r3, r1, #16
 800ac74:	fb02 3306 	mla	r3, r2, r6, r3
 800ac78:	b289      	uxth	r1, r1
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac80:	4285      	cmp	r5, r0
 800ac82:	f84c 1b04 	str.w	r1, [ip], #4
 800ac86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac8a:	dcec      	bgt.n	800ac66 <__multadd+0x12>
 800ac8c:	b30e      	cbz	r6, 800acd2 <__multadd+0x7e>
 800ac8e:	68a3      	ldr	r3, [r4, #8]
 800ac90:	42ab      	cmp	r3, r5
 800ac92:	dc19      	bgt.n	800acc8 <__multadd+0x74>
 800ac94:	6861      	ldr	r1, [r4, #4]
 800ac96:	4638      	mov	r0, r7
 800ac98:	3101      	adds	r1, #1
 800ac9a:	f7ff ff79 	bl	800ab90 <_Balloc>
 800ac9e:	4680      	mov	r8, r0
 800aca0:	b928      	cbnz	r0, 800acae <__multadd+0x5a>
 800aca2:	4602      	mov	r2, r0
 800aca4:	4b0c      	ldr	r3, [pc, #48]	@ (800acd8 <__multadd+0x84>)
 800aca6:	480d      	ldr	r0, [pc, #52]	@ (800acdc <__multadd+0x88>)
 800aca8:	21ba      	movs	r1, #186	@ 0xba
 800acaa:	f001 febd 	bl	800ca28 <__assert_func>
 800acae:	6922      	ldr	r2, [r4, #16]
 800acb0:	3202      	adds	r2, #2
 800acb2:	f104 010c 	add.w	r1, r4, #12
 800acb6:	0092      	lsls	r2, r2, #2
 800acb8:	300c      	adds	r0, #12
 800acba:	f001 fe9d 	bl	800c9f8 <memcpy>
 800acbe:	4621      	mov	r1, r4
 800acc0:	4638      	mov	r0, r7
 800acc2:	f7ff ffa5 	bl	800ac10 <_Bfree>
 800acc6:	4644      	mov	r4, r8
 800acc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800accc:	3501      	adds	r5, #1
 800acce:	615e      	str	r6, [r3, #20]
 800acd0:	6125      	str	r5, [r4, #16]
 800acd2:	4620      	mov	r0, r4
 800acd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd8:	0800d791 	.word	0x0800d791
 800acdc:	0800d7a2 	.word	0x0800d7a2

0800ace0 <__s2b>:
 800ace0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace4:	460c      	mov	r4, r1
 800ace6:	4615      	mov	r5, r2
 800ace8:	461f      	mov	r7, r3
 800acea:	2209      	movs	r2, #9
 800acec:	3308      	adds	r3, #8
 800acee:	4606      	mov	r6, r0
 800acf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800acf4:	2100      	movs	r1, #0
 800acf6:	2201      	movs	r2, #1
 800acf8:	429a      	cmp	r2, r3
 800acfa:	db09      	blt.n	800ad10 <__s2b+0x30>
 800acfc:	4630      	mov	r0, r6
 800acfe:	f7ff ff47 	bl	800ab90 <_Balloc>
 800ad02:	b940      	cbnz	r0, 800ad16 <__s2b+0x36>
 800ad04:	4602      	mov	r2, r0
 800ad06:	4b19      	ldr	r3, [pc, #100]	@ (800ad6c <__s2b+0x8c>)
 800ad08:	4819      	ldr	r0, [pc, #100]	@ (800ad70 <__s2b+0x90>)
 800ad0a:	21d3      	movs	r1, #211	@ 0xd3
 800ad0c:	f001 fe8c 	bl	800ca28 <__assert_func>
 800ad10:	0052      	lsls	r2, r2, #1
 800ad12:	3101      	adds	r1, #1
 800ad14:	e7f0      	b.n	800acf8 <__s2b+0x18>
 800ad16:	9b08      	ldr	r3, [sp, #32]
 800ad18:	6143      	str	r3, [r0, #20]
 800ad1a:	2d09      	cmp	r5, #9
 800ad1c:	f04f 0301 	mov.w	r3, #1
 800ad20:	6103      	str	r3, [r0, #16]
 800ad22:	dd16      	ble.n	800ad52 <__s2b+0x72>
 800ad24:	f104 0909 	add.w	r9, r4, #9
 800ad28:	46c8      	mov	r8, r9
 800ad2a:	442c      	add	r4, r5
 800ad2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad30:	4601      	mov	r1, r0
 800ad32:	3b30      	subs	r3, #48	@ 0x30
 800ad34:	220a      	movs	r2, #10
 800ad36:	4630      	mov	r0, r6
 800ad38:	f7ff ff8c 	bl	800ac54 <__multadd>
 800ad3c:	45a0      	cmp	r8, r4
 800ad3e:	d1f5      	bne.n	800ad2c <__s2b+0x4c>
 800ad40:	f1a5 0408 	sub.w	r4, r5, #8
 800ad44:	444c      	add	r4, r9
 800ad46:	1b2d      	subs	r5, r5, r4
 800ad48:	1963      	adds	r3, r4, r5
 800ad4a:	42bb      	cmp	r3, r7
 800ad4c:	db04      	blt.n	800ad58 <__s2b+0x78>
 800ad4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad52:	340a      	adds	r4, #10
 800ad54:	2509      	movs	r5, #9
 800ad56:	e7f6      	b.n	800ad46 <__s2b+0x66>
 800ad58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	3b30      	subs	r3, #48	@ 0x30
 800ad60:	220a      	movs	r2, #10
 800ad62:	4630      	mov	r0, r6
 800ad64:	f7ff ff76 	bl	800ac54 <__multadd>
 800ad68:	e7ee      	b.n	800ad48 <__s2b+0x68>
 800ad6a:	bf00      	nop
 800ad6c:	0800d791 	.word	0x0800d791
 800ad70:	0800d7a2 	.word	0x0800d7a2

0800ad74 <__hi0bits>:
 800ad74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad78:	4603      	mov	r3, r0
 800ad7a:	bf36      	itet	cc
 800ad7c:	0403      	lslcc	r3, r0, #16
 800ad7e:	2000      	movcs	r0, #0
 800ad80:	2010      	movcc	r0, #16
 800ad82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad86:	bf3c      	itt	cc
 800ad88:	021b      	lslcc	r3, r3, #8
 800ad8a:	3008      	addcc	r0, #8
 800ad8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad90:	bf3c      	itt	cc
 800ad92:	011b      	lslcc	r3, r3, #4
 800ad94:	3004      	addcc	r0, #4
 800ad96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad9a:	bf3c      	itt	cc
 800ad9c:	009b      	lslcc	r3, r3, #2
 800ad9e:	3002      	addcc	r0, #2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	db05      	blt.n	800adb0 <__hi0bits+0x3c>
 800ada4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ada8:	f100 0001 	add.w	r0, r0, #1
 800adac:	bf08      	it	eq
 800adae:	2020      	moveq	r0, #32
 800adb0:	4770      	bx	lr

0800adb2 <__lo0bits>:
 800adb2:	6803      	ldr	r3, [r0, #0]
 800adb4:	4602      	mov	r2, r0
 800adb6:	f013 0007 	ands.w	r0, r3, #7
 800adba:	d00b      	beq.n	800add4 <__lo0bits+0x22>
 800adbc:	07d9      	lsls	r1, r3, #31
 800adbe:	d421      	bmi.n	800ae04 <__lo0bits+0x52>
 800adc0:	0798      	lsls	r0, r3, #30
 800adc2:	bf49      	itett	mi
 800adc4:	085b      	lsrmi	r3, r3, #1
 800adc6:	089b      	lsrpl	r3, r3, #2
 800adc8:	2001      	movmi	r0, #1
 800adca:	6013      	strmi	r3, [r2, #0]
 800adcc:	bf5c      	itt	pl
 800adce:	6013      	strpl	r3, [r2, #0]
 800add0:	2002      	movpl	r0, #2
 800add2:	4770      	bx	lr
 800add4:	b299      	uxth	r1, r3
 800add6:	b909      	cbnz	r1, 800addc <__lo0bits+0x2a>
 800add8:	0c1b      	lsrs	r3, r3, #16
 800adda:	2010      	movs	r0, #16
 800addc:	b2d9      	uxtb	r1, r3
 800adde:	b909      	cbnz	r1, 800ade4 <__lo0bits+0x32>
 800ade0:	3008      	adds	r0, #8
 800ade2:	0a1b      	lsrs	r3, r3, #8
 800ade4:	0719      	lsls	r1, r3, #28
 800ade6:	bf04      	itt	eq
 800ade8:	091b      	lsreq	r3, r3, #4
 800adea:	3004      	addeq	r0, #4
 800adec:	0799      	lsls	r1, r3, #30
 800adee:	bf04      	itt	eq
 800adf0:	089b      	lsreq	r3, r3, #2
 800adf2:	3002      	addeq	r0, #2
 800adf4:	07d9      	lsls	r1, r3, #31
 800adf6:	d403      	bmi.n	800ae00 <__lo0bits+0x4e>
 800adf8:	085b      	lsrs	r3, r3, #1
 800adfa:	f100 0001 	add.w	r0, r0, #1
 800adfe:	d003      	beq.n	800ae08 <__lo0bits+0x56>
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	4770      	bx	lr
 800ae04:	2000      	movs	r0, #0
 800ae06:	4770      	bx	lr
 800ae08:	2020      	movs	r0, #32
 800ae0a:	4770      	bx	lr

0800ae0c <__i2b>:
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	460c      	mov	r4, r1
 800ae10:	2101      	movs	r1, #1
 800ae12:	f7ff febd 	bl	800ab90 <_Balloc>
 800ae16:	4602      	mov	r2, r0
 800ae18:	b928      	cbnz	r0, 800ae26 <__i2b+0x1a>
 800ae1a:	4b05      	ldr	r3, [pc, #20]	@ (800ae30 <__i2b+0x24>)
 800ae1c:	4805      	ldr	r0, [pc, #20]	@ (800ae34 <__i2b+0x28>)
 800ae1e:	f240 1145 	movw	r1, #325	@ 0x145
 800ae22:	f001 fe01 	bl	800ca28 <__assert_func>
 800ae26:	2301      	movs	r3, #1
 800ae28:	6144      	str	r4, [r0, #20]
 800ae2a:	6103      	str	r3, [r0, #16]
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	bf00      	nop
 800ae30:	0800d791 	.word	0x0800d791
 800ae34:	0800d7a2 	.word	0x0800d7a2

0800ae38 <__multiply>:
 800ae38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	4617      	mov	r7, r2
 800ae3e:	690a      	ldr	r2, [r1, #16]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	bfa8      	it	ge
 800ae46:	463b      	movge	r3, r7
 800ae48:	4689      	mov	r9, r1
 800ae4a:	bfa4      	itt	ge
 800ae4c:	460f      	movge	r7, r1
 800ae4e:	4699      	movge	r9, r3
 800ae50:	693d      	ldr	r5, [r7, #16]
 800ae52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	eb05 060a 	add.w	r6, r5, sl
 800ae5e:	42b3      	cmp	r3, r6
 800ae60:	b085      	sub	sp, #20
 800ae62:	bfb8      	it	lt
 800ae64:	3101      	addlt	r1, #1
 800ae66:	f7ff fe93 	bl	800ab90 <_Balloc>
 800ae6a:	b930      	cbnz	r0, 800ae7a <__multiply+0x42>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	4b41      	ldr	r3, [pc, #260]	@ (800af74 <__multiply+0x13c>)
 800ae70:	4841      	ldr	r0, [pc, #260]	@ (800af78 <__multiply+0x140>)
 800ae72:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae76:	f001 fdd7 	bl	800ca28 <__assert_func>
 800ae7a:	f100 0414 	add.w	r4, r0, #20
 800ae7e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ae82:	4623      	mov	r3, r4
 800ae84:	2200      	movs	r2, #0
 800ae86:	4573      	cmp	r3, lr
 800ae88:	d320      	bcc.n	800aecc <__multiply+0x94>
 800ae8a:	f107 0814 	add.w	r8, r7, #20
 800ae8e:	f109 0114 	add.w	r1, r9, #20
 800ae92:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ae96:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	1beb      	subs	r3, r5, r7
 800ae9e:	3b15      	subs	r3, #21
 800aea0:	f023 0303 	bic.w	r3, r3, #3
 800aea4:	3304      	adds	r3, #4
 800aea6:	3715      	adds	r7, #21
 800aea8:	42bd      	cmp	r5, r7
 800aeaa:	bf38      	it	cc
 800aeac:	2304      	movcc	r3, #4
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	9103      	str	r1, [sp, #12]
 800aeb4:	428b      	cmp	r3, r1
 800aeb6:	d80c      	bhi.n	800aed2 <__multiply+0x9a>
 800aeb8:	2e00      	cmp	r6, #0
 800aeba:	dd03      	ble.n	800aec4 <__multiply+0x8c>
 800aebc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d055      	beq.n	800af70 <__multiply+0x138>
 800aec4:	6106      	str	r6, [r0, #16]
 800aec6:	b005      	add	sp, #20
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aecc:	f843 2b04 	str.w	r2, [r3], #4
 800aed0:	e7d9      	b.n	800ae86 <__multiply+0x4e>
 800aed2:	f8b1 a000 	ldrh.w	sl, [r1]
 800aed6:	f1ba 0f00 	cmp.w	sl, #0
 800aeda:	d01f      	beq.n	800af1c <__multiply+0xe4>
 800aedc:	46c4      	mov	ip, r8
 800aede:	46a1      	mov	r9, r4
 800aee0:	2700      	movs	r7, #0
 800aee2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aee6:	f8d9 3000 	ldr.w	r3, [r9]
 800aeea:	fa1f fb82 	uxth.w	fp, r2
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	fb0a 330b 	mla	r3, sl, fp, r3
 800aef4:	443b      	add	r3, r7
 800aef6:	f8d9 7000 	ldr.w	r7, [r9]
 800aefa:	0c12      	lsrs	r2, r2, #16
 800aefc:	0c3f      	lsrs	r7, r7, #16
 800aefe:	fb0a 7202 	mla	r2, sl, r2, r7
 800af02:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800af06:	b29b      	uxth	r3, r3
 800af08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af0c:	4565      	cmp	r5, ip
 800af0e:	f849 3b04 	str.w	r3, [r9], #4
 800af12:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800af16:	d8e4      	bhi.n	800aee2 <__multiply+0xaa>
 800af18:	9b01      	ldr	r3, [sp, #4]
 800af1a:	50e7      	str	r7, [r4, r3]
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af22:	3104      	adds	r1, #4
 800af24:	f1b9 0f00 	cmp.w	r9, #0
 800af28:	d020      	beq.n	800af6c <__multiply+0x134>
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	4647      	mov	r7, r8
 800af2e:	46a4      	mov	ip, r4
 800af30:	f04f 0a00 	mov.w	sl, #0
 800af34:	f8b7 b000 	ldrh.w	fp, [r7]
 800af38:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800af3c:	fb09 220b 	mla	r2, r9, fp, r2
 800af40:	4452      	add	r2, sl
 800af42:	b29b      	uxth	r3, r3
 800af44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af48:	f84c 3b04 	str.w	r3, [ip], #4
 800af4c:	f857 3b04 	ldr.w	r3, [r7], #4
 800af50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af54:	f8bc 3000 	ldrh.w	r3, [ip]
 800af58:	fb09 330a 	mla	r3, r9, sl, r3
 800af5c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800af60:	42bd      	cmp	r5, r7
 800af62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af66:	d8e5      	bhi.n	800af34 <__multiply+0xfc>
 800af68:	9a01      	ldr	r2, [sp, #4]
 800af6a:	50a3      	str	r3, [r4, r2]
 800af6c:	3404      	adds	r4, #4
 800af6e:	e79f      	b.n	800aeb0 <__multiply+0x78>
 800af70:	3e01      	subs	r6, #1
 800af72:	e7a1      	b.n	800aeb8 <__multiply+0x80>
 800af74:	0800d791 	.word	0x0800d791
 800af78:	0800d7a2 	.word	0x0800d7a2

0800af7c <__pow5mult>:
 800af7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af80:	4615      	mov	r5, r2
 800af82:	f012 0203 	ands.w	r2, r2, #3
 800af86:	4607      	mov	r7, r0
 800af88:	460e      	mov	r6, r1
 800af8a:	d007      	beq.n	800af9c <__pow5mult+0x20>
 800af8c:	4c25      	ldr	r4, [pc, #148]	@ (800b024 <__pow5mult+0xa8>)
 800af8e:	3a01      	subs	r2, #1
 800af90:	2300      	movs	r3, #0
 800af92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af96:	f7ff fe5d 	bl	800ac54 <__multadd>
 800af9a:	4606      	mov	r6, r0
 800af9c:	10ad      	asrs	r5, r5, #2
 800af9e:	d03d      	beq.n	800b01c <__pow5mult+0xa0>
 800afa0:	69fc      	ldr	r4, [r7, #28]
 800afa2:	b97c      	cbnz	r4, 800afc4 <__pow5mult+0x48>
 800afa4:	2010      	movs	r0, #16
 800afa6:	f7ff fd3d 	bl	800aa24 <malloc>
 800afaa:	4602      	mov	r2, r0
 800afac:	61f8      	str	r0, [r7, #28]
 800afae:	b928      	cbnz	r0, 800afbc <__pow5mult+0x40>
 800afb0:	4b1d      	ldr	r3, [pc, #116]	@ (800b028 <__pow5mult+0xac>)
 800afb2:	481e      	ldr	r0, [pc, #120]	@ (800b02c <__pow5mult+0xb0>)
 800afb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800afb8:	f001 fd36 	bl	800ca28 <__assert_func>
 800afbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afc0:	6004      	str	r4, [r0, #0]
 800afc2:	60c4      	str	r4, [r0, #12]
 800afc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800afc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afcc:	b94c      	cbnz	r4, 800afe2 <__pow5mult+0x66>
 800afce:	f240 2171 	movw	r1, #625	@ 0x271
 800afd2:	4638      	mov	r0, r7
 800afd4:	f7ff ff1a 	bl	800ae0c <__i2b>
 800afd8:	2300      	movs	r3, #0
 800afda:	f8c8 0008 	str.w	r0, [r8, #8]
 800afde:	4604      	mov	r4, r0
 800afe0:	6003      	str	r3, [r0, #0]
 800afe2:	f04f 0900 	mov.w	r9, #0
 800afe6:	07eb      	lsls	r3, r5, #31
 800afe8:	d50a      	bpl.n	800b000 <__pow5mult+0x84>
 800afea:	4631      	mov	r1, r6
 800afec:	4622      	mov	r2, r4
 800afee:	4638      	mov	r0, r7
 800aff0:	f7ff ff22 	bl	800ae38 <__multiply>
 800aff4:	4631      	mov	r1, r6
 800aff6:	4680      	mov	r8, r0
 800aff8:	4638      	mov	r0, r7
 800affa:	f7ff fe09 	bl	800ac10 <_Bfree>
 800affe:	4646      	mov	r6, r8
 800b000:	106d      	asrs	r5, r5, #1
 800b002:	d00b      	beq.n	800b01c <__pow5mult+0xa0>
 800b004:	6820      	ldr	r0, [r4, #0]
 800b006:	b938      	cbnz	r0, 800b018 <__pow5mult+0x9c>
 800b008:	4622      	mov	r2, r4
 800b00a:	4621      	mov	r1, r4
 800b00c:	4638      	mov	r0, r7
 800b00e:	f7ff ff13 	bl	800ae38 <__multiply>
 800b012:	6020      	str	r0, [r4, #0]
 800b014:	f8c0 9000 	str.w	r9, [r0]
 800b018:	4604      	mov	r4, r0
 800b01a:	e7e4      	b.n	800afe6 <__pow5mult+0x6a>
 800b01c:	4630      	mov	r0, r6
 800b01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b022:	bf00      	nop
 800b024:	0800d8b4 	.word	0x0800d8b4
 800b028:	0800d722 	.word	0x0800d722
 800b02c:	0800d7a2 	.word	0x0800d7a2

0800b030 <__lshift>:
 800b030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b034:	460c      	mov	r4, r1
 800b036:	6849      	ldr	r1, [r1, #4]
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	4607      	mov	r7, r0
 800b042:	4691      	mov	r9, r2
 800b044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b048:	f108 0601 	add.w	r6, r8, #1
 800b04c:	42b3      	cmp	r3, r6
 800b04e:	db0b      	blt.n	800b068 <__lshift+0x38>
 800b050:	4638      	mov	r0, r7
 800b052:	f7ff fd9d 	bl	800ab90 <_Balloc>
 800b056:	4605      	mov	r5, r0
 800b058:	b948      	cbnz	r0, 800b06e <__lshift+0x3e>
 800b05a:	4602      	mov	r2, r0
 800b05c:	4b28      	ldr	r3, [pc, #160]	@ (800b100 <__lshift+0xd0>)
 800b05e:	4829      	ldr	r0, [pc, #164]	@ (800b104 <__lshift+0xd4>)
 800b060:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b064:	f001 fce0 	bl	800ca28 <__assert_func>
 800b068:	3101      	adds	r1, #1
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	e7ee      	b.n	800b04c <__lshift+0x1c>
 800b06e:	2300      	movs	r3, #0
 800b070:	f100 0114 	add.w	r1, r0, #20
 800b074:	f100 0210 	add.w	r2, r0, #16
 800b078:	4618      	mov	r0, r3
 800b07a:	4553      	cmp	r3, sl
 800b07c:	db33      	blt.n	800b0e6 <__lshift+0xb6>
 800b07e:	6920      	ldr	r0, [r4, #16]
 800b080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b084:	f104 0314 	add.w	r3, r4, #20
 800b088:	f019 091f 	ands.w	r9, r9, #31
 800b08c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b090:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b094:	d02b      	beq.n	800b0ee <__lshift+0xbe>
 800b096:	f1c9 0e20 	rsb	lr, r9, #32
 800b09a:	468a      	mov	sl, r1
 800b09c:	2200      	movs	r2, #0
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	fa00 f009 	lsl.w	r0, r0, r9
 800b0a4:	4310      	orrs	r0, r2
 800b0a6:	f84a 0b04 	str.w	r0, [sl], #4
 800b0aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ae:	459c      	cmp	ip, r3
 800b0b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0b4:	d8f3      	bhi.n	800b09e <__lshift+0x6e>
 800b0b6:	ebac 0304 	sub.w	r3, ip, r4
 800b0ba:	3b15      	subs	r3, #21
 800b0bc:	f023 0303 	bic.w	r3, r3, #3
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	f104 0015 	add.w	r0, r4, #21
 800b0c6:	4560      	cmp	r0, ip
 800b0c8:	bf88      	it	hi
 800b0ca:	2304      	movhi	r3, #4
 800b0cc:	50ca      	str	r2, [r1, r3]
 800b0ce:	b10a      	cbz	r2, 800b0d4 <__lshift+0xa4>
 800b0d0:	f108 0602 	add.w	r6, r8, #2
 800b0d4:	3e01      	subs	r6, #1
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	612e      	str	r6, [r5, #16]
 800b0da:	4621      	mov	r1, r4
 800b0dc:	f7ff fd98 	bl	800ac10 <_Bfree>
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	e7c5      	b.n	800b07a <__lshift+0x4a>
 800b0ee:	3904      	subs	r1, #4
 800b0f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0f8:	459c      	cmp	ip, r3
 800b0fa:	d8f9      	bhi.n	800b0f0 <__lshift+0xc0>
 800b0fc:	e7ea      	b.n	800b0d4 <__lshift+0xa4>
 800b0fe:	bf00      	nop
 800b100:	0800d791 	.word	0x0800d791
 800b104:	0800d7a2 	.word	0x0800d7a2

0800b108 <__mcmp>:
 800b108:	690a      	ldr	r2, [r1, #16]
 800b10a:	4603      	mov	r3, r0
 800b10c:	6900      	ldr	r0, [r0, #16]
 800b10e:	1a80      	subs	r0, r0, r2
 800b110:	b530      	push	{r4, r5, lr}
 800b112:	d10e      	bne.n	800b132 <__mcmp+0x2a>
 800b114:	3314      	adds	r3, #20
 800b116:	3114      	adds	r1, #20
 800b118:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b11c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b120:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b124:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b128:	4295      	cmp	r5, r2
 800b12a:	d003      	beq.n	800b134 <__mcmp+0x2c>
 800b12c:	d205      	bcs.n	800b13a <__mcmp+0x32>
 800b12e:	f04f 30ff 	mov.w	r0, #4294967295
 800b132:	bd30      	pop	{r4, r5, pc}
 800b134:	42a3      	cmp	r3, r4
 800b136:	d3f3      	bcc.n	800b120 <__mcmp+0x18>
 800b138:	e7fb      	b.n	800b132 <__mcmp+0x2a>
 800b13a:	2001      	movs	r0, #1
 800b13c:	e7f9      	b.n	800b132 <__mcmp+0x2a>
	...

0800b140 <__mdiff>:
 800b140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	4689      	mov	r9, r1
 800b146:	4606      	mov	r6, r0
 800b148:	4611      	mov	r1, r2
 800b14a:	4648      	mov	r0, r9
 800b14c:	4614      	mov	r4, r2
 800b14e:	f7ff ffdb 	bl	800b108 <__mcmp>
 800b152:	1e05      	subs	r5, r0, #0
 800b154:	d112      	bne.n	800b17c <__mdiff+0x3c>
 800b156:	4629      	mov	r1, r5
 800b158:	4630      	mov	r0, r6
 800b15a:	f7ff fd19 	bl	800ab90 <_Balloc>
 800b15e:	4602      	mov	r2, r0
 800b160:	b928      	cbnz	r0, 800b16e <__mdiff+0x2e>
 800b162:	4b3f      	ldr	r3, [pc, #252]	@ (800b260 <__mdiff+0x120>)
 800b164:	f240 2137 	movw	r1, #567	@ 0x237
 800b168:	483e      	ldr	r0, [pc, #248]	@ (800b264 <__mdiff+0x124>)
 800b16a:	f001 fc5d 	bl	800ca28 <__assert_func>
 800b16e:	2301      	movs	r3, #1
 800b170:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b174:	4610      	mov	r0, r2
 800b176:	b003      	add	sp, #12
 800b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17c:	bfbc      	itt	lt
 800b17e:	464b      	movlt	r3, r9
 800b180:	46a1      	movlt	r9, r4
 800b182:	4630      	mov	r0, r6
 800b184:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b188:	bfba      	itte	lt
 800b18a:	461c      	movlt	r4, r3
 800b18c:	2501      	movlt	r5, #1
 800b18e:	2500      	movge	r5, #0
 800b190:	f7ff fcfe 	bl	800ab90 <_Balloc>
 800b194:	4602      	mov	r2, r0
 800b196:	b918      	cbnz	r0, 800b1a0 <__mdiff+0x60>
 800b198:	4b31      	ldr	r3, [pc, #196]	@ (800b260 <__mdiff+0x120>)
 800b19a:	f240 2145 	movw	r1, #581	@ 0x245
 800b19e:	e7e3      	b.n	800b168 <__mdiff+0x28>
 800b1a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b1a4:	6926      	ldr	r6, [r4, #16]
 800b1a6:	60c5      	str	r5, [r0, #12]
 800b1a8:	f109 0310 	add.w	r3, r9, #16
 800b1ac:	f109 0514 	add.w	r5, r9, #20
 800b1b0:	f104 0e14 	add.w	lr, r4, #20
 800b1b4:	f100 0b14 	add.w	fp, r0, #20
 800b1b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b1bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	46d9      	mov	r9, fp
 800b1c4:	f04f 0c00 	mov.w	ip, #0
 800b1c8:	9b01      	ldr	r3, [sp, #4]
 800b1ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b1ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b1d2:	9301      	str	r3, [sp, #4]
 800b1d4:	fa1f f38a 	uxth.w	r3, sl
 800b1d8:	4619      	mov	r1, r3
 800b1da:	b283      	uxth	r3, r0
 800b1dc:	1acb      	subs	r3, r1, r3
 800b1de:	0c00      	lsrs	r0, r0, #16
 800b1e0:	4463      	add	r3, ip
 800b1e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b1e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b1f0:	4576      	cmp	r6, lr
 800b1f2:	f849 3b04 	str.w	r3, [r9], #4
 800b1f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1fa:	d8e5      	bhi.n	800b1c8 <__mdiff+0x88>
 800b1fc:	1b33      	subs	r3, r6, r4
 800b1fe:	3b15      	subs	r3, #21
 800b200:	f023 0303 	bic.w	r3, r3, #3
 800b204:	3415      	adds	r4, #21
 800b206:	3304      	adds	r3, #4
 800b208:	42a6      	cmp	r6, r4
 800b20a:	bf38      	it	cc
 800b20c:	2304      	movcc	r3, #4
 800b20e:	441d      	add	r5, r3
 800b210:	445b      	add	r3, fp
 800b212:	461e      	mov	r6, r3
 800b214:	462c      	mov	r4, r5
 800b216:	4544      	cmp	r4, r8
 800b218:	d30e      	bcc.n	800b238 <__mdiff+0xf8>
 800b21a:	f108 0103 	add.w	r1, r8, #3
 800b21e:	1b49      	subs	r1, r1, r5
 800b220:	f021 0103 	bic.w	r1, r1, #3
 800b224:	3d03      	subs	r5, #3
 800b226:	45a8      	cmp	r8, r5
 800b228:	bf38      	it	cc
 800b22a:	2100      	movcc	r1, #0
 800b22c:	440b      	add	r3, r1
 800b22e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b232:	b191      	cbz	r1, 800b25a <__mdiff+0x11a>
 800b234:	6117      	str	r7, [r2, #16]
 800b236:	e79d      	b.n	800b174 <__mdiff+0x34>
 800b238:	f854 1b04 	ldr.w	r1, [r4], #4
 800b23c:	46e6      	mov	lr, ip
 800b23e:	0c08      	lsrs	r0, r1, #16
 800b240:	fa1c fc81 	uxtah	ip, ip, r1
 800b244:	4471      	add	r1, lr
 800b246:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b24a:	b289      	uxth	r1, r1
 800b24c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b250:	f846 1b04 	str.w	r1, [r6], #4
 800b254:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b258:	e7dd      	b.n	800b216 <__mdiff+0xd6>
 800b25a:	3f01      	subs	r7, #1
 800b25c:	e7e7      	b.n	800b22e <__mdiff+0xee>
 800b25e:	bf00      	nop
 800b260:	0800d791 	.word	0x0800d791
 800b264:	0800d7a2 	.word	0x0800d7a2

0800b268 <__ulp>:
 800b268:	b082      	sub	sp, #8
 800b26a:	ed8d 0b00 	vstr	d0, [sp]
 800b26e:	9a01      	ldr	r2, [sp, #4]
 800b270:	4b0f      	ldr	r3, [pc, #60]	@ (800b2b0 <__ulp+0x48>)
 800b272:	4013      	ands	r3, r2
 800b274:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	dc08      	bgt.n	800b28e <__ulp+0x26>
 800b27c:	425b      	negs	r3, r3
 800b27e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b282:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b286:	da04      	bge.n	800b292 <__ulp+0x2a>
 800b288:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b28c:	4113      	asrs	r3, r2
 800b28e:	2200      	movs	r2, #0
 800b290:	e008      	b.n	800b2a4 <__ulp+0x3c>
 800b292:	f1a2 0314 	sub.w	r3, r2, #20
 800b296:	2b1e      	cmp	r3, #30
 800b298:	bfda      	itte	le
 800b29a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b29e:	40da      	lsrle	r2, r3
 800b2a0:	2201      	movgt	r2, #1
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	ec41 0b10 	vmov	d0, r0, r1
 800b2ac:	b002      	add	sp, #8
 800b2ae:	4770      	bx	lr
 800b2b0:	7ff00000 	.word	0x7ff00000

0800b2b4 <__b2d>:
 800b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b8:	6906      	ldr	r6, [r0, #16]
 800b2ba:	f100 0814 	add.w	r8, r0, #20
 800b2be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b2c2:	1f37      	subs	r7, r6, #4
 800b2c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	f7ff fd53 	bl	800ad74 <__hi0bits>
 800b2ce:	f1c0 0320 	rsb	r3, r0, #32
 800b2d2:	280a      	cmp	r0, #10
 800b2d4:	600b      	str	r3, [r1, #0]
 800b2d6:	491b      	ldr	r1, [pc, #108]	@ (800b344 <__b2d+0x90>)
 800b2d8:	dc15      	bgt.n	800b306 <__b2d+0x52>
 800b2da:	f1c0 0c0b 	rsb	ip, r0, #11
 800b2de:	fa22 f30c 	lsr.w	r3, r2, ip
 800b2e2:	45b8      	cmp	r8, r7
 800b2e4:	ea43 0501 	orr.w	r5, r3, r1
 800b2e8:	bf34      	ite	cc
 800b2ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b2ee:	2300      	movcs	r3, #0
 800b2f0:	3015      	adds	r0, #21
 800b2f2:	fa02 f000 	lsl.w	r0, r2, r0
 800b2f6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b2fa:	4303      	orrs	r3, r0
 800b2fc:	461c      	mov	r4, r3
 800b2fe:	ec45 4b10 	vmov	d0, r4, r5
 800b302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b306:	45b8      	cmp	r8, r7
 800b308:	bf3a      	itte	cc
 800b30a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b30e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b312:	2300      	movcs	r3, #0
 800b314:	380b      	subs	r0, #11
 800b316:	d012      	beq.n	800b33e <__b2d+0x8a>
 800b318:	f1c0 0120 	rsb	r1, r0, #32
 800b31c:	fa23 f401 	lsr.w	r4, r3, r1
 800b320:	4082      	lsls	r2, r0
 800b322:	4322      	orrs	r2, r4
 800b324:	4547      	cmp	r7, r8
 800b326:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b32a:	bf8c      	ite	hi
 800b32c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b330:	2200      	movls	r2, #0
 800b332:	4083      	lsls	r3, r0
 800b334:	40ca      	lsrs	r2, r1
 800b336:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b33a:	4313      	orrs	r3, r2
 800b33c:	e7de      	b.n	800b2fc <__b2d+0x48>
 800b33e:	ea42 0501 	orr.w	r5, r2, r1
 800b342:	e7db      	b.n	800b2fc <__b2d+0x48>
 800b344:	3ff00000 	.word	0x3ff00000

0800b348 <__d2b>:
 800b348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b34c:	460f      	mov	r7, r1
 800b34e:	2101      	movs	r1, #1
 800b350:	ec59 8b10 	vmov	r8, r9, d0
 800b354:	4616      	mov	r6, r2
 800b356:	f7ff fc1b 	bl	800ab90 <_Balloc>
 800b35a:	4604      	mov	r4, r0
 800b35c:	b930      	cbnz	r0, 800b36c <__d2b+0x24>
 800b35e:	4602      	mov	r2, r0
 800b360:	4b23      	ldr	r3, [pc, #140]	@ (800b3f0 <__d2b+0xa8>)
 800b362:	4824      	ldr	r0, [pc, #144]	@ (800b3f4 <__d2b+0xac>)
 800b364:	f240 310f 	movw	r1, #783	@ 0x30f
 800b368:	f001 fb5e 	bl	800ca28 <__assert_func>
 800b36c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b374:	b10d      	cbz	r5, 800b37a <__d2b+0x32>
 800b376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b37a:	9301      	str	r3, [sp, #4]
 800b37c:	f1b8 0300 	subs.w	r3, r8, #0
 800b380:	d023      	beq.n	800b3ca <__d2b+0x82>
 800b382:	4668      	mov	r0, sp
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	f7ff fd14 	bl	800adb2 <__lo0bits>
 800b38a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b38e:	b1d0      	cbz	r0, 800b3c6 <__d2b+0x7e>
 800b390:	f1c0 0320 	rsb	r3, r0, #32
 800b394:	fa02 f303 	lsl.w	r3, r2, r3
 800b398:	430b      	orrs	r3, r1
 800b39a:	40c2      	lsrs	r2, r0
 800b39c:	6163      	str	r3, [r4, #20]
 800b39e:	9201      	str	r2, [sp, #4]
 800b3a0:	9b01      	ldr	r3, [sp, #4]
 800b3a2:	61a3      	str	r3, [r4, #24]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bf0c      	ite	eq
 800b3a8:	2201      	moveq	r2, #1
 800b3aa:	2202      	movne	r2, #2
 800b3ac:	6122      	str	r2, [r4, #16]
 800b3ae:	b1a5      	cbz	r5, 800b3da <__d2b+0x92>
 800b3b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b3b4:	4405      	add	r5, r0
 800b3b6:	603d      	str	r5, [r7, #0]
 800b3b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b3bc:	6030      	str	r0, [r6, #0]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	b003      	add	sp, #12
 800b3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3c6:	6161      	str	r1, [r4, #20]
 800b3c8:	e7ea      	b.n	800b3a0 <__d2b+0x58>
 800b3ca:	a801      	add	r0, sp, #4
 800b3cc:	f7ff fcf1 	bl	800adb2 <__lo0bits>
 800b3d0:	9b01      	ldr	r3, [sp, #4]
 800b3d2:	6163      	str	r3, [r4, #20]
 800b3d4:	3020      	adds	r0, #32
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	e7e8      	b.n	800b3ac <__d2b+0x64>
 800b3da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b3e2:	6038      	str	r0, [r7, #0]
 800b3e4:	6918      	ldr	r0, [r3, #16]
 800b3e6:	f7ff fcc5 	bl	800ad74 <__hi0bits>
 800b3ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3ee:	e7e5      	b.n	800b3bc <__d2b+0x74>
 800b3f0:	0800d791 	.word	0x0800d791
 800b3f4:	0800d7a2 	.word	0x0800d7a2

0800b3f8 <__ratio>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	b085      	sub	sp, #20
 800b3fe:	e9cd 1000 	strd	r1, r0, [sp]
 800b402:	a902      	add	r1, sp, #8
 800b404:	f7ff ff56 	bl	800b2b4 <__b2d>
 800b408:	9800      	ldr	r0, [sp, #0]
 800b40a:	a903      	add	r1, sp, #12
 800b40c:	ec55 4b10 	vmov	r4, r5, d0
 800b410:	f7ff ff50 	bl	800b2b4 <__b2d>
 800b414:	9b01      	ldr	r3, [sp, #4]
 800b416:	6919      	ldr	r1, [r3, #16]
 800b418:	9b00      	ldr	r3, [sp, #0]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	1ac9      	subs	r1, r1, r3
 800b41e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b422:	1a9b      	subs	r3, r3, r2
 800b424:	ec5b ab10 	vmov	sl, fp, d0
 800b428:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	bfce      	itee	gt
 800b430:	462a      	movgt	r2, r5
 800b432:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b436:	465a      	movle	r2, fp
 800b438:	462f      	mov	r7, r5
 800b43a:	46d9      	mov	r9, fp
 800b43c:	bfcc      	ite	gt
 800b43e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b442:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b446:	464b      	mov	r3, r9
 800b448:	4652      	mov	r2, sl
 800b44a:	4620      	mov	r0, r4
 800b44c:	4639      	mov	r1, r7
 800b44e:	f7f5 fa1d 	bl	800088c <__aeabi_ddiv>
 800b452:	ec41 0b10 	vmov	d0, r0, r1
 800b456:	b005      	add	sp, #20
 800b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b45c <__copybits>:
 800b45c:	3901      	subs	r1, #1
 800b45e:	b570      	push	{r4, r5, r6, lr}
 800b460:	1149      	asrs	r1, r1, #5
 800b462:	6914      	ldr	r4, [r2, #16]
 800b464:	3101      	adds	r1, #1
 800b466:	f102 0314 	add.w	r3, r2, #20
 800b46a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b46e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b472:	1f05      	subs	r5, r0, #4
 800b474:	42a3      	cmp	r3, r4
 800b476:	d30c      	bcc.n	800b492 <__copybits+0x36>
 800b478:	1aa3      	subs	r3, r4, r2
 800b47a:	3b11      	subs	r3, #17
 800b47c:	f023 0303 	bic.w	r3, r3, #3
 800b480:	3211      	adds	r2, #17
 800b482:	42a2      	cmp	r2, r4
 800b484:	bf88      	it	hi
 800b486:	2300      	movhi	r3, #0
 800b488:	4418      	add	r0, r3
 800b48a:	2300      	movs	r3, #0
 800b48c:	4288      	cmp	r0, r1
 800b48e:	d305      	bcc.n	800b49c <__copybits+0x40>
 800b490:	bd70      	pop	{r4, r5, r6, pc}
 800b492:	f853 6b04 	ldr.w	r6, [r3], #4
 800b496:	f845 6f04 	str.w	r6, [r5, #4]!
 800b49a:	e7eb      	b.n	800b474 <__copybits+0x18>
 800b49c:	f840 3b04 	str.w	r3, [r0], #4
 800b4a0:	e7f4      	b.n	800b48c <__copybits+0x30>

0800b4a2 <__any_on>:
 800b4a2:	f100 0214 	add.w	r2, r0, #20
 800b4a6:	6900      	ldr	r0, [r0, #16]
 800b4a8:	114b      	asrs	r3, r1, #5
 800b4aa:	4298      	cmp	r0, r3
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	db11      	blt.n	800b4d4 <__any_on+0x32>
 800b4b0:	dd0a      	ble.n	800b4c8 <__any_on+0x26>
 800b4b2:	f011 011f 	ands.w	r1, r1, #31
 800b4b6:	d007      	beq.n	800b4c8 <__any_on+0x26>
 800b4b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4bc:	fa24 f001 	lsr.w	r0, r4, r1
 800b4c0:	fa00 f101 	lsl.w	r1, r0, r1
 800b4c4:	428c      	cmp	r4, r1
 800b4c6:	d10b      	bne.n	800b4e0 <__any_on+0x3e>
 800b4c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d803      	bhi.n	800b4d8 <__any_on+0x36>
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	bd10      	pop	{r4, pc}
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	e7f7      	b.n	800b4c8 <__any_on+0x26>
 800b4d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4dc:	2900      	cmp	r1, #0
 800b4de:	d0f5      	beq.n	800b4cc <__any_on+0x2a>
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	e7f6      	b.n	800b4d2 <__any_on+0x30>

0800b4e4 <sulp>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	ec45 4b10 	vmov	d0, r4, r5
 800b4ee:	4616      	mov	r6, r2
 800b4f0:	f7ff feba 	bl	800b268 <__ulp>
 800b4f4:	ec51 0b10 	vmov	r0, r1, d0
 800b4f8:	b17e      	cbz	r6, 800b51a <sulp+0x36>
 800b4fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b4fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b502:	2b00      	cmp	r3, #0
 800b504:	dd09      	ble.n	800b51a <sulp+0x36>
 800b506:	051b      	lsls	r3, r3, #20
 800b508:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b50c:	2400      	movs	r4, #0
 800b50e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b512:	4622      	mov	r2, r4
 800b514:	462b      	mov	r3, r5
 800b516:	f7f5 f88f 	bl	8000638 <__aeabi_dmul>
 800b51a:	ec41 0b10 	vmov	d0, r0, r1
 800b51e:	bd70      	pop	{r4, r5, r6, pc}

0800b520 <_strtod_l>:
 800b520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	b09f      	sub	sp, #124	@ 0x7c
 800b526:	460c      	mov	r4, r1
 800b528:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b52a:	2200      	movs	r2, #0
 800b52c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b52e:	9005      	str	r0, [sp, #20]
 800b530:	f04f 0a00 	mov.w	sl, #0
 800b534:	f04f 0b00 	mov.w	fp, #0
 800b538:	460a      	mov	r2, r1
 800b53a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b53c:	7811      	ldrb	r1, [r2, #0]
 800b53e:	292b      	cmp	r1, #43	@ 0x2b
 800b540:	d04a      	beq.n	800b5d8 <_strtod_l+0xb8>
 800b542:	d838      	bhi.n	800b5b6 <_strtod_l+0x96>
 800b544:	290d      	cmp	r1, #13
 800b546:	d832      	bhi.n	800b5ae <_strtod_l+0x8e>
 800b548:	2908      	cmp	r1, #8
 800b54a:	d832      	bhi.n	800b5b2 <_strtod_l+0x92>
 800b54c:	2900      	cmp	r1, #0
 800b54e:	d03b      	beq.n	800b5c8 <_strtod_l+0xa8>
 800b550:	2200      	movs	r2, #0
 800b552:	920e      	str	r2, [sp, #56]	@ 0x38
 800b554:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b556:	782a      	ldrb	r2, [r5, #0]
 800b558:	2a30      	cmp	r2, #48	@ 0x30
 800b55a:	f040 80b2 	bne.w	800b6c2 <_strtod_l+0x1a2>
 800b55e:	786a      	ldrb	r2, [r5, #1]
 800b560:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b564:	2a58      	cmp	r2, #88	@ 0x58
 800b566:	d16e      	bne.n	800b646 <_strtod_l+0x126>
 800b568:	9302      	str	r3, [sp, #8]
 800b56a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	4a8f      	ldr	r2, [pc, #572]	@ (800b7b0 <_strtod_l+0x290>)
 800b574:	9805      	ldr	r0, [sp, #20]
 800b576:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b578:	a919      	add	r1, sp, #100	@ 0x64
 800b57a:	f001 faef 	bl	800cb5c <__gethex>
 800b57e:	f010 060f 	ands.w	r6, r0, #15
 800b582:	4604      	mov	r4, r0
 800b584:	d005      	beq.n	800b592 <_strtod_l+0x72>
 800b586:	2e06      	cmp	r6, #6
 800b588:	d128      	bne.n	800b5dc <_strtod_l+0xbc>
 800b58a:	3501      	adds	r5, #1
 800b58c:	2300      	movs	r3, #0
 800b58e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b590:	930e      	str	r3, [sp, #56]	@ 0x38
 800b592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b594:	2b00      	cmp	r3, #0
 800b596:	f040 858e 	bne.w	800c0b6 <_strtod_l+0xb96>
 800b59a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b59c:	b1cb      	cbz	r3, 800b5d2 <_strtod_l+0xb2>
 800b59e:	4652      	mov	r2, sl
 800b5a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b5a4:	ec43 2b10 	vmov	d0, r2, r3
 800b5a8:	b01f      	add	sp, #124	@ 0x7c
 800b5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ae:	2920      	cmp	r1, #32
 800b5b0:	d1ce      	bne.n	800b550 <_strtod_l+0x30>
 800b5b2:	3201      	adds	r2, #1
 800b5b4:	e7c1      	b.n	800b53a <_strtod_l+0x1a>
 800b5b6:	292d      	cmp	r1, #45	@ 0x2d
 800b5b8:	d1ca      	bne.n	800b550 <_strtod_l+0x30>
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	910e      	str	r1, [sp, #56]	@ 0x38
 800b5be:	1c51      	adds	r1, r2, #1
 800b5c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b5c2:	7852      	ldrb	r2, [r2, #1]
 800b5c4:	2a00      	cmp	r2, #0
 800b5c6:	d1c5      	bne.n	800b554 <_strtod_l+0x34>
 800b5c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 8570 	bne.w	800c0b2 <_strtod_l+0xb92>
 800b5d2:	4652      	mov	r2, sl
 800b5d4:	465b      	mov	r3, fp
 800b5d6:	e7e5      	b.n	800b5a4 <_strtod_l+0x84>
 800b5d8:	2100      	movs	r1, #0
 800b5da:	e7ef      	b.n	800b5bc <_strtod_l+0x9c>
 800b5dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b5de:	b13a      	cbz	r2, 800b5f0 <_strtod_l+0xd0>
 800b5e0:	2135      	movs	r1, #53	@ 0x35
 800b5e2:	a81c      	add	r0, sp, #112	@ 0x70
 800b5e4:	f7ff ff3a 	bl	800b45c <__copybits>
 800b5e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5ea:	9805      	ldr	r0, [sp, #20]
 800b5ec:	f7ff fb10 	bl	800ac10 <_Bfree>
 800b5f0:	3e01      	subs	r6, #1
 800b5f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b5f4:	2e04      	cmp	r6, #4
 800b5f6:	d806      	bhi.n	800b606 <_strtod_l+0xe6>
 800b5f8:	e8df f006 	tbb	[pc, r6]
 800b5fc:	201d0314 	.word	0x201d0314
 800b600:	14          	.byte	0x14
 800b601:	00          	.byte	0x00
 800b602:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b606:	05e1      	lsls	r1, r4, #23
 800b608:	bf48      	it	mi
 800b60a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b60e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b612:	0d1b      	lsrs	r3, r3, #20
 800b614:	051b      	lsls	r3, r3, #20
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1bb      	bne.n	800b592 <_strtod_l+0x72>
 800b61a:	f7fe fb2b 	bl	8009c74 <__errno>
 800b61e:	2322      	movs	r3, #34	@ 0x22
 800b620:	6003      	str	r3, [r0, #0]
 800b622:	e7b6      	b.n	800b592 <_strtod_l+0x72>
 800b624:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b628:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b62c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b630:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b634:	e7e7      	b.n	800b606 <_strtod_l+0xe6>
 800b636:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b7b8 <_strtod_l+0x298>
 800b63a:	e7e4      	b.n	800b606 <_strtod_l+0xe6>
 800b63c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b640:	f04f 3aff 	mov.w	sl, #4294967295
 800b644:	e7df      	b.n	800b606 <_strtod_l+0xe6>
 800b646:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b648:	1c5a      	adds	r2, r3, #1
 800b64a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b64c:	785b      	ldrb	r3, [r3, #1]
 800b64e:	2b30      	cmp	r3, #48	@ 0x30
 800b650:	d0f9      	beq.n	800b646 <_strtod_l+0x126>
 800b652:	2b00      	cmp	r3, #0
 800b654:	d09d      	beq.n	800b592 <_strtod_l+0x72>
 800b656:	2301      	movs	r3, #1
 800b658:	2700      	movs	r7, #0
 800b65a:	9308      	str	r3, [sp, #32]
 800b65c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b65e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b660:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b662:	46b9      	mov	r9, r7
 800b664:	220a      	movs	r2, #10
 800b666:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b668:	7805      	ldrb	r5, [r0, #0]
 800b66a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b66e:	b2d9      	uxtb	r1, r3
 800b670:	2909      	cmp	r1, #9
 800b672:	d928      	bls.n	800b6c6 <_strtod_l+0x1a6>
 800b674:	494f      	ldr	r1, [pc, #316]	@ (800b7b4 <_strtod_l+0x294>)
 800b676:	2201      	movs	r2, #1
 800b678:	f001 f97a 	bl	800c970 <strncmp>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d032      	beq.n	800b6e6 <_strtod_l+0x1c6>
 800b680:	2000      	movs	r0, #0
 800b682:	462a      	mov	r2, r5
 800b684:	900a      	str	r0, [sp, #40]	@ 0x28
 800b686:	464d      	mov	r5, r9
 800b688:	4603      	mov	r3, r0
 800b68a:	2a65      	cmp	r2, #101	@ 0x65
 800b68c:	d001      	beq.n	800b692 <_strtod_l+0x172>
 800b68e:	2a45      	cmp	r2, #69	@ 0x45
 800b690:	d114      	bne.n	800b6bc <_strtod_l+0x19c>
 800b692:	b91d      	cbnz	r5, 800b69c <_strtod_l+0x17c>
 800b694:	9a08      	ldr	r2, [sp, #32]
 800b696:	4302      	orrs	r2, r0
 800b698:	d096      	beq.n	800b5c8 <_strtod_l+0xa8>
 800b69a:	2500      	movs	r5, #0
 800b69c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b69e:	1c62      	adds	r2, r4, #1
 800b6a0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6a2:	7862      	ldrb	r2, [r4, #1]
 800b6a4:	2a2b      	cmp	r2, #43	@ 0x2b
 800b6a6:	d07a      	beq.n	800b79e <_strtod_l+0x27e>
 800b6a8:	2a2d      	cmp	r2, #45	@ 0x2d
 800b6aa:	d07e      	beq.n	800b7aa <_strtod_l+0x28a>
 800b6ac:	f04f 0c00 	mov.w	ip, #0
 800b6b0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b6b4:	2909      	cmp	r1, #9
 800b6b6:	f240 8085 	bls.w	800b7c4 <_strtod_l+0x2a4>
 800b6ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6bc:	f04f 0800 	mov.w	r8, #0
 800b6c0:	e0a5      	b.n	800b80e <_strtod_l+0x2ee>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e7c8      	b.n	800b658 <_strtod_l+0x138>
 800b6c6:	f1b9 0f08 	cmp.w	r9, #8
 800b6ca:	bfd8      	it	le
 800b6cc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b6ce:	f100 0001 	add.w	r0, r0, #1
 800b6d2:	bfda      	itte	le
 800b6d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b6d8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b6da:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b6de:	f109 0901 	add.w	r9, r9, #1
 800b6e2:	9019      	str	r0, [sp, #100]	@ 0x64
 800b6e4:	e7bf      	b.n	800b666 <_strtod_l+0x146>
 800b6e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6ec:	785a      	ldrb	r2, [r3, #1]
 800b6ee:	f1b9 0f00 	cmp.w	r9, #0
 800b6f2:	d03b      	beq.n	800b76c <_strtod_l+0x24c>
 800b6f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6f6:	464d      	mov	r5, r9
 800b6f8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b6fc:	2b09      	cmp	r3, #9
 800b6fe:	d912      	bls.n	800b726 <_strtod_l+0x206>
 800b700:	2301      	movs	r3, #1
 800b702:	e7c2      	b.n	800b68a <_strtod_l+0x16a>
 800b704:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	9219      	str	r2, [sp, #100]	@ 0x64
 800b70a:	785a      	ldrb	r2, [r3, #1]
 800b70c:	3001      	adds	r0, #1
 800b70e:	2a30      	cmp	r2, #48	@ 0x30
 800b710:	d0f8      	beq.n	800b704 <_strtod_l+0x1e4>
 800b712:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b716:	2b08      	cmp	r3, #8
 800b718:	f200 84d2 	bhi.w	800c0c0 <_strtod_l+0xba0>
 800b71c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b71e:	900a      	str	r0, [sp, #40]	@ 0x28
 800b720:	2000      	movs	r0, #0
 800b722:	930c      	str	r3, [sp, #48]	@ 0x30
 800b724:	4605      	mov	r5, r0
 800b726:	3a30      	subs	r2, #48	@ 0x30
 800b728:	f100 0301 	add.w	r3, r0, #1
 800b72c:	d018      	beq.n	800b760 <_strtod_l+0x240>
 800b72e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b730:	4419      	add	r1, r3
 800b732:	910a      	str	r1, [sp, #40]	@ 0x28
 800b734:	462e      	mov	r6, r5
 800b736:	f04f 0e0a 	mov.w	lr, #10
 800b73a:	1c71      	adds	r1, r6, #1
 800b73c:	eba1 0c05 	sub.w	ip, r1, r5
 800b740:	4563      	cmp	r3, ip
 800b742:	dc15      	bgt.n	800b770 <_strtod_l+0x250>
 800b744:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b748:	182b      	adds	r3, r5, r0
 800b74a:	2b08      	cmp	r3, #8
 800b74c:	f105 0501 	add.w	r5, r5, #1
 800b750:	4405      	add	r5, r0
 800b752:	dc1a      	bgt.n	800b78a <_strtod_l+0x26a>
 800b754:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b756:	230a      	movs	r3, #10
 800b758:	fb03 2301 	mla	r3, r3, r1, r2
 800b75c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b75e:	2300      	movs	r3, #0
 800b760:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b762:	1c51      	adds	r1, r2, #1
 800b764:	9119      	str	r1, [sp, #100]	@ 0x64
 800b766:	7852      	ldrb	r2, [r2, #1]
 800b768:	4618      	mov	r0, r3
 800b76a:	e7c5      	b.n	800b6f8 <_strtod_l+0x1d8>
 800b76c:	4648      	mov	r0, r9
 800b76e:	e7ce      	b.n	800b70e <_strtod_l+0x1ee>
 800b770:	2e08      	cmp	r6, #8
 800b772:	dc05      	bgt.n	800b780 <_strtod_l+0x260>
 800b774:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b776:	fb0e f606 	mul.w	r6, lr, r6
 800b77a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b77c:	460e      	mov	r6, r1
 800b77e:	e7dc      	b.n	800b73a <_strtod_l+0x21a>
 800b780:	2910      	cmp	r1, #16
 800b782:	bfd8      	it	le
 800b784:	fb0e f707 	mulle.w	r7, lr, r7
 800b788:	e7f8      	b.n	800b77c <_strtod_l+0x25c>
 800b78a:	2b0f      	cmp	r3, #15
 800b78c:	bfdc      	itt	le
 800b78e:	230a      	movle	r3, #10
 800b790:	fb03 2707 	mlale	r7, r3, r7, r2
 800b794:	e7e3      	b.n	800b75e <_strtod_l+0x23e>
 800b796:	2300      	movs	r3, #0
 800b798:	930a      	str	r3, [sp, #40]	@ 0x28
 800b79a:	2301      	movs	r3, #1
 800b79c:	e77a      	b.n	800b694 <_strtod_l+0x174>
 800b79e:	f04f 0c00 	mov.w	ip, #0
 800b7a2:	1ca2      	adds	r2, r4, #2
 800b7a4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7a6:	78a2      	ldrb	r2, [r4, #2]
 800b7a8:	e782      	b.n	800b6b0 <_strtod_l+0x190>
 800b7aa:	f04f 0c01 	mov.w	ip, #1
 800b7ae:	e7f8      	b.n	800b7a2 <_strtod_l+0x282>
 800b7b0:	0800d9c4 	.word	0x0800d9c4
 800b7b4:	0800d7fb 	.word	0x0800d7fb
 800b7b8:	7ff00000 	.word	0x7ff00000
 800b7bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7be:	1c51      	adds	r1, r2, #1
 800b7c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b7c2:	7852      	ldrb	r2, [r2, #1]
 800b7c4:	2a30      	cmp	r2, #48	@ 0x30
 800b7c6:	d0f9      	beq.n	800b7bc <_strtod_l+0x29c>
 800b7c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b7cc:	2908      	cmp	r1, #8
 800b7ce:	f63f af75 	bhi.w	800b6bc <_strtod_l+0x19c>
 800b7d2:	3a30      	subs	r2, #48	@ 0x30
 800b7d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7d8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b7da:	f04f 080a 	mov.w	r8, #10
 800b7de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7e0:	1c56      	adds	r6, r2, #1
 800b7e2:	9619      	str	r6, [sp, #100]	@ 0x64
 800b7e4:	7852      	ldrb	r2, [r2, #1]
 800b7e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b7ea:	f1be 0f09 	cmp.w	lr, #9
 800b7ee:	d939      	bls.n	800b864 <_strtod_l+0x344>
 800b7f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b7f2:	1a76      	subs	r6, r6, r1
 800b7f4:	2e08      	cmp	r6, #8
 800b7f6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b7fa:	dc03      	bgt.n	800b804 <_strtod_l+0x2e4>
 800b7fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7fe:	4588      	cmp	r8, r1
 800b800:	bfa8      	it	ge
 800b802:	4688      	movge	r8, r1
 800b804:	f1bc 0f00 	cmp.w	ip, #0
 800b808:	d001      	beq.n	800b80e <_strtod_l+0x2ee>
 800b80a:	f1c8 0800 	rsb	r8, r8, #0
 800b80e:	2d00      	cmp	r5, #0
 800b810:	d14e      	bne.n	800b8b0 <_strtod_l+0x390>
 800b812:	9908      	ldr	r1, [sp, #32]
 800b814:	4308      	orrs	r0, r1
 800b816:	f47f aebc 	bne.w	800b592 <_strtod_l+0x72>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f47f aed4 	bne.w	800b5c8 <_strtod_l+0xa8>
 800b820:	2a69      	cmp	r2, #105	@ 0x69
 800b822:	d028      	beq.n	800b876 <_strtod_l+0x356>
 800b824:	dc25      	bgt.n	800b872 <_strtod_l+0x352>
 800b826:	2a49      	cmp	r2, #73	@ 0x49
 800b828:	d025      	beq.n	800b876 <_strtod_l+0x356>
 800b82a:	2a4e      	cmp	r2, #78	@ 0x4e
 800b82c:	f47f aecc 	bne.w	800b5c8 <_strtod_l+0xa8>
 800b830:	499a      	ldr	r1, [pc, #616]	@ (800ba9c <_strtod_l+0x57c>)
 800b832:	a819      	add	r0, sp, #100	@ 0x64
 800b834:	f001 fbb4 	bl	800cfa0 <__match>
 800b838:	2800      	cmp	r0, #0
 800b83a:	f43f aec5 	beq.w	800b5c8 <_strtod_l+0xa8>
 800b83e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	2b28      	cmp	r3, #40	@ 0x28
 800b844:	d12e      	bne.n	800b8a4 <_strtod_l+0x384>
 800b846:	4996      	ldr	r1, [pc, #600]	@ (800baa0 <_strtod_l+0x580>)
 800b848:	aa1c      	add	r2, sp, #112	@ 0x70
 800b84a:	a819      	add	r0, sp, #100	@ 0x64
 800b84c:	f001 fbbc 	bl	800cfc8 <__hexnan>
 800b850:	2805      	cmp	r0, #5
 800b852:	d127      	bne.n	800b8a4 <_strtod_l+0x384>
 800b854:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b856:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b85a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b85e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b862:	e696      	b.n	800b592 <_strtod_l+0x72>
 800b864:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b866:	fb08 2101 	mla	r1, r8, r1, r2
 800b86a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b86e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b870:	e7b5      	b.n	800b7de <_strtod_l+0x2be>
 800b872:	2a6e      	cmp	r2, #110	@ 0x6e
 800b874:	e7da      	b.n	800b82c <_strtod_l+0x30c>
 800b876:	498b      	ldr	r1, [pc, #556]	@ (800baa4 <_strtod_l+0x584>)
 800b878:	a819      	add	r0, sp, #100	@ 0x64
 800b87a:	f001 fb91 	bl	800cfa0 <__match>
 800b87e:	2800      	cmp	r0, #0
 800b880:	f43f aea2 	beq.w	800b5c8 <_strtod_l+0xa8>
 800b884:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b886:	4988      	ldr	r1, [pc, #544]	@ (800baa8 <_strtod_l+0x588>)
 800b888:	3b01      	subs	r3, #1
 800b88a:	a819      	add	r0, sp, #100	@ 0x64
 800b88c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b88e:	f001 fb87 	bl	800cfa0 <__match>
 800b892:	b910      	cbnz	r0, 800b89a <_strtod_l+0x37a>
 800b894:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b896:	3301      	adds	r3, #1
 800b898:	9319      	str	r3, [sp, #100]	@ 0x64
 800b89a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800bab8 <_strtod_l+0x598>
 800b89e:	f04f 0a00 	mov.w	sl, #0
 800b8a2:	e676      	b.n	800b592 <_strtod_l+0x72>
 800b8a4:	4881      	ldr	r0, [pc, #516]	@ (800baac <_strtod_l+0x58c>)
 800b8a6:	f001 f8b7 	bl	800ca18 <nan>
 800b8aa:	ec5b ab10 	vmov	sl, fp, d0
 800b8ae:	e670      	b.n	800b592 <_strtod_l+0x72>
 800b8b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b8b4:	eba8 0303 	sub.w	r3, r8, r3
 800b8b8:	f1b9 0f00 	cmp.w	r9, #0
 800b8bc:	bf08      	it	eq
 800b8be:	46a9      	moveq	r9, r5
 800b8c0:	2d10      	cmp	r5, #16
 800b8c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8c4:	462c      	mov	r4, r5
 800b8c6:	bfa8      	it	ge
 800b8c8:	2410      	movge	r4, #16
 800b8ca:	f7f4 fe3b 	bl	8000544 <__aeabi_ui2d>
 800b8ce:	2d09      	cmp	r5, #9
 800b8d0:	4682      	mov	sl, r0
 800b8d2:	468b      	mov	fp, r1
 800b8d4:	dc13      	bgt.n	800b8fe <_strtod_l+0x3de>
 800b8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f43f ae5a 	beq.w	800b592 <_strtod_l+0x72>
 800b8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e0:	dd78      	ble.n	800b9d4 <_strtod_l+0x4b4>
 800b8e2:	2b16      	cmp	r3, #22
 800b8e4:	dc5f      	bgt.n	800b9a6 <_strtod_l+0x486>
 800b8e6:	4972      	ldr	r1, [pc, #456]	@ (800bab0 <_strtod_l+0x590>)
 800b8e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8f0:	4652      	mov	r2, sl
 800b8f2:	465b      	mov	r3, fp
 800b8f4:	f7f4 fea0 	bl	8000638 <__aeabi_dmul>
 800b8f8:	4682      	mov	sl, r0
 800b8fa:	468b      	mov	fp, r1
 800b8fc:	e649      	b.n	800b592 <_strtod_l+0x72>
 800b8fe:	4b6c      	ldr	r3, [pc, #432]	@ (800bab0 <_strtod_l+0x590>)
 800b900:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b904:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b908:	f7f4 fe96 	bl	8000638 <__aeabi_dmul>
 800b90c:	4682      	mov	sl, r0
 800b90e:	4638      	mov	r0, r7
 800b910:	468b      	mov	fp, r1
 800b912:	f7f4 fe17 	bl	8000544 <__aeabi_ui2d>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4650      	mov	r0, sl
 800b91c:	4659      	mov	r1, fp
 800b91e:	f7f4 fcd5 	bl	80002cc <__adddf3>
 800b922:	2d0f      	cmp	r5, #15
 800b924:	4682      	mov	sl, r0
 800b926:	468b      	mov	fp, r1
 800b928:	ddd5      	ble.n	800b8d6 <_strtod_l+0x3b6>
 800b92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b92c:	1b2c      	subs	r4, r5, r4
 800b92e:	441c      	add	r4, r3
 800b930:	2c00      	cmp	r4, #0
 800b932:	f340 8093 	ble.w	800ba5c <_strtod_l+0x53c>
 800b936:	f014 030f 	ands.w	r3, r4, #15
 800b93a:	d00a      	beq.n	800b952 <_strtod_l+0x432>
 800b93c:	495c      	ldr	r1, [pc, #368]	@ (800bab0 <_strtod_l+0x590>)
 800b93e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b942:	4652      	mov	r2, sl
 800b944:	465b      	mov	r3, fp
 800b946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b94a:	f7f4 fe75 	bl	8000638 <__aeabi_dmul>
 800b94e:	4682      	mov	sl, r0
 800b950:	468b      	mov	fp, r1
 800b952:	f034 040f 	bics.w	r4, r4, #15
 800b956:	d073      	beq.n	800ba40 <_strtod_l+0x520>
 800b958:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b95c:	dd49      	ble.n	800b9f2 <_strtod_l+0x4d2>
 800b95e:	2400      	movs	r4, #0
 800b960:	46a0      	mov	r8, r4
 800b962:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b964:	46a1      	mov	r9, r4
 800b966:	9a05      	ldr	r2, [sp, #20]
 800b968:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800bab8 <_strtod_l+0x598>
 800b96c:	2322      	movs	r3, #34	@ 0x22
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	f04f 0a00 	mov.w	sl, #0
 800b974:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b976:	2b00      	cmp	r3, #0
 800b978:	f43f ae0b 	beq.w	800b592 <_strtod_l+0x72>
 800b97c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b97e:	9805      	ldr	r0, [sp, #20]
 800b980:	f7ff f946 	bl	800ac10 <_Bfree>
 800b984:	9805      	ldr	r0, [sp, #20]
 800b986:	4649      	mov	r1, r9
 800b988:	f7ff f942 	bl	800ac10 <_Bfree>
 800b98c:	9805      	ldr	r0, [sp, #20]
 800b98e:	4641      	mov	r1, r8
 800b990:	f7ff f93e 	bl	800ac10 <_Bfree>
 800b994:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b996:	9805      	ldr	r0, [sp, #20]
 800b998:	f7ff f93a 	bl	800ac10 <_Bfree>
 800b99c:	9805      	ldr	r0, [sp, #20]
 800b99e:	4621      	mov	r1, r4
 800b9a0:	f7ff f936 	bl	800ac10 <_Bfree>
 800b9a4:	e5f5      	b.n	800b592 <_strtod_l+0x72>
 800b9a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	dbbc      	blt.n	800b92a <_strtod_l+0x40a>
 800b9b0:	4c3f      	ldr	r4, [pc, #252]	@ (800bab0 <_strtod_l+0x590>)
 800b9b2:	f1c5 050f 	rsb	r5, r5, #15
 800b9b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9ba:	4652      	mov	r2, sl
 800b9bc:	465b      	mov	r3, fp
 800b9be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9c2:	f7f4 fe39 	bl	8000638 <__aeabi_dmul>
 800b9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c8:	1b5d      	subs	r5, r3, r5
 800b9ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b9ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9d2:	e78f      	b.n	800b8f4 <_strtod_l+0x3d4>
 800b9d4:	3316      	adds	r3, #22
 800b9d6:	dba8      	blt.n	800b92a <_strtod_l+0x40a>
 800b9d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9da:	eba3 0808 	sub.w	r8, r3, r8
 800b9de:	4b34      	ldr	r3, [pc, #208]	@ (800bab0 <_strtod_l+0x590>)
 800b9e0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b9e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	4659      	mov	r1, fp
 800b9ec:	f7f4 ff4e 	bl	800088c <__aeabi_ddiv>
 800b9f0:	e782      	b.n	800b8f8 <_strtod_l+0x3d8>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	4f2f      	ldr	r7, [pc, #188]	@ (800bab4 <_strtod_l+0x594>)
 800b9f6:	1124      	asrs	r4, r4, #4
 800b9f8:	4650      	mov	r0, sl
 800b9fa:	4659      	mov	r1, fp
 800b9fc:	461e      	mov	r6, r3
 800b9fe:	2c01      	cmp	r4, #1
 800ba00:	dc21      	bgt.n	800ba46 <_strtod_l+0x526>
 800ba02:	b10b      	cbz	r3, 800ba08 <_strtod_l+0x4e8>
 800ba04:	4682      	mov	sl, r0
 800ba06:	468b      	mov	fp, r1
 800ba08:	492a      	ldr	r1, [pc, #168]	@ (800bab4 <_strtod_l+0x594>)
 800ba0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ba0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ba12:	4652      	mov	r2, sl
 800ba14:	465b      	mov	r3, fp
 800ba16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba1a:	f7f4 fe0d 	bl	8000638 <__aeabi_dmul>
 800ba1e:	4b26      	ldr	r3, [pc, #152]	@ (800bab8 <_strtod_l+0x598>)
 800ba20:	460a      	mov	r2, r1
 800ba22:	400b      	ands	r3, r1
 800ba24:	4925      	ldr	r1, [pc, #148]	@ (800babc <_strtod_l+0x59c>)
 800ba26:	428b      	cmp	r3, r1
 800ba28:	4682      	mov	sl, r0
 800ba2a:	d898      	bhi.n	800b95e <_strtod_l+0x43e>
 800ba2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ba30:	428b      	cmp	r3, r1
 800ba32:	bf86      	itte	hi
 800ba34:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800bac0 <_strtod_l+0x5a0>
 800ba38:	f04f 3aff 	movhi.w	sl, #4294967295
 800ba3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ba40:	2300      	movs	r3, #0
 800ba42:	9308      	str	r3, [sp, #32]
 800ba44:	e076      	b.n	800bb34 <_strtod_l+0x614>
 800ba46:	07e2      	lsls	r2, r4, #31
 800ba48:	d504      	bpl.n	800ba54 <_strtod_l+0x534>
 800ba4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba4e:	f7f4 fdf3 	bl	8000638 <__aeabi_dmul>
 800ba52:	2301      	movs	r3, #1
 800ba54:	3601      	adds	r6, #1
 800ba56:	1064      	asrs	r4, r4, #1
 800ba58:	3708      	adds	r7, #8
 800ba5a:	e7d0      	b.n	800b9fe <_strtod_l+0x4de>
 800ba5c:	d0f0      	beq.n	800ba40 <_strtod_l+0x520>
 800ba5e:	4264      	negs	r4, r4
 800ba60:	f014 020f 	ands.w	r2, r4, #15
 800ba64:	d00a      	beq.n	800ba7c <_strtod_l+0x55c>
 800ba66:	4b12      	ldr	r3, [pc, #72]	@ (800bab0 <_strtod_l+0x590>)
 800ba68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	4659      	mov	r1, fp
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f7f4 ff0a 	bl	800088c <__aeabi_ddiv>
 800ba78:	4682      	mov	sl, r0
 800ba7a:	468b      	mov	fp, r1
 800ba7c:	1124      	asrs	r4, r4, #4
 800ba7e:	d0df      	beq.n	800ba40 <_strtod_l+0x520>
 800ba80:	2c1f      	cmp	r4, #31
 800ba82:	dd1f      	ble.n	800bac4 <_strtod_l+0x5a4>
 800ba84:	2400      	movs	r4, #0
 800ba86:	46a0      	mov	r8, r4
 800ba88:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba8a:	46a1      	mov	r9, r4
 800ba8c:	9a05      	ldr	r2, [sp, #20]
 800ba8e:	2322      	movs	r3, #34	@ 0x22
 800ba90:	f04f 0a00 	mov.w	sl, #0
 800ba94:	f04f 0b00 	mov.w	fp, #0
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	e76b      	b.n	800b974 <_strtod_l+0x454>
 800ba9c:	0800d6e9 	.word	0x0800d6e9
 800baa0:	0800d9b0 	.word	0x0800d9b0
 800baa4:	0800d6e1 	.word	0x0800d6e1
 800baa8:	0800d718 	.word	0x0800d718
 800baac:	0800d851 	.word	0x0800d851
 800bab0:	0800d8e8 	.word	0x0800d8e8
 800bab4:	0800d8c0 	.word	0x0800d8c0
 800bab8:	7ff00000 	.word	0x7ff00000
 800babc:	7ca00000 	.word	0x7ca00000
 800bac0:	7fefffff 	.word	0x7fefffff
 800bac4:	f014 0310 	ands.w	r3, r4, #16
 800bac8:	bf18      	it	ne
 800baca:	236a      	movne	r3, #106	@ 0x6a
 800bacc:	4ea9      	ldr	r6, [pc, #676]	@ (800bd74 <_strtod_l+0x854>)
 800bace:	9308      	str	r3, [sp, #32]
 800bad0:	4650      	mov	r0, sl
 800bad2:	4659      	mov	r1, fp
 800bad4:	2300      	movs	r3, #0
 800bad6:	07e7      	lsls	r7, r4, #31
 800bad8:	d504      	bpl.n	800bae4 <_strtod_l+0x5c4>
 800bada:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bade:	f7f4 fdab 	bl	8000638 <__aeabi_dmul>
 800bae2:	2301      	movs	r3, #1
 800bae4:	1064      	asrs	r4, r4, #1
 800bae6:	f106 0608 	add.w	r6, r6, #8
 800baea:	d1f4      	bne.n	800bad6 <_strtod_l+0x5b6>
 800baec:	b10b      	cbz	r3, 800baf2 <_strtod_l+0x5d2>
 800baee:	4682      	mov	sl, r0
 800baf0:	468b      	mov	fp, r1
 800baf2:	9b08      	ldr	r3, [sp, #32]
 800baf4:	b1b3      	cbz	r3, 800bb24 <_strtod_l+0x604>
 800baf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bafa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	4659      	mov	r1, fp
 800bb02:	dd0f      	ble.n	800bb24 <_strtod_l+0x604>
 800bb04:	2b1f      	cmp	r3, #31
 800bb06:	dd56      	ble.n	800bbb6 <_strtod_l+0x696>
 800bb08:	2b34      	cmp	r3, #52	@ 0x34
 800bb0a:	bfde      	ittt	le
 800bb0c:	f04f 33ff 	movle.w	r3, #4294967295
 800bb10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bb14:	4093      	lslle	r3, r2
 800bb16:	f04f 0a00 	mov.w	sl, #0
 800bb1a:	bfcc      	ite	gt
 800bb1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bb20:	ea03 0b01 	andle.w	fp, r3, r1
 800bb24:	2200      	movs	r2, #0
 800bb26:	2300      	movs	r3, #0
 800bb28:	4650      	mov	r0, sl
 800bb2a:	4659      	mov	r1, fp
 800bb2c:	f7f4 ffec 	bl	8000b08 <__aeabi_dcmpeq>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d1a7      	bne.n	800ba84 <_strtod_l+0x564>
 800bb34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bb3a:	9805      	ldr	r0, [sp, #20]
 800bb3c:	462b      	mov	r3, r5
 800bb3e:	464a      	mov	r2, r9
 800bb40:	f7ff f8ce 	bl	800ace0 <__s2b>
 800bb44:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bb46:	2800      	cmp	r0, #0
 800bb48:	f43f af09 	beq.w	800b95e <_strtod_l+0x43e>
 800bb4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb50:	2a00      	cmp	r2, #0
 800bb52:	eba3 0308 	sub.w	r3, r3, r8
 800bb56:	bfa8      	it	ge
 800bb58:	2300      	movge	r3, #0
 800bb5a:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb5c:	2400      	movs	r4, #0
 800bb5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bb62:	9316      	str	r3, [sp, #88]	@ 0x58
 800bb64:	46a0      	mov	r8, r4
 800bb66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb68:	9805      	ldr	r0, [sp, #20]
 800bb6a:	6859      	ldr	r1, [r3, #4]
 800bb6c:	f7ff f810 	bl	800ab90 <_Balloc>
 800bb70:	4681      	mov	r9, r0
 800bb72:	2800      	cmp	r0, #0
 800bb74:	f43f aef7 	beq.w	800b966 <_strtod_l+0x446>
 800bb78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb7a:	691a      	ldr	r2, [r3, #16]
 800bb7c:	3202      	adds	r2, #2
 800bb7e:	f103 010c 	add.w	r1, r3, #12
 800bb82:	0092      	lsls	r2, r2, #2
 800bb84:	300c      	adds	r0, #12
 800bb86:	f000 ff37 	bl	800c9f8 <memcpy>
 800bb8a:	ec4b ab10 	vmov	d0, sl, fp
 800bb8e:	9805      	ldr	r0, [sp, #20]
 800bb90:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb92:	a91b      	add	r1, sp, #108	@ 0x6c
 800bb94:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bb98:	f7ff fbd6 	bl	800b348 <__d2b>
 800bb9c:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	f43f aee1 	beq.w	800b966 <_strtod_l+0x446>
 800bba4:	9805      	ldr	r0, [sp, #20]
 800bba6:	2101      	movs	r1, #1
 800bba8:	f7ff f930 	bl	800ae0c <__i2b>
 800bbac:	4680      	mov	r8, r0
 800bbae:	b948      	cbnz	r0, 800bbc4 <_strtod_l+0x6a4>
 800bbb0:	f04f 0800 	mov.w	r8, #0
 800bbb4:	e6d7      	b.n	800b966 <_strtod_l+0x446>
 800bbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbba:	fa02 f303 	lsl.w	r3, r2, r3
 800bbbe:	ea03 0a0a 	and.w	sl, r3, sl
 800bbc2:	e7af      	b.n	800bb24 <_strtod_l+0x604>
 800bbc4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bbc6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bbc8:	2d00      	cmp	r5, #0
 800bbca:	bfab      	itete	ge
 800bbcc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bbce:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bbd0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bbd2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bbd4:	bfac      	ite	ge
 800bbd6:	18ef      	addge	r7, r5, r3
 800bbd8:	1b5e      	sublt	r6, r3, r5
 800bbda:	9b08      	ldr	r3, [sp, #32]
 800bbdc:	1aed      	subs	r5, r5, r3
 800bbde:	4415      	add	r5, r2
 800bbe0:	4b65      	ldr	r3, [pc, #404]	@ (800bd78 <_strtod_l+0x858>)
 800bbe2:	3d01      	subs	r5, #1
 800bbe4:	429d      	cmp	r5, r3
 800bbe6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bbea:	da50      	bge.n	800bc8e <_strtod_l+0x76e>
 800bbec:	1b5b      	subs	r3, r3, r5
 800bbee:	2b1f      	cmp	r3, #31
 800bbf0:	eba2 0203 	sub.w	r2, r2, r3
 800bbf4:	f04f 0101 	mov.w	r1, #1
 800bbf8:	dc3d      	bgt.n	800bc76 <_strtod_l+0x756>
 800bbfa:	fa01 f303 	lsl.w	r3, r1, r3
 800bbfe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc00:	2300      	movs	r3, #0
 800bc02:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc04:	18bd      	adds	r5, r7, r2
 800bc06:	9b08      	ldr	r3, [sp, #32]
 800bc08:	42af      	cmp	r7, r5
 800bc0a:	4416      	add	r6, r2
 800bc0c:	441e      	add	r6, r3
 800bc0e:	463b      	mov	r3, r7
 800bc10:	bfa8      	it	ge
 800bc12:	462b      	movge	r3, r5
 800bc14:	42b3      	cmp	r3, r6
 800bc16:	bfa8      	it	ge
 800bc18:	4633      	movge	r3, r6
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	bfc2      	ittt	gt
 800bc1e:	1aed      	subgt	r5, r5, r3
 800bc20:	1af6      	subgt	r6, r6, r3
 800bc22:	1aff      	subgt	r7, r7, r3
 800bc24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	dd16      	ble.n	800bc58 <_strtod_l+0x738>
 800bc2a:	4641      	mov	r1, r8
 800bc2c:	9805      	ldr	r0, [sp, #20]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	f7ff f9a4 	bl	800af7c <__pow5mult>
 800bc34:	4680      	mov	r8, r0
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d0ba      	beq.n	800bbb0 <_strtod_l+0x690>
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc3e:	9805      	ldr	r0, [sp, #20]
 800bc40:	f7ff f8fa 	bl	800ae38 <__multiply>
 800bc44:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f43f ae8d 	beq.w	800b966 <_strtod_l+0x446>
 800bc4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc4e:	9805      	ldr	r0, [sp, #20]
 800bc50:	f7fe ffde 	bl	800ac10 <_Bfree>
 800bc54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc56:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	dc1d      	bgt.n	800bc98 <_strtod_l+0x778>
 800bc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dd23      	ble.n	800bcaa <_strtod_l+0x78a>
 800bc62:	4649      	mov	r1, r9
 800bc64:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bc66:	9805      	ldr	r0, [sp, #20]
 800bc68:	f7ff f988 	bl	800af7c <__pow5mult>
 800bc6c:	4681      	mov	r9, r0
 800bc6e:	b9e0      	cbnz	r0, 800bcaa <_strtod_l+0x78a>
 800bc70:	f04f 0900 	mov.w	r9, #0
 800bc74:	e677      	b.n	800b966 <_strtod_l+0x446>
 800bc76:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bc7a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bc7e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bc82:	35e2      	adds	r5, #226	@ 0xe2
 800bc84:	fa01 f305 	lsl.w	r3, r1, r5
 800bc88:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc8a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bc8c:	e7ba      	b.n	800bc04 <_strtod_l+0x6e4>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc92:	2301      	movs	r3, #1
 800bc94:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc96:	e7b5      	b.n	800bc04 <_strtod_l+0x6e4>
 800bc98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc9a:	9805      	ldr	r0, [sp, #20]
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	f7ff f9c7 	bl	800b030 <__lshift>
 800bca2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d1d9      	bne.n	800bc5c <_strtod_l+0x73c>
 800bca8:	e65d      	b.n	800b966 <_strtod_l+0x446>
 800bcaa:	2e00      	cmp	r6, #0
 800bcac:	dd07      	ble.n	800bcbe <_strtod_l+0x79e>
 800bcae:	4649      	mov	r1, r9
 800bcb0:	9805      	ldr	r0, [sp, #20]
 800bcb2:	4632      	mov	r2, r6
 800bcb4:	f7ff f9bc 	bl	800b030 <__lshift>
 800bcb8:	4681      	mov	r9, r0
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d0d8      	beq.n	800bc70 <_strtod_l+0x750>
 800bcbe:	2f00      	cmp	r7, #0
 800bcc0:	dd08      	ble.n	800bcd4 <_strtod_l+0x7b4>
 800bcc2:	4641      	mov	r1, r8
 800bcc4:	9805      	ldr	r0, [sp, #20]
 800bcc6:	463a      	mov	r2, r7
 800bcc8:	f7ff f9b2 	bl	800b030 <__lshift>
 800bccc:	4680      	mov	r8, r0
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f43f ae49 	beq.w	800b966 <_strtod_l+0x446>
 800bcd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcd6:	9805      	ldr	r0, [sp, #20]
 800bcd8:	464a      	mov	r2, r9
 800bcda:	f7ff fa31 	bl	800b140 <__mdiff>
 800bcde:	4604      	mov	r4, r0
 800bce0:	2800      	cmp	r0, #0
 800bce2:	f43f ae40 	beq.w	800b966 <_strtod_l+0x446>
 800bce6:	68c3      	ldr	r3, [r0, #12]
 800bce8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcea:	2300      	movs	r3, #0
 800bcec:	60c3      	str	r3, [r0, #12]
 800bcee:	4641      	mov	r1, r8
 800bcf0:	f7ff fa0a 	bl	800b108 <__mcmp>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	da45      	bge.n	800bd84 <_strtod_l+0x864>
 800bcf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcfa:	ea53 030a 	orrs.w	r3, r3, sl
 800bcfe:	d16b      	bne.n	800bdd8 <_strtod_l+0x8b8>
 800bd00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d167      	bne.n	800bdd8 <_strtod_l+0x8b8>
 800bd08:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd0c:	0d1b      	lsrs	r3, r3, #20
 800bd0e:	051b      	lsls	r3, r3, #20
 800bd10:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd14:	d960      	bls.n	800bdd8 <_strtod_l+0x8b8>
 800bd16:	6963      	ldr	r3, [r4, #20]
 800bd18:	b913      	cbnz	r3, 800bd20 <_strtod_l+0x800>
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	dd5b      	ble.n	800bdd8 <_strtod_l+0x8b8>
 800bd20:	4621      	mov	r1, r4
 800bd22:	2201      	movs	r2, #1
 800bd24:	9805      	ldr	r0, [sp, #20]
 800bd26:	f7ff f983 	bl	800b030 <__lshift>
 800bd2a:	4641      	mov	r1, r8
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	f7ff f9eb 	bl	800b108 <__mcmp>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	dd50      	ble.n	800bdd8 <_strtod_l+0x8b8>
 800bd36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd3a:	9a08      	ldr	r2, [sp, #32]
 800bd3c:	0d1b      	lsrs	r3, r3, #20
 800bd3e:	051b      	lsls	r3, r3, #20
 800bd40:	2a00      	cmp	r2, #0
 800bd42:	d06a      	beq.n	800be1a <_strtod_l+0x8fa>
 800bd44:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd48:	d867      	bhi.n	800be1a <_strtod_l+0x8fa>
 800bd4a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bd4e:	f67f ae9d 	bls.w	800ba8c <_strtod_l+0x56c>
 800bd52:	4b0a      	ldr	r3, [pc, #40]	@ (800bd7c <_strtod_l+0x85c>)
 800bd54:	4650      	mov	r0, sl
 800bd56:	4659      	mov	r1, fp
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f7f4 fc6d 	bl	8000638 <__aeabi_dmul>
 800bd5e:	4b08      	ldr	r3, [pc, #32]	@ (800bd80 <_strtod_l+0x860>)
 800bd60:	400b      	ands	r3, r1
 800bd62:	4682      	mov	sl, r0
 800bd64:	468b      	mov	fp, r1
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f47f ae08 	bne.w	800b97c <_strtod_l+0x45c>
 800bd6c:	9a05      	ldr	r2, [sp, #20]
 800bd6e:	2322      	movs	r3, #34	@ 0x22
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	e603      	b.n	800b97c <_strtod_l+0x45c>
 800bd74:	0800d9d8 	.word	0x0800d9d8
 800bd78:	fffffc02 	.word	0xfffffc02
 800bd7c:	39500000 	.word	0x39500000
 800bd80:	7ff00000 	.word	0x7ff00000
 800bd84:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bd88:	d165      	bne.n	800be56 <_strtod_l+0x936>
 800bd8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bd8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd90:	b35a      	cbz	r2, 800bdea <_strtod_l+0x8ca>
 800bd92:	4a9f      	ldr	r2, [pc, #636]	@ (800c010 <_strtod_l+0xaf0>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d12b      	bne.n	800bdf0 <_strtod_l+0x8d0>
 800bd98:	9b08      	ldr	r3, [sp, #32]
 800bd9a:	4651      	mov	r1, sl
 800bd9c:	b303      	cbz	r3, 800bde0 <_strtod_l+0x8c0>
 800bd9e:	4b9d      	ldr	r3, [pc, #628]	@ (800c014 <_strtod_l+0xaf4>)
 800bda0:	465a      	mov	r2, fp
 800bda2:	4013      	ands	r3, r2
 800bda4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bda8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdac:	d81b      	bhi.n	800bde6 <_strtod_l+0x8c6>
 800bdae:	0d1b      	lsrs	r3, r3, #20
 800bdb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bdb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb8:	4299      	cmp	r1, r3
 800bdba:	d119      	bne.n	800bdf0 <_strtod_l+0x8d0>
 800bdbc:	4b96      	ldr	r3, [pc, #600]	@ (800c018 <_strtod_l+0xaf8>)
 800bdbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d102      	bne.n	800bdca <_strtod_l+0x8aa>
 800bdc4:	3101      	adds	r1, #1
 800bdc6:	f43f adce 	beq.w	800b966 <_strtod_l+0x446>
 800bdca:	4b92      	ldr	r3, [pc, #584]	@ (800c014 <_strtod_l+0xaf4>)
 800bdcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdce:	401a      	ands	r2, r3
 800bdd0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bdd4:	f04f 0a00 	mov.w	sl, #0
 800bdd8:	9b08      	ldr	r3, [sp, #32]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1b9      	bne.n	800bd52 <_strtod_l+0x832>
 800bdde:	e5cd      	b.n	800b97c <_strtod_l+0x45c>
 800bde0:	f04f 33ff 	mov.w	r3, #4294967295
 800bde4:	e7e8      	b.n	800bdb8 <_strtod_l+0x898>
 800bde6:	4613      	mov	r3, r2
 800bde8:	e7e6      	b.n	800bdb8 <_strtod_l+0x898>
 800bdea:	ea53 030a 	orrs.w	r3, r3, sl
 800bdee:	d0a2      	beq.n	800bd36 <_strtod_l+0x816>
 800bdf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bdf2:	b1db      	cbz	r3, 800be2c <_strtod_l+0x90c>
 800bdf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdf6:	4213      	tst	r3, r2
 800bdf8:	d0ee      	beq.n	800bdd8 <_strtod_l+0x8b8>
 800bdfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdfc:	9a08      	ldr	r2, [sp, #32]
 800bdfe:	4650      	mov	r0, sl
 800be00:	4659      	mov	r1, fp
 800be02:	b1bb      	cbz	r3, 800be34 <_strtod_l+0x914>
 800be04:	f7ff fb6e 	bl	800b4e4 <sulp>
 800be08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be0c:	ec53 2b10 	vmov	r2, r3, d0
 800be10:	f7f4 fa5c 	bl	80002cc <__adddf3>
 800be14:	4682      	mov	sl, r0
 800be16:	468b      	mov	fp, r1
 800be18:	e7de      	b.n	800bdd8 <_strtod_l+0x8b8>
 800be1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be26:	f04f 3aff 	mov.w	sl, #4294967295
 800be2a:	e7d5      	b.n	800bdd8 <_strtod_l+0x8b8>
 800be2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be2e:	ea13 0f0a 	tst.w	r3, sl
 800be32:	e7e1      	b.n	800bdf8 <_strtod_l+0x8d8>
 800be34:	f7ff fb56 	bl	800b4e4 <sulp>
 800be38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be3c:	ec53 2b10 	vmov	r2, r3, d0
 800be40:	f7f4 fa42 	bl	80002c8 <__aeabi_dsub>
 800be44:	2200      	movs	r2, #0
 800be46:	2300      	movs	r3, #0
 800be48:	4682      	mov	sl, r0
 800be4a:	468b      	mov	fp, r1
 800be4c:	f7f4 fe5c 	bl	8000b08 <__aeabi_dcmpeq>
 800be50:	2800      	cmp	r0, #0
 800be52:	d0c1      	beq.n	800bdd8 <_strtod_l+0x8b8>
 800be54:	e61a      	b.n	800ba8c <_strtod_l+0x56c>
 800be56:	4641      	mov	r1, r8
 800be58:	4620      	mov	r0, r4
 800be5a:	f7ff facd 	bl	800b3f8 <__ratio>
 800be5e:	ec57 6b10 	vmov	r6, r7, d0
 800be62:	2200      	movs	r2, #0
 800be64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800be68:	4630      	mov	r0, r6
 800be6a:	4639      	mov	r1, r7
 800be6c:	f7f4 fe60 	bl	8000b30 <__aeabi_dcmple>
 800be70:	2800      	cmp	r0, #0
 800be72:	d06f      	beq.n	800bf54 <_strtod_l+0xa34>
 800be74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be76:	2b00      	cmp	r3, #0
 800be78:	d17a      	bne.n	800bf70 <_strtod_l+0xa50>
 800be7a:	f1ba 0f00 	cmp.w	sl, #0
 800be7e:	d158      	bne.n	800bf32 <_strtod_l+0xa12>
 800be80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be86:	2b00      	cmp	r3, #0
 800be88:	d15a      	bne.n	800bf40 <_strtod_l+0xa20>
 800be8a:	4b64      	ldr	r3, [pc, #400]	@ (800c01c <_strtod_l+0xafc>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	4630      	mov	r0, r6
 800be90:	4639      	mov	r1, r7
 800be92:	f7f4 fe43 	bl	8000b1c <__aeabi_dcmplt>
 800be96:	2800      	cmp	r0, #0
 800be98:	d159      	bne.n	800bf4e <_strtod_l+0xa2e>
 800be9a:	4630      	mov	r0, r6
 800be9c:	4639      	mov	r1, r7
 800be9e:	4b60      	ldr	r3, [pc, #384]	@ (800c020 <_strtod_l+0xb00>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	f7f4 fbc9 	bl	8000638 <__aeabi_dmul>
 800bea6:	4606      	mov	r6, r0
 800bea8:	460f      	mov	r7, r1
 800beaa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800beae:	9606      	str	r6, [sp, #24]
 800beb0:	9307      	str	r3, [sp, #28]
 800beb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800beb6:	4d57      	ldr	r5, [pc, #348]	@ (800c014 <_strtod_l+0xaf4>)
 800beb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bebe:	401d      	ands	r5, r3
 800bec0:	4b58      	ldr	r3, [pc, #352]	@ (800c024 <_strtod_l+0xb04>)
 800bec2:	429d      	cmp	r5, r3
 800bec4:	f040 80b2 	bne.w	800c02c <_strtod_l+0xb0c>
 800bec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bece:	ec4b ab10 	vmov	d0, sl, fp
 800bed2:	f7ff f9c9 	bl	800b268 <__ulp>
 800bed6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800beda:	ec51 0b10 	vmov	r0, r1, d0
 800bede:	f7f4 fbab 	bl	8000638 <__aeabi_dmul>
 800bee2:	4652      	mov	r2, sl
 800bee4:	465b      	mov	r3, fp
 800bee6:	f7f4 f9f1 	bl	80002cc <__adddf3>
 800beea:	460b      	mov	r3, r1
 800beec:	4949      	ldr	r1, [pc, #292]	@ (800c014 <_strtod_l+0xaf4>)
 800beee:	4a4e      	ldr	r2, [pc, #312]	@ (800c028 <_strtod_l+0xb08>)
 800bef0:	4019      	ands	r1, r3
 800bef2:	4291      	cmp	r1, r2
 800bef4:	4682      	mov	sl, r0
 800bef6:	d942      	bls.n	800bf7e <_strtod_l+0xa5e>
 800bef8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800befa:	4b47      	ldr	r3, [pc, #284]	@ (800c018 <_strtod_l+0xaf8>)
 800befc:	429a      	cmp	r2, r3
 800befe:	d103      	bne.n	800bf08 <_strtod_l+0x9e8>
 800bf00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf02:	3301      	adds	r3, #1
 800bf04:	f43f ad2f 	beq.w	800b966 <_strtod_l+0x446>
 800bf08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c018 <_strtod_l+0xaf8>
 800bf0c:	f04f 3aff 	mov.w	sl, #4294967295
 800bf10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf12:	9805      	ldr	r0, [sp, #20]
 800bf14:	f7fe fe7c 	bl	800ac10 <_Bfree>
 800bf18:	9805      	ldr	r0, [sp, #20]
 800bf1a:	4649      	mov	r1, r9
 800bf1c:	f7fe fe78 	bl	800ac10 <_Bfree>
 800bf20:	9805      	ldr	r0, [sp, #20]
 800bf22:	4641      	mov	r1, r8
 800bf24:	f7fe fe74 	bl	800ac10 <_Bfree>
 800bf28:	9805      	ldr	r0, [sp, #20]
 800bf2a:	4621      	mov	r1, r4
 800bf2c:	f7fe fe70 	bl	800ac10 <_Bfree>
 800bf30:	e619      	b.n	800bb66 <_strtod_l+0x646>
 800bf32:	f1ba 0f01 	cmp.w	sl, #1
 800bf36:	d103      	bne.n	800bf40 <_strtod_l+0xa20>
 800bf38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f43f ada6 	beq.w	800ba8c <_strtod_l+0x56c>
 800bf40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bff0 <_strtod_l+0xad0>
 800bf44:	4f35      	ldr	r7, [pc, #212]	@ (800c01c <_strtod_l+0xafc>)
 800bf46:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf4a:	2600      	movs	r6, #0
 800bf4c:	e7b1      	b.n	800beb2 <_strtod_l+0x992>
 800bf4e:	4f34      	ldr	r7, [pc, #208]	@ (800c020 <_strtod_l+0xb00>)
 800bf50:	2600      	movs	r6, #0
 800bf52:	e7aa      	b.n	800beaa <_strtod_l+0x98a>
 800bf54:	4b32      	ldr	r3, [pc, #200]	@ (800c020 <_strtod_l+0xb00>)
 800bf56:	4630      	mov	r0, r6
 800bf58:	4639      	mov	r1, r7
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f7f4 fb6c 	bl	8000638 <__aeabi_dmul>
 800bf60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf62:	4606      	mov	r6, r0
 800bf64:	460f      	mov	r7, r1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d09f      	beq.n	800beaa <_strtod_l+0x98a>
 800bf6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bf6e:	e7a0      	b.n	800beb2 <_strtod_l+0x992>
 800bf70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bff8 <_strtod_l+0xad8>
 800bf74:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf78:	ec57 6b17 	vmov	r6, r7, d7
 800bf7c:	e799      	b.n	800beb2 <_strtod_l+0x992>
 800bf7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bf82:	9b08      	ldr	r3, [sp, #32]
 800bf84:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1c1      	bne.n	800bf10 <_strtod_l+0x9f0>
 800bf8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf90:	0d1b      	lsrs	r3, r3, #20
 800bf92:	051b      	lsls	r3, r3, #20
 800bf94:	429d      	cmp	r5, r3
 800bf96:	d1bb      	bne.n	800bf10 <_strtod_l+0x9f0>
 800bf98:	4630      	mov	r0, r6
 800bf9a:	4639      	mov	r1, r7
 800bf9c:	f7f4 feac 	bl	8000cf8 <__aeabi_d2lz>
 800bfa0:	f7f4 fb1c 	bl	80005dc <__aeabi_l2d>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4639      	mov	r1, r7
 800bfac:	f7f4 f98c 	bl	80002c8 <__aeabi_dsub>
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bfb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bfbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfbe:	ea46 060a 	orr.w	r6, r6, sl
 800bfc2:	431e      	orrs	r6, r3
 800bfc4:	d06f      	beq.n	800c0a6 <_strtod_l+0xb86>
 800bfc6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c000 <_strtod_l+0xae0>)
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	f7f4 fda6 	bl	8000b1c <__aeabi_dcmplt>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	f47f acd3 	bne.w	800b97c <_strtod_l+0x45c>
 800bfd6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c008 <_strtod_l+0xae8>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfe0:	f7f4 fdba 	bl	8000b58 <__aeabi_dcmpgt>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d093      	beq.n	800bf10 <_strtod_l+0x9f0>
 800bfe8:	e4c8      	b.n	800b97c <_strtod_l+0x45c>
 800bfea:	bf00      	nop
 800bfec:	f3af 8000 	nop.w
 800bff0:	00000000 	.word	0x00000000
 800bff4:	bff00000 	.word	0xbff00000
 800bff8:	00000000 	.word	0x00000000
 800bffc:	3ff00000 	.word	0x3ff00000
 800c000:	94a03595 	.word	0x94a03595
 800c004:	3fdfffff 	.word	0x3fdfffff
 800c008:	35afe535 	.word	0x35afe535
 800c00c:	3fe00000 	.word	0x3fe00000
 800c010:	000fffff 	.word	0x000fffff
 800c014:	7ff00000 	.word	0x7ff00000
 800c018:	7fefffff 	.word	0x7fefffff
 800c01c:	3ff00000 	.word	0x3ff00000
 800c020:	3fe00000 	.word	0x3fe00000
 800c024:	7fe00000 	.word	0x7fe00000
 800c028:	7c9fffff 	.word	0x7c9fffff
 800c02c:	9b08      	ldr	r3, [sp, #32]
 800c02e:	b323      	cbz	r3, 800c07a <_strtod_l+0xb5a>
 800c030:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c034:	d821      	bhi.n	800c07a <_strtod_l+0xb5a>
 800c036:	a328      	add	r3, pc, #160	@ (adr r3, 800c0d8 <_strtod_l+0xbb8>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	4630      	mov	r0, r6
 800c03e:	4639      	mov	r1, r7
 800c040:	f7f4 fd76 	bl	8000b30 <__aeabi_dcmple>
 800c044:	b1a0      	cbz	r0, 800c070 <_strtod_l+0xb50>
 800c046:	4639      	mov	r1, r7
 800c048:	4630      	mov	r0, r6
 800c04a:	f7f4 fdcd 	bl	8000be8 <__aeabi_d2uiz>
 800c04e:	2801      	cmp	r0, #1
 800c050:	bf38      	it	cc
 800c052:	2001      	movcc	r0, #1
 800c054:	f7f4 fa76 	bl	8000544 <__aeabi_ui2d>
 800c058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c05a:	4606      	mov	r6, r0
 800c05c:	460f      	mov	r7, r1
 800c05e:	b9fb      	cbnz	r3, 800c0a0 <_strtod_l+0xb80>
 800c060:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c064:	9014      	str	r0, [sp, #80]	@ 0x50
 800c066:	9315      	str	r3, [sp, #84]	@ 0x54
 800c068:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c06c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c070:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c072:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c076:	1b5b      	subs	r3, r3, r5
 800c078:	9311      	str	r3, [sp, #68]	@ 0x44
 800c07a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c07e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c082:	f7ff f8f1 	bl	800b268 <__ulp>
 800c086:	4650      	mov	r0, sl
 800c088:	ec53 2b10 	vmov	r2, r3, d0
 800c08c:	4659      	mov	r1, fp
 800c08e:	f7f4 fad3 	bl	8000638 <__aeabi_dmul>
 800c092:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c096:	f7f4 f919 	bl	80002cc <__adddf3>
 800c09a:	4682      	mov	sl, r0
 800c09c:	468b      	mov	fp, r1
 800c09e:	e770      	b.n	800bf82 <_strtod_l+0xa62>
 800c0a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c0a4:	e7e0      	b.n	800c068 <_strtod_l+0xb48>
 800c0a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c0e0 <_strtod_l+0xbc0>)
 800c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ac:	f7f4 fd36 	bl	8000b1c <__aeabi_dcmplt>
 800c0b0:	e798      	b.n	800bfe4 <_strtod_l+0xac4>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800c0b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c0b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0ba:	6013      	str	r3, [r2, #0]
 800c0bc:	f7ff ba6d 	b.w	800b59a <_strtod_l+0x7a>
 800c0c0:	2a65      	cmp	r2, #101	@ 0x65
 800c0c2:	f43f ab68 	beq.w	800b796 <_strtod_l+0x276>
 800c0c6:	2a45      	cmp	r2, #69	@ 0x45
 800c0c8:	f43f ab65 	beq.w	800b796 <_strtod_l+0x276>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	f7ff bba0 	b.w	800b812 <_strtod_l+0x2f2>
 800c0d2:	bf00      	nop
 800c0d4:	f3af 8000 	nop.w
 800c0d8:	ffc00000 	.word	0xffc00000
 800c0dc:	41dfffff 	.word	0x41dfffff
 800c0e0:	94a03595 	.word	0x94a03595
 800c0e4:	3fcfffff 	.word	0x3fcfffff

0800c0e8 <_strtod_r>:
 800c0e8:	4b01      	ldr	r3, [pc, #4]	@ (800c0f0 <_strtod_r+0x8>)
 800c0ea:	f7ff ba19 	b.w	800b520 <_strtod_l>
 800c0ee:	bf00      	nop
 800c0f0:	200000c0 	.word	0x200000c0

0800c0f4 <_strtol_l.isra.0>:
 800c0f4:	2b24      	cmp	r3, #36	@ 0x24
 800c0f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fa:	4686      	mov	lr, r0
 800c0fc:	4690      	mov	r8, r2
 800c0fe:	d801      	bhi.n	800c104 <_strtol_l.isra.0+0x10>
 800c100:	2b01      	cmp	r3, #1
 800c102:	d106      	bne.n	800c112 <_strtol_l.isra.0+0x1e>
 800c104:	f7fd fdb6 	bl	8009c74 <__errno>
 800c108:	2316      	movs	r3, #22
 800c10a:	6003      	str	r3, [r0, #0]
 800c10c:	2000      	movs	r0, #0
 800c10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c112:	4834      	ldr	r0, [pc, #208]	@ (800c1e4 <_strtol_l.isra.0+0xf0>)
 800c114:	460d      	mov	r5, r1
 800c116:	462a      	mov	r2, r5
 800c118:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c11c:	5d06      	ldrb	r6, [r0, r4]
 800c11e:	f016 0608 	ands.w	r6, r6, #8
 800c122:	d1f8      	bne.n	800c116 <_strtol_l.isra.0+0x22>
 800c124:	2c2d      	cmp	r4, #45	@ 0x2d
 800c126:	d110      	bne.n	800c14a <_strtol_l.isra.0+0x56>
 800c128:	782c      	ldrb	r4, [r5, #0]
 800c12a:	2601      	movs	r6, #1
 800c12c:	1c95      	adds	r5, r2, #2
 800c12e:	f033 0210 	bics.w	r2, r3, #16
 800c132:	d115      	bne.n	800c160 <_strtol_l.isra.0+0x6c>
 800c134:	2c30      	cmp	r4, #48	@ 0x30
 800c136:	d10d      	bne.n	800c154 <_strtol_l.isra.0+0x60>
 800c138:	782a      	ldrb	r2, [r5, #0]
 800c13a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c13e:	2a58      	cmp	r2, #88	@ 0x58
 800c140:	d108      	bne.n	800c154 <_strtol_l.isra.0+0x60>
 800c142:	786c      	ldrb	r4, [r5, #1]
 800c144:	3502      	adds	r5, #2
 800c146:	2310      	movs	r3, #16
 800c148:	e00a      	b.n	800c160 <_strtol_l.isra.0+0x6c>
 800c14a:	2c2b      	cmp	r4, #43	@ 0x2b
 800c14c:	bf04      	itt	eq
 800c14e:	782c      	ldrbeq	r4, [r5, #0]
 800c150:	1c95      	addeq	r5, r2, #2
 800c152:	e7ec      	b.n	800c12e <_strtol_l.isra.0+0x3a>
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1f6      	bne.n	800c146 <_strtol_l.isra.0+0x52>
 800c158:	2c30      	cmp	r4, #48	@ 0x30
 800c15a:	bf14      	ite	ne
 800c15c:	230a      	movne	r3, #10
 800c15e:	2308      	moveq	r3, #8
 800c160:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c164:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c168:	2200      	movs	r2, #0
 800c16a:	fbbc f9f3 	udiv	r9, ip, r3
 800c16e:	4610      	mov	r0, r2
 800c170:	fb03 ca19 	mls	sl, r3, r9, ip
 800c174:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c178:	2f09      	cmp	r7, #9
 800c17a:	d80f      	bhi.n	800c19c <_strtol_l.isra.0+0xa8>
 800c17c:	463c      	mov	r4, r7
 800c17e:	42a3      	cmp	r3, r4
 800c180:	dd1b      	ble.n	800c1ba <_strtol_l.isra.0+0xc6>
 800c182:	1c57      	adds	r7, r2, #1
 800c184:	d007      	beq.n	800c196 <_strtol_l.isra.0+0xa2>
 800c186:	4581      	cmp	r9, r0
 800c188:	d314      	bcc.n	800c1b4 <_strtol_l.isra.0+0xc0>
 800c18a:	d101      	bne.n	800c190 <_strtol_l.isra.0+0x9c>
 800c18c:	45a2      	cmp	sl, r4
 800c18e:	db11      	blt.n	800c1b4 <_strtol_l.isra.0+0xc0>
 800c190:	fb00 4003 	mla	r0, r0, r3, r4
 800c194:	2201      	movs	r2, #1
 800c196:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c19a:	e7eb      	b.n	800c174 <_strtol_l.isra.0+0x80>
 800c19c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c1a0:	2f19      	cmp	r7, #25
 800c1a2:	d801      	bhi.n	800c1a8 <_strtol_l.isra.0+0xb4>
 800c1a4:	3c37      	subs	r4, #55	@ 0x37
 800c1a6:	e7ea      	b.n	800c17e <_strtol_l.isra.0+0x8a>
 800c1a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c1ac:	2f19      	cmp	r7, #25
 800c1ae:	d804      	bhi.n	800c1ba <_strtol_l.isra.0+0xc6>
 800c1b0:	3c57      	subs	r4, #87	@ 0x57
 800c1b2:	e7e4      	b.n	800c17e <_strtol_l.isra.0+0x8a>
 800c1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b8:	e7ed      	b.n	800c196 <_strtol_l.isra.0+0xa2>
 800c1ba:	1c53      	adds	r3, r2, #1
 800c1bc:	d108      	bne.n	800c1d0 <_strtol_l.isra.0+0xdc>
 800c1be:	2322      	movs	r3, #34	@ 0x22
 800c1c0:	f8ce 3000 	str.w	r3, [lr]
 800c1c4:	4660      	mov	r0, ip
 800c1c6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ca:	d0a0      	beq.n	800c10e <_strtol_l.isra.0+0x1a>
 800c1cc:	1e69      	subs	r1, r5, #1
 800c1ce:	e006      	b.n	800c1de <_strtol_l.isra.0+0xea>
 800c1d0:	b106      	cbz	r6, 800c1d4 <_strtol_l.isra.0+0xe0>
 800c1d2:	4240      	negs	r0, r0
 800c1d4:	f1b8 0f00 	cmp.w	r8, #0
 800c1d8:	d099      	beq.n	800c10e <_strtol_l.isra.0+0x1a>
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	d1f6      	bne.n	800c1cc <_strtol_l.isra.0+0xd8>
 800c1de:	f8c8 1000 	str.w	r1, [r8]
 800c1e2:	e794      	b.n	800c10e <_strtol_l.isra.0+0x1a>
 800c1e4:	0800da01 	.word	0x0800da01

0800c1e8 <_strtol_r>:
 800c1e8:	f7ff bf84 	b.w	800c0f4 <_strtol_l.isra.0>

0800c1ec <__ssputs_r>:
 800c1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f0:	688e      	ldr	r6, [r1, #8]
 800c1f2:	461f      	mov	r7, r3
 800c1f4:	42be      	cmp	r6, r7
 800c1f6:	680b      	ldr	r3, [r1, #0]
 800c1f8:	4682      	mov	sl, r0
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	4690      	mov	r8, r2
 800c1fe:	d82d      	bhi.n	800c25c <__ssputs_r+0x70>
 800c200:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c204:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c208:	d026      	beq.n	800c258 <__ssputs_r+0x6c>
 800c20a:	6965      	ldr	r5, [r4, #20]
 800c20c:	6909      	ldr	r1, [r1, #16]
 800c20e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c212:	eba3 0901 	sub.w	r9, r3, r1
 800c216:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c21a:	1c7b      	adds	r3, r7, #1
 800c21c:	444b      	add	r3, r9
 800c21e:	106d      	asrs	r5, r5, #1
 800c220:	429d      	cmp	r5, r3
 800c222:	bf38      	it	cc
 800c224:	461d      	movcc	r5, r3
 800c226:	0553      	lsls	r3, r2, #21
 800c228:	d527      	bpl.n	800c27a <__ssputs_r+0x8e>
 800c22a:	4629      	mov	r1, r5
 800c22c:	f7fe fc24 	bl	800aa78 <_malloc_r>
 800c230:	4606      	mov	r6, r0
 800c232:	b360      	cbz	r0, 800c28e <__ssputs_r+0xa2>
 800c234:	6921      	ldr	r1, [r4, #16]
 800c236:	464a      	mov	r2, r9
 800c238:	f000 fbde 	bl	800c9f8 <memcpy>
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	6126      	str	r6, [r4, #16]
 800c24a:	6165      	str	r5, [r4, #20]
 800c24c:	444e      	add	r6, r9
 800c24e:	eba5 0509 	sub.w	r5, r5, r9
 800c252:	6026      	str	r6, [r4, #0]
 800c254:	60a5      	str	r5, [r4, #8]
 800c256:	463e      	mov	r6, r7
 800c258:	42be      	cmp	r6, r7
 800c25a:	d900      	bls.n	800c25e <__ssputs_r+0x72>
 800c25c:	463e      	mov	r6, r7
 800c25e:	6820      	ldr	r0, [r4, #0]
 800c260:	4632      	mov	r2, r6
 800c262:	4641      	mov	r1, r8
 800c264:	f000 fb6a 	bl	800c93c <memmove>
 800c268:	68a3      	ldr	r3, [r4, #8]
 800c26a:	1b9b      	subs	r3, r3, r6
 800c26c:	60a3      	str	r3, [r4, #8]
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	4433      	add	r3, r6
 800c272:	6023      	str	r3, [r4, #0]
 800c274:	2000      	movs	r0, #0
 800c276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c27a:	462a      	mov	r2, r5
 800c27c:	f000 ff51 	bl	800d122 <_realloc_r>
 800c280:	4606      	mov	r6, r0
 800c282:	2800      	cmp	r0, #0
 800c284:	d1e0      	bne.n	800c248 <__ssputs_r+0x5c>
 800c286:	6921      	ldr	r1, [r4, #16]
 800c288:	4650      	mov	r0, sl
 800c28a:	f7fe fb81 	bl	800a990 <_free_r>
 800c28e:	230c      	movs	r3, #12
 800c290:	f8ca 3000 	str.w	r3, [sl]
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a0:	e7e9      	b.n	800c276 <__ssputs_r+0x8a>
	...

0800c2a4 <_svfiprintf_r>:
 800c2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a8:	4698      	mov	r8, r3
 800c2aa:	898b      	ldrh	r3, [r1, #12]
 800c2ac:	061b      	lsls	r3, r3, #24
 800c2ae:	b09d      	sub	sp, #116	@ 0x74
 800c2b0:	4607      	mov	r7, r0
 800c2b2:	460d      	mov	r5, r1
 800c2b4:	4614      	mov	r4, r2
 800c2b6:	d510      	bpl.n	800c2da <_svfiprintf_r+0x36>
 800c2b8:	690b      	ldr	r3, [r1, #16]
 800c2ba:	b973      	cbnz	r3, 800c2da <_svfiprintf_r+0x36>
 800c2bc:	2140      	movs	r1, #64	@ 0x40
 800c2be:	f7fe fbdb 	bl	800aa78 <_malloc_r>
 800c2c2:	6028      	str	r0, [r5, #0]
 800c2c4:	6128      	str	r0, [r5, #16]
 800c2c6:	b930      	cbnz	r0, 800c2d6 <_svfiprintf_r+0x32>
 800c2c8:	230c      	movs	r3, #12
 800c2ca:	603b      	str	r3, [r7, #0]
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	b01d      	add	sp, #116	@ 0x74
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d6:	2340      	movs	r3, #64	@ 0x40
 800c2d8:	616b      	str	r3, [r5, #20]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2de:	2320      	movs	r3, #32
 800c2e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e8:	2330      	movs	r3, #48	@ 0x30
 800c2ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c488 <_svfiprintf_r+0x1e4>
 800c2ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2f2:	f04f 0901 	mov.w	r9, #1
 800c2f6:	4623      	mov	r3, r4
 800c2f8:	469a      	mov	sl, r3
 800c2fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2fe:	b10a      	cbz	r2, 800c304 <_svfiprintf_r+0x60>
 800c300:	2a25      	cmp	r2, #37	@ 0x25
 800c302:	d1f9      	bne.n	800c2f8 <_svfiprintf_r+0x54>
 800c304:	ebba 0b04 	subs.w	fp, sl, r4
 800c308:	d00b      	beq.n	800c322 <_svfiprintf_r+0x7e>
 800c30a:	465b      	mov	r3, fp
 800c30c:	4622      	mov	r2, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	4638      	mov	r0, r7
 800c312:	f7ff ff6b 	bl	800c1ec <__ssputs_r>
 800c316:	3001      	adds	r0, #1
 800c318:	f000 80a7 	beq.w	800c46a <_svfiprintf_r+0x1c6>
 800c31c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c31e:	445a      	add	r2, fp
 800c320:	9209      	str	r2, [sp, #36]	@ 0x24
 800c322:	f89a 3000 	ldrb.w	r3, [sl]
 800c326:	2b00      	cmp	r3, #0
 800c328:	f000 809f 	beq.w	800c46a <_svfiprintf_r+0x1c6>
 800c32c:	2300      	movs	r3, #0
 800c32e:	f04f 32ff 	mov.w	r2, #4294967295
 800c332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c336:	f10a 0a01 	add.w	sl, sl, #1
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	9307      	str	r3, [sp, #28]
 800c33e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c342:	931a      	str	r3, [sp, #104]	@ 0x68
 800c344:	4654      	mov	r4, sl
 800c346:	2205      	movs	r2, #5
 800c348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34c:	484e      	ldr	r0, [pc, #312]	@ (800c488 <_svfiprintf_r+0x1e4>)
 800c34e:	f7f3 ff5f 	bl	8000210 <memchr>
 800c352:	9a04      	ldr	r2, [sp, #16]
 800c354:	b9d8      	cbnz	r0, 800c38e <_svfiprintf_r+0xea>
 800c356:	06d0      	lsls	r0, r2, #27
 800c358:	bf44      	itt	mi
 800c35a:	2320      	movmi	r3, #32
 800c35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c360:	0711      	lsls	r1, r2, #28
 800c362:	bf44      	itt	mi
 800c364:	232b      	movmi	r3, #43	@ 0x2b
 800c366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c36a:	f89a 3000 	ldrb.w	r3, [sl]
 800c36e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c370:	d015      	beq.n	800c39e <_svfiprintf_r+0xfa>
 800c372:	9a07      	ldr	r2, [sp, #28]
 800c374:	4654      	mov	r4, sl
 800c376:	2000      	movs	r0, #0
 800c378:	f04f 0c0a 	mov.w	ip, #10
 800c37c:	4621      	mov	r1, r4
 800c37e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c382:	3b30      	subs	r3, #48	@ 0x30
 800c384:	2b09      	cmp	r3, #9
 800c386:	d94b      	bls.n	800c420 <_svfiprintf_r+0x17c>
 800c388:	b1b0      	cbz	r0, 800c3b8 <_svfiprintf_r+0x114>
 800c38a:	9207      	str	r2, [sp, #28]
 800c38c:	e014      	b.n	800c3b8 <_svfiprintf_r+0x114>
 800c38e:	eba0 0308 	sub.w	r3, r0, r8
 800c392:	fa09 f303 	lsl.w	r3, r9, r3
 800c396:	4313      	orrs	r3, r2
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	46a2      	mov	sl, r4
 800c39c:	e7d2      	b.n	800c344 <_svfiprintf_r+0xa0>
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	1d19      	adds	r1, r3, #4
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	9103      	str	r1, [sp, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	bfbb      	ittet	lt
 800c3aa:	425b      	neglt	r3, r3
 800c3ac:	f042 0202 	orrlt.w	r2, r2, #2
 800c3b0:	9307      	strge	r3, [sp, #28]
 800c3b2:	9307      	strlt	r3, [sp, #28]
 800c3b4:	bfb8      	it	lt
 800c3b6:	9204      	strlt	r2, [sp, #16]
 800c3b8:	7823      	ldrb	r3, [r4, #0]
 800c3ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3bc:	d10a      	bne.n	800c3d4 <_svfiprintf_r+0x130>
 800c3be:	7863      	ldrb	r3, [r4, #1]
 800c3c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3c2:	d132      	bne.n	800c42a <_svfiprintf_r+0x186>
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	1d1a      	adds	r2, r3, #4
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	9203      	str	r2, [sp, #12]
 800c3cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3d0:	3402      	adds	r4, #2
 800c3d2:	9305      	str	r3, [sp, #20]
 800c3d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c498 <_svfiprintf_r+0x1f4>
 800c3d8:	7821      	ldrb	r1, [r4, #0]
 800c3da:	2203      	movs	r2, #3
 800c3dc:	4650      	mov	r0, sl
 800c3de:	f7f3 ff17 	bl	8000210 <memchr>
 800c3e2:	b138      	cbz	r0, 800c3f4 <_svfiprintf_r+0x150>
 800c3e4:	9b04      	ldr	r3, [sp, #16]
 800c3e6:	eba0 000a 	sub.w	r0, r0, sl
 800c3ea:	2240      	movs	r2, #64	@ 0x40
 800c3ec:	4082      	lsls	r2, r0
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	3401      	adds	r4, #1
 800c3f2:	9304      	str	r3, [sp, #16]
 800c3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f8:	4824      	ldr	r0, [pc, #144]	@ (800c48c <_svfiprintf_r+0x1e8>)
 800c3fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3fe:	2206      	movs	r2, #6
 800c400:	f7f3 ff06 	bl	8000210 <memchr>
 800c404:	2800      	cmp	r0, #0
 800c406:	d036      	beq.n	800c476 <_svfiprintf_r+0x1d2>
 800c408:	4b21      	ldr	r3, [pc, #132]	@ (800c490 <_svfiprintf_r+0x1ec>)
 800c40a:	bb1b      	cbnz	r3, 800c454 <_svfiprintf_r+0x1b0>
 800c40c:	9b03      	ldr	r3, [sp, #12]
 800c40e:	3307      	adds	r3, #7
 800c410:	f023 0307 	bic.w	r3, r3, #7
 800c414:	3308      	adds	r3, #8
 800c416:	9303      	str	r3, [sp, #12]
 800c418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c41a:	4433      	add	r3, r6
 800c41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c41e:	e76a      	b.n	800c2f6 <_svfiprintf_r+0x52>
 800c420:	fb0c 3202 	mla	r2, ip, r2, r3
 800c424:	460c      	mov	r4, r1
 800c426:	2001      	movs	r0, #1
 800c428:	e7a8      	b.n	800c37c <_svfiprintf_r+0xd8>
 800c42a:	2300      	movs	r3, #0
 800c42c:	3401      	adds	r4, #1
 800c42e:	9305      	str	r3, [sp, #20]
 800c430:	4619      	mov	r1, r3
 800c432:	f04f 0c0a 	mov.w	ip, #10
 800c436:	4620      	mov	r0, r4
 800c438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c43c:	3a30      	subs	r2, #48	@ 0x30
 800c43e:	2a09      	cmp	r2, #9
 800c440:	d903      	bls.n	800c44a <_svfiprintf_r+0x1a6>
 800c442:	2b00      	cmp	r3, #0
 800c444:	d0c6      	beq.n	800c3d4 <_svfiprintf_r+0x130>
 800c446:	9105      	str	r1, [sp, #20]
 800c448:	e7c4      	b.n	800c3d4 <_svfiprintf_r+0x130>
 800c44a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c44e:	4604      	mov	r4, r0
 800c450:	2301      	movs	r3, #1
 800c452:	e7f0      	b.n	800c436 <_svfiprintf_r+0x192>
 800c454:	ab03      	add	r3, sp, #12
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	462a      	mov	r2, r5
 800c45a:	4b0e      	ldr	r3, [pc, #56]	@ (800c494 <_svfiprintf_r+0x1f0>)
 800c45c:	a904      	add	r1, sp, #16
 800c45e:	4638      	mov	r0, r7
 800c460:	f7fc fb0a 	bl	8008a78 <_printf_float>
 800c464:	1c42      	adds	r2, r0, #1
 800c466:	4606      	mov	r6, r0
 800c468:	d1d6      	bne.n	800c418 <_svfiprintf_r+0x174>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	065b      	lsls	r3, r3, #25
 800c46e:	f53f af2d 	bmi.w	800c2cc <_svfiprintf_r+0x28>
 800c472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c474:	e72c      	b.n	800c2d0 <_svfiprintf_r+0x2c>
 800c476:	ab03      	add	r3, sp, #12
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	462a      	mov	r2, r5
 800c47c:	4b05      	ldr	r3, [pc, #20]	@ (800c494 <_svfiprintf_r+0x1f0>)
 800c47e:	a904      	add	r1, sp, #16
 800c480:	4638      	mov	r0, r7
 800c482:	f7fc fd91 	bl	8008fa8 <_printf_i>
 800c486:	e7ed      	b.n	800c464 <_svfiprintf_r+0x1c0>
 800c488:	0800d7fd 	.word	0x0800d7fd
 800c48c:	0800d807 	.word	0x0800d807
 800c490:	08008a79 	.word	0x08008a79
 800c494:	0800c1ed 	.word	0x0800c1ed
 800c498:	0800d803 	.word	0x0800d803

0800c49c <__sfputc_r>:
 800c49c:	6893      	ldr	r3, [r2, #8]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	b410      	push	{r4}
 800c4a4:	6093      	str	r3, [r2, #8]
 800c4a6:	da08      	bge.n	800c4ba <__sfputc_r+0x1e>
 800c4a8:	6994      	ldr	r4, [r2, #24]
 800c4aa:	42a3      	cmp	r3, r4
 800c4ac:	db01      	blt.n	800c4b2 <__sfputc_r+0x16>
 800c4ae:	290a      	cmp	r1, #10
 800c4b0:	d103      	bne.n	800c4ba <__sfputc_r+0x1e>
 800c4b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4b6:	f7fd baf6 	b.w	8009aa6 <__swbuf_r>
 800c4ba:	6813      	ldr	r3, [r2, #0]
 800c4bc:	1c58      	adds	r0, r3, #1
 800c4be:	6010      	str	r0, [r2, #0]
 800c4c0:	7019      	strb	r1, [r3, #0]
 800c4c2:	4608      	mov	r0, r1
 800c4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c8:	4770      	bx	lr

0800c4ca <__sfputs_r>:
 800c4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	460f      	mov	r7, r1
 800c4d0:	4614      	mov	r4, r2
 800c4d2:	18d5      	adds	r5, r2, r3
 800c4d4:	42ac      	cmp	r4, r5
 800c4d6:	d101      	bne.n	800c4dc <__sfputs_r+0x12>
 800c4d8:	2000      	movs	r0, #0
 800c4da:	e007      	b.n	800c4ec <__sfputs_r+0x22>
 800c4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4e0:	463a      	mov	r2, r7
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f7ff ffda 	bl	800c49c <__sfputc_r>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d1f3      	bne.n	800c4d4 <__sfputs_r+0xa>
 800c4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4f0 <_vfiprintf_r>:
 800c4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	b09d      	sub	sp, #116	@ 0x74
 800c4f8:	4614      	mov	r4, r2
 800c4fa:	4698      	mov	r8, r3
 800c4fc:	4606      	mov	r6, r0
 800c4fe:	b118      	cbz	r0, 800c508 <_vfiprintf_r+0x18>
 800c500:	6a03      	ldr	r3, [r0, #32]
 800c502:	b90b      	cbnz	r3, 800c508 <_vfiprintf_r+0x18>
 800c504:	f7fd f908 	bl	8009718 <__sinit>
 800c508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c50a:	07d9      	lsls	r1, r3, #31
 800c50c:	d405      	bmi.n	800c51a <_vfiprintf_r+0x2a>
 800c50e:	89ab      	ldrh	r3, [r5, #12]
 800c510:	059a      	lsls	r2, r3, #22
 800c512:	d402      	bmi.n	800c51a <_vfiprintf_r+0x2a>
 800c514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c516:	f7fd fbd8 	bl	8009cca <__retarget_lock_acquire_recursive>
 800c51a:	89ab      	ldrh	r3, [r5, #12]
 800c51c:	071b      	lsls	r3, r3, #28
 800c51e:	d501      	bpl.n	800c524 <_vfiprintf_r+0x34>
 800c520:	692b      	ldr	r3, [r5, #16]
 800c522:	b99b      	cbnz	r3, 800c54c <_vfiprintf_r+0x5c>
 800c524:	4629      	mov	r1, r5
 800c526:	4630      	mov	r0, r6
 800c528:	f7fd fafc 	bl	8009b24 <__swsetup_r>
 800c52c:	b170      	cbz	r0, 800c54c <_vfiprintf_r+0x5c>
 800c52e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c530:	07dc      	lsls	r4, r3, #31
 800c532:	d504      	bpl.n	800c53e <_vfiprintf_r+0x4e>
 800c534:	f04f 30ff 	mov.w	r0, #4294967295
 800c538:	b01d      	add	sp, #116	@ 0x74
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	89ab      	ldrh	r3, [r5, #12]
 800c540:	0598      	lsls	r0, r3, #22
 800c542:	d4f7      	bmi.n	800c534 <_vfiprintf_r+0x44>
 800c544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c546:	f7fd fbc1 	bl	8009ccc <__retarget_lock_release_recursive>
 800c54a:	e7f3      	b.n	800c534 <_vfiprintf_r+0x44>
 800c54c:	2300      	movs	r3, #0
 800c54e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c550:	2320      	movs	r3, #32
 800c552:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c556:	f8cd 800c 	str.w	r8, [sp, #12]
 800c55a:	2330      	movs	r3, #48	@ 0x30
 800c55c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c70c <_vfiprintf_r+0x21c>
 800c560:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c564:	f04f 0901 	mov.w	r9, #1
 800c568:	4623      	mov	r3, r4
 800c56a:	469a      	mov	sl, r3
 800c56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c570:	b10a      	cbz	r2, 800c576 <_vfiprintf_r+0x86>
 800c572:	2a25      	cmp	r2, #37	@ 0x25
 800c574:	d1f9      	bne.n	800c56a <_vfiprintf_r+0x7a>
 800c576:	ebba 0b04 	subs.w	fp, sl, r4
 800c57a:	d00b      	beq.n	800c594 <_vfiprintf_r+0xa4>
 800c57c:	465b      	mov	r3, fp
 800c57e:	4622      	mov	r2, r4
 800c580:	4629      	mov	r1, r5
 800c582:	4630      	mov	r0, r6
 800c584:	f7ff ffa1 	bl	800c4ca <__sfputs_r>
 800c588:	3001      	adds	r0, #1
 800c58a:	f000 80a7 	beq.w	800c6dc <_vfiprintf_r+0x1ec>
 800c58e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c590:	445a      	add	r2, fp
 800c592:	9209      	str	r2, [sp, #36]	@ 0x24
 800c594:	f89a 3000 	ldrb.w	r3, [sl]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f000 809f 	beq.w	800c6dc <_vfiprintf_r+0x1ec>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5a8:	f10a 0a01 	add.w	sl, sl, #1
 800c5ac:	9304      	str	r3, [sp, #16]
 800c5ae:	9307      	str	r3, [sp, #28]
 800c5b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5b6:	4654      	mov	r4, sl
 800c5b8:	2205      	movs	r2, #5
 800c5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5be:	4853      	ldr	r0, [pc, #332]	@ (800c70c <_vfiprintf_r+0x21c>)
 800c5c0:	f7f3 fe26 	bl	8000210 <memchr>
 800c5c4:	9a04      	ldr	r2, [sp, #16]
 800c5c6:	b9d8      	cbnz	r0, 800c600 <_vfiprintf_r+0x110>
 800c5c8:	06d1      	lsls	r1, r2, #27
 800c5ca:	bf44      	itt	mi
 800c5cc:	2320      	movmi	r3, #32
 800c5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5d2:	0713      	lsls	r3, r2, #28
 800c5d4:	bf44      	itt	mi
 800c5d6:	232b      	movmi	r3, #43	@ 0x2b
 800c5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5e2:	d015      	beq.n	800c610 <_vfiprintf_r+0x120>
 800c5e4:	9a07      	ldr	r2, [sp, #28]
 800c5e6:	4654      	mov	r4, sl
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	f04f 0c0a 	mov.w	ip, #10
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5f4:	3b30      	subs	r3, #48	@ 0x30
 800c5f6:	2b09      	cmp	r3, #9
 800c5f8:	d94b      	bls.n	800c692 <_vfiprintf_r+0x1a2>
 800c5fa:	b1b0      	cbz	r0, 800c62a <_vfiprintf_r+0x13a>
 800c5fc:	9207      	str	r2, [sp, #28]
 800c5fe:	e014      	b.n	800c62a <_vfiprintf_r+0x13a>
 800c600:	eba0 0308 	sub.w	r3, r0, r8
 800c604:	fa09 f303 	lsl.w	r3, r9, r3
 800c608:	4313      	orrs	r3, r2
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	46a2      	mov	sl, r4
 800c60e:	e7d2      	b.n	800c5b6 <_vfiprintf_r+0xc6>
 800c610:	9b03      	ldr	r3, [sp, #12]
 800c612:	1d19      	adds	r1, r3, #4
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	9103      	str	r1, [sp, #12]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	bfbb      	ittet	lt
 800c61c:	425b      	neglt	r3, r3
 800c61e:	f042 0202 	orrlt.w	r2, r2, #2
 800c622:	9307      	strge	r3, [sp, #28]
 800c624:	9307      	strlt	r3, [sp, #28]
 800c626:	bfb8      	it	lt
 800c628:	9204      	strlt	r2, [sp, #16]
 800c62a:	7823      	ldrb	r3, [r4, #0]
 800c62c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c62e:	d10a      	bne.n	800c646 <_vfiprintf_r+0x156>
 800c630:	7863      	ldrb	r3, [r4, #1]
 800c632:	2b2a      	cmp	r3, #42	@ 0x2a
 800c634:	d132      	bne.n	800c69c <_vfiprintf_r+0x1ac>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	1d1a      	adds	r2, r3, #4
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	9203      	str	r2, [sp, #12]
 800c63e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c642:	3402      	adds	r4, #2
 800c644:	9305      	str	r3, [sp, #20]
 800c646:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c71c <_vfiprintf_r+0x22c>
 800c64a:	7821      	ldrb	r1, [r4, #0]
 800c64c:	2203      	movs	r2, #3
 800c64e:	4650      	mov	r0, sl
 800c650:	f7f3 fdde 	bl	8000210 <memchr>
 800c654:	b138      	cbz	r0, 800c666 <_vfiprintf_r+0x176>
 800c656:	9b04      	ldr	r3, [sp, #16]
 800c658:	eba0 000a 	sub.w	r0, r0, sl
 800c65c:	2240      	movs	r2, #64	@ 0x40
 800c65e:	4082      	lsls	r2, r0
 800c660:	4313      	orrs	r3, r2
 800c662:	3401      	adds	r4, #1
 800c664:	9304      	str	r3, [sp, #16]
 800c666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c66a:	4829      	ldr	r0, [pc, #164]	@ (800c710 <_vfiprintf_r+0x220>)
 800c66c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c670:	2206      	movs	r2, #6
 800c672:	f7f3 fdcd 	bl	8000210 <memchr>
 800c676:	2800      	cmp	r0, #0
 800c678:	d03f      	beq.n	800c6fa <_vfiprintf_r+0x20a>
 800c67a:	4b26      	ldr	r3, [pc, #152]	@ (800c714 <_vfiprintf_r+0x224>)
 800c67c:	bb1b      	cbnz	r3, 800c6c6 <_vfiprintf_r+0x1d6>
 800c67e:	9b03      	ldr	r3, [sp, #12]
 800c680:	3307      	adds	r3, #7
 800c682:	f023 0307 	bic.w	r3, r3, #7
 800c686:	3308      	adds	r3, #8
 800c688:	9303      	str	r3, [sp, #12]
 800c68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c68c:	443b      	add	r3, r7
 800c68e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c690:	e76a      	b.n	800c568 <_vfiprintf_r+0x78>
 800c692:	fb0c 3202 	mla	r2, ip, r2, r3
 800c696:	460c      	mov	r4, r1
 800c698:	2001      	movs	r0, #1
 800c69a:	e7a8      	b.n	800c5ee <_vfiprintf_r+0xfe>
 800c69c:	2300      	movs	r3, #0
 800c69e:	3401      	adds	r4, #1
 800c6a0:	9305      	str	r3, [sp, #20]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	f04f 0c0a 	mov.w	ip, #10
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6ae:	3a30      	subs	r2, #48	@ 0x30
 800c6b0:	2a09      	cmp	r2, #9
 800c6b2:	d903      	bls.n	800c6bc <_vfiprintf_r+0x1cc>
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d0c6      	beq.n	800c646 <_vfiprintf_r+0x156>
 800c6b8:	9105      	str	r1, [sp, #20]
 800c6ba:	e7c4      	b.n	800c646 <_vfiprintf_r+0x156>
 800c6bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e7f0      	b.n	800c6a8 <_vfiprintf_r+0x1b8>
 800c6c6:	ab03      	add	r3, sp, #12
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	462a      	mov	r2, r5
 800c6cc:	4b12      	ldr	r3, [pc, #72]	@ (800c718 <_vfiprintf_r+0x228>)
 800c6ce:	a904      	add	r1, sp, #16
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	f7fc f9d1 	bl	8008a78 <_printf_float>
 800c6d6:	4607      	mov	r7, r0
 800c6d8:	1c78      	adds	r0, r7, #1
 800c6da:	d1d6      	bne.n	800c68a <_vfiprintf_r+0x19a>
 800c6dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6de:	07d9      	lsls	r1, r3, #31
 800c6e0:	d405      	bmi.n	800c6ee <_vfiprintf_r+0x1fe>
 800c6e2:	89ab      	ldrh	r3, [r5, #12]
 800c6e4:	059a      	lsls	r2, r3, #22
 800c6e6:	d402      	bmi.n	800c6ee <_vfiprintf_r+0x1fe>
 800c6e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6ea:	f7fd faef 	bl	8009ccc <__retarget_lock_release_recursive>
 800c6ee:	89ab      	ldrh	r3, [r5, #12]
 800c6f0:	065b      	lsls	r3, r3, #25
 800c6f2:	f53f af1f 	bmi.w	800c534 <_vfiprintf_r+0x44>
 800c6f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6f8:	e71e      	b.n	800c538 <_vfiprintf_r+0x48>
 800c6fa:	ab03      	add	r3, sp, #12
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	462a      	mov	r2, r5
 800c700:	4b05      	ldr	r3, [pc, #20]	@ (800c718 <_vfiprintf_r+0x228>)
 800c702:	a904      	add	r1, sp, #16
 800c704:	4630      	mov	r0, r6
 800c706:	f7fc fc4f 	bl	8008fa8 <_printf_i>
 800c70a:	e7e4      	b.n	800c6d6 <_vfiprintf_r+0x1e6>
 800c70c:	0800d7fd 	.word	0x0800d7fd
 800c710:	0800d807 	.word	0x0800d807
 800c714:	08008a79 	.word	0x08008a79
 800c718:	0800c4cb 	.word	0x0800c4cb
 800c71c:	0800d803 	.word	0x0800d803

0800c720 <__sflush_r>:
 800c720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c728:	0716      	lsls	r6, r2, #28
 800c72a:	4605      	mov	r5, r0
 800c72c:	460c      	mov	r4, r1
 800c72e:	d454      	bmi.n	800c7da <__sflush_r+0xba>
 800c730:	684b      	ldr	r3, [r1, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	dc02      	bgt.n	800c73c <__sflush_r+0x1c>
 800c736:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c738:	2b00      	cmp	r3, #0
 800c73a:	dd48      	ble.n	800c7ce <__sflush_r+0xae>
 800c73c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c73e:	2e00      	cmp	r6, #0
 800c740:	d045      	beq.n	800c7ce <__sflush_r+0xae>
 800c742:	2300      	movs	r3, #0
 800c744:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c748:	682f      	ldr	r7, [r5, #0]
 800c74a:	6a21      	ldr	r1, [r4, #32]
 800c74c:	602b      	str	r3, [r5, #0]
 800c74e:	d030      	beq.n	800c7b2 <__sflush_r+0x92>
 800c750:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	0759      	lsls	r1, r3, #29
 800c756:	d505      	bpl.n	800c764 <__sflush_r+0x44>
 800c758:	6863      	ldr	r3, [r4, #4]
 800c75a:	1ad2      	subs	r2, r2, r3
 800c75c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c75e:	b10b      	cbz	r3, 800c764 <__sflush_r+0x44>
 800c760:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c762:	1ad2      	subs	r2, r2, r3
 800c764:	2300      	movs	r3, #0
 800c766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c768:	6a21      	ldr	r1, [r4, #32]
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b0      	blx	r6
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	d106      	bne.n	800c782 <__sflush_r+0x62>
 800c774:	6829      	ldr	r1, [r5, #0]
 800c776:	291d      	cmp	r1, #29
 800c778:	d82b      	bhi.n	800c7d2 <__sflush_r+0xb2>
 800c77a:	4a2a      	ldr	r2, [pc, #168]	@ (800c824 <__sflush_r+0x104>)
 800c77c:	40ca      	lsrs	r2, r1
 800c77e:	07d6      	lsls	r6, r2, #31
 800c780:	d527      	bpl.n	800c7d2 <__sflush_r+0xb2>
 800c782:	2200      	movs	r2, #0
 800c784:	6062      	str	r2, [r4, #4]
 800c786:	04d9      	lsls	r1, r3, #19
 800c788:	6922      	ldr	r2, [r4, #16]
 800c78a:	6022      	str	r2, [r4, #0]
 800c78c:	d504      	bpl.n	800c798 <__sflush_r+0x78>
 800c78e:	1c42      	adds	r2, r0, #1
 800c790:	d101      	bne.n	800c796 <__sflush_r+0x76>
 800c792:	682b      	ldr	r3, [r5, #0]
 800c794:	b903      	cbnz	r3, 800c798 <__sflush_r+0x78>
 800c796:	6560      	str	r0, [r4, #84]	@ 0x54
 800c798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c79a:	602f      	str	r7, [r5, #0]
 800c79c:	b1b9      	cbz	r1, 800c7ce <__sflush_r+0xae>
 800c79e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7a2:	4299      	cmp	r1, r3
 800c7a4:	d002      	beq.n	800c7ac <__sflush_r+0x8c>
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f7fe f8f2 	bl	800a990 <_free_r>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7b0:	e00d      	b.n	800c7ce <__sflush_r+0xae>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	47b0      	blx	r6
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	1c50      	adds	r0, r2, #1
 800c7bc:	d1c9      	bne.n	800c752 <__sflush_r+0x32>
 800c7be:	682b      	ldr	r3, [r5, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d0c6      	beq.n	800c752 <__sflush_r+0x32>
 800c7c4:	2b1d      	cmp	r3, #29
 800c7c6:	d001      	beq.n	800c7cc <__sflush_r+0xac>
 800c7c8:	2b16      	cmp	r3, #22
 800c7ca:	d11e      	bne.n	800c80a <__sflush_r+0xea>
 800c7cc:	602f      	str	r7, [r5, #0]
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	e022      	b.n	800c818 <__sflush_r+0xf8>
 800c7d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7d6:	b21b      	sxth	r3, r3
 800c7d8:	e01b      	b.n	800c812 <__sflush_r+0xf2>
 800c7da:	690f      	ldr	r7, [r1, #16]
 800c7dc:	2f00      	cmp	r7, #0
 800c7de:	d0f6      	beq.n	800c7ce <__sflush_r+0xae>
 800c7e0:	0793      	lsls	r3, r2, #30
 800c7e2:	680e      	ldr	r6, [r1, #0]
 800c7e4:	bf08      	it	eq
 800c7e6:	694b      	ldreq	r3, [r1, #20]
 800c7e8:	600f      	str	r7, [r1, #0]
 800c7ea:	bf18      	it	ne
 800c7ec:	2300      	movne	r3, #0
 800c7ee:	eba6 0807 	sub.w	r8, r6, r7
 800c7f2:	608b      	str	r3, [r1, #8]
 800c7f4:	f1b8 0f00 	cmp.w	r8, #0
 800c7f8:	dde9      	ble.n	800c7ce <__sflush_r+0xae>
 800c7fa:	6a21      	ldr	r1, [r4, #32]
 800c7fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7fe:	4643      	mov	r3, r8
 800c800:	463a      	mov	r2, r7
 800c802:	4628      	mov	r0, r5
 800c804:	47b0      	blx	r6
 800c806:	2800      	cmp	r0, #0
 800c808:	dc08      	bgt.n	800c81c <__sflush_r+0xfc>
 800c80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c812:	81a3      	strh	r3, [r4, #12]
 800c814:	f04f 30ff 	mov.w	r0, #4294967295
 800c818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c81c:	4407      	add	r7, r0
 800c81e:	eba8 0800 	sub.w	r8, r8, r0
 800c822:	e7e7      	b.n	800c7f4 <__sflush_r+0xd4>
 800c824:	20400001 	.word	0x20400001

0800c828 <_fflush_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	690b      	ldr	r3, [r1, #16]
 800c82c:	4605      	mov	r5, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	b913      	cbnz	r3, 800c838 <_fflush_r+0x10>
 800c832:	2500      	movs	r5, #0
 800c834:	4628      	mov	r0, r5
 800c836:	bd38      	pop	{r3, r4, r5, pc}
 800c838:	b118      	cbz	r0, 800c842 <_fflush_r+0x1a>
 800c83a:	6a03      	ldr	r3, [r0, #32]
 800c83c:	b90b      	cbnz	r3, 800c842 <_fflush_r+0x1a>
 800c83e:	f7fc ff6b 	bl	8009718 <__sinit>
 800c842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d0f3      	beq.n	800c832 <_fflush_r+0xa>
 800c84a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c84c:	07d0      	lsls	r0, r2, #31
 800c84e:	d404      	bmi.n	800c85a <_fflush_r+0x32>
 800c850:	0599      	lsls	r1, r3, #22
 800c852:	d402      	bmi.n	800c85a <_fflush_r+0x32>
 800c854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c856:	f7fd fa38 	bl	8009cca <__retarget_lock_acquire_recursive>
 800c85a:	4628      	mov	r0, r5
 800c85c:	4621      	mov	r1, r4
 800c85e:	f7ff ff5f 	bl	800c720 <__sflush_r>
 800c862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c864:	07da      	lsls	r2, r3, #31
 800c866:	4605      	mov	r5, r0
 800c868:	d4e4      	bmi.n	800c834 <_fflush_r+0xc>
 800c86a:	89a3      	ldrh	r3, [r4, #12]
 800c86c:	059b      	lsls	r3, r3, #22
 800c86e:	d4e1      	bmi.n	800c834 <_fflush_r+0xc>
 800c870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c872:	f7fd fa2b 	bl	8009ccc <__retarget_lock_release_recursive>
 800c876:	e7dd      	b.n	800c834 <_fflush_r+0xc>

0800c878 <__swhatbuf_r>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	460c      	mov	r4, r1
 800c87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c880:	2900      	cmp	r1, #0
 800c882:	b096      	sub	sp, #88	@ 0x58
 800c884:	4615      	mov	r5, r2
 800c886:	461e      	mov	r6, r3
 800c888:	da0d      	bge.n	800c8a6 <__swhatbuf_r+0x2e>
 800c88a:	89a3      	ldrh	r3, [r4, #12]
 800c88c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c890:	f04f 0100 	mov.w	r1, #0
 800c894:	bf14      	ite	ne
 800c896:	2340      	movne	r3, #64	@ 0x40
 800c898:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c89c:	2000      	movs	r0, #0
 800c89e:	6031      	str	r1, [r6, #0]
 800c8a0:	602b      	str	r3, [r5, #0]
 800c8a2:	b016      	add	sp, #88	@ 0x58
 800c8a4:	bd70      	pop	{r4, r5, r6, pc}
 800c8a6:	466a      	mov	r2, sp
 800c8a8:	f000 f874 	bl	800c994 <_fstat_r>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	dbec      	blt.n	800c88a <__swhatbuf_r+0x12>
 800c8b0:	9901      	ldr	r1, [sp, #4]
 800c8b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c8b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c8ba:	4259      	negs	r1, r3
 800c8bc:	4159      	adcs	r1, r3
 800c8be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8c2:	e7eb      	b.n	800c89c <__swhatbuf_r+0x24>

0800c8c4 <__smakebuf_r>:
 800c8c4:	898b      	ldrh	r3, [r1, #12]
 800c8c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8c8:	079d      	lsls	r5, r3, #30
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	d507      	bpl.n	800c8e0 <__smakebuf_r+0x1c>
 800c8d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	6123      	str	r3, [r4, #16]
 800c8d8:	2301      	movs	r3, #1
 800c8da:	6163      	str	r3, [r4, #20]
 800c8dc:	b003      	add	sp, #12
 800c8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8e0:	ab01      	add	r3, sp, #4
 800c8e2:	466a      	mov	r2, sp
 800c8e4:	f7ff ffc8 	bl	800c878 <__swhatbuf_r>
 800c8e8:	9f00      	ldr	r7, [sp, #0]
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	4639      	mov	r1, r7
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	f7fe f8c2 	bl	800aa78 <_malloc_r>
 800c8f4:	b948      	cbnz	r0, 800c90a <__smakebuf_r+0x46>
 800c8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8fa:	059a      	lsls	r2, r3, #22
 800c8fc:	d4ee      	bmi.n	800c8dc <__smakebuf_r+0x18>
 800c8fe:	f023 0303 	bic.w	r3, r3, #3
 800c902:	f043 0302 	orr.w	r3, r3, #2
 800c906:	81a3      	strh	r3, [r4, #12]
 800c908:	e7e2      	b.n	800c8d0 <__smakebuf_r+0xc>
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	6020      	str	r0, [r4, #0]
 800c90e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c912:	81a3      	strh	r3, [r4, #12]
 800c914:	9b01      	ldr	r3, [sp, #4]
 800c916:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c91a:	b15b      	cbz	r3, 800c934 <__smakebuf_r+0x70>
 800c91c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c920:	4630      	mov	r0, r6
 800c922:	f000 f849 	bl	800c9b8 <_isatty_r>
 800c926:	b128      	cbz	r0, 800c934 <__smakebuf_r+0x70>
 800c928:	89a3      	ldrh	r3, [r4, #12]
 800c92a:	f023 0303 	bic.w	r3, r3, #3
 800c92e:	f043 0301 	orr.w	r3, r3, #1
 800c932:	81a3      	strh	r3, [r4, #12]
 800c934:	89a3      	ldrh	r3, [r4, #12]
 800c936:	431d      	orrs	r5, r3
 800c938:	81a5      	strh	r5, [r4, #12]
 800c93a:	e7cf      	b.n	800c8dc <__smakebuf_r+0x18>

0800c93c <memmove>:
 800c93c:	4288      	cmp	r0, r1
 800c93e:	b510      	push	{r4, lr}
 800c940:	eb01 0402 	add.w	r4, r1, r2
 800c944:	d902      	bls.n	800c94c <memmove+0x10>
 800c946:	4284      	cmp	r4, r0
 800c948:	4623      	mov	r3, r4
 800c94a:	d807      	bhi.n	800c95c <memmove+0x20>
 800c94c:	1e43      	subs	r3, r0, #1
 800c94e:	42a1      	cmp	r1, r4
 800c950:	d008      	beq.n	800c964 <memmove+0x28>
 800c952:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c95a:	e7f8      	b.n	800c94e <memmove+0x12>
 800c95c:	4402      	add	r2, r0
 800c95e:	4601      	mov	r1, r0
 800c960:	428a      	cmp	r2, r1
 800c962:	d100      	bne.n	800c966 <memmove+0x2a>
 800c964:	bd10      	pop	{r4, pc}
 800c966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c96a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c96e:	e7f7      	b.n	800c960 <memmove+0x24>

0800c970 <strncmp>:
 800c970:	b510      	push	{r4, lr}
 800c972:	b16a      	cbz	r2, 800c990 <strncmp+0x20>
 800c974:	3901      	subs	r1, #1
 800c976:	1884      	adds	r4, r0, r2
 800c978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c97c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c980:	429a      	cmp	r2, r3
 800c982:	d103      	bne.n	800c98c <strncmp+0x1c>
 800c984:	42a0      	cmp	r0, r4
 800c986:	d001      	beq.n	800c98c <strncmp+0x1c>
 800c988:	2a00      	cmp	r2, #0
 800c98a:	d1f5      	bne.n	800c978 <strncmp+0x8>
 800c98c:	1ad0      	subs	r0, r2, r3
 800c98e:	bd10      	pop	{r4, pc}
 800c990:	4610      	mov	r0, r2
 800c992:	e7fc      	b.n	800c98e <strncmp+0x1e>

0800c994 <_fstat_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d07      	ldr	r5, [pc, #28]	@ (800c9b4 <_fstat_r+0x20>)
 800c998:	2300      	movs	r3, #0
 800c99a:	4604      	mov	r4, r0
 800c99c:	4608      	mov	r0, r1
 800c99e:	4611      	mov	r1, r2
 800c9a0:	602b      	str	r3, [r5, #0]
 800c9a2:	f7f5 ff2f 	bl	8002804 <_fstat>
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	d102      	bne.n	800c9b0 <_fstat_r+0x1c>
 800c9aa:	682b      	ldr	r3, [r5, #0]
 800c9ac:	b103      	cbz	r3, 800c9b0 <_fstat_r+0x1c>
 800c9ae:	6023      	str	r3, [r4, #0]
 800c9b0:	bd38      	pop	{r3, r4, r5, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20000610 	.word	0x20000610

0800c9b8 <_isatty_r>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4d06      	ldr	r5, [pc, #24]	@ (800c9d4 <_isatty_r+0x1c>)
 800c9bc:	2300      	movs	r3, #0
 800c9be:	4604      	mov	r4, r0
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	602b      	str	r3, [r5, #0]
 800c9c4:	f7f5 ff2e 	bl	8002824 <_isatty>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	d102      	bne.n	800c9d2 <_isatty_r+0x1a>
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	b103      	cbz	r3, 800c9d2 <_isatty_r+0x1a>
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	20000610 	.word	0x20000610

0800c9d8 <_sbrk_r>:
 800c9d8:	b538      	push	{r3, r4, r5, lr}
 800c9da:	4d06      	ldr	r5, [pc, #24]	@ (800c9f4 <_sbrk_r+0x1c>)
 800c9dc:	2300      	movs	r3, #0
 800c9de:	4604      	mov	r4, r0
 800c9e0:	4608      	mov	r0, r1
 800c9e2:	602b      	str	r3, [r5, #0]
 800c9e4:	f7f5 ff36 	bl	8002854 <_sbrk>
 800c9e8:	1c43      	adds	r3, r0, #1
 800c9ea:	d102      	bne.n	800c9f2 <_sbrk_r+0x1a>
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	b103      	cbz	r3, 800c9f2 <_sbrk_r+0x1a>
 800c9f0:	6023      	str	r3, [r4, #0]
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	20000610 	.word	0x20000610

0800c9f8 <memcpy>:
 800c9f8:	440a      	add	r2, r1
 800c9fa:	4291      	cmp	r1, r2
 800c9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca00:	d100      	bne.n	800ca04 <memcpy+0xc>
 800ca02:	4770      	bx	lr
 800ca04:	b510      	push	{r4, lr}
 800ca06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca0e:	4291      	cmp	r1, r2
 800ca10:	d1f9      	bne.n	800ca06 <memcpy+0xe>
 800ca12:	bd10      	pop	{r4, pc}
 800ca14:	0000      	movs	r0, r0
	...

0800ca18 <nan>:
 800ca18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ca20 <nan+0x8>
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	00000000 	.word	0x00000000
 800ca24:	7ff80000 	.word	0x7ff80000

0800ca28 <__assert_func>:
 800ca28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca2a:	4614      	mov	r4, r2
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	4b09      	ldr	r3, [pc, #36]	@ (800ca54 <__assert_func+0x2c>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4605      	mov	r5, r0
 800ca34:	68d8      	ldr	r0, [r3, #12]
 800ca36:	b14c      	cbz	r4, 800ca4c <__assert_func+0x24>
 800ca38:	4b07      	ldr	r3, [pc, #28]	@ (800ca58 <__assert_func+0x30>)
 800ca3a:	9100      	str	r1, [sp, #0]
 800ca3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca40:	4906      	ldr	r1, [pc, #24]	@ (800ca5c <__assert_func+0x34>)
 800ca42:	462b      	mov	r3, r5
 800ca44:	f000 fba8 	bl	800d198 <fiprintf>
 800ca48:	f000 fbb8 	bl	800d1bc <abort>
 800ca4c:	4b04      	ldr	r3, [pc, #16]	@ (800ca60 <__assert_func+0x38>)
 800ca4e:	461c      	mov	r4, r3
 800ca50:	e7f3      	b.n	800ca3a <__assert_func+0x12>
 800ca52:	bf00      	nop
 800ca54:	20000070 	.word	0x20000070
 800ca58:	0800d816 	.word	0x0800d816
 800ca5c:	0800d823 	.word	0x0800d823
 800ca60:	0800d851 	.word	0x0800d851

0800ca64 <_calloc_r>:
 800ca64:	b570      	push	{r4, r5, r6, lr}
 800ca66:	fba1 5402 	umull	r5, r4, r1, r2
 800ca6a:	b934      	cbnz	r4, 800ca7a <_calloc_r+0x16>
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	f7fe f803 	bl	800aa78 <_malloc_r>
 800ca72:	4606      	mov	r6, r0
 800ca74:	b928      	cbnz	r0, 800ca82 <_calloc_r+0x1e>
 800ca76:	4630      	mov	r0, r6
 800ca78:	bd70      	pop	{r4, r5, r6, pc}
 800ca7a:	220c      	movs	r2, #12
 800ca7c:	6002      	str	r2, [r0, #0]
 800ca7e:	2600      	movs	r6, #0
 800ca80:	e7f9      	b.n	800ca76 <_calloc_r+0x12>
 800ca82:	462a      	mov	r2, r5
 800ca84:	4621      	mov	r1, r4
 800ca86:	f7fd f8a3 	bl	8009bd0 <memset>
 800ca8a:	e7f4      	b.n	800ca76 <_calloc_r+0x12>

0800ca8c <rshift>:
 800ca8c:	6903      	ldr	r3, [r0, #16]
 800ca8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca96:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca9a:	f100 0414 	add.w	r4, r0, #20
 800ca9e:	dd45      	ble.n	800cb2c <rshift+0xa0>
 800caa0:	f011 011f 	ands.w	r1, r1, #31
 800caa4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800caa8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800caac:	d10c      	bne.n	800cac8 <rshift+0x3c>
 800caae:	f100 0710 	add.w	r7, r0, #16
 800cab2:	4629      	mov	r1, r5
 800cab4:	42b1      	cmp	r1, r6
 800cab6:	d334      	bcc.n	800cb22 <rshift+0x96>
 800cab8:	1a9b      	subs	r3, r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	1eea      	subs	r2, r5, #3
 800cabe:	4296      	cmp	r6, r2
 800cac0:	bf38      	it	cc
 800cac2:	2300      	movcc	r3, #0
 800cac4:	4423      	add	r3, r4
 800cac6:	e015      	b.n	800caf4 <rshift+0x68>
 800cac8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cacc:	f1c1 0820 	rsb	r8, r1, #32
 800cad0:	40cf      	lsrs	r7, r1
 800cad2:	f105 0e04 	add.w	lr, r5, #4
 800cad6:	46a1      	mov	r9, r4
 800cad8:	4576      	cmp	r6, lr
 800cada:	46f4      	mov	ip, lr
 800cadc:	d815      	bhi.n	800cb0a <rshift+0x7e>
 800cade:	1a9a      	subs	r2, r3, r2
 800cae0:	0092      	lsls	r2, r2, #2
 800cae2:	3a04      	subs	r2, #4
 800cae4:	3501      	adds	r5, #1
 800cae6:	42ae      	cmp	r6, r5
 800cae8:	bf38      	it	cc
 800caea:	2200      	movcc	r2, #0
 800caec:	18a3      	adds	r3, r4, r2
 800caee:	50a7      	str	r7, [r4, r2]
 800caf0:	b107      	cbz	r7, 800caf4 <rshift+0x68>
 800caf2:	3304      	adds	r3, #4
 800caf4:	1b1a      	subs	r2, r3, r4
 800caf6:	42a3      	cmp	r3, r4
 800caf8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cafc:	bf08      	it	eq
 800cafe:	2300      	moveq	r3, #0
 800cb00:	6102      	str	r2, [r0, #16]
 800cb02:	bf08      	it	eq
 800cb04:	6143      	streq	r3, [r0, #20]
 800cb06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb0a:	f8dc c000 	ldr.w	ip, [ip]
 800cb0e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb12:	ea4c 0707 	orr.w	r7, ip, r7
 800cb16:	f849 7b04 	str.w	r7, [r9], #4
 800cb1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb1e:	40cf      	lsrs	r7, r1
 800cb20:	e7da      	b.n	800cad8 <rshift+0x4c>
 800cb22:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb26:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb2a:	e7c3      	b.n	800cab4 <rshift+0x28>
 800cb2c:	4623      	mov	r3, r4
 800cb2e:	e7e1      	b.n	800caf4 <rshift+0x68>

0800cb30 <__hexdig_fun>:
 800cb30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cb34:	2b09      	cmp	r3, #9
 800cb36:	d802      	bhi.n	800cb3e <__hexdig_fun+0xe>
 800cb38:	3820      	subs	r0, #32
 800cb3a:	b2c0      	uxtb	r0, r0
 800cb3c:	4770      	bx	lr
 800cb3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cb42:	2b05      	cmp	r3, #5
 800cb44:	d801      	bhi.n	800cb4a <__hexdig_fun+0x1a>
 800cb46:	3847      	subs	r0, #71	@ 0x47
 800cb48:	e7f7      	b.n	800cb3a <__hexdig_fun+0xa>
 800cb4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cb4e:	2b05      	cmp	r3, #5
 800cb50:	d801      	bhi.n	800cb56 <__hexdig_fun+0x26>
 800cb52:	3827      	subs	r0, #39	@ 0x27
 800cb54:	e7f1      	b.n	800cb3a <__hexdig_fun+0xa>
 800cb56:	2000      	movs	r0, #0
 800cb58:	4770      	bx	lr
	...

0800cb5c <__gethex>:
 800cb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb60:	b085      	sub	sp, #20
 800cb62:	468a      	mov	sl, r1
 800cb64:	9302      	str	r3, [sp, #8]
 800cb66:	680b      	ldr	r3, [r1, #0]
 800cb68:	9001      	str	r0, [sp, #4]
 800cb6a:	4690      	mov	r8, r2
 800cb6c:	1c9c      	adds	r4, r3, #2
 800cb6e:	46a1      	mov	r9, r4
 800cb70:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cb74:	2830      	cmp	r0, #48	@ 0x30
 800cb76:	d0fa      	beq.n	800cb6e <__gethex+0x12>
 800cb78:	eba9 0303 	sub.w	r3, r9, r3
 800cb7c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cb80:	f7ff ffd6 	bl	800cb30 <__hexdig_fun>
 800cb84:	4605      	mov	r5, r0
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d168      	bne.n	800cc5c <__gethex+0x100>
 800cb8a:	49a0      	ldr	r1, [pc, #640]	@ (800ce0c <__gethex+0x2b0>)
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	4648      	mov	r0, r9
 800cb90:	f7ff feee 	bl	800c970 <strncmp>
 800cb94:	4607      	mov	r7, r0
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d167      	bne.n	800cc6a <__gethex+0x10e>
 800cb9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cb9e:	4626      	mov	r6, r4
 800cba0:	f7ff ffc6 	bl	800cb30 <__hexdig_fun>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d062      	beq.n	800cc6e <__gethex+0x112>
 800cba8:	4623      	mov	r3, r4
 800cbaa:	7818      	ldrb	r0, [r3, #0]
 800cbac:	2830      	cmp	r0, #48	@ 0x30
 800cbae:	4699      	mov	r9, r3
 800cbb0:	f103 0301 	add.w	r3, r3, #1
 800cbb4:	d0f9      	beq.n	800cbaa <__gethex+0x4e>
 800cbb6:	f7ff ffbb 	bl	800cb30 <__hexdig_fun>
 800cbba:	fab0 f580 	clz	r5, r0
 800cbbe:	096d      	lsrs	r5, r5, #5
 800cbc0:	f04f 0b01 	mov.w	fp, #1
 800cbc4:	464a      	mov	r2, r9
 800cbc6:	4616      	mov	r6, r2
 800cbc8:	3201      	adds	r2, #1
 800cbca:	7830      	ldrb	r0, [r6, #0]
 800cbcc:	f7ff ffb0 	bl	800cb30 <__hexdig_fun>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d1f8      	bne.n	800cbc6 <__gethex+0x6a>
 800cbd4:	498d      	ldr	r1, [pc, #564]	@ (800ce0c <__gethex+0x2b0>)
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f7ff fec9 	bl	800c970 <strncmp>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d13f      	bne.n	800cc62 <__gethex+0x106>
 800cbe2:	b944      	cbnz	r4, 800cbf6 <__gethex+0x9a>
 800cbe4:	1c74      	adds	r4, r6, #1
 800cbe6:	4622      	mov	r2, r4
 800cbe8:	4616      	mov	r6, r2
 800cbea:	3201      	adds	r2, #1
 800cbec:	7830      	ldrb	r0, [r6, #0]
 800cbee:	f7ff ff9f 	bl	800cb30 <__hexdig_fun>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d1f8      	bne.n	800cbe8 <__gethex+0x8c>
 800cbf6:	1ba4      	subs	r4, r4, r6
 800cbf8:	00a7      	lsls	r7, r4, #2
 800cbfa:	7833      	ldrb	r3, [r6, #0]
 800cbfc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cc00:	2b50      	cmp	r3, #80	@ 0x50
 800cc02:	d13e      	bne.n	800cc82 <__gethex+0x126>
 800cc04:	7873      	ldrb	r3, [r6, #1]
 800cc06:	2b2b      	cmp	r3, #43	@ 0x2b
 800cc08:	d033      	beq.n	800cc72 <__gethex+0x116>
 800cc0a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cc0c:	d034      	beq.n	800cc78 <__gethex+0x11c>
 800cc0e:	1c71      	adds	r1, r6, #1
 800cc10:	2400      	movs	r4, #0
 800cc12:	7808      	ldrb	r0, [r1, #0]
 800cc14:	f7ff ff8c 	bl	800cb30 <__hexdig_fun>
 800cc18:	1e43      	subs	r3, r0, #1
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	2b18      	cmp	r3, #24
 800cc1e:	d830      	bhi.n	800cc82 <__gethex+0x126>
 800cc20:	f1a0 0210 	sub.w	r2, r0, #16
 800cc24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc28:	f7ff ff82 	bl	800cb30 <__hexdig_fun>
 800cc2c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cc30:	fa5f fc8c 	uxtb.w	ip, ip
 800cc34:	f1bc 0f18 	cmp.w	ip, #24
 800cc38:	f04f 030a 	mov.w	r3, #10
 800cc3c:	d91e      	bls.n	800cc7c <__gethex+0x120>
 800cc3e:	b104      	cbz	r4, 800cc42 <__gethex+0xe6>
 800cc40:	4252      	negs	r2, r2
 800cc42:	4417      	add	r7, r2
 800cc44:	f8ca 1000 	str.w	r1, [sl]
 800cc48:	b1ed      	cbz	r5, 800cc86 <__gethex+0x12a>
 800cc4a:	f1bb 0f00 	cmp.w	fp, #0
 800cc4e:	bf0c      	ite	eq
 800cc50:	2506      	moveq	r5, #6
 800cc52:	2500      	movne	r5, #0
 800cc54:	4628      	mov	r0, r5
 800cc56:	b005      	add	sp, #20
 800cc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5c:	2500      	movs	r5, #0
 800cc5e:	462c      	mov	r4, r5
 800cc60:	e7b0      	b.n	800cbc4 <__gethex+0x68>
 800cc62:	2c00      	cmp	r4, #0
 800cc64:	d1c7      	bne.n	800cbf6 <__gethex+0x9a>
 800cc66:	4627      	mov	r7, r4
 800cc68:	e7c7      	b.n	800cbfa <__gethex+0x9e>
 800cc6a:	464e      	mov	r6, r9
 800cc6c:	462f      	mov	r7, r5
 800cc6e:	2501      	movs	r5, #1
 800cc70:	e7c3      	b.n	800cbfa <__gethex+0x9e>
 800cc72:	2400      	movs	r4, #0
 800cc74:	1cb1      	adds	r1, r6, #2
 800cc76:	e7cc      	b.n	800cc12 <__gethex+0xb6>
 800cc78:	2401      	movs	r4, #1
 800cc7a:	e7fb      	b.n	800cc74 <__gethex+0x118>
 800cc7c:	fb03 0002 	mla	r0, r3, r2, r0
 800cc80:	e7ce      	b.n	800cc20 <__gethex+0xc4>
 800cc82:	4631      	mov	r1, r6
 800cc84:	e7de      	b.n	800cc44 <__gethex+0xe8>
 800cc86:	eba6 0309 	sub.w	r3, r6, r9
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	2b07      	cmp	r3, #7
 800cc90:	dc0a      	bgt.n	800cca8 <__gethex+0x14c>
 800cc92:	9801      	ldr	r0, [sp, #4]
 800cc94:	f7fd ff7c 	bl	800ab90 <_Balloc>
 800cc98:	4604      	mov	r4, r0
 800cc9a:	b940      	cbnz	r0, 800ccae <__gethex+0x152>
 800cc9c:	4b5c      	ldr	r3, [pc, #368]	@ (800ce10 <__gethex+0x2b4>)
 800cc9e:	4602      	mov	r2, r0
 800cca0:	21e4      	movs	r1, #228	@ 0xe4
 800cca2:	485c      	ldr	r0, [pc, #368]	@ (800ce14 <__gethex+0x2b8>)
 800cca4:	f7ff fec0 	bl	800ca28 <__assert_func>
 800cca8:	3101      	adds	r1, #1
 800ccaa:	105b      	asrs	r3, r3, #1
 800ccac:	e7ef      	b.n	800cc8e <__gethex+0x132>
 800ccae:	f100 0a14 	add.w	sl, r0, #20
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	4655      	mov	r5, sl
 800ccb6:	469b      	mov	fp, r3
 800ccb8:	45b1      	cmp	r9, r6
 800ccba:	d337      	bcc.n	800cd2c <__gethex+0x1d0>
 800ccbc:	f845 bb04 	str.w	fp, [r5], #4
 800ccc0:	eba5 050a 	sub.w	r5, r5, sl
 800ccc4:	10ad      	asrs	r5, r5, #2
 800ccc6:	6125      	str	r5, [r4, #16]
 800ccc8:	4658      	mov	r0, fp
 800ccca:	f7fe f853 	bl	800ad74 <__hi0bits>
 800ccce:	016d      	lsls	r5, r5, #5
 800ccd0:	f8d8 6000 	ldr.w	r6, [r8]
 800ccd4:	1a2d      	subs	r5, r5, r0
 800ccd6:	42b5      	cmp	r5, r6
 800ccd8:	dd54      	ble.n	800cd84 <__gethex+0x228>
 800ccda:	1bad      	subs	r5, r5, r6
 800ccdc:	4629      	mov	r1, r5
 800ccde:	4620      	mov	r0, r4
 800cce0:	f7fe fbdf 	bl	800b4a2 <__any_on>
 800cce4:	4681      	mov	r9, r0
 800cce6:	b178      	cbz	r0, 800cd08 <__gethex+0x1ac>
 800cce8:	1e6b      	subs	r3, r5, #1
 800ccea:	1159      	asrs	r1, r3, #5
 800ccec:	f003 021f 	and.w	r2, r3, #31
 800ccf0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ccf4:	f04f 0901 	mov.w	r9, #1
 800ccf8:	fa09 f202 	lsl.w	r2, r9, r2
 800ccfc:	420a      	tst	r2, r1
 800ccfe:	d003      	beq.n	800cd08 <__gethex+0x1ac>
 800cd00:	454b      	cmp	r3, r9
 800cd02:	dc36      	bgt.n	800cd72 <__gethex+0x216>
 800cd04:	f04f 0902 	mov.w	r9, #2
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f7ff febe 	bl	800ca8c <rshift>
 800cd10:	442f      	add	r7, r5
 800cd12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd16:	42bb      	cmp	r3, r7
 800cd18:	da42      	bge.n	800cda0 <__gethex+0x244>
 800cd1a:	9801      	ldr	r0, [sp, #4]
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	f7fd ff77 	bl	800ac10 <_Bfree>
 800cd22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd24:	2300      	movs	r3, #0
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	25a3      	movs	r5, #163	@ 0xa3
 800cd2a:	e793      	b.n	800cc54 <__gethex+0xf8>
 800cd2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cd30:	2a2e      	cmp	r2, #46	@ 0x2e
 800cd32:	d012      	beq.n	800cd5a <__gethex+0x1fe>
 800cd34:	2b20      	cmp	r3, #32
 800cd36:	d104      	bne.n	800cd42 <__gethex+0x1e6>
 800cd38:	f845 bb04 	str.w	fp, [r5], #4
 800cd3c:	f04f 0b00 	mov.w	fp, #0
 800cd40:	465b      	mov	r3, fp
 800cd42:	7830      	ldrb	r0, [r6, #0]
 800cd44:	9303      	str	r3, [sp, #12]
 800cd46:	f7ff fef3 	bl	800cb30 <__hexdig_fun>
 800cd4a:	9b03      	ldr	r3, [sp, #12]
 800cd4c:	f000 000f 	and.w	r0, r0, #15
 800cd50:	4098      	lsls	r0, r3
 800cd52:	ea4b 0b00 	orr.w	fp, fp, r0
 800cd56:	3304      	adds	r3, #4
 800cd58:	e7ae      	b.n	800ccb8 <__gethex+0x15c>
 800cd5a:	45b1      	cmp	r9, r6
 800cd5c:	d8ea      	bhi.n	800cd34 <__gethex+0x1d8>
 800cd5e:	492b      	ldr	r1, [pc, #172]	@ (800ce0c <__gethex+0x2b0>)
 800cd60:	9303      	str	r3, [sp, #12]
 800cd62:	2201      	movs	r2, #1
 800cd64:	4630      	mov	r0, r6
 800cd66:	f7ff fe03 	bl	800c970 <strncmp>
 800cd6a:	9b03      	ldr	r3, [sp, #12]
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	d1e1      	bne.n	800cd34 <__gethex+0x1d8>
 800cd70:	e7a2      	b.n	800ccb8 <__gethex+0x15c>
 800cd72:	1ea9      	subs	r1, r5, #2
 800cd74:	4620      	mov	r0, r4
 800cd76:	f7fe fb94 	bl	800b4a2 <__any_on>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d0c2      	beq.n	800cd04 <__gethex+0x1a8>
 800cd7e:	f04f 0903 	mov.w	r9, #3
 800cd82:	e7c1      	b.n	800cd08 <__gethex+0x1ac>
 800cd84:	da09      	bge.n	800cd9a <__gethex+0x23e>
 800cd86:	1b75      	subs	r5, r6, r5
 800cd88:	4621      	mov	r1, r4
 800cd8a:	9801      	ldr	r0, [sp, #4]
 800cd8c:	462a      	mov	r2, r5
 800cd8e:	f7fe f94f 	bl	800b030 <__lshift>
 800cd92:	1b7f      	subs	r7, r7, r5
 800cd94:	4604      	mov	r4, r0
 800cd96:	f100 0a14 	add.w	sl, r0, #20
 800cd9a:	f04f 0900 	mov.w	r9, #0
 800cd9e:	e7b8      	b.n	800cd12 <__gethex+0x1b6>
 800cda0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cda4:	42bd      	cmp	r5, r7
 800cda6:	dd6f      	ble.n	800ce88 <__gethex+0x32c>
 800cda8:	1bed      	subs	r5, r5, r7
 800cdaa:	42ae      	cmp	r6, r5
 800cdac:	dc34      	bgt.n	800ce18 <__gethex+0x2bc>
 800cdae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d022      	beq.n	800cdfc <__gethex+0x2a0>
 800cdb6:	2b03      	cmp	r3, #3
 800cdb8:	d024      	beq.n	800ce04 <__gethex+0x2a8>
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d115      	bne.n	800cdea <__gethex+0x28e>
 800cdbe:	42ae      	cmp	r6, r5
 800cdc0:	d113      	bne.n	800cdea <__gethex+0x28e>
 800cdc2:	2e01      	cmp	r6, #1
 800cdc4:	d10b      	bne.n	800cdde <__gethex+0x282>
 800cdc6:	9a02      	ldr	r2, [sp, #8]
 800cdc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdcc:	6013      	str	r3, [r2, #0]
 800cdce:	2301      	movs	r3, #1
 800cdd0:	6123      	str	r3, [r4, #16]
 800cdd2:	f8ca 3000 	str.w	r3, [sl]
 800cdd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdd8:	2562      	movs	r5, #98	@ 0x62
 800cdda:	601c      	str	r4, [r3, #0]
 800cddc:	e73a      	b.n	800cc54 <__gethex+0xf8>
 800cdde:	1e71      	subs	r1, r6, #1
 800cde0:	4620      	mov	r0, r4
 800cde2:	f7fe fb5e 	bl	800b4a2 <__any_on>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d1ed      	bne.n	800cdc6 <__gethex+0x26a>
 800cdea:	9801      	ldr	r0, [sp, #4]
 800cdec:	4621      	mov	r1, r4
 800cdee:	f7fd ff0f 	bl	800ac10 <_Bfree>
 800cdf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	2550      	movs	r5, #80	@ 0x50
 800cdfa:	e72b      	b.n	800cc54 <__gethex+0xf8>
 800cdfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1f3      	bne.n	800cdea <__gethex+0x28e>
 800ce02:	e7e0      	b.n	800cdc6 <__gethex+0x26a>
 800ce04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1dd      	bne.n	800cdc6 <__gethex+0x26a>
 800ce0a:	e7ee      	b.n	800cdea <__gethex+0x28e>
 800ce0c:	0800d7fb 	.word	0x0800d7fb
 800ce10:	0800d791 	.word	0x0800d791
 800ce14:	0800d852 	.word	0x0800d852
 800ce18:	1e6f      	subs	r7, r5, #1
 800ce1a:	f1b9 0f00 	cmp.w	r9, #0
 800ce1e:	d130      	bne.n	800ce82 <__gethex+0x326>
 800ce20:	b127      	cbz	r7, 800ce2c <__gethex+0x2d0>
 800ce22:	4639      	mov	r1, r7
 800ce24:	4620      	mov	r0, r4
 800ce26:	f7fe fb3c 	bl	800b4a2 <__any_on>
 800ce2a:	4681      	mov	r9, r0
 800ce2c:	117a      	asrs	r2, r7, #5
 800ce2e:	2301      	movs	r3, #1
 800ce30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ce34:	f007 071f 	and.w	r7, r7, #31
 800ce38:	40bb      	lsls	r3, r7
 800ce3a:	4213      	tst	r3, r2
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	4620      	mov	r0, r4
 800ce40:	bf18      	it	ne
 800ce42:	f049 0902 	orrne.w	r9, r9, #2
 800ce46:	f7ff fe21 	bl	800ca8c <rshift>
 800ce4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ce4e:	1b76      	subs	r6, r6, r5
 800ce50:	2502      	movs	r5, #2
 800ce52:	f1b9 0f00 	cmp.w	r9, #0
 800ce56:	d047      	beq.n	800cee8 <__gethex+0x38c>
 800ce58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d015      	beq.n	800ce8c <__gethex+0x330>
 800ce60:	2b03      	cmp	r3, #3
 800ce62:	d017      	beq.n	800ce94 <__gethex+0x338>
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d109      	bne.n	800ce7c <__gethex+0x320>
 800ce68:	f019 0f02 	tst.w	r9, #2
 800ce6c:	d006      	beq.n	800ce7c <__gethex+0x320>
 800ce6e:	f8da 3000 	ldr.w	r3, [sl]
 800ce72:	ea49 0903 	orr.w	r9, r9, r3
 800ce76:	f019 0f01 	tst.w	r9, #1
 800ce7a:	d10e      	bne.n	800ce9a <__gethex+0x33e>
 800ce7c:	f045 0510 	orr.w	r5, r5, #16
 800ce80:	e032      	b.n	800cee8 <__gethex+0x38c>
 800ce82:	f04f 0901 	mov.w	r9, #1
 800ce86:	e7d1      	b.n	800ce2c <__gethex+0x2d0>
 800ce88:	2501      	movs	r5, #1
 800ce8a:	e7e2      	b.n	800ce52 <__gethex+0x2f6>
 800ce8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce8e:	f1c3 0301 	rsb	r3, r3, #1
 800ce92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d0f0      	beq.n	800ce7c <__gethex+0x320>
 800ce9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce9e:	f104 0314 	add.w	r3, r4, #20
 800cea2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cea6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ceaa:	f04f 0c00 	mov.w	ip, #0
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ceb8:	d01b      	beq.n	800cef2 <__gethex+0x396>
 800ceba:	3201      	adds	r2, #1
 800cebc:	6002      	str	r2, [r0, #0]
 800cebe:	2d02      	cmp	r5, #2
 800cec0:	f104 0314 	add.w	r3, r4, #20
 800cec4:	d13c      	bne.n	800cf40 <__gethex+0x3e4>
 800cec6:	f8d8 2000 	ldr.w	r2, [r8]
 800ceca:	3a01      	subs	r2, #1
 800cecc:	42b2      	cmp	r2, r6
 800cece:	d109      	bne.n	800cee4 <__gethex+0x388>
 800ced0:	1171      	asrs	r1, r6, #5
 800ced2:	2201      	movs	r2, #1
 800ced4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ced8:	f006 061f 	and.w	r6, r6, #31
 800cedc:	fa02 f606 	lsl.w	r6, r2, r6
 800cee0:	421e      	tst	r6, r3
 800cee2:	d13a      	bne.n	800cf5a <__gethex+0x3fe>
 800cee4:	f045 0520 	orr.w	r5, r5, #32
 800cee8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceea:	601c      	str	r4, [r3, #0]
 800ceec:	9b02      	ldr	r3, [sp, #8]
 800ceee:	601f      	str	r7, [r3, #0]
 800cef0:	e6b0      	b.n	800cc54 <__gethex+0xf8>
 800cef2:	4299      	cmp	r1, r3
 800cef4:	f843 cc04 	str.w	ip, [r3, #-4]
 800cef8:	d8d9      	bhi.n	800ceae <__gethex+0x352>
 800cefa:	68a3      	ldr	r3, [r4, #8]
 800cefc:	459b      	cmp	fp, r3
 800cefe:	db17      	blt.n	800cf30 <__gethex+0x3d4>
 800cf00:	6861      	ldr	r1, [r4, #4]
 800cf02:	9801      	ldr	r0, [sp, #4]
 800cf04:	3101      	adds	r1, #1
 800cf06:	f7fd fe43 	bl	800ab90 <_Balloc>
 800cf0a:	4681      	mov	r9, r0
 800cf0c:	b918      	cbnz	r0, 800cf16 <__gethex+0x3ba>
 800cf0e:	4b1a      	ldr	r3, [pc, #104]	@ (800cf78 <__gethex+0x41c>)
 800cf10:	4602      	mov	r2, r0
 800cf12:	2184      	movs	r1, #132	@ 0x84
 800cf14:	e6c5      	b.n	800cca2 <__gethex+0x146>
 800cf16:	6922      	ldr	r2, [r4, #16]
 800cf18:	3202      	adds	r2, #2
 800cf1a:	f104 010c 	add.w	r1, r4, #12
 800cf1e:	0092      	lsls	r2, r2, #2
 800cf20:	300c      	adds	r0, #12
 800cf22:	f7ff fd69 	bl	800c9f8 <memcpy>
 800cf26:	4621      	mov	r1, r4
 800cf28:	9801      	ldr	r0, [sp, #4]
 800cf2a:	f7fd fe71 	bl	800ac10 <_Bfree>
 800cf2e:	464c      	mov	r4, r9
 800cf30:	6923      	ldr	r3, [r4, #16]
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf38:	6122      	str	r2, [r4, #16]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	615a      	str	r2, [r3, #20]
 800cf3e:	e7be      	b.n	800cebe <__gethex+0x362>
 800cf40:	6922      	ldr	r2, [r4, #16]
 800cf42:	455a      	cmp	r2, fp
 800cf44:	dd0b      	ble.n	800cf5e <__gethex+0x402>
 800cf46:	2101      	movs	r1, #1
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f7ff fd9f 	bl	800ca8c <rshift>
 800cf4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf52:	3701      	adds	r7, #1
 800cf54:	42bb      	cmp	r3, r7
 800cf56:	f6ff aee0 	blt.w	800cd1a <__gethex+0x1be>
 800cf5a:	2501      	movs	r5, #1
 800cf5c:	e7c2      	b.n	800cee4 <__gethex+0x388>
 800cf5e:	f016 061f 	ands.w	r6, r6, #31
 800cf62:	d0fa      	beq.n	800cf5a <__gethex+0x3fe>
 800cf64:	4453      	add	r3, sl
 800cf66:	f1c6 0620 	rsb	r6, r6, #32
 800cf6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cf6e:	f7fd ff01 	bl	800ad74 <__hi0bits>
 800cf72:	42b0      	cmp	r0, r6
 800cf74:	dbe7      	blt.n	800cf46 <__gethex+0x3ea>
 800cf76:	e7f0      	b.n	800cf5a <__gethex+0x3fe>
 800cf78:	0800d791 	.word	0x0800d791

0800cf7c <L_shift>:
 800cf7c:	f1c2 0208 	rsb	r2, r2, #8
 800cf80:	0092      	lsls	r2, r2, #2
 800cf82:	b570      	push	{r4, r5, r6, lr}
 800cf84:	f1c2 0620 	rsb	r6, r2, #32
 800cf88:	6843      	ldr	r3, [r0, #4]
 800cf8a:	6804      	ldr	r4, [r0, #0]
 800cf8c:	fa03 f506 	lsl.w	r5, r3, r6
 800cf90:	432c      	orrs	r4, r5
 800cf92:	40d3      	lsrs	r3, r2
 800cf94:	6004      	str	r4, [r0, #0]
 800cf96:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf9a:	4288      	cmp	r0, r1
 800cf9c:	d3f4      	bcc.n	800cf88 <L_shift+0xc>
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}

0800cfa0 <__match>:
 800cfa0:	b530      	push	{r4, r5, lr}
 800cfa2:	6803      	ldr	r3, [r0, #0]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfaa:	b914      	cbnz	r4, 800cfb2 <__match+0x12>
 800cfac:	6003      	str	r3, [r0, #0]
 800cfae:	2001      	movs	r0, #1
 800cfb0:	bd30      	pop	{r4, r5, pc}
 800cfb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfb6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cfba:	2d19      	cmp	r5, #25
 800cfbc:	bf98      	it	ls
 800cfbe:	3220      	addls	r2, #32
 800cfc0:	42a2      	cmp	r2, r4
 800cfc2:	d0f0      	beq.n	800cfa6 <__match+0x6>
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	e7f3      	b.n	800cfb0 <__match+0x10>

0800cfc8 <__hexnan>:
 800cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfcc:	680b      	ldr	r3, [r1, #0]
 800cfce:	6801      	ldr	r1, [r0, #0]
 800cfd0:	115e      	asrs	r6, r3, #5
 800cfd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cfd6:	f013 031f 	ands.w	r3, r3, #31
 800cfda:	b087      	sub	sp, #28
 800cfdc:	bf18      	it	ne
 800cfde:	3604      	addne	r6, #4
 800cfe0:	2500      	movs	r5, #0
 800cfe2:	1f37      	subs	r7, r6, #4
 800cfe4:	4682      	mov	sl, r0
 800cfe6:	4690      	mov	r8, r2
 800cfe8:	9301      	str	r3, [sp, #4]
 800cfea:	f846 5c04 	str.w	r5, [r6, #-4]
 800cfee:	46b9      	mov	r9, r7
 800cff0:	463c      	mov	r4, r7
 800cff2:	9502      	str	r5, [sp, #8]
 800cff4:	46ab      	mov	fp, r5
 800cff6:	784a      	ldrb	r2, [r1, #1]
 800cff8:	1c4b      	adds	r3, r1, #1
 800cffa:	9303      	str	r3, [sp, #12]
 800cffc:	b342      	cbz	r2, 800d050 <__hexnan+0x88>
 800cffe:	4610      	mov	r0, r2
 800d000:	9105      	str	r1, [sp, #20]
 800d002:	9204      	str	r2, [sp, #16]
 800d004:	f7ff fd94 	bl	800cb30 <__hexdig_fun>
 800d008:	2800      	cmp	r0, #0
 800d00a:	d151      	bne.n	800d0b0 <__hexnan+0xe8>
 800d00c:	9a04      	ldr	r2, [sp, #16]
 800d00e:	9905      	ldr	r1, [sp, #20]
 800d010:	2a20      	cmp	r2, #32
 800d012:	d818      	bhi.n	800d046 <__hexnan+0x7e>
 800d014:	9b02      	ldr	r3, [sp, #8]
 800d016:	459b      	cmp	fp, r3
 800d018:	dd13      	ble.n	800d042 <__hexnan+0x7a>
 800d01a:	454c      	cmp	r4, r9
 800d01c:	d206      	bcs.n	800d02c <__hexnan+0x64>
 800d01e:	2d07      	cmp	r5, #7
 800d020:	dc04      	bgt.n	800d02c <__hexnan+0x64>
 800d022:	462a      	mov	r2, r5
 800d024:	4649      	mov	r1, r9
 800d026:	4620      	mov	r0, r4
 800d028:	f7ff ffa8 	bl	800cf7c <L_shift>
 800d02c:	4544      	cmp	r4, r8
 800d02e:	d952      	bls.n	800d0d6 <__hexnan+0x10e>
 800d030:	2300      	movs	r3, #0
 800d032:	f1a4 0904 	sub.w	r9, r4, #4
 800d036:	f844 3c04 	str.w	r3, [r4, #-4]
 800d03a:	f8cd b008 	str.w	fp, [sp, #8]
 800d03e:	464c      	mov	r4, r9
 800d040:	461d      	mov	r5, r3
 800d042:	9903      	ldr	r1, [sp, #12]
 800d044:	e7d7      	b.n	800cff6 <__hexnan+0x2e>
 800d046:	2a29      	cmp	r2, #41	@ 0x29
 800d048:	d157      	bne.n	800d0fa <__hexnan+0x132>
 800d04a:	3102      	adds	r1, #2
 800d04c:	f8ca 1000 	str.w	r1, [sl]
 800d050:	f1bb 0f00 	cmp.w	fp, #0
 800d054:	d051      	beq.n	800d0fa <__hexnan+0x132>
 800d056:	454c      	cmp	r4, r9
 800d058:	d206      	bcs.n	800d068 <__hexnan+0xa0>
 800d05a:	2d07      	cmp	r5, #7
 800d05c:	dc04      	bgt.n	800d068 <__hexnan+0xa0>
 800d05e:	462a      	mov	r2, r5
 800d060:	4649      	mov	r1, r9
 800d062:	4620      	mov	r0, r4
 800d064:	f7ff ff8a 	bl	800cf7c <L_shift>
 800d068:	4544      	cmp	r4, r8
 800d06a:	d936      	bls.n	800d0da <__hexnan+0x112>
 800d06c:	f1a8 0204 	sub.w	r2, r8, #4
 800d070:	4623      	mov	r3, r4
 800d072:	f853 1b04 	ldr.w	r1, [r3], #4
 800d076:	f842 1f04 	str.w	r1, [r2, #4]!
 800d07a:	429f      	cmp	r7, r3
 800d07c:	d2f9      	bcs.n	800d072 <__hexnan+0xaa>
 800d07e:	1b3b      	subs	r3, r7, r4
 800d080:	f023 0303 	bic.w	r3, r3, #3
 800d084:	3304      	adds	r3, #4
 800d086:	3401      	adds	r4, #1
 800d088:	3e03      	subs	r6, #3
 800d08a:	42b4      	cmp	r4, r6
 800d08c:	bf88      	it	hi
 800d08e:	2304      	movhi	r3, #4
 800d090:	4443      	add	r3, r8
 800d092:	2200      	movs	r2, #0
 800d094:	f843 2b04 	str.w	r2, [r3], #4
 800d098:	429f      	cmp	r7, r3
 800d09a:	d2fb      	bcs.n	800d094 <__hexnan+0xcc>
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	b91b      	cbnz	r3, 800d0a8 <__hexnan+0xe0>
 800d0a0:	4547      	cmp	r7, r8
 800d0a2:	d128      	bne.n	800d0f6 <__hexnan+0x12e>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	603b      	str	r3, [r7, #0]
 800d0a8:	2005      	movs	r0, #5
 800d0aa:	b007      	add	sp, #28
 800d0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b0:	3501      	adds	r5, #1
 800d0b2:	2d08      	cmp	r5, #8
 800d0b4:	f10b 0b01 	add.w	fp, fp, #1
 800d0b8:	dd06      	ble.n	800d0c8 <__hexnan+0x100>
 800d0ba:	4544      	cmp	r4, r8
 800d0bc:	d9c1      	bls.n	800d042 <__hexnan+0x7a>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0c4:	2501      	movs	r5, #1
 800d0c6:	3c04      	subs	r4, #4
 800d0c8:	6822      	ldr	r2, [r4, #0]
 800d0ca:	f000 000f 	and.w	r0, r0, #15
 800d0ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d0d2:	6020      	str	r0, [r4, #0]
 800d0d4:	e7b5      	b.n	800d042 <__hexnan+0x7a>
 800d0d6:	2508      	movs	r5, #8
 800d0d8:	e7b3      	b.n	800d042 <__hexnan+0x7a>
 800d0da:	9b01      	ldr	r3, [sp, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d0dd      	beq.n	800d09c <__hexnan+0xd4>
 800d0e0:	f1c3 0320 	rsb	r3, r3, #32
 800d0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e8:	40da      	lsrs	r2, r3
 800d0ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d0f4:	e7d2      	b.n	800d09c <__hexnan+0xd4>
 800d0f6:	3f04      	subs	r7, #4
 800d0f8:	e7d0      	b.n	800d09c <__hexnan+0xd4>
 800d0fa:	2004      	movs	r0, #4
 800d0fc:	e7d5      	b.n	800d0aa <__hexnan+0xe2>

0800d0fe <__ascii_mbtowc>:
 800d0fe:	b082      	sub	sp, #8
 800d100:	b901      	cbnz	r1, 800d104 <__ascii_mbtowc+0x6>
 800d102:	a901      	add	r1, sp, #4
 800d104:	b142      	cbz	r2, 800d118 <__ascii_mbtowc+0x1a>
 800d106:	b14b      	cbz	r3, 800d11c <__ascii_mbtowc+0x1e>
 800d108:	7813      	ldrb	r3, [r2, #0]
 800d10a:	600b      	str	r3, [r1, #0]
 800d10c:	7812      	ldrb	r2, [r2, #0]
 800d10e:	1e10      	subs	r0, r2, #0
 800d110:	bf18      	it	ne
 800d112:	2001      	movne	r0, #1
 800d114:	b002      	add	sp, #8
 800d116:	4770      	bx	lr
 800d118:	4610      	mov	r0, r2
 800d11a:	e7fb      	b.n	800d114 <__ascii_mbtowc+0x16>
 800d11c:	f06f 0001 	mvn.w	r0, #1
 800d120:	e7f8      	b.n	800d114 <__ascii_mbtowc+0x16>

0800d122 <_realloc_r>:
 800d122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d126:	4607      	mov	r7, r0
 800d128:	4614      	mov	r4, r2
 800d12a:	460d      	mov	r5, r1
 800d12c:	b921      	cbnz	r1, 800d138 <_realloc_r+0x16>
 800d12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d132:	4611      	mov	r1, r2
 800d134:	f7fd bca0 	b.w	800aa78 <_malloc_r>
 800d138:	b92a      	cbnz	r2, 800d146 <_realloc_r+0x24>
 800d13a:	f7fd fc29 	bl	800a990 <_free_r>
 800d13e:	4625      	mov	r5, r4
 800d140:	4628      	mov	r0, r5
 800d142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d146:	f000 f840 	bl	800d1ca <_malloc_usable_size_r>
 800d14a:	4284      	cmp	r4, r0
 800d14c:	4606      	mov	r6, r0
 800d14e:	d802      	bhi.n	800d156 <_realloc_r+0x34>
 800d150:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d154:	d8f4      	bhi.n	800d140 <_realloc_r+0x1e>
 800d156:	4621      	mov	r1, r4
 800d158:	4638      	mov	r0, r7
 800d15a:	f7fd fc8d 	bl	800aa78 <_malloc_r>
 800d15e:	4680      	mov	r8, r0
 800d160:	b908      	cbnz	r0, 800d166 <_realloc_r+0x44>
 800d162:	4645      	mov	r5, r8
 800d164:	e7ec      	b.n	800d140 <_realloc_r+0x1e>
 800d166:	42b4      	cmp	r4, r6
 800d168:	4622      	mov	r2, r4
 800d16a:	4629      	mov	r1, r5
 800d16c:	bf28      	it	cs
 800d16e:	4632      	movcs	r2, r6
 800d170:	f7ff fc42 	bl	800c9f8 <memcpy>
 800d174:	4629      	mov	r1, r5
 800d176:	4638      	mov	r0, r7
 800d178:	f7fd fc0a 	bl	800a990 <_free_r>
 800d17c:	e7f1      	b.n	800d162 <_realloc_r+0x40>

0800d17e <__ascii_wctomb>:
 800d17e:	4603      	mov	r3, r0
 800d180:	4608      	mov	r0, r1
 800d182:	b141      	cbz	r1, 800d196 <__ascii_wctomb+0x18>
 800d184:	2aff      	cmp	r2, #255	@ 0xff
 800d186:	d904      	bls.n	800d192 <__ascii_wctomb+0x14>
 800d188:	228a      	movs	r2, #138	@ 0x8a
 800d18a:	601a      	str	r2, [r3, #0]
 800d18c:	f04f 30ff 	mov.w	r0, #4294967295
 800d190:	4770      	bx	lr
 800d192:	700a      	strb	r2, [r1, #0]
 800d194:	2001      	movs	r0, #1
 800d196:	4770      	bx	lr

0800d198 <fiprintf>:
 800d198:	b40e      	push	{r1, r2, r3}
 800d19a:	b503      	push	{r0, r1, lr}
 800d19c:	4601      	mov	r1, r0
 800d19e:	ab03      	add	r3, sp, #12
 800d1a0:	4805      	ldr	r0, [pc, #20]	@ (800d1b8 <fiprintf+0x20>)
 800d1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1a6:	6800      	ldr	r0, [r0, #0]
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	f7ff f9a1 	bl	800c4f0 <_vfiprintf_r>
 800d1ae:	b002      	add	sp, #8
 800d1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1b4:	b003      	add	sp, #12
 800d1b6:	4770      	bx	lr
 800d1b8:	20000070 	.word	0x20000070

0800d1bc <abort>:
 800d1bc:	b508      	push	{r3, lr}
 800d1be:	2006      	movs	r0, #6
 800d1c0:	f000 f834 	bl	800d22c <raise>
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	f7f5 facd 	bl	8002764 <_exit>

0800d1ca <_malloc_usable_size_r>:
 800d1ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ce:	1f18      	subs	r0, r3, #4
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	bfbc      	itt	lt
 800d1d4:	580b      	ldrlt	r3, [r1, r0]
 800d1d6:	18c0      	addlt	r0, r0, r3
 800d1d8:	4770      	bx	lr

0800d1da <_raise_r>:
 800d1da:	291f      	cmp	r1, #31
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4605      	mov	r5, r0
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	d904      	bls.n	800d1ee <_raise_r+0x14>
 800d1e4:	2316      	movs	r3, #22
 800d1e6:	6003      	str	r3, [r0, #0]
 800d1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ec:	bd38      	pop	{r3, r4, r5, pc}
 800d1ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1f0:	b112      	cbz	r2, 800d1f8 <_raise_r+0x1e>
 800d1f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1f6:	b94b      	cbnz	r3, 800d20c <_raise_r+0x32>
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f000 f831 	bl	800d260 <_getpid_r>
 800d1fe:	4622      	mov	r2, r4
 800d200:	4601      	mov	r1, r0
 800d202:	4628      	mov	r0, r5
 800d204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d208:	f000 b818 	b.w	800d23c <_kill_r>
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d00a      	beq.n	800d226 <_raise_r+0x4c>
 800d210:	1c59      	adds	r1, r3, #1
 800d212:	d103      	bne.n	800d21c <_raise_r+0x42>
 800d214:	2316      	movs	r3, #22
 800d216:	6003      	str	r3, [r0, #0]
 800d218:	2001      	movs	r0, #1
 800d21a:	e7e7      	b.n	800d1ec <_raise_r+0x12>
 800d21c:	2100      	movs	r1, #0
 800d21e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d222:	4620      	mov	r0, r4
 800d224:	4798      	blx	r3
 800d226:	2000      	movs	r0, #0
 800d228:	e7e0      	b.n	800d1ec <_raise_r+0x12>
	...

0800d22c <raise>:
 800d22c:	4b02      	ldr	r3, [pc, #8]	@ (800d238 <raise+0xc>)
 800d22e:	4601      	mov	r1, r0
 800d230:	6818      	ldr	r0, [r3, #0]
 800d232:	f7ff bfd2 	b.w	800d1da <_raise_r>
 800d236:	bf00      	nop
 800d238:	20000070 	.word	0x20000070

0800d23c <_kill_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4d07      	ldr	r5, [pc, #28]	@ (800d25c <_kill_r+0x20>)
 800d240:	2300      	movs	r3, #0
 800d242:	4604      	mov	r4, r0
 800d244:	4608      	mov	r0, r1
 800d246:	4611      	mov	r1, r2
 800d248:	602b      	str	r3, [r5, #0]
 800d24a:	f7f5 fa7b 	bl	8002744 <_kill>
 800d24e:	1c43      	adds	r3, r0, #1
 800d250:	d102      	bne.n	800d258 <_kill_r+0x1c>
 800d252:	682b      	ldr	r3, [r5, #0]
 800d254:	b103      	cbz	r3, 800d258 <_kill_r+0x1c>
 800d256:	6023      	str	r3, [r4, #0]
 800d258:	bd38      	pop	{r3, r4, r5, pc}
 800d25a:	bf00      	nop
 800d25c:	20000610 	.word	0x20000610

0800d260 <_getpid_r>:
 800d260:	f7f5 ba68 	b.w	8002734 <_getpid>

0800d264 <_init>:
 800d264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d266:	bf00      	nop
 800d268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d26a:	bc08      	pop	{r3}
 800d26c:	469e      	mov	lr, r3
 800d26e:	4770      	bx	lr

0800d270 <_fini>:
 800d270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d272:	bf00      	nop
 800d274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d276:	bc08      	pop	{r3}
 800d278:	469e      	mov	lr, r3
 800d27a:	4770      	bx	lr
