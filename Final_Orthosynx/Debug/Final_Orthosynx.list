
Final_Orthosynx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dca4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0800de78  0800de78  0000ee78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebfc  0800ebfc  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ebfc  0800ebfc  0000fbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec04  0800ec04  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec04  0800ec04  0000fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec08  0800ec08  0000fc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ec0c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200001d8  0800ede4  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  0800ede4  00010640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019932  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002792  00000000  00000000  00029b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0002c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001529  00000000  00000000  0002dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002571d  00000000  00000000  0002f1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d616  00000000  00000000  00054916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e455f  00000000  00000000  00071f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015648b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008aec  00000000  00000000  001564d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015efbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800de5c 	.word	0x0800de5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800de5c 	.word	0x0800de5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001068:	23ff      	movs	r3, #255	@ 0xff
 800106a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 800106c:	2300      	movs	r3, #0
 800106e:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8001070:	2300      	movs	r3, #0
 8001072:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001074:	2300      	movs	r3, #0
 8001076:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8001078:	4a58      	ldr	r2, [pc, #352]	@ (80011dc <bno055_init+0x17c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800107e:	4b57      	ldr	r3, [pc, #348]	@ (80011dc <bno055_init+0x17c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68dc      	ldr	r4, [r3, #12]
 8001084:	4b55      	ldr	r3, [pc, #340]	@ (80011dc <bno055_init+0x17c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	7a58      	ldrb	r0, [r3, #9]
 800108a:	f107 020d 	add.w	r2, r7, #13
 800108e:	2301      	movs	r3, #1
 8001090:	2107      	movs	r1, #7
 8001092:	47a0      	blx	r4
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001098:	4b50      	ldr	r3, [pc, #320]	@ (80011dc <bno055_init+0x17c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	691c      	ldr	r4, [r3, #16]
 800109e:	4b4f      	ldr	r3, [pc, #316]	@ (80011dc <bno055_init+0x17c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	7a58      	ldrb	r0, [r3, #9]
 80010a4:	f107 020e 	add.w	r2, r7, #14
 80010a8:	2301      	movs	r3, #1
 80010aa:	2100      	movs	r1, #0
 80010ac:	47a0      	blx	r4
 80010ae:	4603      	mov	r3, r0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	4413      	add	r3, r2
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 80010ba:	4b48      	ldr	r3, [pc, #288]	@ (80011dc <bno055_init+0x17c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	7bba      	ldrb	r2, [r7, #14]
 80010c0:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010c2:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <bno055_init+0x17c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	691c      	ldr	r4, [r3, #16]
 80010c8:	4b44      	ldr	r3, [pc, #272]	@ (80011dc <bno055_init+0x17c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7a58      	ldrb	r0, [r3, #9]
 80010ce:	f107 020e 	add.w	r2, r7, #14
 80010d2:	2301      	movs	r3, #1
 80010d4:	2101      	movs	r1, #1
 80010d6:	47a0      	blx	r4
 80010d8:	4603      	mov	r3, r0
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	4413      	add	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80010e4:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <bno055_init+0x17c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	7bba      	ldrb	r2, [r7, #14]
 80010ea:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010ec:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <bno055_init+0x17c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	691c      	ldr	r4, [r3, #16]
 80010f2:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <bno055_init+0x17c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	7a58      	ldrb	r0, [r3, #9]
 80010f8:	f107 020e 	add.w	r2, r7, #14
 80010fc:	2301      	movs	r3, #1
 80010fe:	2102      	movs	r1, #2
 8001100:	47a0      	blx	r4
 8001102:	4603      	mov	r3, r0
 8001104:	b2da      	uxtb	r2, r3
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	4413      	add	r3, r2
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 800110e:	4b33      	ldr	r3, [pc, #204]	@ (80011dc <bno055_init+0x17c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	7bba      	ldrb	r2, [r7, #14]
 8001114:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <bno055_init+0x17c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691c      	ldr	r4, [r3, #16]
 800111c:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <bno055_init+0x17c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	7a58      	ldrb	r0, [r3, #9]
 8001122:	f107 020e 	add.w	r2, r7, #14
 8001126:	2301      	movs	r3, #1
 8001128:	2103      	movs	r1, #3
 800112a:	47a0      	blx	r4
 800112c:	4603      	mov	r3, r0
 800112e:	b2da      	uxtb	r2, r3
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4413      	add	r3, r2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8001138:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <bno055_init+0x17c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	7bba      	ldrb	r2, [r7, #14]
 800113e:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <bno055_init+0x17c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	691c      	ldr	r4, [r3, #16]
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <bno055_init+0x17c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	7a58      	ldrb	r0, [r3, #9]
 800114c:	f107 020e 	add.w	r2, r7, #14
 8001150:	2301      	movs	r3, #1
 8001152:	2106      	movs	r1, #6
 8001154:	47a0      	blx	r4
 8001156:	4603      	mov	r3, r0
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	4413      	add	r3, r2
 800115e:	b2db      	uxtb	r3, r3
 8001160:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8001162:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <bno055_init+0x17c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	7bba      	ldrb	r2, [r7, #14]
 8001168:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <bno055_init+0x17c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	691c      	ldr	r4, [r3, #16]
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <bno055_init+0x17c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	7a58      	ldrb	r0, [r3, #9]
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	2302      	movs	r3, #2
 800117c:	2104      	movs	r1, #4
 800117e:	47a0      	blx	r4
 8001180:	4603      	mov	r3, r0
 8001182:	b2da      	uxtb	r2, r3
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	4413      	add	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 800118c:	7a3b      	ldrb	r3, [r7, #8]
 800118e:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b29a      	uxth	r2, r3
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <bno055_init+0x17c>)
 800119c:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 800119e:	430a      	orrs	r2, r1
 80011a0:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 80011a2:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011a4:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <bno055_init+0x17c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691c      	ldr	r4, [r3, #16]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <bno055_init+0x17c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	7a58      	ldrb	r0, [r3, #9]
 80011b0:	f107 020e 	add.w	r2, r7, #14
 80011b4:	2301      	movs	r3, #1
 80011b6:	2107      	movs	r1, #7
 80011b8:	47a0      	blx	r4
 80011ba:	4603      	mov	r3, r0
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4413      	add	r3, r2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 80011c6:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <bno055_init+0x17c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	7bba      	ldrb	r2, [r7, #14]
 80011cc:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001f4 	.word	0x200001f4

080011e0 <__io_putchar>:
	#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
	#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#endif
	PUTCHAR_PROTOTYPE {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011e8:	1d39      	adds	r1, r7, #4
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	2201      	movs	r2, #1
 80011f0:	4803      	ldr	r0, [pc, #12]	@ (8001200 <__io_putchar+0x20>)
 80011f2:	f007 f8dd 	bl	80083b0 <HAL_UART_Transmit>
	  return ch;
 80011f6:	687b      	ldr	r3, [r7, #4]
	}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200003a8 	.word	0x200003a8

08001204 <BNO055_Delay>:

	void BNO055_Delay(u32 ms)
	{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
		HAL_Delay(ms);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f002 f85d 	bl	80032cc <HAL_Delay>
		//REFRESH_WATCHDOG();
	}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <main>:
	/**
	  * @brief  The application entry point.
	  * @retval int
	  */
	int main(void)
	{
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	ed2d 8b02 	vpush	{d8}
 8001222:	b08c      	sub	sp, #48	@ 0x30
 8001224:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN 1 */
	  /* USER CODE END 1 */
		  /* MCU Configuration--------------------------------------------------------*/
		  HAL_Init();
 8001226:	f001 ffdf 	bl	80031e8 <HAL_Init>
		  SystemClock_Config();
 800122a:	f000 fa27 	bl	800167c <SystemClock_Config>
		  MX_GPIO_Init();
 800122e:	f000 fb97 	bl	8001960 <MX_GPIO_Init>
		  MX_USART2_UART_Init();
 8001232:	f000 fb3b 	bl	80018ac <MX_USART2_UART_Init>
		  MX_DMA_Init();
 8001236:	f000 fb63 	bl	8001900 <MX_DMA_Init>
		  MX_I2C1_Init();
 800123a:	f000 fa8d 	bl	8001758 <MX_I2C1_Init>
		  MX_I2C2_Init();
 800123e:	f000 fab9 	bl	80017b4 <MX_I2C2_Init>
		  // Configure I2C noise filtering
			  HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8001242:	2100      	movs	r1, #0
 8001244:	48a1      	ldr	r0, [pc, #644]	@ (80014cc <main+0x2b0>)
 8001246:	f005 fd28 	bl	8006c9a <HAL_I2CEx_ConfigAnalogFilter>
			  HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 3);
 800124a:	2103      	movs	r1, #3
 800124c:	489f      	ldr	r0, [pc, #636]	@ (80014cc <main+0x2b0>)
 800124e:	f005 fd60 	bl	8006d12 <HAL_I2CEx_ConfigDigitalFilter>
			  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 8001252:	2100      	movs	r1, #0
 8001254:	489e      	ldr	r0, [pc, #632]	@ (80014d0 <main+0x2b4>)
 8001256:	f005 fd20 	bl	8006c9a <HAL_I2CEx_ConfigAnalogFilter>
			  HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 3);
 800125a:	2103      	movs	r1, #3
 800125c:	489c      	ldr	r0, [pc, #624]	@ (80014d0 <main+0x2b4>)
 800125e:	f005 fd58 	bl	8006d12 <HAL_I2CEx_ConfigDigitalFilter>
		  MX_TIM3_Init();
 8001262:	f000 fad5 	bl	8001810 <MX_TIM3_Init>

		 // MX_WWDG_Init();

	  /* USER CODE BEGIN 2 */
	  // Configure interrupt priorities
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0); // I2C1 Event
 8001266:	2200      	movs	r2, #0
 8001268:	2101      	movs	r1, #1
 800126a:	201f      	movs	r0, #31
 800126c:	f002 f92d 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0); // I2C1 Error (highest priority)
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2020      	movs	r0, #32
 8001276:	f002 f928 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0); // I2C2 Event
 800127a:	2200      	movs	r2, #0
 800127c:	2101      	movs	r1, #1
 800127e:	2021      	movs	r0, #33	@ 0x21
 8001280:	f002 f923 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0); // I2C2 Error (highest priority)
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2022      	movs	r0, #34	@ 0x22
 800128a:	f002 f91e 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(USART2_IRQn, 1, 0); // USART2 global interrupt
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	2026      	movs	r0, #38	@ 0x26
 8001294:	f002 f919 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0); // Timer3 (lower priority)
 8001298:	2200      	movs	r2, #0
 800129a:	2102      	movs	r1, #2
 800129c:	201d      	movs	r0, #29
 800129e:	f002 f914 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(WWDG_IRQn, 0, 0); // Watchdog (highest priority)
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	f002 f90f 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0); // User Button
 80012ac:	2200      	movs	r2, #0
 80012ae:	2102      	movs	r1, #2
 80012b0:	2028      	movs	r0, #40	@ 0x28
 80012b2:	f002 f90a 	bl	80034ca <HAL_NVIC_SetPriority>
	  // Configure DMA interrupt priorities
	  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0); // I2C2_RX
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	200d      	movs	r0, #13
 80012bc:	f002 f905 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0); // I2C2_TX
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	202f      	movs	r0, #47	@ 0x2f
 80012c6:	f002 f900 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0); // USART2_TX
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2011      	movs	r0, #17
 80012d0:	f002 f8fb 	bl	80034ca <HAL_NVIC_SetPriority>

	  // Configure printf buffering
	  setbuf(stdout, NULL); // Disable buffering for immediate output
 80012d4:	4b7f      	ldr	r3, [pc, #508]	@ (80014d4 <main+0x2b8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f008 ffc5 	bl	800a26c <setbuf>
	  // Initialize Debug LED to OFF
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012e8:	487b      	ldr	r0, [pc, #492]	@ (80014d8 <main+0x2bc>)
 80012ea:	f002 fe43 	bl	8003f74 <HAL_GPIO_WritePin>
	  // Print startup message
	  printf("\r\n=== Prosthetic Knee Controller (BNO055 IMUPLUS) ===\r\n");
 80012ee:	487b      	ldr	r0, [pc, #492]	@ (80014dc <main+0x2c0>)
 80012f0:	f008 ffb4 	bl	800a25c <puts>
	  printf("System Clock: %lu Hz\r\n", HAL_RCC_GetSysClockFreq());
 80012f4:	f005 fe66 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4619      	mov	r1, r3
 80012fc:	4878      	ldr	r0, [pc, #480]	@ (80014e0 <main+0x2c4>)
 80012fe:	f008 ff45 	bl	800a18c <iprintf>
	  printf("Build: %s %s\r\n", __DATE__, __TIME__);
 8001302:	4a78      	ldr	r2, [pc, #480]	@ (80014e4 <main+0x2c8>)
 8001304:	4978      	ldr	r1, [pc, #480]	@ (80014e8 <main+0x2cc>)
 8001306:	4879      	ldr	r0, [pc, #484]	@ (80014ec <main+0x2d0>)
 8001308:	f008 ff40 	bl	800a18c <iprintf>

	  // Initialize IMU data structures
	  memset(&thigh_imu, 0, sizeof(IMU_Data_t));
 800130c:	2218      	movs	r2, #24
 800130e:	2100      	movs	r1, #0
 8001310:	4877      	ldr	r0, [pc, #476]	@ (80014f0 <main+0x2d4>)
 8001312:	f009 f961 	bl	800a5d8 <memset>
	  memset(&shank_imu, 0, sizeof(IMU_Data_t));
 8001316:	2218      	movs	r2, #24
 8001318:	2100      	movs	r1, #0
 800131a:	4876      	ldr	r0, [pc, #472]	@ (80014f4 <main+0x2d8>)
 800131c:	f009 f95c 	bl	800a5d8 <memset>

	  // LED startup sequence
	  printf("Starting initialization sequence...\r\n");
 8001320:	4875      	ldr	r0, [pc, #468]	@ (80014f8 <main+0x2dc>)
 8001322:	f008 ff9b 	bl	800a25c <puts>
	  for(int i = 0; i < 3; i++)
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800132a:	e009      	b.n	8001340 <main+0x124>
	  {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800132c:	2120      	movs	r1, #32
 800132e:	4873      	ldr	r0, [pc, #460]	@ (80014fc <main+0x2e0>)
 8001330:	f002 fe39 	bl	8003fa6 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001334:	20c8      	movs	r0, #200	@ 0xc8
 8001336:	f001 ffc9 	bl	80032cc <HAL_Delay>
	  for(int i = 0; i < 3; i++)
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	3301      	adds	r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001342:	2b02      	cmp	r3, #2
 8001344:	ddf2      	ble.n	800132c <main+0x110>
	//	REFRESH_WATCHDOG();
	  }
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2120      	movs	r1, #32
 800134a:	486c      	ldr	r0, [pc, #432]	@ (80014fc <main+0x2e0>)
 800134c:	f002 fe12 	bl	8003f74 <HAL_GPIO_WritePin>

	  // Wait for IMU power-up (BNO055 requires ~650ms)
	  printf("Waiting for IMU power-up...\r\n");
 8001350:	486b      	ldr	r0, [pc, #428]	@ (8001500 <main+0x2e4>)
 8001352:	f008 ff83 	bl	800a25c <puts>
	  BNO055_Delay(800);
 8001356:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800135a:	f7ff ff53 	bl	8001204 <BNO055_Delay>

	  // Scan I2C bus and assign addresses
	  I2C_Scan_And_Assign();
 800135e:	f000 fc01 	bl	8001b64 <I2C_Scan_And_Assign>

	  // Initialize both sensors
	  BNO055_Init_Dual();
 8001362:	f000 fedf 	bl	8002124 <BNO055_Init_Dual>

	  // Start calibration process
	  printf("\r\nStarting calibration process...\r\n");
 8001366:	4867      	ldr	r0, [pc, #412]	@ (8001504 <main+0x2e8>)
 8001368:	f008 ff78 	bl	800a25c <puts>
	  printf("Keep the prosthetic stationary during calibration!\r\n");
 800136c:	4866      	ldr	r0, [pc, #408]	@ (8001508 <main+0x2ec>)
 800136e:	f008 ff75 	bl	800a25c <puts>

	  uint32_t calibration_start = HAL_GetTick();
 8001372:	f001 ff9f 	bl	80032b4 <HAL_GetTick>
 8001376:	6278      	str	r0, [r7, #36]	@ 0x24
	  uint32_t last_status_print = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28

	  while (!calibration_complete && (HAL_GetTick() - calibration_start < CALIBRATION_TIMEOUT_MS))
 800137c:	e07b      	b.n	8001476 <main+0x25a>
	  {
		Read_Dual_Calibration();
 800137e:	f000 ff8d 	bl	800229c <Read_Dual_Calibration>

		// raw register dump for debugging
		uint8_t thigh_raw, shank_raw;
		BNO055_I2C_bus_read(thigh_sensor.dev_addr, BNO055_CALIB_STAT_ADDR, &thigh_raw, 1);
 8001382:	4b62      	ldr	r3, [pc, #392]	@ (800150c <main+0x2f0>)
 8001384:	7a58      	ldrb	r0, [r3, #9]
 8001386:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 800138a:	2301      	movs	r3, #1
 800138c:	2135      	movs	r1, #53	@ 0x35
 800138e:	f000 fb6f 	bl	8001a70 <BNO055_I2C_bus_read>
		BNO055_I2C_bus_read(shank_sensor.dev_addr, BNO055_CALIB_STAT_ADDR, &shank_raw, 1);
 8001392:	4b5f      	ldr	r3, [pc, #380]	@ (8001510 <main+0x2f4>)
 8001394:	7a58      	ldrb	r0, [r3, #9]
 8001396:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 800139a:	2301      	movs	r3, #1
 800139c:	2135      	movs	r1, #53	@ 0x35
 800139e:	f000 fb67 	bl	8001a70 <BNO055_I2C_bus_read>
		printf("Raw Calib Regs: Thigh=0x%02X, Shank=0x%02X\r\n", thigh_raw, shank_raw);
 80013a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013a6:	4619      	mov	r1, r3
 80013a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013ac:	461a      	mov	r2, r3
 80013ae:	4859      	ldr	r0, [pc, #356]	@ (8001514 <main+0x2f8>)
 80013b0:	f008 feec 	bl	800a18c <iprintf>

		// Print status every second
		if (HAL_GetTick() - last_status_print >= CALIB_PRINT_MS)
 80013b4:	f001 ff7e 	bl	80032b4 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013c2:	d304      	bcc.n	80013ce <main+0x1b2>
		{
		  print_calibration_status();
 80013c4:	f000 ffa2 	bl	800230c <print_calibration_status>
		  last_status_print = HAL_GetTick();
 80013c8:	f001 ff74 	bl	80032b4 <HAL_GetTick>
 80013cc:	62b8      	str	r0, [r7, #40]	@ 0x28
		}

		if (!calibration_complete) {
 80013ce:	4b52      	ldr	r3, [pc, #328]	@ (8001518 <main+0x2fc>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	f083 0301 	eor.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <main+0x1ca>
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // Amber LED blink
 80013dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013e0:	483d      	ldr	r0, [pc, #244]	@ (80014d8 <main+0x2bc>)
 80013e2:	f002 fde0 	bl	8003fa6 <HAL_GPIO_TogglePin>
		}

		// Check if both sensors are calibrated
		if (is_sensor_calibrated(thigh_imu.calib_status) &&
 80013e6:	484d      	ldr	r0, [pc, #308]	@ (800151c <main+0x300>)
 80013e8:	f000 ff3e 	bl	8002268 <is_sensor_calibrated>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d03e      	beq.n	8001470 <main+0x254>
			is_sensor_calibrated(shank_imu.calib_status))
 80013f2:	484b      	ldr	r0, [pc, #300]	@ (8001520 <main+0x304>)
 80013f4:	f000 ff38 	bl	8002268 <is_sensor_calibrated>
 80013f8:	4603      	mov	r3, r0
		if (is_sensor_calibrated(thigh_imu.calib_status) &&
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d038      	beq.n	8001470 <main+0x254>
		{
		  calibration_complete = true;
 80013fe:	4b46      	ldr	r3, [pc, #280]	@ (8001518 <main+0x2fc>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
		  // Switch to CONFIG mode to ensure calibration is applied
		  uint8_t config_mode = BNO055_OPERATION_MODE_CONFIG;
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		  BNO055_I2C_bus_write(thigh_sensor.dev_addr, BNO055_OPR_MODE_ADDR, &config_mode, 1);
 800140a:	4b40      	ldr	r3, [pc, #256]	@ (800150c <main+0x2f0>)
 800140c:	7a58      	ldrb	r0, [r3, #9]
 800140e:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8001412:	2301      	movs	r3, #1
 8001414:	213d      	movs	r1, #61	@ 0x3d
 8001416:	f000 fb67 	bl	8001ae8 <BNO055_I2C_bus_write>
		  BNO055_I2C_bus_write(shank_sensor.dev_addr, BNO055_OPR_MODE_ADDR, &config_mode, 1);
 800141a:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <main+0x2f4>)
 800141c:	7a58      	ldrb	r0, [r3, #9]
 800141e:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8001422:	2301      	movs	r3, #1
 8001424:	213d      	movs	r1, #61	@ 0x3d
 8001426:	f000 fb5f 	bl	8001ae8 <BNO055_I2C_bus_write>
		  BNO055_Delay(25);
 800142a:	2019      	movs	r0, #25
 800142c:	f7ff feea 	bl	8001204 <BNO055_Delay>
		  // Switch back to IMUPLUS mode
		  uint8_t imuplus_mode = IMUPLUS_MODE;
 8001430:	2308      	movs	r3, #8
 8001432:	f887 3020 	strb.w	r3, [r7, #32]
		  BNO055_I2C_bus_write(thigh_sensor.dev_addr, BNO055_OPR_MODE_ADDR, &imuplus_mode, 1);
 8001436:	4b35      	ldr	r3, [pc, #212]	@ (800150c <main+0x2f0>)
 8001438:	7a58      	ldrb	r0, [r3, #9]
 800143a:	f107 0220 	add.w	r2, r7, #32
 800143e:	2301      	movs	r3, #1
 8001440:	213d      	movs	r1, #61	@ 0x3d
 8001442:	f000 fb51 	bl	8001ae8 <BNO055_I2C_bus_write>
		  BNO055_I2C_bus_write(shank_sensor.dev_addr, BNO055_OPR_MODE_ADDR, &imuplus_mode, 1);
 8001446:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <main+0x2f4>)
 8001448:	7a58      	ldrb	r0, [r3, #9]
 800144a:	f107 0220 	add.w	r2, r7, #32
 800144e:	2301      	movs	r3, #1
 8001450:	213d      	movs	r1, #61	@ 0x3d
 8001452:	f000 fb49 	bl	8001ae8 <BNO055_I2C_bus_write>
		  BNO055_Delay(20);
 8001456:	2014      	movs	r0, #20
 8001458:	f7ff fed4 	bl	8001204 <BNO055_Delay>

		  printf("\r\n*** CALIBRATION COMPLETE! ***\r\n");
 800145c:	4831      	ldr	r0, [pc, #196]	@ (8001524 <main+0x308>)
 800145e:	f008 fefd 	bl	800a25c <puts>
		  HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	@ 0x64
 8001464:	f001 ff32 	bl	80032cc <HAL_Delay>
		  system_status = SENSOR_OK;
 8001468:	4b2f      	ldr	r3, [pc, #188]	@ (8001528 <main+0x30c>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]

		  break;
 800146e:	e013      	b.n	8001498 <main+0x27c>
		}

		BNO055_Delay(100);
 8001470:	2064      	movs	r0, #100	@ 0x64
 8001472:	f7ff fec7 	bl	8001204 <BNO055_Delay>
	  while (!calibration_complete && (HAL_GetTick() - calibration_start < CALIBRATION_TIMEOUT_MS))
 8001476:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <main+0x2fc>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f083 0301 	eor.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <main+0x27c>
 8001484:	f001 ff16 	bl	80032b4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001492:	4293      	cmp	r3, r2
 8001494:	f67f af73 	bls.w	800137e <main+0x162>
	//	REFRESH_WATCHDOG();
	  }

	  if (!calibration_complete)
 8001498:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <main+0x2fc>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	f083 0301 	eor.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d048      	beq.n	8001538 <main+0x31c>
	  {
	      printf("\r\nWARNING: Calibration timeout! Proceeding with partial calibration.\r\n");
 80014a6:	4821      	ldr	r0, [pc, #132]	@ (800152c <main+0x310>)
 80014a8:	f008 fed8 	bl	800a25c <puts>
	      system_status = SENSOR_NOT_CALIBRATED;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <main+0x30c>)
 80014ae:	2202      	movs	r2, #2
 80014b0:	701a      	strb	r2, [r3, #0]

	      // SAFETY: Only lock if calibration failed
	      gait_state.is_locked = true;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <main+0x314>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	725a      	strb	r2, [r3, #9]
	      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Red LED
 80014b8:	2201      	movs	r2, #1
 80014ba:	2120      	movs	r1, #32
 80014bc:	480f      	ldr	r0, [pc, #60]	@ (80014fc <main+0x2e0>)
 80014be:	f002 fd59 	bl	8003f74 <HAL_GPIO_WritePin>
	      printf("SAFETY LOCK: Calibration timeout!\r\n");
 80014c2:	481c      	ldr	r0, [pc, #112]	@ (8001534 <main+0x318>)
 80014c4:	f008 feca 	bl	800a25c <puts>
 80014c8:	e039      	b.n	800153e <main+0x322>
 80014ca:	bf00      	nop
 80014cc:	200001f8 	.word	0x200001f8
 80014d0:	2000024c 	.word	0x2000024c
 80014d4:	2000001c 	.word	0x2000001c
 80014d8:	40020400 	.word	0x40020400
 80014dc:	0800de78 	.word	0x0800de78
 80014e0:	0800deb0 	.word	0x0800deb0
 80014e4:	0800dec8 	.word	0x0800dec8
 80014e8:	0800ded4 	.word	0x0800ded4
 80014ec:	0800dee0 	.word	0x0800dee0
 80014f0:	20000480 	.word	0x20000480
 80014f4:	20000498 	.word	0x20000498
 80014f8:	0800def0 	.word	0x0800def0
 80014fc:	40020000 	.word	0x40020000
 8001500:	0800df18 	.word	0x0800df18
 8001504:	0800df38 	.word	0x0800df38
 8001508:	0800df5c 	.word	0x0800df5c
 800150c:	20000450 	.word	0x20000450
 8001510:	20000468 	.word	0x20000468
 8001514:	0800df90 	.word	0x0800df90
 8001518:	200004c1 	.word	0x200004c1
 800151c:	20000494 	.word	0x20000494
 8001520:	200004ac 	.word	0x200004ac
 8001524:	0800dfc0 	.word	0x0800dfc0
 8001528:	20000000 	.word	0x20000000
 800152c:	0800dfe4 	.word	0x0800dfe4
 8001530:	200004c4 	.word	0x200004c4
 8001534:	0800e02c 	.word	0x0800e02c
	  }
	  else
	  {
	      // Only reach here if calibration succeeded
	      gait_state.is_locked = false; // Ensure unlocked on success
 8001538:	4b40      	ldr	r3, [pc, #256]	@ (800163c <main+0x420>)
 800153a:	2200      	movs	r2, #0
 800153c:	725a      	strb	r2, [r3, #9]
	  }

	  // Start timer for 100Hz updates
	  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);  // Clear pending interrupts
 800153e:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <main+0x424>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f06f 0201 	mvn.w	r2, #1
 8001546:	611a      	str	r2, [r3, #16]
	  HAL_TIM_Base_Start_IT(&htim3);
 8001548:	483d      	ldr	r0, [pc, #244]	@ (8001640 <main+0x424>)
 800154a:	f006 fac1 	bl	8007ad0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start(&htim3);
 800154e:	483c      	ldr	r0, [pc, #240]	@ (8001640 <main+0x424>)
 8001550:	f006 fa56 	bl	8007a00 <HAL_TIM_Base_Start>
	  HAL_NVIC_EnableIRQ(TIM3_IRQn);  // Enable TIM3 interrupt
 8001554:	201d      	movs	r0, #29
 8001556:	f001 ffd4 	bl	8003502 <HAL_NVIC_EnableIRQ>
	  last_orientation_update = HAL_GetTick();
 800155a:	f001 feab 	bl	80032b4 <HAL_GetTick>
 800155e:	4603      	mov	r3, r0
 8001560:	4a38      	ldr	r2, [pc, #224]	@ (8001644 <main+0x428>)
 8001562:	6013      	str	r3, [r2, #0]

	  printf("\r\nStarting orientation tracking at 100Hz...\r\n");
 8001564:	4838      	ldr	r0, [pc, #224]	@ (8001648 <main+0x42c>)
 8001566:	f008 fe79 	bl	800a25c <puts>
	  printf("Format: Knee_Angle(°) | Angular_Velocity(°/s)\r\n");
 800156a:	4838      	ldr	r0, [pc, #224]	@ (800164c <main+0x430>)
 800156c:	f008 fe76 	bl	800a25c <puts>
	  printf("----------------------------------------\r\n");
 8001570:	4837      	ldr	r0, [pc, #220]	@ (8001650 <main+0x434>)
 8001572:	f008 fe73 	bl	800a25c <puts>

	  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
	    // Process sensor data when timer flag is set (100Hz)
		  if (timer_flag) {
 8001576:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <main+0x438>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0fa      	beq.n	8001576 <main+0x35a>
		      timer_flag = false;
 8001580:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <main+0x438>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
		      Read_Dual_Orientation();
 8001586:	f000 ff9f 	bl	80024c8 <Read_Dual_Orientation>
		      calculate_knee_kinematics();
 800158a:	f001 f845 	bl	8002618 <calculate_knee_kinematics>

		      // Gait phase detection
		      gait_state.previous_phase = gait_state.current_phase;
 800158e:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <main+0x420>)
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <main+0x420>)
 8001594:	705a      	strb	r2, [r3, #1]
		      gait_state.current_phase = detect_gait_phase(
 8001596:	4b30      	ldr	r3, [pc, #192]	@ (8001658 <main+0x43c>)
 8001598:	ed93 8a00 	vldr	s16, [r3]
 800159c:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <main+0x440>)
 800159e:	edd3 8a00 	vldr	s17, [r3]
 80015a2:	f001 fe87 	bl	80032b4 <HAL_GetTick>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4618      	mov	r0, r3
 80015aa:	eef0 0a68 	vmov.f32	s1, s17
 80015ae:	eeb0 0a48 	vmov.f32	s0, s16
 80015b2:	f000 fb3f 	bl	8001c34 <detect_gait_phase>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <main+0x420>)
 80015bc:	701a      	strb	r2, [r3, #0]
		          filtered_velocity,
		          HAL_GetTick()
		      );

		      // Handle recalibration request
		      if (gait_state.needs_recalibration) {
 80015be:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <main+0x420>)
 80015c0:	7a1b      	ldrb	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <main+0x3c4>
		          printf("Initiating IMU recalibration...\r\n");
 80015c6:	4826      	ldr	r0, [pc, #152]	@ (8001660 <main+0x444>)
 80015c8:	f008 fe48 	bl	800a25c <puts>
		          BNO055_Init_Dual();  // Reinitialize sensors
 80015cc:	f000 fdaa 	bl	8002124 <BNO055_Init_Dual>
		          Read_Dual_Calibration();
 80015d0:	f000 fe64 	bl	800229c <Read_Dual_Calibration>
		          gait_state.needs_recalibration = false;
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <main+0x420>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	721a      	strb	r2, [r3, #8]
		          printf("Recalibration complete\r\n");
 80015da:	4822      	ldr	r0, [pc, #136]	@ (8001664 <main+0x448>)
 80015dc:	f008 fe3e 	bl	800a25c <puts>
		      }

		      // System health monitoring (every 5s)
		      static uint32_t last_health_check = 0;
		      if (HAL_GetTick() - last_health_check >= HEALTH_CHECK_MS) {
 80015e0:	f001 fe68 	bl	80032b4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <main+0x44c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f241 3287 	movw	r2, #4999	@ 0x1387
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d9c0      	bls.n	8001576 <main+0x35a>
		          system_health_check();
 80015f4:	f001 f982 	bl	80028fc <system_health_check>
		          last_health_check = HAL_GetTick();
 80015f8:	f001 fe5c 	bl	80032b4 <HAL_GetTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001668 <main+0x44c>)
 8001600:	6013      	str	r3, [r2, #0]

		          // Print gait state
		          const char* phase_names[] = {
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <main+0x450>)
 8001604:	463c      	mov	r4, r7
 8001606:	461d      	mov	r5, r3
 8001608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		              "UNKNOWN", "HEEL_STRIKE", "TOE_OFF", "PEAK_SWING_FLEX",
		              "TERMINAL_SWING", "SWING", "STALE_DATA", "STABLE_RECAL"
		          };
		          printf("Gait Phase: %s | Locked: %s\r\n",
		                 phase_names[gait_state.current_phase],
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <main+0x420>)
 8001616:	781b      	ldrb	r3, [r3, #0]
		          printf("Gait Phase: %s | Locked: %s\r\n",
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	3330      	adds	r3, #48	@ 0x30
 800161c:	443b      	add	r3, r7
 800161e:	f853 1c30 	ldr.w	r1, [r3, #-48]
		                 gait_state.is_locked ? "YES" : "NO");
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <main+0x420>)
 8001624:	7a5b      	ldrb	r3, [r3, #9]
		          printf("Gait Phase: %s | Locked: %s\r\n",
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <main+0x412>
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <main+0x454>)
 800162c:	e000      	b.n	8001630 <main+0x414>
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <main+0x458>)
 8001630:	461a      	mov	r2, r3
 8001632:	4811      	ldr	r0, [pc, #68]	@ (8001678 <main+0x45c>)
 8001634:	f008 fdaa 	bl	800a18c <iprintf>
		  if (timer_flag) {
 8001638:	e79d      	b.n	8001576 <main+0x35a>
 800163a:	bf00      	nop
 800163c:	200004c4 	.word	0x200004c4
 8001640:	20000360 	.word	0x20000360
 8001644:	200004b4 	.word	0x200004b4
 8001648:	0800e050 	.word	0x0800e050
 800164c:	0800e080 	.word	0x0800e080
 8001650:	0800e0b4 	.word	0x0800e0b4
 8001654:	200004b8 	.word	0x200004b8
 8001658:	200004b0 	.word	0x200004b0
 800165c:	200004bc 	.word	0x200004bc
 8001660:	0800e0e0 	.word	0x0800e0e0
 8001664:	0800e104 	.word	0x0800e104
 8001668:	200004d0 	.word	0x200004d0
 800166c:	0800e1a4 	.word	0x0800e1a4
 8001670:	0800e11c 	.word	0x0800e11c
 8001674:	0800e120 	.word	0x0800e120
 8001678:	0800e124 	.word	0x0800e124

0800167c <SystemClock_Config>:
	/**
	  * @brief System Clock Configuration
	  * @retval None
	  */
	void SystemClock_Config(void)
	{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	@ 0x50
 8001680:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2234      	movs	r2, #52	@ 0x34
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f008 ffa4 	bl	800a5d8 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <SystemClock_Config+0xd4>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	4a29      	ldr	r2, [pc, #164]	@ (8001750 <SystemClock_Config+0xd4>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b0:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <SystemClock_Config+0xd4>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <SystemClock_Config+0xd8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016c8:	4a22      	ldr	r2, [pc, #136]	@ (8001754 <SystemClock_Config+0xd8>)
 80016ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <SystemClock_Config+0xd8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016dc:	2302      	movs	r3, #2
 80016de:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e0:	2301      	movs	r3, #1
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e4:	2310      	movs	r3, #16
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2302      	movs	r3, #2
 80016ea:	637b      	str	r3, [r7, #52]	@ 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 80016f0:	2310      	movs	r3, #16
 80016f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 80016f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016f8:	643b      	str	r3, [r7, #64]	@ 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016fa:	2304      	movs	r3, #4
 80016fc:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016fe:	2302      	movs	r3, #2
 8001700:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8001702:	2302      	movs	r3, #2
 8001704:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4618      	mov	r0, r3
 800170c:	f005 fe8a 	bl	8007424 <HAL_RCC_OscConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x9e>
	  {
	    Error_Handler();
 8001716:	f001 f9cb 	bl	8002ab0 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171a:	230f      	movs	r3, #15
 800171c:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171e:	2302      	movs	r3, #2
 8001720:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172a:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	2102      	movs	r1, #2
 8001736:	4618      	mov	r0, r3
 8001738:	f005 fb2a 	bl	8006d90 <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 8001742:	f001 f9b5 	bl	8002ab0 <Error_Handler>
	  }
	}
 8001746:	bf00      	nop
 8001748:	3750      	adds	r7, #80	@ 0x50
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

08001758 <MX_I2C1_Init>:
	  * @brief I2C1 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_I2C1_Init(void)
	{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <MX_I2C1_Init+0x50>)
 800175e:	4a13      	ldr	r2, [pc, #76]	@ (80017ac <MX_I2C1_Init+0x54>)
 8001760:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001764:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <MX_I2C1_Init+0x58>)
 8001766:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_I2C1_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001776:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800177a:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <MX_I2C1_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <MX_I2C1_Init+0x50>)
 8001796:	f002 fc21 	bl	8003fdc <HAL_I2C_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C1_Init+0x4c>
	  {
	    Error_Handler();
 80017a0:	f001 f986 	bl	8002ab0 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */

	}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200001f8 	.word	0x200001f8
 80017ac:	40005400 	.word	0x40005400
 80017b0:	000186a0 	.word	0x000186a0

080017b4 <MX_I2C2_Init>:
	  * @brief I2C2 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_I2C2_Init(void)
	{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C2_Init 0 */

	  /* USER CODE BEGIN I2C2_Init 1 */

	  /* USER CODE END I2C2_Init 1 */
	  hi2c2.Instance = I2C2;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017ba:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <MX_I2C2_Init+0x54>)
 80017bc:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017c0:	4a12      	ldr	r2, [pc, #72]	@ (800180c <MX_I2C2_Init+0x58>)
 80017c2:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017d6:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017f2:	f002 fbf3 	bl	8003fdc <HAL_I2C_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_I2C2_Init+0x4c>
	  {
	    Error_Handler();
 80017fc:	f001 f958 	bl	8002ab0 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C2_Init 2 */

	  /* USER CODE END I2C2_Init 2 */

	}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000024c 	.word	0x2000024c
 8001808:	40005800 	.word	0x40005800
 800180c:	000186a0 	.word	0x000186a0

08001810 <MX_TIM3_Init>:
	  * @brief TIM3 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_TIM3_Init(void)
	{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN TIM3_Init 0 */

	  /* USER CODE END TIM3_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 800182c:	4b1d      	ldr	r3, [pc, #116]	@ (80018a4 <MX_TIM3_Init+0x94>)
 800182e:	4a1e      	ldr	r2, [pc, #120]	@ (80018a8 <MX_TIM3_Init+0x98>)
 8001830:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 8399;
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_TIM3_Init+0x94>)
 8001834:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001838:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_TIM3_Init+0x94>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 99;
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_TIM3_Init+0x94>)
 8001842:	2263      	movs	r2, #99	@ 0x63
 8001844:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_TIM3_Init+0x94>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_TIM3_Init+0x94>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001852:	4814      	ldr	r0, [pc, #80]	@ (80018a4 <MX_TIM3_Init+0x94>)
 8001854:	f006 f884 	bl	8007960 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM3_Init+0x52>
	  {
	    Error_Handler();
 800185e:	f001 f927 	bl	8002ab0 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001866:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4619      	mov	r1, r3
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_TIM3_Init+0x94>)
 8001870:	f006 fa8e 	bl	8007d90 <HAL_TIM_ConfigClockSource>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0x6e>
	  {
	    Error_Handler();
 800187a:	f001 f919 	bl	8002ab0 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <MX_TIM3_Init+0x94>)
 800188c:	f006 fcb0 	bl	80081f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM3_Init+0x8a>
	  {
	    Error_Handler();
 8001896:	f001 f90b 	bl	8002ab0 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */

	}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000360 	.word	0x20000360
 80018a8:	40000400 	.word	0x40000400

080018ac <MX_USART2_UART_Init>:
	  * @brief USART2 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_USART2_UART_Init(void)
	{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	  /* USER CODE END USART2_Init 0 */

	  /* USER CODE BEGIN USART2_Init 1 */

	  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <MX_USART2_UART_Init+0x4c>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	@ (80018fc <MX_USART2_UART_Init+0x50>)
 80018b4:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <MX_USART2_UART_Init+0x4c>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <MX_USART2_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <MX_USART2_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <MX_USART2_UART_Init+0x4c>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <MX_USART2_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <MX_USART2_UART_Init+0x4c>)
 80018de:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018e2:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <MX_USART2_UART_Init+0x4c>)
 80018e6:	f006 fd13 	bl	8008310 <HAL_UART_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART2_UART_Init+0x48>
	  {
	    Error_Handler();
 80018f0:	f001 f8de 	bl	8002ab0 <Error_Handler>
	  }
	  /* USER CODE BEGIN USART2_Init 2 */

	  /* USER CODE END USART2_Init 2 */

	}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200003a8 	.word	0x200003a8
 80018fc:	40004400 	.word	0x40004400

08001900 <MX_DMA_Init>:

	/**
	  * Enable DMA controller clock
	  */
	static void MX_DMA_Init(void)
	{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MX_DMA_Init+0x5c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a13      	ldr	r2, [pc, #76]	@ (800195c <MX_DMA_Init+0x5c>)
 8001910:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <MX_DMA_Init+0x5c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	200d      	movs	r0, #13
 8001928:	f001 fdcf 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800192c:	200d      	movs	r0, #13
 800192e:	f001 fde8 	bl	8003502 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Stream6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2011      	movs	r0, #17
 8001938:	f001 fdc7 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800193c:	2011      	movs	r0, #17
 800193e:	f001 fde0 	bl	8003502 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Stream7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	202f      	movs	r0, #47	@ 0x2f
 8001948:	f001 fdbf 	bl	80034ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800194c:	202f      	movs	r0, #47	@ 0x2f
 800194e:	f001 fdd8 	bl	8003502 <HAL_NVIC_EnableIRQ>

	}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <MX_GPIO_Init>:
	  * @brief GPIO Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_GPIO_Init(void)
	{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
	  /* USER CODE BEGIN MX_GPIO_Init_1 */

	  /* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <MX_GPIO_Init+0x100>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a38      	ldr	r2, [pc, #224]	@ (8001a60 <MX_GPIO_Init+0x100>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <MX_GPIO_Init+0x100>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <MX_GPIO_Init+0x100>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a31      	ldr	r2, [pc, #196]	@ (8001a60 <MX_GPIO_Init+0x100>)
 800199c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_STEP_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80019ec:	481d      	ldr	r0, [pc, #116]	@ (8001a64 <MX_GPIO_Init+0x104>)
 80019ee:	f002 fac1 	bl	8003f74 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR_Pin|MOTOR_ENG_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f244 0103 	movw	r1, #16387	@ 0x4003
 80019f8:	481b      	ldr	r0, [pc, #108]	@ (8001a68 <MX_GPIO_Init+0x108>)
 80019fa:	f002 fabb 	bl	8003f74 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 80019fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a02:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a08:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4815      	ldr	r0, [pc, #84]	@ (8001a6c <MX_GPIO_Init+0x10c>)
 8001a16:	f002 f919 	bl	8003c4c <HAL_GPIO_Init>

	  /*Configure GPIO pins : LD2_Pin MOTOR_STEP_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_STEP_Pin;
 8001a1a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001a1e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <MX_GPIO_Init+0x104>)
 8001a34:	f002 f90a 	bl	8003c4c <HAL_GPIO_Init>

	  /*Configure GPIO pins : MOTOR_DIR_Pin MOTOR_ENG_Pin DEBUG_LED_Pin */
	  GPIO_InitStruct.Pin = MOTOR_DIR_Pin|MOTOR_ENG_Pin|DEBUG_LED_Pin;
 8001a38:	f244 0303 	movw	r3, #16387	@ 0x4003
 8001a3c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_GPIO_Init+0x108>)
 8001a52:	f002 f8fb 	bl	8003c4c <HAL_GPIO_Init>

	  /* USER CODE BEGIN MX_GPIO_Init_2 */

	  /* USER CODE END MX_GPIO_Init_2 */
	}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	@ 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800

08001a70 <BNO055_I2C_bus_read>:
	}



	s8 BNO055_I2C_bus_read(u8 dev, u8 reg, u8 *data, u8 len)
	{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af04      	add	r7, sp, #16
 8001a76:	603a      	str	r2, [r7, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	71bb      	strb	r3, [r7, #6]
 8001a82:	4613      	mov	r3, r2
 8001a84:	717b      	strb	r3, [r7, #5]

	  for (int retry = 0; retry < MAX_I2C_RETRIES; retry++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e021      	b.n	8001ad0 <BNO055_I2C_bus_read+0x60>
	  {
		HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, dev << 1, reg,
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	b299      	uxth	r1, r3
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001aa0:	9002      	str	r0, [sp, #8]
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	480e      	ldr	r0, [pc, #56]	@ (8001ae4 <BNO055_I2C_bus_read+0x74>)
 8001aac:	f002 fcea 	bl	8004484 <HAL_I2C_Mem_Read>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	72fb      	strb	r3, [r7, #11]
													I2C_MEMADD_SIZE_8BIT, data, len, I2C_TIMEOUT_MS);
		if (status == HAL_OK)
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <BNO055_I2C_bus_read+0x4e>
		    {

		      return BNO055_SUCCESS;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e00d      	b.n	8001ada <BNO055_I2C_bus_read+0x6a>
		    }

		if (retry < MAX_I2C_RETRIES - 1)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	dc02      	bgt.n	8001aca <BNO055_I2C_bus_read+0x5a>
		  HAL_Delay(1); // Short delay before retry
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f001 fc01 	bl	80032cc <HAL_Delay>
	  for (int retry = 0; retry < MAX_I2C_RETRIES; retry++)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3301      	adds	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	ddda      	ble.n	8001a8c <BNO055_I2C_bus_read+0x1c>
	  }

	  return BNO055_ERROR;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000024c 	.word	0x2000024c

08001ae8 <BNO055_I2C_bus_write>:



	s8 BNO055_I2C_bus_write(u8 dev, u8 reg, u8 *data, u8 len)
	{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	603a      	str	r2, [r7, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	460b      	mov	r3, r1
 8001af8:	71bb      	strb	r3, [r7, #6]
 8001afa:	4613      	mov	r3, r2
 8001afc:	717b      	strb	r3, [r7, #5]
	  for (int retry = 0; retry < MAX_I2C_RETRIES; retry++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e024      	b.n	8001b4e <BNO055_I2C_bus_write+0x66>
	  {
		HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c2, dev << 1, reg,
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	b299      	uxth	r1, r3
 8001b0c:	79bb      	ldrb	r3, [r7, #6]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b18:	9002      	str	r0, [sp, #8]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	480f      	ldr	r0, [pc, #60]	@ (8001b60 <BNO055_I2C_bus_write+0x78>)
 8001b24:	f002 fbb4 	bl	8004290 <HAL_I2C_Mem_Write>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	72fb      	strb	r3, [r7, #11]
													 I2C_MEMADD_SIZE_8BIT, data, len, I2C_TIMEOUT_MS);
		if (status == HAL_OK)
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d104      	bne.n	8001b3c <BNO055_I2C_bus_write+0x54>
		    {
		      HAL_Delay(1); // Small delay after write as per BNO055 datasheet
 8001b32:	2001      	movs	r0, #1
 8001b34:	f001 fbca 	bl	80032cc <HAL_Delay>
		      return BNO055_SUCCESS;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e00d      	b.n	8001b58 <BNO055_I2C_bus_write+0x70>
		    }

		if (retry < MAX_I2C_RETRIES - 1)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	dc02      	bgt.n	8001b48 <BNO055_I2C_bus_write+0x60>
		  HAL_Delay(1); // Short delay before retry
 8001b42:	2001      	movs	r0, #1
 8001b44:	f001 fbc2 	bl	80032cc <HAL_Delay>
	  for (int retry = 0; retry < MAX_I2C_RETRIES; retry++)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	ddd7      	ble.n	8001b04 <BNO055_I2C_bus_write+0x1c>
	  }
	  return BNO055_ERROR;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000024c 	.word	0x2000024c

08001b64 <I2C_Scan_And_Assign>:

	// ==== INITIALIZATION FUNCTIONS ====
	void I2C_Scan_And_Assign(void)
	{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	  sensors_found = 0;  // Reset sensor count before scanning
 8001b68:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <I2C_Scan_And_Assign+0xa8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
	  printf("Using fixed I2C addresses...\r\n");
 8001b6e:	4828      	ldr	r0, [pc, #160]	@ (8001c10 <I2C_Scan_And_Assign+0xac>)
 8001b70:	f008 fb74 	bl	800a25c <puts>

	  // Use fixed addresses
	  thigh_sensor.dev_addr = THIGH_SENSOR_ADDR; // 0x28
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <I2C_Scan_And_Assign+0xb0>)
 8001b76:	2228      	movs	r2, #40	@ 0x28
 8001b78:	725a      	strb	r2, [r3, #9]
	  shank_sensor.dev_addr = SHANK_SENSOR_ADDR; // 0x29
 8001b7a:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <I2C_Scan_And_Assign+0xb4>)
 8001b7c:	2229      	movs	r2, #41	@ 0x29
 8001b7e:	725a      	strb	r2, [r3, #9]

	  // Verify devices are present
	  if (HAL_I2C_IsDeviceReady(&hi2c2, thigh_sensor.dev_addr << 1, 3, SENSOR_TIMEOUT_MS ) == HAL_OK)
 8001b80:	4b24      	ldr	r3, [pc, #144]	@ (8001c14 <I2C_Scan_And_Assign+0xb0>)
 8001b82:	7a5b      	ldrb	r3, [r3, #9]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	b299      	uxth	r1, r3
 8001b88:	2364      	movs	r3, #100	@ 0x64
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4823      	ldr	r0, [pc, #140]	@ (8001c1c <I2C_Scan_And_Assign+0xb8>)
 8001b8e:	f002 feab 	bl	80048e8 <HAL_I2C_IsDeviceReady>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10c      	bne.n	8001bb2 <I2C_Scan_And_Assign+0x4e>
	  {
	    printf("✓ Thigh sensor found at 0x%02X\r\n", thigh_sensor.dev_addr);
 8001b98:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <I2C_Scan_And_Assign+0xb0>)
 8001b9a:	7a5b      	ldrb	r3, [r3, #9]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4820      	ldr	r0, [pc, #128]	@ (8001c20 <I2C_Scan_And_Assign+0xbc>)
 8001ba0:	f008 faf4 	bl	800a18c <iprintf>
	    sensors_found++;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <I2C_Scan_And_Assign+0xa8>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <I2C_Scan_And_Assign+0xa8>)
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e005      	b.n	8001bbe <I2C_Scan_And_Assign+0x5a>
	  }
	  else
	  {
	    printf("✗ Thigh sensor not responding at 0x%02X\r\n", thigh_sensor.dev_addr);
 8001bb2:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <I2C_Scan_And_Assign+0xb0>)
 8001bb4:	7a5b      	ldrb	r3, [r3, #9]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481a      	ldr	r0, [pc, #104]	@ (8001c24 <I2C_Scan_And_Assign+0xc0>)
 8001bba:	f008 fae7 	bl	800a18c <iprintf>
	  }

	  if (HAL_I2C_IsDeviceReady(&hi2c2, shank_sensor.dev_addr << 1, 3, SENSOR_TIMEOUT_MS ) == HAL_OK)
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <I2C_Scan_And_Assign+0xb4>)
 8001bc0:	7a5b      	ldrb	r3, [r3, #9]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	2364      	movs	r3, #100	@ 0x64
 8001bc8:	2203      	movs	r2, #3
 8001bca:	4814      	ldr	r0, [pc, #80]	@ (8001c1c <I2C_Scan_And_Assign+0xb8>)
 8001bcc:	f002 fe8c 	bl	80048e8 <HAL_I2C_IsDeviceReady>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10c      	bne.n	8001bf0 <I2C_Scan_And_Assign+0x8c>
	  {
	    printf("✓ Shank sensor found at 0x%02X\r\n", shank_sensor.dev_addr);
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <I2C_Scan_And_Assign+0xb4>)
 8001bd8:	7a5b      	ldrb	r3, [r3, #9]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4812      	ldr	r0, [pc, #72]	@ (8001c28 <I2C_Scan_And_Assign+0xc4>)
 8001bde:	f008 fad5 	bl	800a18c <iprintf>
	    sensors_found++;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <I2C_Scan_And_Assign+0xa8>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <I2C_Scan_And_Assign+0xa8>)
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e005      	b.n	8001bfc <I2C_Scan_And_Assign+0x98>
	  }
	  else
	  {
	    printf("✗ Shank sensor not responding at 0x%02X\r\n", shank_sensor.dev_addr);
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <I2C_Scan_And_Assign+0xb4>)
 8001bf2:	7a5b      	ldrb	r3, [r3, #9]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <I2C_Scan_And_Assign+0xc8>)
 8001bf8:	f008 fac8 	bl	800a18c <iprintf>
	  }

	  printf("Found %d/2 sensors\r\n", sensors_found);
 8001bfc:	4b03      	ldr	r3, [pc, #12]	@ (8001c0c <I2C_Scan_And_Assign+0xa8>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	480b      	ldr	r0, [pc, #44]	@ (8001c30 <I2C_Scan_And_Assign+0xcc>)
 8001c04:	f008 fac2 	bl	800a18c <iprintf>
	}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200004c0 	.word	0x200004c0
 8001c10:	0800e1c4 	.word	0x0800e1c4
 8001c14:	20000450 	.word	0x20000450
 8001c18:	20000468 	.word	0x20000468
 8001c1c:	2000024c 	.word	0x2000024c
 8001c20:	0800e1e4 	.word	0x0800e1e4
 8001c24:	0800e208 	.word	0x0800e208
 8001c28:	0800e234 	.word	0x0800e234
 8001c2c:	0800e258 	.word	0x0800e258
 8001c30:	0800e284 	.word	0x0800e284

08001c34 <detect_gait_phase>:

	GaitPhase detect_gait_phase(float angle, float velocity, uint32_t current_time) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c42:	6078      	str	r0, [r7, #4]

		if (gait_state.needs_recalibration &&
 8001c44:	4b96      	ldr	r3, [pc, #600]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001c46:	7a1b      	ldrb	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <detect_gait_phase+0x26>
		    gait_state.current_phase != GAIT_PHASE_STABLE_RECAL)
 8001c4c:	4b94      	ldr	r3, [pc, #592]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
		if (gait_state.needs_recalibration &&
 8001c50:	2b07      	cmp	r3, #7
 8001c52:	d002      	beq.n	8001c5a <detect_gait_phase+0x26>
		{
		    gait_state.needs_recalibration = false;
 8001c54:	4b92      	ldr	r3, [pc, #584]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	721a      	strb	r2, [r3, #8]
		}

		// Check if we should remain in current phase (hysteresis and min duration)
	    if ((current_time - gait_state.phase_entry_time) < PHASE_MIN_DURATION_MS) {
 8001c5a:	4b91      	ldr	r3, [pc, #580]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2232      	movs	r2, #50	@ 0x32
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d202      	bcs.n	8001c6e <detect_gait_phase+0x3a>
	        return gait_state.current_phase;
 8001c68:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	e18d      	b.n	8001f8a <detect_gait_phase+0x356>
	    }

		// Check for stale data (100ms timeout)

	    if (current_time - last_orientation_update > SENSOR_TIMEOUT_MS) {
 8001c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea4 <detect_gait_phase+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d905      	bls.n	8001c86 <detect_gait_phase+0x52>
	        gait_state.current_phase = GAIT_PHASE_STALE_DATA;
 8001c7a:	4b89      	ldr	r3, [pc, #548]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001c7c:	2206      	movs	r2, #6
 8001c7e:	701a      	strb	r2, [r3, #0]
	        return gait_state.current_phase;
 8001c80:	4b87      	ldr	r3, [pc, #540]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	e181      	b.n	8001f8a <detect_gait_phase+0x356>
	    }


	    // Heel Strike Detection
	    if (angle >= 0 && angle <= HS_ENTER_ANGLE_MAX &&
 8001c86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	db2a      	blt.n	8001cea <detect_gait_phase+0xb6>
 8001c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c98:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	d821      	bhi.n	8001cea <detect_gait_phase+0xb6>
	        fabsf(velocity) <= HS_ENTER_VEL_MAX)
 8001ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001caa:	eef0 7ae7 	vabs.f32	s15, s15
	    if (angle >= 0 && angle <= HS_ENTER_ANGLE_MAX &&
 8001cae:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001ea8 <detect_gait_phase+0x274>
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	d816      	bhi.n	8001cea <detect_gait_phase+0xb6>
	    {
	        if (gait_state.current_phase != GAIT_PHASE_HEEL_STRIKE) {
 8001cbc:	4b78      	ldr	r3, [pc, #480]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d00f      	beq.n	8001ce4 <detect_gait_phase+0xb0>
	            gait_state.previous_phase = gait_state.current_phase;
 8001cc4:	4b76      	ldr	r3, [pc, #472]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	4b75      	ldr	r3, [pc, #468]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001cca:	705a      	strb	r2, [r3, #1]
	            gait_state.current_phase = GAIT_PHASE_HEEL_STRIKE;
 8001ccc:	4b74      	ldr	r3, [pc, #464]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
	            gait_state.phase_entry_time = current_time;
 8001cd2:	4a73      	ldr	r2, [pc, #460]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6053      	str	r3, [r2, #4]
	            gait_state.is_locked = true;
 8001cd8:	4b71      	ldr	r3, [pc, #452]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	725a      	strb	r2, [r3, #9]
	            printf("HEEL STRIKE DETECTED - LOCKING SCREW\r\n");
 8001cde:	4873      	ldr	r0, [pc, #460]	@ (8001eac <detect_gait_phase+0x278>)
 8001ce0:	f008 fabc 	bl	800a25c <puts>
	        }
	        return gait_state.current_phase;
 8001ce4:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	e14f      	b.n	8001f8a <detect_gait_phase+0x356>
	    }

	    // Heel Strike Exit Hysteresis
	    if (gait_state.current_phase == GAIT_PHASE_HEEL_STRIKE &&
 8001cea:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d11d      	bne.n	8001d2e <detect_gait_phase+0xfa>
 8001cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d02:	dc0a      	bgt.n	8001d1a <detect_gait_phase+0xe6>
	        (angle > 8 || fabsf(velocity) > 120)) {
 8001d04:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d08:	eef0 7ae7 	vabs.f32	s15, s15
 8001d0c:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001eb0 <detect_gait_phase+0x27c>
 8001d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d18:	dd09      	ble.n	8001d2e <detect_gait_phase+0xfa>
	        gait_state.previous_phase = gait_state.current_phase;
 8001d1a:	4b61      	ldr	r3, [pc, #388]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	4b60      	ldr	r3, [pc, #384]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d20:	705a      	strb	r2, [r3, #1]
	        gait_state.current_phase = GAIT_PHASE_SWING;
 8001d22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d24:	2205      	movs	r2, #5
 8001d26:	701a      	strb	r2, [r3, #0]
	        gait_state.phase_entry_time = current_time;
 8001d28:	4a5d      	ldr	r2, [pc, #372]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6053      	str	r3, [r2, #4]
	    }

	    // Toe-Off Detection
	    if (angle > 15 && velocity > 100) {
 8001d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d32:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	dd1f      	ble.n	8001d80 <detect_gait_phase+0x14c>
 8001d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d44:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001ea8 <detect_gait_phase+0x274>
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	dd16      	ble.n	8001d80 <detect_gait_phase+0x14c>
	        if (gait_state.current_phase != GAIT_PHASE_TOE_OFF) {
 8001d52:	4b53      	ldr	r3, [pc, #332]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d00f      	beq.n	8001d7a <detect_gait_phase+0x146>
	            gait_state.previous_phase = gait_state.current_phase;
 8001d5a:	4b51      	ldr	r3, [pc, #324]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4b50      	ldr	r3, [pc, #320]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d60:	705a      	strb	r2, [r3, #1]
	            gait_state.current_phase = GAIT_PHASE_TOE_OFF;
 8001d62:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d64:	2202      	movs	r2, #2
 8001d66:	701a      	strb	r2, [r3, #0]
	            gait_state.phase_entry_time = current_time;
 8001d68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6053      	str	r3, [r2, #4]
	            gait_state.is_locked = false;
 8001d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	725a      	strb	r2, [r3, #9]
	            printf("TOE-OFF DETECTED - UNLOCKING SCREW\r\n");
 8001d74:	484f      	ldr	r0, [pc, #316]	@ (8001eb4 <detect_gait_phase+0x280>)
 8001d76:	f008 fa71 	bl	800a25c <puts>
	        }
	        return gait_state.current_phase;
 8001d7a:	4b49      	ldr	r3, [pc, #292]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	e104      	b.n	8001f8a <detect_gait_phase+0x356>
	    }

	    // Toe-Off Exit Hysteresis
	    if (gait_state.current_phase == GAIT_PHASE_TOE_OFF &&
 8001d80:	4b47      	ldr	r3, [pc, #284]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d11b      	bne.n	8001dc0 <detect_gait_phase+0x18c>
 8001d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8c:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	d408      	bmi.n	8001dac <detect_gait_phase+0x178>
	        (angle < 12 || velocity < 80)) {
 8001d9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001eb8 <detect_gait_phase+0x284>
 8001da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001daa:	d509      	bpl.n	8001dc0 <detect_gait_phase+0x18c>
	        gait_state.previous_phase = gait_state.current_phase;
 8001dac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001db2:	705a      	strb	r2, [r3, #1]
	        gait_state.current_phase = GAIT_PHASE_SWING;
 8001db4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001db6:	2205      	movs	r2, #5
 8001db8:	701a      	strb	r2, [r3, #0]
	        gait_state.phase_entry_time = current_time;
 8001dba:	4a39      	ldr	r2, [pc, #228]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6053      	str	r3, [r2, #4]
	    }

	    // Peak Swing Flexion Detection
	    if (angle >= 60 && fabsf(velocity) < 50) {
 8001dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dc4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001ebc <detect_gait_phase+0x288>
 8001dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	db1e      	blt.n	8001e10 <detect_gait_phase+0x1dc>
 8001dd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd6:	eef0 7ae7 	vabs.f32	s15, s15
 8001dda:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001ec0 <detect_gait_phase+0x28c>
 8001dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	d513      	bpl.n	8001e10 <detect_gait_phase+0x1dc>
	        if (gait_state.current_phase != GAIT_PHASE_PEAK_SWING_FLEXION) {
 8001de8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d00c      	beq.n	8001e0a <detect_gait_phase+0x1d6>
	            gait_state.previous_phase = gait_state.current_phase;
 8001df0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001df6:	705a      	strb	r2, [r3, #1]
	            gait_state.current_phase = GAIT_PHASE_PEAK_SWING_FLEXION;
 8001df8:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	701a      	strb	r2, [r3, #0]
	            gait_state.phase_entry_time = current_time;
 8001dfe:	4a28      	ldr	r2, [pc, #160]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6053      	str	r3, [r2, #4]
	            printf("PEAK SWING FLEXION DETECTED\r\n");
 8001e04:	482f      	ldr	r0, [pc, #188]	@ (8001ec4 <detect_gait_phase+0x290>)
 8001e06:	f008 fa29 	bl	800a25c <puts>
	        }
	        return gait_state.current_phase;
 8001e0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	e0bc      	b.n	8001f8a <detect_gait_phase+0x356>
	    }

	    // Peak Swing Exit Hysteresis
	    if (gait_state.current_phase == GAIT_PHASE_PEAK_SWING_FLEXION &&
 8001e10:	4b23      	ldr	r3, [pc, #140]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d11d      	bne.n	8001e54 <detect_gait_phase+0x220>
 8001e18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001ec8 <detect_gait_phase+0x294>
 8001e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	d40a      	bmi.n	8001e40 <detect_gait_phase+0x20c>
	        (angle < 55 || fabsf(velocity) > 60)) {
 8001e2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8001e32:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001ebc <detect_gait_phase+0x288>
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	dd09      	ble.n	8001e54 <detect_gait_phase+0x220>
	        gait_state.previous_phase = gait_state.current_phase;
 8001e40:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e42:	781a      	ldrb	r2, [r3, #0]
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e46:	705a      	strb	r2, [r3, #1]
	        gait_state.current_phase = GAIT_PHASE_SWING;
 8001e48:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e4a:	2205      	movs	r2, #5
 8001e4c:	701a      	strb	r2, [r3, #0]
	        gait_state.phase_entry_time = current_time;
 8001e4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6053      	str	r3, [r2, #4]
	    }

	    // Terminal Swing Detection
	    if (angle <= 10 && velocity < -30) {
 8001e54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e58:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	d834      	bhi.n	8001ed0 <detect_gait_phase+0x29c>
 8001e66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e6a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d52b      	bpl.n	8001ed0 <detect_gait_phase+0x29c>
	        if (gait_state.current_phase != GAIT_PHASE_TERMINAL_SWING) {
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d00c      	beq.n	8001e9a <detect_gait_phase+0x266>
	            gait_state.previous_phase = gait_state.current_phase;
 8001e80:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e86:	705a      	strb	r2, [r3, #1]
	            gait_state.current_phase = GAIT_PHASE_TERMINAL_SWING;
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	701a      	strb	r2, [r3, #0]
	            gait_state.phase_entry_time = current_time;
 8001e8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6053      	str	r3, [r2, #4]
	            printf("TERMINAL SWING DETECTED - GRADUAL TIGHTENING\r\n");
 8001e94:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <detect_gait_phase+0x298>)
 8001e96:	f008 f9e1 	bl	800a25c <puts>
	        }
	        return gait_state.current_phase;
 8001e9a:	4b01      	ldr	r3, [pc, #4]	@ (8001ea0 <detect_gait_phase+0x26c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	e074      	b.n	8001f8a <detect_gait_phase+0x356>
 8001ea0:	200004c4 	.word	0x200004c4
 8001ea4:	200004b4 	.word	0x200004b4
 8001ea8:	42c80000 	.word	0x42c80000
 8001eac:	0800e29c 	.word	0x0800e29c
 8001eb0:	42f00000 	.word	0x42f00000
 8001eb4:	0800e2c4 	.word	0x0800e2c4
 8001eb8:	42a00000 	.word	0x42a00000
 8001ebc:	42700000 	.word	0x42700000
 8001ec0:	42480000 	.word	0x42480000
 8001ec4:	0800e2e8 	.word	0x0800e2e8
 8001ec8:	425c0000 	.word	0x425c0000
 8001ecc:	0800e308 	.word	0x0800e308
	    }

	    // Terminal swing exit condition:
	    if (gait_state.current_phase == GAIT_PHASE_TERMINAL_SWING &&
 8001ed0:	4b30      	ldr	r3, [pc, #192]	@ (8001f94 <detect_gait_phase+0x360>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d117      	bne.n	8001f08 <detect_gait_phase+0x2d4>
 8001ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001edc:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8001ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	dc08      	bgt.n	8001efc <detect_gait_phase+0x2c8>
	        (angle > TS_EXIT_ANGLE_MIN || velocity > TS_EXIT_VEL_MIN))
 8001eea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eee:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 8001ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efa:	dd05      	ble.n	8001f08 <detect_gait_phase+0x2d4>
	    {
	        gait_state.current_phase = GAIT_PHASE_SWING;
 8001efc:	4b25      	ldr	r3, [pc, #148]	@ (8001f94 <detect_gait_phase+0x360>)
 8001efe:	2205      	movs	r2, #5
 8001f00:	701a      	strb	r2, [r3, #0]
	        gait_state.phase_entry_time = current_time;
 8001f02:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6053      	str	r3, [r2, #4]
	    }


	    // Stable Recalibration Check
	    if (fabsf(velocity) <= RECAL_VEL_MAX &&
 8001f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f0c:	eef0 7ae7 	vabs.f32	s15, s15
 8001f10:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	d825      	bhi.n	8001f6a <detect_gait_phase+0x336>
 8001f1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f22:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	d81c      	bhi.n	8001f6a <detect_gait_phase+0x336>
	        angle <= RECAL_ANGLE_MAX &&
	        current_time - last_orientation_update < SENSOR_TIMEOUT_MS)  // Data fresh
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <detect_gait_phase+0x364>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	1ad3      	subs	r3, r2, r3
	        angle <= RECAL_ANGLE_MAX &&
 8001f38:	2b63      	cmp	r3, #99	@ 0x63
 8001f3a:	d816      	bhi.n	8001f6a <detect_gait_phase+0x336>
	    {
	        if (gait_state.current_phase != GAIT_PHASE_STABLE_RECAL) {
 8001f3c:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b07      	cmp	r3, #7
 8001f42:	d00f      	beq.n	8001f64 <detect_gait_phase+0x330>
	            gait_state.previous_phase = gait_state.current_phase;
 8001f44:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f4a:	705a      	strb	r2, [r3, #1]
	            gait_state.current_phase = GAIT_PHASE_STABLE_RECAL;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f4e:	2207      	movs	r2, #7
 8001f50:	701a      	strb	r2, [r3, #0]
	            gait_state.phase_entry_time = current_time;
 8001f52:	4a10      	ldr	r2, [pc, #64]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6053      	str	r3, [r2, #4]
	            gait_state.needs_recalibration = true;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	721a      	strb	r2, [r3, #8]
	            printf("STABLE POSITION - RECALIBRATION RECOMMENDED\r\n");
 8001f5e:	480f      	ldr	r0, [pc, #60]	@ (8001f9c <detect_gait_phase+0x368>)
 8001f60:	f008 f97c 	bl	800a25c <puts>
	        }
	        return gait_state.current_phase;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	e00f      	b.n	8001f8a <detect_gait_phase+0x356>
	    }

	    // Default to swing phase
	    if (gait_state.current_phase != GAIT_PHASE_SWING) {
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d009      	beq.n	8001f86 <detect_gait_phase+0x352>
	        gait_state.previous_phase = gait_state.current_phase;
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f78:	705a      	strb	r2, [r3, #1]
	        gait_state.current_phase = GAIT_PHASE_SWING;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	701a      	strb	r2, [r3, #0]
	        gait_state.phase_entry_time = current_time;
 8001f80:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6053      	str	r3, [r2, #4]
	    }

	    return gait_state.current_phase;
 8001f86:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <detect_gait_phase+0x360>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
	}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200004c4 	.word	0x200004c4
 8001f98:	200004b4 	.word	0x200004b4
 8001f9c:	0800e338 	.word	0x0800e338

08001fa0 <BNO055_Init_Sensor>:

	SensorStatus BNO055_Init_Sensor(struct bno055_t *sensor, const char* name) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
	    // Setup sensor structure
	    sensor->bus_read = BNO055_I2C_bus_read;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a50      	ldr	r2, [pc, #320]	@ (80020f0 <BNO055_Init_Sensor+0x150>)
 8001fae:	611a      	str	r2, [r3, #16]
	    sensor->bus_write = BNO055_I2C_bus_write;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a50      	ldr	r2, [pc, #320]	@ (80020f4 <BNO055_Init_Sensor+0x154>)
 8001fb4:	60da      	str	r2, [r3, #12]
	    sensor->delay_msec = BNO055_Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4f      	ldr	r2, [pc, #316]	@ (80020f8 <BNO055_Init_Sensor+0x158>)
 8001fba:	615a      	str	r2, [r3, #20]

	    // Initialize sensor
	    if (bno055_init(sensor) != BNO055_SUCCESS) {
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff f84f 	bl	8001060 <bno055_init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <BNO055_Init_Sensor+0x34>
	        printf("ERROR: %s sensor init failed!\r\n", name);
 8001fc8:	6839      	ldr	r1, [r7, #0]
 8001fca:	484c      	ldr	r0, [pc, #304]	@ (80020fc <BNO055_Init_Sensor+0x15c>)
 8001fcc:	f008 f8de 	bl	800a18c <iprintf>
	        return SENSOR_INIT_ERROR;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e089      	b.n	80020e8 <BNO055_Init_Sensor+0x148>
	    }

	    // Perform self-test
	 	    u8 selftest_result;
	 	    if (BNO055_I2C_bus_read(sensor->dev_addr,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7a58      	ldrb	r0, [r3, #9]
 8001fd8:	f107 020b 	add.w	r2, r7, #11
 8001fdc:	2301      	movs	r3, #1
 8001fde:	2136      	movs	r1, #54	@ 0x36
 8001fe0:	f7ff fd46 	bl	8001a70 <BNO055_I2C_bus_read>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <BNO055_Init_Sensor+0x56>
	 	                            BNO055_SELFTEST_RESULT_ADDR,
	 	                            &selftest_result, 1) != BNO055_SUCCESS) {
	 	        printf("ERROR: %s self-test read failed!\r\n", name);
 8001fea:	6839      	ldr	r1, [r7, #0]
 8001fec:	4844      	ldr	r0, [pc, #272]	@ (8002100 <BNO055_Init_Sensor+0x160>)
 8001fee:	f008 f8cd 	bl	800a18c <iprintf>
	 	        return SENSOR_INIT_ERROR;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e078      	b.n	80020e8 <BNO055_Init_Sensor+0x148>
	 	    }

	    // Set to IMUPLUS mode (IMU)
	    uint8_t mode = IMUPLUS_MODE;
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	72bb      	strb	r3, [r7, #10]
	    if (BNO055_I2C_bus_write(sensor->dev_addr,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7a58      	ldrb	r0, [r3, #9]
 8001ffe:	f107 020a 	add.w	r2, r7, #10
 8002002:	2301      	movs	r3, #1
 8002004:	213d      	movs	r1, #61	@ 0x3d
 8002006:	f7ff fd6f 	bl	8001ae8 <BNO055_I2C_bus_write>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <BNO055_Init_Sensor+0x7c>
	                             BNO055_OPR_MODE_ADDR,
	                             &mode, 1) != BNO055_SUCCESS){
	        printf("ERROR: %s failed to set IMUPLUS mode!\r\n", name);
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	483c      	ldr	r0, [pc, #240]	@ (8002104 <BNO055_Init_Sensor+0x164>)
 8002014:	f008 f8ba 	bl	800a18c <iprintf>
	        return SENSOR_INIT_ERROR;
 8002018:	2303      	movs	r3, #3
 800201a:	e065      	b.n	80020e8 <BNO055_Init_Sensor+0x148>
	    }

	    // Wait for mode change
	    BNO055_Delay(100);
 800201c:	2064      	movs	r0, #100	@ 0x64
 800201e:	f7ff f8f1 	bl	8001204 <BNO055_Delay>



	    // Axis remapping configuration
	    uint8_t remap_config = 0x21;  // Default P0 configuration
 8002022:	2321      	movs	r3, #33	@ 0x21
 8002024:	727b      	strb	r3, [r7, #9]
	    uint8_t remap_sign = 0x00;    // All axes positive
 8002026:	2300      	movs	r3, #0
 8002028:	723b      	strb	r3, [r7, #8]

	    // Write configuration
	    if (BNO055_I2C_bus_write(sensor->dev_addr,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7a58      	ldrb	r0, [r3, #9]
 800202e:	f107 0209 	add.w	r2, r7, #9
 8002032:	2301      	movs	r3, #1
 8002034:	2141      	movs	r1, #65	@ 0x41
 8002036:	f7ff fd57 	bl	8001ae8 <BNO055_I2C_bus_write>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <BNO055_Init_Sensor+0xac>
	                            BNO055_AXIS_MAP_CONFIG_ADDR,
	                            &remap_config, 1) != BNO055_SUCCESS) {
	        printf("ERROR: %s axis config failed!\r\n", name);
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	4831      	ldr	r0, [pc, #196]	@ (8002108 <BNO055_Init_Sensor+0x168>)
 8002044:	f008 f8a2 	bl	800a18c <iprintf>
	        return SENSOR_INIT_ERROR;
 8002048:	2303      	movs	r3, #3
 800204a:	e04d      	b.n	80020e8 <BNO055_Init_Sensor+0x148>
	    }

	    // Write sign configuration
	    if (BNO055_I2C_bus_write(sensor->dev_addr,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7a58      	ldrb	r0, [r3, #9]
 8002050:	f107 0208 	add.w	r2, r7, #8
 8002054:	2301      	movs	r3, #1
 8002056:	2142      	movs	r1, #66	@ 0x42
 8002058:	f7ff fd46 	bl	8001ae8 <BNO055_I2C_bus_write>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <BNO055_Init_Sensor+0xce>
	                            BNO055_AXIS_MAP_SIGN_ADDR,
	                            &remap_sign, 1) != BNO055_SUCCESS) {
	        printf("ERROR: %s axis sign config failed!\r\n", name);
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	4829      	ldr	r0, [pc, #164]	@ (800210c <BNO055_Init_Sensor+0x16c>)
 8002066:	f008 f891 	bl	800a18c <iprintf>
	        return SENSOR_INIT_ERROR;
 800206a:	2303      	movs	r3, #3
 800206c:	e03c      	b.n	80020e8 <BNO055_Init_Sensor+0x148>
	    }


	    // Check self-test results (1 = passed, 0 = failed)
	    u8 mcu_pass = (selftest_result >> 0) & 0x01;
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
	    u8 gyro_pass = (selftest_result >> 1) & 0x01;
 8002076:	7afb      	ldrb	r3, [r7, #11]
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	73bb      	strb	r3, [r7, #14]
	    u8 accel_pass = (selftest_result >> 2) & 0x01;
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	737b      	strb	r3, [r7, #13]
	    u8 mag_pass = (selftest_result >> 3) & 0x01;
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	08db      	lsrs	r3, r3, #3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	733b      	strb	r3, [r7, #12]

	    if (!(mcu_pass && gyro_pass && accel_pass)) {
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <BNO055_Init_Sensor+0x10c>
 80020a0:	7bbb      	ldrb	r3, [r7, #14]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <BNO055_Init_Sensor+0x10c>
 80020a6:	7b7b      	ldrb	r3, [r7, #13]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d118      	bne.n	80020de <BNO055_Init_Sensor+0x13e>
	        printf("ERROR: %s self-test failed! MCU:%d GYRO:%d ACC:%d MAG:%d\r\n",
 80020ac:	7bf9      	ldrb	r1, [r7, #15]
 80020ae:	7bb8      	ldrb	r0, [r7, #14]
 80020b0:	7b7b      	ldrb	r3, [r7, #13]
 80020b2:	7b3a      	ldrb	r2, [r7, #12]
 80020b4:	9201      	str	r2, [sp, #4]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	4603      	mov	r3, r0
 80020ba:	460a      	mov	r2, r1
 80020bc:	6839      	ldr	r1, [r7, #0]
 80020be:	4814      	ldr	r0, [pc, #80]	@ (8002110 <BNO055_Init_Sensor+0x170>)
 80020c0:	f008 f864 	bl	800a18c <iprintf>
	               name, mcu_pass, gyro_pass, accel_pass, mag_pass);

	        // Lock knee and activate red LED
	        gait_state.is_locked = true;
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <BNO055_Init_Sensor+0x174>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	725a      	strb	r2, [r3, #9]
	        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	2120      	movs	r1, #32
 80020ce:	4812      	ldr	r0, [pc, #72]	@ (8002118 <BNO055_Init_Sensor+0x178>)
 80020d0:	f001 ff50 	bl	8003f74 <HAL_GPIO_WritePin>
	        printf("CRITICAL ERROR - SYSTEM HALTED!\r\n");
 80020d4:	4811      	ldr	r0, [pc, #68]	@ (800211c <BNO055_Init_Sensor+0x17c>)
 80020d6:	f008 f8c1 	bl	800a25c <puts>
	        while(1);
 80020da:	bf00      	nop
 80020dc:	e7fd      	b.n	80020da <BNO055_Init_Sensor+0x13a>
	    }

	    printf("%s sensor initialized in IMUPLUS mode\r\n", name);
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	480f      	ldr	r0, [pc, #60]	@ (8002120 <BNO055_Init_Sensor+0x180>)
 80020e2:	f008 f853 	bl	800a18c <iprintf>
	    return SENSOR_OK;
 80020e6:	2300      	movs	r3, #0
	}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	08001a71 	.word	0x08001a71
 80020f4:	08001ae9 	.word	0x08001ae9
 80020f8:	08001205 	.word	0x08001205
 80020fc:	0800e368 	.word	0x0800e368
 8002100:	0800e388 	.word	0x0800e388
 8002104:	0800e3ac 	.word	0x0800e3ac
 8002108:	0800e3d4 	.word	0x0800e3d4
 800210c:	0800e3f4 	.word	0x0800e3f4
 8002110:	0800e41c 	.word	0x0800e41c
 8002114:	200004c4 	.word	0x200004c4
 8002118:	40020000 	.word	0x40020000
 800211c:	0800e458 	.word	0x0800e458
 8002120:	0800e47c 	.word	0x0800e47c

08002124 <BNO055_Init_Dual>:
	void BNO055_Init_Dual(void)
	{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
	  printf("\r\nInitializing BNO055 sensors...\r\n");
 800212a:	4825      	ldr	r0, [pc, #148]	@ (80021c0 <BNO055_Init_Dual+0x9c>)
 800212c:	f008 f896 	bl	800a25c <puts>
	  // Exit early if insufficient sensors detected
	  if (sensors_found < 2)
 8002130:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <BNO055_Init_Dual+0xa0>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d809      	bhi.n	800214c <BNO055_Init_Dual+0x28>
	  {
	    printf("ERROR: Only %d/2 sensors detected! Cannot proceed with initialization.\r\n", sensors_found);
 8002138:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <BNO055_Init_Dual+0xa0>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	4822      	ldr	r0, [pc, #136]	@ (80021c8 <BNO055_Init_Dual+0xa4>)
 8002140:	f008 f824 	bl	800a18c <iprintf>
	    system_status = SENSOR_INIT_ERROR;
 8002144:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <BNO055_Init_Dual+0xa8>)
 8002146:	2203      	movs	r2, #3
 8002148:	701a      	strb	r2, [r3, #0]
	    return;
 800214a:	e036      	b.n	80021ba <BNO055_Init_Dual+0x96>
	  }
	  // Initialize thigh sensor
	  SensorStatus thigh_init = BNO055_Init_Sensor(&thigh_sensor, "Thigh");
 800214c:	4920      	ldr	r1, [pc, #128]	@ (80021d0 <BNO055_Init_Dual+0xac>)
 800214e:	4821      	ldr	r0, [pc, #132]	@ (80021d4 <BNO055_Init_Dual+0xb0>)
 8002150:	f7ff ff26 	bl	8001fa0 <BNO055_Init_Sensor>
 8002154:	4603      	mov	r3, r0
 8002156:	71fb      	strb	r3, [r7, #7]
	  if (thigh_init == SENSOR_OK)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <BNO055_Init_Dual+0x48>
	  {
		thigh_imu.initialized = true;
 800215e:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <BNO055_Init_Dual+0xb4>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
		printf("✓ Thigh sensor ready\r\n");
 8002164:	481d      	ldr	r0, [pc, #116]	@ (80021dc <BNO055_Init_Dual+0xb8>)
 8002166:	f008 f879 	bl	800a25c <puts>
 800216a:	e003      	b.n	8002174 <BNO055_Init_Dual+0x50>
	  }
	  else
	  {
		handle_sensor_error("Thigh", "initialization failed");
 800216c:	491c      	ldr	r1, [pc, #112]	@ (80021e0 <BNO055_Init_Dual+0xbc>)
 800216e:	4818      	ldr	r0, [pc, #96]	@ (80021d0 <BNO055_Init_Dual+0xac>)
 8002170:	f000 fb78 	bl	8002864 <handle_sensor_error>
	  }

	  // Initialize shank sensor
	  SensorStatus shank_init = BNO055_Init_Sensor(&shank_sensor, "Shank");
 8002174:	491b      	ldr	r1, [pc, #108]	@ (80021e4 <BNO055_Init_Dual+0xc0>)
 8002176:	481c      	ldr	r0, [pc, #112]	@ (80021e8 <BNO055_Init_Dual+0xc4>)
 8002178:	f7ff ff12 	bl	8001fa0 <BNO055_Init_Sensor>
 800217c:	4603      	mov	r3, r0
 800217e:	71bb      	strb	r3, [r7, #6]
	  if (shank_init == SENSOR_OK)
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <BNO055_Init_Dual+0x70>
	  {
		shank_imu.initialized = true;
 8002186:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <BNO055_Init_Dual+0xc8>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
		printf("✓ Shank sensor ready\r\n");
 800218c:	4818      	ldr	r0, [pc, #96]	@ (80021f0 <BNO055_Init_Dual+0xcc>)
 800218e:	f008 f865 	bl	800a25c <puts>
 8002192:	e003      	b.n	800219c <BNO055_Init_Dual+0x78>
	  }
	  else
	  {
		handle_sensor_error("Shank", "initialization failed");
 8002194:	4912      	ldr	r1, [pc, #72]	@ (80021e0 <BNO055_Init_Dual+0xbc>)
 8002196:	4813      	ldr	r0, [pc, #76]	@ (80021e4 <BNO055_Init_Dual+0xc0>)
 8002198:	f000 fb64 	bl	8002864 <handle_sensor_error>
	  }

	  if (thigh_imu.initialized && shank_imu.initialized)
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <BNO055_Init_Dual+0xb4>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <BNO055_Init_Dual+0x90>
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <BNO055_Init_Dual+0xc8>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <BNO055_Init_Dual+0x90>
	  {
		printf("Both sensors initialized successfully!\r\n");
 80021ac:	4811      	ldr	r0, [pc, #68]	@ (80021f4 <BNO055_Init_Dual+0xd0>)
 80021ae:	f008 f855 	bl	800a25c <puts>
 80021b2:	e002      	b.n	80021ba <BNO055_Init_Dual+0x96>
	  }
	  else
	  {
		printf("WARNING: One or more sensors failed to initialize!\r\n");
 80021b4:	4810      	ldr	r0, [pc, #64]	@ (80021f8 <BNO055_Init_Dual+0xd4>)
 80021b6:	f008 f851 	bl	800a25c <puts>
	  }
	}
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	0800e4a4 	.word	0x0800e4a4
 80021c4:	200004c0 	.word	0x200004c0
 80021c8:	0800e4c8 	.word	0x0800e4c8
 80021cc:	20000000 	.word	0x20000000
 80021d0:	0800e514 	.word	0x0800e514
 80021d4:	20000450 	.word	0x20000450
 80021d8:	20000480 	.word	0x20000480
 80021dc:	0800e51c 	.word	0x0800e51c
 80021e0:	0800e534 	.word	0x0800e534
 80021e4:	0800e54c 	.word	0x0800e54c
 80021e8:	20000468 	.word	0x20000468
 80021ec:	20000498 	.word	0x20000498
 80021f0:	0800e554 	.word	0x0800e554
 80021f4:	0800e56c 	.word	0x0800e56c
 80021f8:	0800e594 	.word	0x0800e594

080021fc <read_calibration_status>:

	// ==== CALIBRATION FUNCTIONS ====
	s8 read_calibration_status(u8 dev, u8 *calib_array)
	{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
	  uint8_t calib_status_reg;
	  if (BNO055_I2C_bus_read(dev, BNO055_CALIB_STAT_ADDR, &calib_status_reg, 1) != BNO055_SUCCESS)
 8002208:	f107 020f 	add.w	r2, r7, #15
 800220c:	79f8      	ldrb	r0, [r7, #7]
 800220e:	2301      	movs	r3, #1
 8002210:	2135      	movs	r1, #53	@ 0x35
 8002212:	f7ff fc2d 	bl	8001a70 <BNO055_I2C_bus_read>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <read_calibration_status+0x26>
	  {
	    return BNO055_ERROR;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	e01e      	b.n	8002260 <read_calibration_status+0x64>
	  }

	  // Extract calibration statuses (ignore magnetometer)
	  calib_array[0] = (calib_status_reg >> 6) & 0x03; // System
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	b2da      	uxtb	r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	701a      	strb	r2, [r3, #0]
	  calib_array[1] = (calib_status_reg >> 4) & 0x03; // Gyroscope
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	b2da      	uxtb	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	f002 0203 	and.w	r2, r2, #3
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]
	  calib_array[2] = (calib_status_reg >> 2) & 0x03; // Accelerometer
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	b2da      	uxtb	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	3302      	adds	r3, #2
 8002248:	f002 0203 	and.w	r2, r2, #3
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
	  calib_array[3] = (calib_status_reg >> 0) & 0x03; // Magnetometer
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	3303      	adds	r3, #3
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]

	  // Note: Magnetometer status ignored for prosthetic application

	  return BNO055_SUCCESS;
 800225e:	2300      	movs	r3, #0
	}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <is_sensor_calibrated>:

	bool is_sensor_calibrated(uint8_t *calib_status)
	{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	  // For prosthetic knee application, prioritize gyro and accel calibration
	  return (calib_status[1] >= GYRO_CALIB_THRESHOLD &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d906      	bls.n	8002288 <is_sensor_calibrated+0x20>
			  calib_status[2] >= ACCEL_CALIB_THRESHOLD);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3302      	adds	r3, #2
 800227e:	781b      	ldrb	r3, [r3, #0]
	  return (calib_status[1] >= GYRO_CALIB_THRESHOLD &&
 8002280:	2b01      	cmp	r3, #1
 8002282:	d901      	bls.n	8002288 <is_sensor_calibrated+0x20>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <is_sensor_calibrated+0x22>
 8002288:	2300      	movs	r3, #0
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
	}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <Read_Dual_Calibration>:

	void Read_Dual_Calibration(void)
	{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	  if (thigh_imu.initialized)
 80022a0:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <Read_Dual_Calibration+0x58>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00f      	beq.n	80022c8 <Read_Dual_Calibration+0x2c>
	  {
		if (read_calibration_status(thigh_sensor.dev_addr, thigh_imu.calib_status) == BNO055_SUCCESS)
 80022a8:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <Read_Dual_Calibration+0x5c>)
 80022aa:	7a5b      	ldrb	r3, [r3, #9]
 80022ac:	4913      	ldr	r1, [pc, #76]	@ (80022fc <Read_Dual_Calibration+0x60>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ffa4 	bl	80021fc <read_calibration_status>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <Read_Dual_Calibration+0x2c>
		{
		  thigh_imu.calibrated = is_sensor_calibrated(thigh_imu.calib_status);
 80022ba:	4810      	ldr	r0, [pc, #64]	@ (80022fc <Read_Dual_Calibration+0x60>)
 80022bc:	f7ff ffd4 	bl	8002268 <is_sensor_calibrated>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <Read_Dual_Calibration+0x58>)
 80022c6:	705a      	strb	r2, [r3, #1]
		}
	  }

	  if (shank_imu.initialized)
 80022c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <Read_Dual_Calibration+0x64>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00f      	beq.n	80022f0 <Read_Dual_Calibration+0x54>
	  {
		if (read_calibration_status(shank_sensor.dev_addr, shank_imu.calib_status) == BNO055_SUCCESS)
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <Read_Dual_Calibration+0x68>)
 80022d2:	7a5b      	ldrb	r3, [r3, #9]
 80022d4:	490c      	ldr	r1, [pc, #48]	@ (8002308 <Read_Dual_Calibration+0x6c>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff90 	bl	80021fc <read_calibration_status>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <Read_Dual_Calibration+0x54>
		{
		  shank_imu.calibrated = is_sensor_calibrated(shank_imu.calib_status);
 80022e2:	4809      	ldr	r0, [pc, #36]	@ (8002308 <Read_Dual_Calibration+0x6c>)
 80022e4:	f7ff ffc0 	bl	8002268 <is_sensor_calibrated>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <Read_Dual_Calibration+0x64>)
 80022ee:	705a      	strb	r2, [r3, #1]
		}
	  }
	}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000480 	.word	0x20000480
 80022f8:	20000450 	.word	0x20000450
 80022fc:	20000494 	.word	0x20000494
 8002300:	20000498 	.word	0x20000498
 8002304:	20000468 	.word	0x20000468
 8002308:	200004ac 	.word	0x200004ac

0800230c <print_calibration_status>:

	void print_calibration_status(void)
	{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b083      	sub	sp, #12
 8002310:	af02      	add	r7, sp, #8
	    printf("Calibration Status (Sys|Gyr|Acc|Mag):\r\n");
 8002312:	481d      	ldr	r0, [pc, #116]	@ (8002388 <print_calibration_status+0x7c>)
 8002314:	f007 ffa2 	bl	800a25c <puts>
	    printf("  Thigh - %d|%d|%d|%d %s\r\n",
	           thigh_imu.calib_status[0], thigh_imu.calib_status[1],
 8002318:	4b1c      	ldr	r3, [pc, #112]	@ (800238c <print_calibration_status+0x80>)
 800231a:	7d1b      	ldrb	r3, [r3, #20]
	    printf("  Thigh - %d|%d|%d|%d %s\r\n",
 800231c:	4619      	mov	r1, r3
	           thigh_imu.calib_status[0], thigh_imu.calib_status[1],
 800231e:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <print_calibration_status+0x80>)
 8002320:	7d5b      	ldrb	r3, [r3, #21]
	    printf("  Thigh - %d|%d|%d|%d %s\r\n",
 8002322:	4618      	mov	r0, r3
	           thigh_imu.calib_status[2], thigh_imu.calib_status[3],
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <print_calibration_status+0x80>)
 8002326:	7d9b      	ldrb	r3, [r3, #22]
	    printf("  Thigh - %d|%d|%d|%d %s\r\n",
 8002328:	461c      	mov	r4, r3
	           thigh_imu.calib_status[2], thigh_imu.calib_status[3],
 800232a:	4b18      	ldr	r3, [pc, #96]	@ (800238c <print_calibration_status+0x80>)
 800232c:	7ddb      	ldrb	r3, [r3, #23]
	    printf("  Thigh - %d|%d|%d|%d %s\r\n",
 800232e:	461a      	mov	r2, r3
	           thigh_imu.calibrated ? "[OK]" : "[PENDING]");
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <print_calibration_status+0x80>)
 8002332:	785b      	ldrb	r3, [r3, #1]
	    printf("  Thigh - %d|%d|%d|%d %s\r\n",
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <print_calibration_status+0x30>
 8002338:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <print_calibration_status+0x84>)
 800233a:	e000      	b.n	800233e <print_calibration_status+0x32>
 800233c:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <print_calibration_status+0x88>)
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	9200      	str	r2, [sp, #0]
 8002342:	4623      	mov	r3, r4
 8002344:	4602      	mov	r2, r0
 8002346:	4814      	ldr	r0, [pc, #80]	@ (8002398 <print_calibration_status+0x8c>)
 8002348:	f007 ff20 	bl	800a18c <iprintf>

	    printf("  Shank - %d|%d|%d|%d %s\r\n",
	           shank_imu.calib_status[0], shank_imu.calib_status[1],
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <print_calibration_status+0x90>)
 800234e:	7d1b      	ldrb	r3, [r3, #20]
	    printf("  Shank - %d|%d|%d|%d %s\r\n",
 8002350:	4619      	mov	r1, r3
	           shank_imu.calib_status[0], shank_imu.calib_status[1],
 8002352:	4b12      	ldr	r3, [pc, #72]	@ (800239c <print_calibration_status+0x90>)
 8002354:	7d5b      	ldrb	r3, [r3, #21]
	    printf("  Shank - %d|%d|%d|%d %s\r\n",
 8002356:	4618      	mov	r0, r3
	           shank_imu.calib_status[2], shank_imu.calib_status[3],
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <print_calibration_status+0x90>)
 800235a:	7d9b      	ldrb	r3, [r3, #22]
	    printf("  Shank - %d|%d|%d|%d %s\r\n",
 800235c:	461c      	mov	r4, r3
	           shank_imu.calib_status[2], shank_imu.calib_status[3],
 800235e:	4b0f      	ldr	r3, [pc, #60]	@ (800239c <print_calibration_status+0x90>)
 8002360:	7ddb      	ldrb	r3, [r3, #23]
	    printf("  Shank - %d|%d|%d|%d %s\r\n",
 8002362:	461a      	mov	r2, r3
	           shank_imu.calibrated ? "[OK]" : "[PENDING]");
 8002364:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <print_calibration_status+0x90>)
 8002366:	785b      	ldrb	r3, [r3, #1]
	    printf("  Shank - %d|%d|%d|%d %s\r\n",
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <print_calibration_status+0x64>
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <print_calibration_status+0x84>)
 800236e:	e000      	b.n	8002372 <print_calibration_status+0x66>
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <print_calibration_status+0x88>)
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	9200      	str	r2, [sp, #0]
 8002376:	4623      	mov	r3, r4
 8002378:	4602      	mov	r2, r0
 800237a:	4809      	ldr	r0, [pc, #36]	@ (80023a0 <print_calibration_status+0x94>)
 800237c:	f007 ff06 	bl	800a18c <iprintf>
	}
 8002380:	bf00      	nop
 8002382:	3704      	adds	r7, #4
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}
 8002388:	0800e5c8 	.word	0x0800e5c8
 800238c:	20000480 	.word	0x20000480
 8002390:	0800e5f0 	.word	0x0800e5f0
 8002394:	0800e5f8 	.word	0x0800e5f8
 8002398:	0800e604 	.word	0x0800e604
 800239c:	20000498 	.word	0x20000498
 80023a0:	0800e620 	.word	0x0800e620

080023a4 <read_euler_angles_safe>:

	// ==== ORIENTATION AND DATA PROCESSING ====
	s8 read_euler_angles_safe(u8 dev, struct bno055_euler_float_t *euler)
	{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
	  uint8_t euler_data[6];

	  if (BNO055_I2C_bus_read(dev, BNO055_EULER_H_LSB_ADDR, euler_data, 6) != BNO055_SUCCESS)
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	79f8      	ldrb	r0, [r7, #7]
 80023b6:	2306      	movs	r3, #6
 80023b8:	211a      	movs	r1, #26
 80023ba:	f7ff fb59 	bl	8001a70 <BNO055_I2C_bus_read>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <read_euler_angles_safe+0x26>
	  {
		return BNO055_ERROR;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	e03f      	b.n	800244a <read_euler_angles_safe+0xa6>
	  }

	  // Convert raw data to euler angles (16-bit signed, LSB first)
	  int16_t heading = (int16_t)((euler_data[1] << 8) | euler_data[0]);
 80023ca:	7b7b      	ldrb	r3, [r7, #13]
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	7b3b      	ldrb	r3, [r7, #12]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	82fb      	strh	r3, [r7, #22]
	  int16_t roll    = (int16_t)((euler_data[3] << 8) | euler_data[2]);
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	7bbb      	ldrb	r3, [r7, #14]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	82bb      	strh	r3, [r7, #20]
	  int16_t pitch   = (int16_t)((euler_data[5] << 8) | euler_data[4]);
 80023ea:	7c7b      	ldrb	r3, [r7, #17]
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	7c3b      	ldrb	r3, [r7, #16]
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	4313      	orrs	r3, r2
 80023f8:	827b      	strh	r3, [r7, #18]

	  // Scale to degrees (1 degree = 16 LSB)
	  euler->h = heading / 16.0f;
 80023fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002406:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800240a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	edc3 7a00 	vstr	s15, [r3]
	  euler->r = roll / 16.0f;
 8002414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002420:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	edc3 7a01 	vstr	s15, [r3, #4]
	  euler->p = pitch / 16.0f;
 800242e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800243a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800243e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	edc3 7a02 	vstr	s15, [r3, #8]

	  return BNO055_SUCCESS;
 8002448:	2300      	movs	r3, #0
	}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <normalize_angle>:

	float normalize_angle(float angle) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	ed87 0a01 	vstr	s0, [r7, #4]
		angle = fmodf(angle, 360.0f);
 800245e:	eddf 0a18 	vldr	s1, [pc, #96]	@ 80024c0 <normalize_angle+0x6c>
 8002462:	ed97 0a01 	vldr	s0, [r7, #4]
 8002466:	f00b fc01 	bl	800dc6c <fmodf>
 800246a:	ed87 0a01 	vstr	s0, [r7, #4]
		if (angle < 0) angle += 360.0f;  // Convert to 0-360 range
 800246e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247a:	d507      	bpl.n	800248c <normalize_angle+0x38>
 800247c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002480:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80024c0 <normalize_angle+0x6c>
 8002484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002488:	edc7 7a01 	vstr	s15, [r7, #4]
		if (angle > 180) angle -= 360.0f;  // Convert to -180 to 180
 800248c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002490:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80024c4 <normalize_angle+0x70>
 8002494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	dd07      	ble.n	80024ae <normalize_angle+0x5a>
 800249e:	edd7 7a01 	vldr	s15, [r7, #4]
 80024a2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80024c0 <normalize_angle+0x6c>
 80024a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024aa:	edc7 7a01 	vstr	s15, [r7, #4]
		return angle;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	ee07 3a90 	vmov	s15, r3
	}
 80024b4:	eeb0 0a67 	vmov.f32	s0, s15
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	43b40000 	.word	0x43b40000
 80024c4:	43340000 	.word	0x43340000

080024c8 <Read_Dual_Orientation>:

	void Read_Dual_Orientation(void)
	{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
	    static uint16_t error_count = 0;  // Error counter local to this function
	    uint32_t current_time = HAL_GetTick();
 80024ce:	f000 fef1 	bl	80032b4 <HAL_GetTick>
 80024d2:	61b8      	str	r0, [r7, #24]
	    bool read_success = true;
 80024d4:	2301      	movs	r3, #1
 80024d6:	77fb      	strb	r3, [r7, #31]

	    // Read thigh IMU
	    if (thigh_imu.initialized) {
 80024d8:	4b42      	ldr	r3, [pc, #264]	@ (80025e4 <Read_Dual_Orientation+0x11c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d02a      	beq.n	8002536 <Read_Dual_Orientation+0x6e>
	        struct bno055_euler_float_t temp_euler;
	        if (read_euler_angles_safe(thigh_sensor.dev_addr, &temp_euler) == BNO055_SUCCESS) {
 80024e0:	4b41      	ldr	r3, [pc, #260]	@ (80025e8 <Read_Dual_Orientation+0x120>)
 80024e2:	7a5b      	ldrb	r3, [r3, #9]
 80024e4:	f107 020c 	add.w	r2, r7, #12
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff5a 	bl	80023a4 <read_euler_angles_safe>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d119      	bne.n	800252a <Read_Dual_Orientation+0x62>
	            if (validate_sensor_data(&temp_euler)) {
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fa74 	bl	80029e8 <validate_sensor_data>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <Read_Dual_Orientation+0x54>
	                thigh_imu.euler = temp_euler;
 8002506:	4b37      	ldr	r3, [pc, #220]	@ (80025e4 <Read_Dual_Orientation+0x11c>)
 8002508:	3308      	adds	r3, #8
 800250a:	f107 020c 	add.w	r2, r7, #12
 800250e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002510:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	                thigh_imu.last_read_time = current_time;
 8002514:	4a33      	ldr	r2, [pc, #204]	@ (80025e4 <Read_Dual_Orientation+0x11c>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6053      	str	r3, [r2, #4]
 800251a:	e00c      	b.n	8002536 <Read_Dual_Orientation+0x6e>
	            } else {
	                handle_sensor_error("Thigh", "invalid data range");
 800251c:	4933      	ldr	r1, [pc, #204]	@ (80025ec <Read_Dual_Orientation+0x124>)
 800251e:	4834      	ldr	r0, [pc, #208]	@ (80025f0 <Read_Dual_Orientation+0x128>)
 8002520:	f000 f9a0 	bl	8002864 <handle_sensor_error>
	                read_success = false;
 8002524:	2300      	movs	r3, #0
 8002526:	77fb      	strb	r3, [r7, #31]
 8002528:	e005      	b.n	8002536 <Read_Dual_Orientation+0x6e>
	            }
	        } else {
	            handle_sensor_error("Thigh", "orientation read failed");
 800252a:	4932      	ldr	r1, [pc, #200]	@ (80025f4 <Read_Dual_Orientation+0x12c>)
 800252c:	4830      	ldr	r0, [pc, #192]	@ (80025f0 <Read_Dual_Orientation+0x128>)
 800252e:	f000 f999 	bl	8002864 <handle_sensor_error>
	            read_success = false;
 8002532:	2300      	movs	r3, #0
 8002534:	77fb      	strb	r3, [r7, #31]
	        }
	    }

	    BNO055_Delay(5);
 8002536:	2005      	movs	r0, #5
 8002538:	f7fe fe64 	bl	8001204 <BNO055_Delay>

	    // Read shank IMU
	    if (shank_imu.initialized && read_success) {  // Only proceed if thigh read was successful
 800253c:	4b2e      	ldr	r3, [pc, #184]	@ (80025f8 <Read_Dual_Orientation+0x130>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02a      	beq.n	800259a <Read_Dual_Orientation+0xd2>
 8002544:	7ffb      	ldrb	r3, [r7, #31]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d027      	beq.n	800259a <Read_Dual_Orientation+0xd2>
	        struct bno055_euler_float_t temp_euler;
	        if (read_euler_angles_safe(shank_sensor.dev_addr, &temp_euler) == BNO055_SUCCESS) {
 800254a:	4b2c      	ldr	r3, [pc, #176]	@ (80025fc <Read_Dual_Orientation+0x134>)
 800254c:	7a5b      	ldrb	r3, [r3, #9]
 800254e:	463a      	mov	r2, r7
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff26 	bl	80023a4 <read_euler_angles_safe>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d117      	bne.n	800258e <Read_Dual_Orientation+0xc6>
	            if (validate_sensor_data(&temp_euler)) {
 800255e:	463b      	mov	r3, r7
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fa41 	bl	80029e8 <validate_sensor_data>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <Read_Dual_Orientation+0xb8>
	                shank_imu.euler = temp_euler;
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <Read_Dual_Orientation+0x130>)
 800256e:	3308      	adds	r3, #8
 8002570:	463a      	mov	r2, r7
 8002572:	ca07      	ldmia	r2, {r0, r1, r2}
 8002574:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	                shank_imu.last_read_time = current_time;
 8002578:	4a1f      	ldr	r2, [pc, #124]	@ (80025f8 <Read_Dual_Orientation+0x130>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6053      	str	r3, [r2, #4]
 800257e:	e00c      	b.n	800259a <Read_Dual_Orientation+0xd2>
	            } else {
	                handle_sensor_error("Shank", "invalid data range");
 8002580:	491a      	ldr	r1, [pc, #104]	@ (80025ec <Read_Dual_Orientation+0x124>)
 8002582:	481f      	ldr	r0, [pc, #124]	@ (8002600 <Read_Dual_Orientation+0x138>)
 8002584:	f000 f96e 	bl	8002864 <handle_sensor_error>
	                read_success = false;
 8002588:	2300      	movs	r3, #0
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	e005      	b.n	800259a <Read_Dual_Orientation+0xd2>
	            }
	        } else {
	            handle_sensor_error("Shank", "orientation read failed");
 800258e:	4919      	ldr	r1, [pc, #100]	@ (80025f4 <Read_Dual_Orientation+0x12c>)
 8002590:	481b      	ldr	r0, [pc, #108]	@ (8002600 <Read_Dual_Orientation+0x138>)
 8002592:	f000 f967 	bl	8002864 <handle_sensor_error>
	            read_success = false;
 8002596:	2300      	movs	r3, #0
 8002598:	77fb      	strb	r3, [r7, #31]
	        }
	    }

	    // Update global timestamp only if both reads were successful
	    if (read_success) {
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <Read_Dual_Orientation+0xea>
	        last_orientation_update = HAL_GetTick();
 80025a0:	f000 fe88 	bl	80032b4 <HAL_GetTick>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4a17      	ldr	r2, [pc, #92]	@ (8002604 <Read_Dual_Orientation+0x13c>)
 80025a8:	6013      	str	r3, [r2, #0]
	        error_count = 0;  // Reset error counter on full success
 80025aa:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <Read_Dual_Orientation+0x140>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	801a      	strh	r2, [r3, #0]
	            gait_state.is_locked = true;
	            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	            // System continues to run but maintains safety lock
	        }
	    }
	}
 80025b0:	e014      	b.n	80025dc <Read_Dual_Orientation+0x114>
	        error_count++;  // Increment error counter on any failure
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <Read_Dual_Orientation+0x140>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <Read_Dual_Orientation+0x140>)
 80025bc:	801a      	strh	r2, [r3, #0]
	        if (error_count > MAX_ERROR_COUNT) {
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <Read_Dual_Orientation+0x140>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	2b14      	cmp	r3, #20
 80025c4:	d90a      	bls.n	80025dc <Read_Dual_Orientation+0x114>
	            printf("CRITICAL: Too many consecutive errors - LOCKING KNEE!\r\n");
 80025c6:	4811      	ldr	r0, [pc, #68]	@ (800260c <Read_Dual_Orientation+0x144>)
 80025c8:	f007 fe48 	bl	800a25c <puts>
	            gait_state.is_locked = true;
 80025cc:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <Read_Dual_Orientation+0x148>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	725a      	strb	r2, [r3, #9]
	            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80025d2:	2201      	movs	r2, #1
 80025d4:	2120      	movs	r1, #32
 80025d6:	480f      	ldr	r0, [pc, #60]	@ (8002614 <Read_Dual_Orientation+0x14c>)
 80025d8:	f001 fccc 	bl	8003f74 <HAL_GPIO_WritePin>
	}
 80025dc:	bf00      	nop
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000480 	.word	0x20000480
 80025e8:	20000450 	.word	0x20000450
 80025ec:	0800e63c 	.word	0x0800e63c
 80025f0:	0800e514 	.word	0x0800e514
 80025f4:	0800e650 	.word	0x0800e650
 80025f8:	20000498 	.word	0x20000498
 80025fc:	20000468 	.word	0x20000468
 8002600:	0800e54c 	.word	0x0800e54c
 8002604:	200004b4 	.word	0x200004b4
 8002608:	200004d4 	.word	0x200004d4
 800260c:	0800e668 	.word	0x0800e668
 8002610:	200004c4 	.word	0x200004c4
 8002614:	40020000 	.word	0x40020000

08002618 <calculate_knee_kinematics>:

	void calculate_knee_kinematics(void)
	{
 8002618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800261c:	b08e      	sub	sp, #56	@ 0x38
 800261e:	af06      	add	r7, sp, #24
	    static bool first_sample = true;
	    static uint32_t last_print_time = 0;
	    static float prev_raw_knee_angle = 0.0f;  // Store previous RAW angle

	    // Only calculate if both sensors have recent data
	    if (!thigh_imu.initialized || !shank_imu.initialized)
 8002620:	4b7e      	ldr	r3, [pc, #504]	@ (800281c <calculate_knee_kinematics+0x204>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	f083 0301 	eor.w	r3, r3, #1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 80ed 	bne.w	800280a <calculate_knee_kinematics+0x1f2>
 8002630:	4b7b      	ldr	r3, [pc, #492]	@ (8002820 <calculate_knee_kinematics+0x208>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f083 0301 	eor.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 80e5 	bne.w	800280a <calculate_knee_kinematics+0x1f2>
	        return;

	    uint32_t current_time = HAL_GetTick();
 8002640:	f000 fe38 	bl	80032b4 <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

	    // Check for sensor timeouts
	    if ((current_time - thigh_imu.last_read_time > SENSOR_TIMEOUT_MS) ||
 8002646:	4b75      	ldr	r3, [pc, #468]	@ (800281c <calculate_knee_kinematics+0x204>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	f200 80dd 	bhi.w	800280e <calculate_knee_kinematics+0x1f6>
	        (current_time - shank_imu.last_read_time > SENSOR_TIMEOUT_MS))
 8002654:	4b72      	ldr	r3, [pc, #456]	@ (8002820 <calculate_knee_kinematics+0x208>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	1ad3      	subs	r3, r2, r3
	    if ((current_time - thigh_imu.last_read_time > SENSOR_TIMEOUT_MS) ||
 800265c:	2b64      	cmp	r3, #100	@ 0x64
 800265e:	f200 80d6 	bhi.w	800280e <calculate_knee_kinematics+0x1f6>
	    {
	        return; // Skip calculation if data is stale
	    }

	    // Skip first sample to establish timing baseline
	    if (first_sample)
 8002662:	4b70      	ldr	r3, [pc, #448]	@ (8002824 <calculate_knee_kinematics+0x20c>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d019      	beq.n	800269e <calculate_knee_kinematics+0x86>
	    {
	        prev_update_time = current_time;  // Use current time, not orientation update
 800266a:	4a6f      	ldr	r2, [pc, #444]	@ (8002828 <calculate_knee_kinematics+0x210>)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	6013      	str	r3, [r2, #0]
	        first_sample = false;
 8002670:	4b6c      	ldr	r3, [pc, #432]	@ (8002824 <calculate_knee_kinematics+0x20c>)
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]

	        // Calculate initial raw angle
	        float pitch_diff = thigh_imu.euler.p - shank_imu.euler.p;
 8002676:	4b69      	ldr	r3, [pc, #420]	@ (800281c <calculate_knee_kinematics+0x204>)
 8002678:	ed93 7a04 	vldr	s14, [r3, #16]
 800267c:	4b68      	ldr	r3, [pc, #416]	@ (8002820 <calculate_knee_kinematics+0x208>)
 800267e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002686:	edc7 7a01 	vstr	s15, [r7, #4]
	        prev_raw_knee_angle = normalize_angle(pitch_diff);
 800268a:	ed97 0a01 	vldr	s0, [r7, #4]
 800268e:	f7ff fee1 	bl	8002454 <normalize_angle>
 8002692:	eef0 7a40 	vmov.f32	s15, s0
 8002696:	4b65      	ldr	r3, [pc, #404]	@ (800282c <calculate_knee_kinematics+0x214>)
 8002698:	edc3 7a00 	vstr	s15, [r3]

	        return;
 800269c:	e0ba      	b.n	8002814 <calculate_knee_kinematics+0x1fc>
	    }

	    // Calculate time delta in SECONDS
	    float dt = (current_time - prev_update_time) / 1000.0f;
 800269e:	4b62      	ldr	r3, [pc, #392]	@ (8002828 <calculate_knee_kinematics+0x210>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026ae:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8002830 <calculate_knee_kinematics+0x218>
 80026b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b6:	edc7 7a07 	vstr	s15, [r7, #28]
	    if (dt > 0.1f) dt = 0.1f;
 80026ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80026be:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8002834 <calculate_knee_kinematics+0x21c>
 80026c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	dd01      	ble.n	80026d0 <calculate_knee_kinematics+0xb8>
 80026cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002838 <calculate_knee_kinematics+0x220>)
 80026ce:	61fb      	str	r3, [r7, #28]
	    prev_update_time = current_time;  // Update immediately after calculation
 80026d0:	4a55      	ldr	r2, [pc, #340]	@ (8002828 <calculate_knee_kinematics+0x210>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	6013      	str	r3, [r2, #0]

	    // Prevent division by zero and handle very small time steps
	    if (dt <= 0.001f) return;
 80026d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80026da:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800283c <calculate_knee_kinematics+0x224>
 80026de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e6:	f240 8094 	bls.w	8002812 <calculate_knee_kinematics+0x1fa>

	    // Calculate RAW knee angle (signed)
	    float pitch_diff = shank_imu.euler.p - thigh_imu.euler.p;
 80026ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002820 <calculate_knee_kinematics+0x208>)
 80026ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80026f0:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <calculate_knee_kinematics+0x204>)
 80026f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80026f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fa:	edc7 7a04 	vstr	s15, [r7, #16]



	    float raw_knee_angle = normalize_angle(pitch_diff);
 80026fe:	ed97 0a04 	vldr	s0, [r7, #16]
 8002702:	f7ff fea7 	bl	8002454 <normalize_angle>
 8002706:	ed87 0a03 	vstr	s0, [r7, #12]


	    // For display only - clamp to 0-160° (preserve raw for calculations)
	    float display_angle = raw_knee_angle;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	61bb      	str	r3, [r7, #24]
	    if (display_angle < 0) display_angle = 0;
 800270e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002712:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	d502      	bpl.n	8002722 <calculate_knee_kinematics+0x10a>
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
	    if (display_angle > 160.0f) display_angle = 160.0f;
 8002722:	edd7 7a06 	vldr	s15, [r7, #24]
 8002726:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002840 <calculate_knee_kinematics+0x228>
 800272a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002732:	dd01      	ble.n	8002738 <calculate_knee_kinematics+0x120>
 8002734:	4b43      	ldr	r3, [pc, #268]	@ (8002844 <calculate_knee_kinematics+0x22c>)
 8002736:	61bb      	str	r3, [r7, #24]

	    // Calculate angular velocity using RAW angles
	    float raw_velocity = (raw_knee_angle - prev_raw_knee_angle) / dt;
 8002738:	4b3c      	ldr	r3, [pc, #240]	@ (800282c <calculate_knee_kinematics+0x214>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002742:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002746:	ed97 7a07 	vldr	s14, [r7, #28]
 800274a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800274e:	edc7 7a02 	vstr	s15, [r7, #8]

	    // Clamp to physiological limits for knee motion
	    raw_velocity = fmaxf(fminf(raw_velocity, 300.0f), -300.0f);
 8002752:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8002848 <calculate_knee_kinematics+0x230>
 8002756:	ed97 0a02 	vldr	s0, [r7, #8]
 800275a:	f00b fac4 	bl	800dce6 <fminf>
 800275e:	eef0 7a40 	vmov.f32	s15, s0
 8002762:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800284c <calculate_knee_kinematics+0x234>
 8002766:	eeb0 0a67 	vmov.f32	s0, s15
 800276a:	f00b fa9f 	bl	800dcac <fmaxf>
 800276e:	ed87 0a02 	vstr	s0, [r7, #8]

	    // Apply low-pass filter
	    filtered_velocity = velocity_filter_alpha * raw_velocity +
 8002772:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002850 <calculate_knee_kinematics+0x238>
 8002776:	edd7 7a02 	vldr	s15, [r7, #8]
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
	                       (1.0f - velocity_filter_alpha) * filtered_velocity;
 800277e:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8002850 <calculate_knee_kinematics+0x238>
 8002782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002786:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800278a:	4b32      	ldr	r3, [pc, #200]	@ (8002854 <calculate_knee_kinematics+0x23c>)
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    filtered_velocity = velocity_filter_alpha * raw_velocity +
 8002794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002798:	4b2e      	ldr	r3, [pc, #184]	@ (8002854 <calculate_knee_kinematics+0x23c>)
 800279a:	edc3 7a00 	vstr	s15, [r3]

	    // Update previous values
	    prev_raw_knee_angle = raw_knee_angle;
 800279e:	4a23      	ldr	r2, [pc, #140]	@ (800282c <calculate_knee_kinematics+0x214>)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6013      	str	r3, [r2, #0]
	    knee_angle = raw_knee_angle;  // Store SIGNED angle for gait detection
 80027a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002858 <calculate_knee_kinematics+0x240>)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6013      	str	r3, [r2, #0]

	    // Print results with clamped display angle
	    if (current_time - last_print_time >= KNEE_PRINT_INTERVAL) {
 80027aa:	4b2c      	ldr	r3, [pc, #176]	@ (800285c <calculate_knee_kinematics+0x244>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80027b6:	d32d      	bcc.n	8002814 <calculate_knee_kinematics+0x1fc>
	        printf("Knee: %6.1f° | Vel: %+7.1f°/s | T_p:%6.1f S_p:%6.1f\r\n",
 80027b8:	69b8      	ldr	r0, [r7, #24]
 80027ba:	f7fd fee5 	bl	8000588 <__aeabi_f2d>
 80027be:	4682      	mov	sl, r0
 80027c0:	468b      	mov	fp, r1
 80027c2:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <calculate_knee_kinematics+0x23c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fede 	bl	8000588 <__aeabi_f2d>
 80027cc:	4604      	mov	r4, r0
 80027ce:	460d      	mov	r5, r1
	               display_angle, filtered_velocity,
	               thigh_imu.euler.p, shank_imu.euler.p);
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <calculate_knee_kinematics+0x204>)
 80027d2:	691b      	ldr	r3, [r3, #16]
	        printf("Knee: %6.1f° | Vel: %+7.1f°/s | T_p:%6.1f S_p:%6.1f\r\n",
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fed7 	bl	8000588 <__aeabi_f2d>
 80027da:	4680      	mov	r8, r0
 80027dc:	4689      	mov	r9, r1
	               thigh_imu.euler.p, shank_imu.euler.p);
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <calculate_knee_kinematics+0x208>)
 80027e0:	691b      	ldr	r3, [r3, #16]
	        printf("Knee: %6.1f° | Vel: %+7.1f°/s | T_p:%6.1f S_p:%6.1f\r\n",
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fed0 	bl	8000588 <__aeabi_f2d>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80027f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80027f4:	e9cd 4500 	strd	r4, r5, [sp]
 80027f8:	4652      	mov	r2, sl
 80027fa:	465b      	mov	r3, fp
 80027fc:	4818      	ldr	r0, [pc, #96]	@ (8002860 <calculate_knee_kinematics+0x248>)
 80027fe:	f007 fcc5 	bl	800a18c <iprintf>
	        last_print_time = current_time;
 8002802:	4a16      	ldr	r2, [pc, #88]	@ (800285c <calculate_knee_kinematics+0x244>)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e004      	b.n	8002814 <calculate_knee_kinematics+0x1fc>
	        return;
 800280a:	bf00      	nop
 800280c:	e002      	b.n	8002814 <calculate_knee_kinematics+0x1fc>
	        return; // Skip calculation if data is stale
 800280e:	bf00      	nop
 8002810:	e000      	b.n	8002814 <calculate_knee_kinematics+0x1fc>
	    if (dt <= 0.001f) return;
 8002812:	bf00      	nop
	    }
	}
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281c:	20000480 	.word	0x20000480
 8002820:	20000498 	.word	0x20000498
 8002824:	20000001 	.word	0x20000001
 8002828:	200004d8 	.word	0x200004d8
 800282c:	200004dc 	.word	0x200004dc
 8002830:	447a0000 	.word	0x447a0000
 8002834:	3dcccccd 	.word	0x3dcccccd
 8002838:	3dcccccd 	.word	0x3dcccccd
 800283c:	3a83126f 	.word	0x3a83126f
 8002840:	43200000 	.word	0x43200000
 8002844:	43200000 	.word	0x43200000
 8002848:	43960000 	.word	0x43960000
 800284c:	c3960000 	.word	0xc3960000
 8002850:	3e99999a 	.word	0x3e99999a
 8002854:	200004bc 	.word	0x200004bc
 8002858:	200004b0 	.word	0x200004b0
 800285c:	200004e0 	.word	0x200004e0
 8002860:	0800e6a0 	.word	0x0800e6a0

08002864 <handle_sensor_error>:

	// ==== UTILITY FUNCTIONS ====
	void handle_sensor_error(const char* sensor_name, const char* error_msg) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	    static uint32_t last_error_time = 0;
	    static uint16_t error_count = 0;
	    uint32_t current_time = HAL_GetTick();
 800286e:	f000 fd21 	bl	80032b4 <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]

	    // Rate limit errors
	    if (current_time - last_error_time > 1000) {
 8002874:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <handle_sensor_error+0x78>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002880:	d91e      	bls.n	80028c0 <handle_sensor_error+0x5c>
	        printf("ERROR: %s - %s (Count: %d)\r\n", sensor_name, error_msg, ++error_count);
 8002882:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <handle_sensor_error+0x7c>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <handle_sensor_error+0x7c>)
 800288c:	801a      	strh	r2, [r3, #0]
 800288e:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <handle_sensor_error+0x7c>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4813      	ldr	r0, [pc, #76]	@ (80028e4 <handle_sensor_error+0x80>)
 8002898:	f007 fc78 	bl	800a18c <iprintf>
	        last_error_time = current_time;
 800289c:	4a0f      	ldr	r2, [pc, #60]	@ (80028dc <handle_sensor_error+0x78>)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6013      	str	r3, [r2, #0]

	        // Emergency shutdown after 20 consecutive errors
	        if (error_count > MAX_ERROR_COUNT) {
 80028a2:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <handle_sensor_error+0x7c>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	2b14      	cmp	r3, #20
 80028a8:	d90a      	bls.n	80028c0 <handle_sensor_error+0x5c>
	            printf("CRITICAL: Too many errors - LOCKING KNEE!\r\n");
 80028aa:	480f      	ldr	r0, [pc, #60]	@ (80028e8 <handle_sensor_error+0x84>)
 80028ac:	f007 fcd6 	bl	800a25c <puts>
	            gait_state.is_locked = true;
 80028b0:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <handle_sensor_error+0x88>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	725a      	strb	r2, [r3, #9]
	            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	2120      	movs	r1, #32
 80028ba:	480d      	ldr	r0, [pc, #52]	@ (80028f0 <handle_sensor_error+0x8c>)
 80028bc:	f001 fb5a 	bl	8003f74 <HAL_GPIO_WritePin>
	            // Don't halt - maintain safety but keep trying
	        }
	    }

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80028c6:	480b      	ldr	r0, [pc, #44]	@ (80028f4 <handle_sensor_error+0x90>)
 80028c8:	f001 fb54 	bl	8003f74 <HAL_GPIO_WritePin>
	    system_status = SENSOR_COMM_ERROR;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <handle_sensor_error+0x94>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
	}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200004e4 	.word	0x200004e4
 80028e0:	200004e8 	.word	0x200004e8
 80028e4:	0800e6d8 	.word	0x0800e6d8
 80028e8:	0800e6f8 	.word	0x0800e6f8
 80028ec:	200004c4 	.word	0x200004c4
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400
 80028f8:	20000000 	.word	0x20000000

080028fc <system_health_check>:



	void system_health_check(void)
	{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	  uint32_t current_time = HAL_GetTick();
 8002902:	f000 fcd7 	bl	80032b4 <HAL_GetTick>
 8002906:	6038      	str	r0, [r7, #0]
	  bool system_healthy = true;
 8002908:	2301      	movs	r3, #1
 800290a:	71fb      	strb	r3, [r7, #7]

	  // Check if sensors are responding
	  if (thigh_imu.initialized && (current_time - thigh_imu.last_read_time > 1000))
 800290c:	4b2b      	ldr	r3, [pc, #172]	@ (80029bc <system_health_check+0xc0>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <system_health_check+0x32>
 8002914:	4b29      	ldr	r3, [pc, #164]	@ (80029bc <system_health_check+0xc0>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002920:	d905      	bls.n	800292e <system_health_check+0x32>
	  {
		handle_sensor_error("Thigh", "communication timeout");
 8002922:	4927      	ldr	r1, [pc, #156]	@ (80029c0 <system_health_check+0xc4>)
 8002924:	4827      	ldr	r0, [pc, #156]	@ (80029c4 <system_health_check+0xc8>)
 8002926:	f7ff ff9d 	bl	8002864 <handle_sensor_error>
		system_healthy = false;
 800292a:	2300      	movs	r3, #0
 800292c:	71fb      	strb	r3, [r7, #7]
	  }

	  if (shank_imu.initialized && (current_time - shank_imu.last_read_time > 1000))
 800292e:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <system_health_check+0xcc>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00c      	beq.n	8002950 <system_health_check+0x54>
 8002936:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <system_health_check+0xcc>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002942:	d905      	bls.n	8002950 <system_health_check+0x54>
	  {
		handle_sensor_error("Shank", "communication timeout");
 8002944:	491e      	ldr	r1, [pc, #120]	@ (80029c0 <system_health_check+0xc4>)
 8002946:	4821      	ldr	r0, [pc, #132]	@ (80029cc <system_health_check+0xd0>)
 8002948:	f7ff ff8c 	bl	8002864 <handle_sensor_error>
		system_healthy = false;
 800294c:	2300      	movs	r3, #0
 800294e:	71fb      	strb	r3, [r7, #7]
	  }

	  // Check calibration drift
	  if (system_status == SENSOR_OK && calibration_complete)
 8002950:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <system_health_check+0xd4>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11f      	bne.n	8002998 <system_health_check+0x9c>
 8002958:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <system_health_check+0xd8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01b      	beq.n	8002998 <system_health_check+0x9c>
	  {
	    Read_Dual_Calibration();
 8002960:	f7ff fc9c 	bl	800229c <Read_Dual_Calibration>
	    if (!is_sensor_calibrated(thigh_imu.calib_status) ||
 8002964:	481c      	ldr	r0, [pc, #112]	@ (80029d8 <system_health_check+0xdc>)
 8002966:	f7ff fc7f 	bl	8002268 <is_sensor_calibrated>
 800296a:	4603      	mov	r3, r0
 800296c:	f083 0301 	eor.w	r3, r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <system_health_check+0x8c>
	        !is_sensor_calibrated(shank_imu.calib_status))
 8002976:	4819      	ldr	r0, [pc, #100]	@ (80029dc <system_health_check+0xe0>)
 8002978:	f7ff fc76 	bl	8002268 <is_sensor_calibrated>
 800297c:	4603      	mov	r3, r0
 800297e:	f083 0301 	eor.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
	    if (!is_sensor_calibrated(thigh_imu.calib_status) ||
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <system_health_check+0x9c>
	    {
	      printf("WARNING: Sensor recalibration needed!\r\n");
 8002988:	4815      	ldr	r0, [pc, #84]	@ (80029e0 <system_health_check+0xe4>)
 800298a:	f007 fc67 	bl	800a25c <puts>
	      system_status = SENSOR_NOT_CALIBRATED;
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <system_health_check+0xd4>)
 8002990:	2202      	movs	r2, #2
 8002992:	701a      	strb	r2, [r3, #0]
	      system_healthy = false;
 8002994:	2300      	movs	r3, #0
 8002996:	71fb      	strb	r3, [r7, #7]
	    }
	  }
	  // Update system status LED
	  if (system_healthy && system_status == SENSOR_OK)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <system_health_check+0xb6>
 800299e:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <system_health_check+0xd4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <system_health_check+0xb6>
	  {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Turn off debug LED
 80029a6:	2200      	movs	r2, #0
 80029a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029ac:	480d      	ldr	r0, [pc, #52]	@ (80029e4 <system_health_check+0xe8>)
 80029ae:	f001 fae1 	bl	8003f74 <HAL_GPIO_WritePin>
	  }
	}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000480 	.word	0x20000480
 80029c0:	0800e724 	.word	0x0800e724
 80029c4:	0800e514 	.word	0x0800e514
 80029c8:	20000498 	.word	0x20000498
 80029cc:	0800e54c 	.word	0x0800e54c
 80029d0:	20000000 	.word	0x20000000
 80029d4:	200004c1 	.word	0x200004c1
 80029d8:	20000494 	.word	0x20000494
 80029dc:	200004ac 	.word	0x200004ac
 80029e0:	0800e73c 	.word	0x0800e73c
 80029e4:	40020400 	.word	0x40020400

080029e8 <validate_sensor_data>:

	// ==== DATA VALIDATION ====
	bool validate_sensor_data(struct bno055_euler_float_t *euler) {
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	    // Allow ±200° to accommodate brief glitches
	    return !isnan(euler->h) && !isnan(euler->p) && !isnan(euler->r) &&
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	edd3 7a00 	vldr	s15, [r3]
	           fabsf(euler->h) <= 200.0f &&
	           fabsf(euler->r) <= 200.0f &&
 80029f6:	eef4 7a67 	vcmp.f32	s15, s15
 80029fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fe:	d635      	bvs.n	8002a6c <validate_sensor_data+0x84>
	    return !isnan(euler->h) && !isnan(euler->p) && !isnan(euler->r) &&
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a06:	eef4 7a67 	vcmp.f32	s15, s15
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	d62d      	bvs.n	8002a6c <validate_sensor_data+0x84>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a16:	eef4 7a67 	vcmp.f32	s15, s15
 8002a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1e:	d625      	bvs.n	8002a6c <validate_sensor_data+0x84>
	           fabsf(euler->h) <= 200.0f &&
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	eef0 7ae7 	vabs.f32	s15, s15
	    return !isnan(euler->h) && !isnan(euler->p) && !isnan(euler->r) &&
 8002a2a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002a80 <validate_sensor_data+0x98>
 8002a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	d819      	bhi.n	8002a6c <validate_sensor_data+0x84>
	           fabsf(euler->r) <= 200.0f &&
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a3e:	eef0 7ae7 	vabs.f32	s15, s15
	           fabsf(euler->h) <= 200.0f &&
 8002a42:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002a80 <validate_sensor_data+0x98>
 8002a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4e:	d80d      	bhi.n	8002a6c <validate_sensor_data+0x84>
	           fabsf(euler->p) <= 200.0f;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a56:	eef0 7ae7 	vabs.f32	s15, s15
	           fabsf(euler->r) <= 200.0f &&
 8002a5a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002a80 <validate_sensor_data+0x98>
 8002a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a66:	d801      	bhi.n	8002a6c <validate_sensor_data+0x84>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <validate_sensor_data+0x86>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
	}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	43480000 	.word	0x43480000

08002a84 <HAL_TIM_PeriodElapsedCallback>:
		printf("Button pressed - Debug LED toggled\r\n");
	  }
	}

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM3)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d102      	bne.n	8002a9c <HAL_TIM_PeriodElapsedCallback+0x18>
	  {
	    timer_flag = true;  // Trigger 100Hz processing
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
	  }
	}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	200004b8 	.word	0x200004b8

08002ab0 <Error_Handler>:
	/**
	  * @brief  This function is executed in case of error occurrence.
	  * @retval None
	  */
	void Error_Handler(void)
	{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab4:	b672      	cpsid	i
}
 8002ab6:	bf00      	nop
	  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Turn on debug LED
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002abe:	4808      	ldr	r0, [pc, #32]	@ (8002ae0 <Error_Handler+0x30>)
 8002ac0:	f001 fa58 	bl	8003f74 <HAL_GPIO_WritePin>
	  printf("FATAL ERROR: System halted!\r\n");
 8002ac4:	4807      	ldr	r0, [pc, #28]	@ (8002ae4 <Error_Handler+0x34>)
 8002ac6:	f007 fbc9 	bl	800a25c <puts>
	  while (1)
	  {
		// Blink debug LED rapidly to indicate error
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002aca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ace:	4804      	ldr	r0, [pc, #16]	@ (8002ae0 <Error_Handler+0x30>)
 8002ad0:	f001 fa69 	bl	8003fa6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002ad4:	2064      	movs	r0, #100	@ 0x64
 8002ad6:	f000 fbf9 	bl	80032cc <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002ada:	bf00      	nop
 8002adc:	e7f5      	b.n	8002aca <Error_Handler+0x1a>
 8002ade:	bf00      	nop
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	0800e788 	.word	0x0800e788

08002ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <HAL_MspInit+0x4c>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b34 <HAL_MspInit+0x4c>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <HAL_MspInit+0x4c>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <HAL_MspInit+0x4c>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	4a08      	ldr	r2, [pc, #32]	@ (8002b34 <HAL_MspInit+0x4c>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_MspInit+0x4c>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b26:	2007      	movs	r0, #7
 8002b28:	f000 fcc4 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40023800 	.word	0x40023800

08002b38 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	@ 0x30
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a80      	ldr	r2, [pc, #512]	@ (8002d58 <HAL_I2C_MspInit+0x220>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d13c      	bne.n	8002bd4 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	4a7e      	ldr	r2, [pc, #504]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b76:	23c0      	movs	r3, #192	@ 0xc0
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7a:	2312      	movs	r3, #18
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b86:	2304      	movs	r3, #4
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4873      	ldr	r0, [pc, #460]	@ (8002d60 <HAL_I2C_MspInit+0x228>)
 8002b92:	f001 f85b 	bl	8003c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	4b70      	ldr	r3, [pc, #448]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	4a6f      	ldr	r2, [pc, #444]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002ba0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	201f      	movs	r0, #31
 8002bb8:	f000 fc87 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002bbc:	201f      	movs	r0, #31
 8002bbe:	f000 fca0 	bl	8003502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2020      	movs	r0, #32
 8002bc8:	f000 fc7f 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002bcc:	2020      	movs	r0, #32
 8002bce:	f000 fc98 	bl	8003502 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002bd2:	e0bd      	b.n	8002d50 <HAL_I2C_MspInit+0x218>
  else if(hi2c->Instance==I2C2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a62      	ldr	r2, [pc, #392]	@ (8002d64 <HAL_I2C_MspInit+0x22c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	f040 80b8 	bne.w	8002d50 <HAL_I2C_MspInit+0x218>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	4b5d      	ldr	r3, [pc, #372]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	4a5c      	ldr	r2, [pc, #368]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	4b56      	ldr	r3, [pc, #344]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	4a55      	ldr	r2, [pc, #340]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0c:	4b53      	ldr	r3, [pc, #332]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c1e:	2312      	movs	r3, #18
 8002c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c26:	2303      	movs	r3, #3
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f107 031c 	add.w	r3, r7, #28
 8002c32:	4619      	mov	r1, r3
 8002c34:	484a      	ldr	r0, [pc, #296]	@ (8002d60 <HAL_I2C_MspInit+0x228>)
 8002c36:	f001 f809 	bl	8003c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c40:	2312      	movs	r3, #18
 8002c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	4619      	mov	r1, r3
 8002c56:	4844      	ldr	r0, [pc, #272]	@ (8002d68 <HAL_I2C_MspInit+0x230>)
 8002c58:	f000 fff8 	bl	8003c4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	4b3e      	ldr	r3, [pc, #248]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	4a3d      	ldr	r2, [pc, #244]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002c66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d5c <HAL_I2C_MspInit+0x224>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8002c78:	4b3c      	ldr	r3, [pc, #240]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002c7a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d70 <HAL_I2C_MspInit+0x238>)
 8002c7c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002c80:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002c84:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c86:	4b39      	ldr	r3, [pc, #228]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8c:	4b37      	ldr	r3, [pc, #220]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c92:	4b36      	ldr	r3, [pc, #216]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002c94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c98:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c9a:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca0:	4b32      	ldr	r3, [pc, #200]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002ca6:	4b31      	ldr	r3, [pc, #196]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cac:	4b2f      	ldr	r3, [pc, #188]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002cb8:	482c      	ldr	r0, [pc, #176]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002cba:	f000 fc3d 	bl	8003538 <HAL_DMA_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_MspInit+0x190>
      Error_Handler();
 8002cc4:	f7ff fef4 	bl	8002ab0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a28      	ldr	r2, [pc, #160]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002ccc:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cce:	4a27      	ldr	r2, [pc, #156]	@ (8002d6c <HAL_I2C_MspInit+0x234>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8002cd4:	4b27      	ldr	r3, [pc, #156]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002cd6:	4a28      	ldr	r2, [pc, #160]	@ (8002d78 <HAL_I2C_MspInit+0x240>)
 8002cd8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8002cda:	4b26      	ldr	r3, [pc, #152]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002cdc:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002ce0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce2:	4b24      	ldr	r3, [pc, #144]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002ce4:	2240      	movs	r2, #64	@ 0x40
 8002ce6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce8:	4b22      	ldr	r3, [pc, #136]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cee:	4b21      	ldr	r3, [pc, #132]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cf4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002d02:	4b1c      	ldr	r3, [pc, #112]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d08:	4b1a      	ldr	r3, [pc, #104]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d0e:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002d14:	4817      	ldr	r0, [pc, #92]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002d16:	f000 fc0f 	bl	8003538 <HAL_DMA_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_MspInit+0x1ec>
      Error_Handler();
 8002d20:	f7ff fec6 	bl	8002ab0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a13      	ldr	r2, [pc, #76]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002d28:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d2a:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <HAL_I2C_MspInit+0x23c>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2100      	movs	r1, #0
 8002d34:	2021      	movs	r0, #33	@ 0x21
 8002d36:	f000 fbc8 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002d3a:	2021      	movs	r0, #33	@ 0x21
 8002d3c:	f000 fbe1 	bl	8003502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	2022      	movs	r0, #34	@ 0x22
 8002d46:	f000 fbc0 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002d4a:	2022      	movs	r0, #34	@ 0x22
 8002d4c:	f000 fbd9 	bl	8003502 <HAL_NVIC_EnableIRQ>
}
 8002d50:	bf00      	nop
 8002d52:	3730      	adds	r7, #48	@ 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40005400 	.word	0x40005400
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020400 	.word	0x40020400
 8002d64:	40005800 	.word	0x40005800
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	200002a0 	.word	0x200002a0
 8002d70:	40026040 	.word	0x40026040
 8002d74:	20000300 	.word	0x20000300
 8002d78:	400260b8 	.word	0x400260b8

08002d7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x48>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d115      	bne.n	8002dba <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	201d      	movs	r0, #29
 8002db0:	f000 fb8b 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002db4:	201d      	movs	r0, #29
 8002db6:	f000 fba4 	bl	8003502 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40023800 	.word	0x40023800

08002dcc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	@ 0x28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a34      	ldr	r2, [pc, #208]	@ (8002ebc <HAL_UART_MspInit+0xf0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d161      	bne.n	8002eb2 <HAL_UART_MspInit+0xe6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	4b33      	ldr	r3, [pc, #204]	@ (8002ec0 <HAL_UART_MspInit+0xf4>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	4a32      	ldr	r2, [pc, #200]	@ (8002ec0 <HAL_UART_MspInit+0xf4>)
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dfe:	4b30      	ldr	r3, [pc, #192]	@ (8002ec0 <HAL_UART_MspInit+0xf4>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec0 <HAL_UART_MspInit+0xf4>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec0 <HAL_UART_MspInit+0xf4>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1a:	4b29      	ldr	r3, [pc, #164]	@ (8002ec0 <HAL_UART_MspInit+0xf4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e26:	230c      	movs	r3, #12
 8002e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e36:	2307      	movs	r3, #7
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4820      	ldr	r0, [pc, #128]	@ (8002ec4 <HAL_UART_MspInit+0xf8>)
 8002e42:	f000 ff03 	bl	8003c4c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e46:	4b20      	ldr	r3, [pc, #128]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e48:	4a20      	ldr	r2, [pc, #128]	@ (8002ecc <HAL_UART_MspInit+0x100>)
 8002e4a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e52:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e54:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e56:	2240      	movs	r2, #64	@ 0x40
 8002e58:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e60:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e66:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e68:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e6e:	4b16      	ldr	r3, [pc, #88]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e74:	4b14      	ldr	r3, [pc, #80]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e80:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e86:	4810      	ldr	r0, [pc, #64]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e88:	f000 fb56 	bl	8003538 <HAL_DMA_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002e92:	f7ff fe0d 	bl	8002ab0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <HAL_UART_MspInit+0xfc>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2026      	movs	r0, #38	@ 0x26
 8002ea8:	f000 fb0f 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002eac:	2026      	movs	r0, #38	@ 0x26
 8002eae:	f000 fb28 	bl	8003502 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002eb2:	bf00      	nop
 8002eb4:	3728      	adds	r7, #40	@ 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40004400 	.word	0x40004400
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	200003f0 	.word	0x200003f0
 8002ecc:	400260a0 	.word	0x400260a0

08002ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <NMI_Handler+0x4>

08002ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002edc:	bf00      	nop
 8002ede:	e7fd      	b.n	8002edc <HardFault_Handler+0x4>

08002ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <MemManage_Handler+0x4>

08002ee8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <BusFault_Handler+0x4>

08002ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ef4:	bf00      	nop
 8002ef6:	e7fd      	b.n	8002ef4 <UsageFault_Handler+0x4>

08002ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f26:	f000 f9b1 	bl	800328c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002f34:	4802      	ldr	r0, [pc, #8]	@ (8002f40 <DMA1_Stream2_IRQHandler+0x10>)
 8002f36:	f000 fc3f 	bl	80037b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200002a0 	.word	0x200002a0

08002f44 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f48:	4802      	ldr	r0, [pc, #8]	@ (8002f54 <DMA1_Stream6_IRQHandler+0x10>)
 8002f4a:	f000 fc35 	bl	80037b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200003f0 	.word	0x200003f0

08002f58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f5c:	4802      	ldr	r0, [pc, #8]	@ (8002f68 <TIM3_IRQHandler+0x10>)
 8002f5e:	f004 fe27 	bl	8007bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000360 	.word	0x20000360

08002f6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f70:	4802      	ldr	r0, [pc, #8]	@ (8002f7c <I2C1_EV_IRQHandler+0x10>)
 8002f72:	f001 fde7 	bl	8004b44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200001f8 	.word	0x200001f8

08002f80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002f84:	4802      	ldr	r0, [pc, #8]	@ (8002f90 <I2C1_ER_IRQHandler+0x10>)
 8002f86:	f001 ff4e 	bl	8004e26 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200001f8 	.word	0x200001f8

08002f94 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002f98:	4802      	ldr	r0, [pc, #8]	@ (8002fa4 <I2C2_EV_IRQHandler+0x10>)
 8002f9a:	f001 fdd3 	bl	8004b44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000024c 	.word	0x2000024c

08002fa8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002fac:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <I2C2_ER_IRQHandler+0x10>)
 8002fae:	f001 ff3a 	bl	8004e26 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000024c 	.word	0x2000024c

08002fbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fc0:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <USART2_IRQHandler+0x10>)
 8002fc2:	f005 fa81 	bl	80084c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200003a8 	.word	0x200003a8

08002fd0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002fd4:	4802      	ldr	r0, [pc, #8]	@ (8002fe0 <DMA1_Stream7_IRQHandler+0x10>)
 8002fd6:	f000 fbef 	bl	80037b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000300 	.word	0x20000300

08002fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return 1;
 8002fe8:	2301      	movs	r3, #1
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_kill>:

int _kill(int pid, int sig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ffe:	f007 fb3d 	bl	800a67c <__errno>
 8003002:	4603      	mov	r3, r0
 8003004:	2216      	movs	r2, #22
 8003006:	601a      	str	r2, [r3, #0]
  return -1;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_exit>:

void _exit (int status)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ffe7 	bl	8002ff4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003026:	bf00      	nop
 8003028:	e7fd      	b.n	8003026 <_exit+0x12>

0800302a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e00a      	b.n	8003052 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800303c:	f3af 8000 	nop.w
 8003040:	4601      	mov	r1, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	60ba      	str	r2, [r7, #8]
 8003048:	b2ca      	uxtb	r2, r1
 800304a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3301      	adds	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	dbf0      	blt.n	800303c <_read+0x12>
  }

  return len;
 800305a:	687b      	ldr	r3, [r7, #4]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e009      	b.n	800308a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	60ba      	str	r2, [r7, #8]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe f8ae 	bl	80011e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	dbf1      	blt.n	8003076 <_write+0x12>
  }
  return len;
 8003092:	687b      	ldr	r3, [r7, #4]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <_close>:

int _close(int file)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030c4:	605a      	str	r2, [r3, #4]
  return 0;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <_isatty>:

int _isatty(int file)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030dc:	2301      	movs	r3, #1
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800310c:	4a14      	ldr	r2, [pc, #80]	@ (8003160 <_sbrk+0x5c>)
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <_sbrk+0x60>)
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003118:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <_sbrk+0x64>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d102      	bne.n	8003126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <_sbrk+0x64>)
 8003122:	4a12      	ldr	r2, [pc, #72]	@ (800316c <_sbrk+0x68>)
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <_sbrk+0x64>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	429a      	cmp	r2, r3
 8003132:	d207      	bcs.n	8003144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003134:	f007 faa2 	bl	800a67c <__errno>
 8003138:	4603      	mov	r3, r0
 800313a:	220c      	movs	r2, #12
 800313c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	e009      	b.n	8003158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003144:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <_sbrk+0x64>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314a:	4b07      	ldr	r3, [pc, #28]	@ (8003168 <_sbrk+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	4a05      	ldr	r2, [pc, #20]	@ (8003168 <_sbrk+0x64>)
 8003154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20020000 	.word	0x20020000
 8003164:	00000400 	.word	0x00000400
 8003168:	200004ec 	.word	0x200004ec
 800316c:	20000640 	.word	0x20000640

08003170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <SystemInit+0x20>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <SystemInit+0x20>)
 800317c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003198:	f7ff ffea 	bl	8003170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800319c:	480c      	ldr	r0, [pc, #48]	@ (80031d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800319e:	490d      	ldr	r1, [pc, #52]	@ (80031d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031a0:	4a0d      	ldr	r2, [pc, #52]	@ (80031d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a4:	e002      	b.n	80031ac <LoopCopyDataInit>

080031a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031aa:	3304      	adds	r3, #4

080031ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b0:	d3f9      	bcc.n	80031a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031b2:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031b4:	4c0a      	ldr	r4, [pc, #40]	@ (80031e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b8:	e001      	b.n	80031be <LoopFillZerobss>

080031ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031bc:	3204      	adds	r2, #4

080031be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c0:	d3fb      	bcc.n	80031ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031c2:	f007 fa61 	bl	800a688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031c6:	f7fe f829 	bl	800121c <main>
  bx  lr    
 80031ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80031d8:	0800ec0c 	.word	0x0800ec0c
  ldr r2, =_sbss
 80031dc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80031e0:	20000640 	.word	0x20000640

080031e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e4:	e7fe      	b.n	80031e4 <ADC_IRQHandler>
	...

080031e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003228 <HAL_Init+0x40>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <HAL_Init+0x40>)
 80031f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <HAL_Init+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <HAL_Init+0x40>)
 80031fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003204:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <HAL_Init+0x40>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a07      	ldr	r2, [pc, #28]	@ (8003228 <HAL_Init+0x40>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003210:	2003      	movs	r0, #3
 8003212:	f000 f94f 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003216:	2000      	movs	r0, #0
 8003218:	f000 f808 	bl	800322c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800321c:	f7ff fc64 	bl	8002ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00

0800322c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003234:	4b12      	ldr	r3, [pc, #72]	@ (8003280 <HAL_InitTick+0x54>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <HAL_InitTick+0x58>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003242:	fbb3 f3f1 	udiv	r3, r3, r1
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f967 	bl	800351e <HAL_SYSTICK_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00e      	b.n	8003278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d80a      	bhi.n	8003276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003260:	2200      	movs	r2, #0
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	f000 f92f 	bl	80034ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800326c:	4a06      	ldr	r2, [pc, #24]	@ (8003288 <HAL_InitTick+0x5c>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000004 	.word	0x20000004
 8003284:	2000000c 	.word	0x2000000c
 8003288:	20000008 	.word	0x20000008

0800328c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_IncTick+0x20>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_IncTick+0x24>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4413      	add	r3, r2
 800329c:	4a04      	ldr	r2, [pc, #16]	@ (80032b0 <HAL_IncTick+0x24>)
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000000c 	.word	0x2000000c
 80032b0:	200004f0 	.word	0x200004f0

080032b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return uwTick;
 80032b8:	4b03      	ldr	r3, [pc, #12]	@ (80032c8 <HAL_GetTick+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	200004f0 	.word	0x200004f0

080032cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff ffee 	bl	80032b4 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d005      	beq.n	80032f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <HAL_Delay+0x44>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032f2:	bf00      	nop
 80032f4:	f7ff ffde 	bl	80032b4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d8f7      	bhi.n	80032f4 <HAL_Delay+0x28>
  {
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	2000000c 	.word	0x2000000c

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800333c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003346:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	60d3      	str	r3, [r2, #12]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	@ (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	@ (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	@ (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	@ (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	@ 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	@ 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff29 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034dc:	f7ff ff3e 	bl	800335c <__NVIC_GetPriorityGrouping>
 80034e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff8e 	bl	8003408 <NVIC_EncodePriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff5d 	bl	80033b4 <__NVIC_SetPriority>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff31 	bl	8003378 <__NVIC_EnableIRQ>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ffa2 	bl	8003470 <SysTick_Config>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7ff feb6 	bl	80032b4 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e099      	b.n	8003688 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003574:	e00f      	b.n	8003596 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003576:	f7ff fe9d 	bl	80032b4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b05      	cmp	r3, #5
 8003582:	d908      	bls.n	8003596 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e078      	b.n	8003688 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e8      	bne.n	8003576 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4b38      	ldr	r3, [pc, #224]	@ (8003690 <HAL_DMA_Init+0x158>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d107      	bne.n	8003600 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	4313      	orrs	r3, r2
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	2b04      	cmp	r3, #4
 8003628:	d117      	bne.n	800365a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fa89 	bl	8003b54 <DMA_CheckFifoParam>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2240      	movs	r2, #64	@ 0x40
 800364c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003656:	2301      	movs	r3, #1
 8003658:	e016      	b.n	8003688 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fa40 	bl	8003ae8 <DMA_CalcBaseAndBitshift>
 8003668:	4603      	mov	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	223f      	movs	r2, #63	@ 0x3f
 8003672:	409a      	lsls	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	f010803f 	.word	0xf010803f

08003694 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036a2:	f7ff fe07 	bl	80032b4 <HAL_GetTick>
 80036a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d008      	beq.n	80036c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2280      	movs	r2, #128	@ 0x80
 80036b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e052      	b.n	800376c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0216 	bic.w	r2, r2, #22
 80036d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <HAL_DMA_Abort+0x62>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0208 	bic.w	r2, r2, #8
 8003704:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003716:	e013      	b.n	8003740 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003718:	f7ff fdcc 	bl	80032b4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b05      	cmp	r3, #5
 8003724:	d90c      	bls.n	8003740 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2203      	movs	r2, #3
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e015      	b.n	800376c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e4      	bne.n	8003718 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	223f      	movs	r2, #63	@ 0x3f
 8003754:	409a      	lsls	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d004      	beq.n	8003792 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2280      	movs	r2, #128	@ 0x80
 800378c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e00c      	b.n	80037ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2205      	movs	r2, #5
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037c4:	4b8e      	ldr	r3, [pc, #568]	@ (8003a00 <HAL_DMA_IRQHandler+0x248>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a8e      	ldr	r2, [pc, #568]	@ (8003a04 <HAL_DMA_IRQHandler+0x24c>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0a9b      	lsrs	r3, r3, #10
 80037d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	2208      	movs	r2, #8
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01a      	beq.n	8003824 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003810:	2208      	movs	r2, #8
 8003812:	409a      	lsls	r2, r3
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381c:	f043 0201 	orr.w	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d012      	beq.n	800385a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003846:	2201      	movs	r2, #1
 8003848:	409a      	lsls	r2, r3
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	f043 0202 	orr.w	r2, r3, #2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	2204      	movs	r2, #4
 8003860:	409a      	lsls	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d012      	beq.n	8003890 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00b      	beq.n	8003890 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387c:	2204      	movs	r2, #4
 800387e:	409a      	lsls	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	2210      	movs	r2, #16
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d043      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d03c      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	2210      	movs	r2, #16
 80038b4:	409a      	lsls	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d018      	beq.n	80038fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d108      	bne.n	80038e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d024      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
 80038e6:	e01f      	b.n	8003928 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4798      	blx	r3
 80038f8:	e016      	b.n	8003928 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d107      	bne.n	8003918 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0208 	bic.w	r2, r2, #8
 8003916:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	2220      	movs	r2, #32
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 808f 	beq.w	8003a58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8087 	beq.w	8003a58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	2220      	movs	r2, #32
 8003950:	409a      	lsls	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b05      	cmp	r3, #5
 8003960:	d136      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0216 	bic.w	r2, r2, #22
 8003970:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003980:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <HAL_DMA_IRQHandler+0x1da>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0208 	bic.w	r2, r2, #8
 80039a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	223f      	movs	r2, #63	@ 0x3f
 80039a8:	409a      	lsls	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d07e      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
        }
        return;
 80039ce:	e079      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01d      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10d      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d031      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
 80039fc:	e02c      	b.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
 80039fe:	bf00      	nop
 8003a00:	20000004 	.word	0x20000004
 8003a04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d023      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
 8003a18:	e01e      	b.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10f      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0210 	bic.w	r2, r2, #16
 8003a36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d032      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d022      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2205      	movs	r2, #5
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3301      	adds	r3, #1
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d307      	bcc.n	8003aa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f2      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x2cc>
 8003a9e:	e000      	b.n	8003aa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003aa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e000      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ac4:	bf00      	nop
    }
  }
}
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ada:	b2db      	uxtb	r3, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3b10      	subs	r3, #16
 8003af8:	4a14      	ldr	r2, [pc, #80]	@ (8003b4c <DMA_CalcBaseAndBitshift+0x64>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b02:	4a13      	ldr	r2, [pc, #76]	@ (8003b50 <DMA_CalcBaseAndBitshift+0x68>)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d909      	bls.n	8003b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	1d1a      	adds	r2, r3, #4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b28:	e007      	b.n	8003b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b32:	f023 0303 	bic.w	r3, r3, #3
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	aaaaaaab 	.word	0xaaaaaaab
 8003b50:	0800e7c0 	.word	0x0800e7c0

08003b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11f      	bne.n	8003bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d856      	bhi.n	8003c22 <DMA_CheckFifoParam+0xce>
 8003b74:	a201      	add	r2, pc, #4	@ (adr r2, 8003b7c <DMA_CheckFifoParam+0x28>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b9f 	.word	0x08003b9f
 8003b84:	08003b8d 	.word	0x08003b8d
 8003b88:	08003c23 	.word	0x08003c23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d046      	beq.n	8003c26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9c:	e043      	b.n	8003c26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ba6:	d140      	bne.n	8003c2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bac:	e03d      	b.n	8003c2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb6:	d121      	bne.n	8003bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d837      	bhi.n	8003c2e <DMA_CheckFifoParam+0xda>
 8003bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc4 <DMA_CheckFifoParam+0x70>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003bdb 	.word	0x08003bdb
 8003bcc:	08003bd5 	.word	0x08003bd5
 8003bd0:	08003bed 	.word	0x08003bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e030      	b.n	8003c3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d025      	beq.n	8003c32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bea:	e022      	b.n	8003c32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bf4:	d11f      	bne.n	8003c36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bfa:	e01c      	b.n	8003c36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d903      	bls.n	8003c0a <DMA_CheckFifoParam+0xb6>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d003      	beq.n	8003c10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c08:	e018      	b.n	8003c3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0e:	e015      	b.n	8003c3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00e      	beq.n	8003c3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c20:	e00b      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
      break;
 8003c22:	bf00      	nop
 8003c24:	e00a      	b.n	8003c3c <DMA_CheckFifoParam+0xe8>
      break;
 8003c26:	bf00      	nop
 8003c28:	e008      	b.n	8003c3c <DMA_CheckFifoParam+0xe8>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e006      	b.n	8003c3c <DMA_CheckFifoParam+0xe8>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e004      	b.n	8003c3c <DMA_CheckFifoParam+0xe8>
      break;
 8003c32:	bf00      	nop
 8003c34:	e002      	b.n	8003c3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <DMA_CheckFifoParam+0xe8>
      break;
 8003c3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop

08003c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	@ 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	e165      	b.n	8003f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c68:	2201      	movs	r2, #1
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	f040 8154 	bne.w	8003f2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d005      	beq.n	8003c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d130      	bne.n	8003d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	2203      	movs	r2, #3
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 0201 	and.w	r2, r3, #1
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d017      	beq.n	8003d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	2203      	movs	r2, #3
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d123      	bne.n	8003d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	08da      	lsrs	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3208      	adds	r2, #8
 8003d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	220f      	movs	r2, #15
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	08da      	lsrs	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3208      	adds	r2, #8
 8003d8a:	69b9      	ldr	r1, [r7, #24]
 8003d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0203 	and.w	r2, r3, #3
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80ae 	beq.w	8003f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f4c <HAL_GPIO_Init+0x300>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	4a5c      	ldr	r2, [pc, #368]	@ (8003f4c <HAL_GPIO_Init+0x300>)
 8003ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003de2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f4c <HAL_GPIO_Init+0x300>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dee:	4a58      	ldr	r2, [pc, #352]	@ (8003f50 <HAL_GPIO_Init+0x304>)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	3302      	adds	r3, #2
 8003df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	220f      	movs	r2, #15
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a4f      	ldr	r2, [pc, #316]	@ (8003f54 <HAL_GPIO_Init+0x308>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d025      	beq.n	8003e66 <HAL_GPIO_Init+0x21a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003f58 <HAL_GPIO_Init+0x30c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01f      	beq.n	8003e62 <HAL_GPIO_Init+0x216>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4d      	ldr	r2, [pc, #308]	@ (8003f5c <HAL_GPIO_Init+0x310>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d019      	beq.n	8003e5e <HAL_GPIO_Init+0x212>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8003f60 <HAL_GPIO_Init+0x314>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_GPIO_Init+0x20e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4b      	ldr	r2, [pc, #300]	@ (8003f64 <HAL_GPIO_Init+0x318>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00d      	beq.n	8003e56 <HAL_GPIO_Init+0x20a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f68 <HAL_GPIO_Init+0x31c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <HAL_GPIO_Init+0x206>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a49      	ldr	r2, [pc, #292]	@ (8003f6c <HAL_GPIO_Init+0x320>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <HAL_GPIO_Init+0x202>
 8003e4a:	2306      	movs	r3, #6
 8003e4c:	e00c      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e4e:	2307      	movs	r3, #7
 8003e50:	e00a      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e52:	2305      	movs	r3, #5
 8003e54:	e008      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e56:	2304      	movs	r3, #4
 8003e58:	e006      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e004      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e002      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e66:	2300      	movs	r3, #0
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f002 0203 	and.w	r2, r2, #3
 8003e6e:	0092      	lsls	r2, r2, #2
 8003e70:	4093      	lsls	r3, r2
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e78:	4935      	ldr	r1, [pc, #212]	@ (8003f50 <HAL_GPIO_Init+0x304>)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	3302      	adds	r3, #2
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e86:	4b3a      	ldr	r3, [pc, #232]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eaa:	4a31      	ldr	r2, [pc, #196]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed4:	4a26      	ldr	r2, [pc, #152]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eda:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003efe:	4a1c      	ldr	r2, [pc, #112]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f04:	4b1a      	ldr	r3, [pc, #104]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f28:	4a11      	ldr	r2, [pc, #68]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3301      	adds	r3, #1
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	f67f ae96 	bls.w	8003c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3724      	adds	r7, #36	@ 0x24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40013800 	.word	0x40013800
 8003f54:	40020000 	.word	0x40020000
 8003f58:	40020400 	.word	0x40020400
 8003f5c:	40020800 	.word	0x40020800
 8003f60:	40020c00 	.word	0x40020c00
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40021400 	.word	0x40021400
 8003f6c:	40021800 	.word	0x40021800
 8003f70:	40013c00 	.word	0x40013c00

08003f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
 8003f80:	4613      	mov	r3, r2
 8003f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f84:	787b      	ldrb	r3, [r7, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f90:	e003      	b.n	8003f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f92:	887b      	ldrh	r3, [r7, #2]
 8003f94:	041a      	lsls	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	619a      	str	r2, [r3, #24]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fb8:	887a      	ldrh	r2, [r7, #2]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	041a      	lsls	r2, r3, #16
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	400b      	ands	r3, r1
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	619a      	str	r2, [r3, #24]
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e12b      	b.n	8004246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fe fd98 	bl	8002b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2224      	movs	r2, #36	@ 0x24
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800402e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800403e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004040:	f002 ff98 	bl	8006f74 <HAL_RCC_GetPCLK1Freq>
 8004044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4a81      	ldr	r2, [pc, #516]	@ (8004250 <HAL_I2C_Init+0x274>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d807      	bhi.n	8004060 <HAL_I2C_Init+0x84>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a80      	ldr	r2, [pc, #512]	@ (8004254 <HAL_I2C_Init+0x278>)
 8004054:	4293      	cmp	r3, r2
 8004056:	bf94      	ite	ls
 8004058:	2301      	movls	r3, #1
 800405a:	2300      	movhi	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e006      	b.n	800406e <HAL_I2C_Init+0x92>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a7d      	ldr	r2, [pc, #500]	@ (8004258 <HAL_I2C_Init+0x27c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	bf94      	ite	ls
 8004068:	2301      	movls	r3, #1
 800406a:	2300      	movhi	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0e7      	b.n	8004246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a78      	ldr	r2, [pc, #480]	@ (800425c <HAL_I2C_Init+0x280>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0c9b      	lsrs	r3, r3, #18
 8004080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004250 <HAL_I2C_Init+0x274>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d802      	bhi.n	80040b0 <HAL_I2C_Init+0xd4>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	3301      	adds	r3, #1
 80040ae:	e009      	b.n	80040c4 <HAL_I2C_Init+0xe8>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	4a69      	ldr	r2, [pc, #420]	@ (8004260 <HAL_I2C_Init+0x284>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	099b      	lsrs	r3, r3, #6
 80040c2:	3301      	adds	r3, #1
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	495c      	ldr	r1, [pc, #368]	@ (8004250 <HAL_I2C_Init+0x274>)
 80040e0:	428b      	cmp	r3, r1
 80040e2:	d819      	bhi.n	8004118 <HAL_I2C_Init+0x13c>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1e59      	subs	r1, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040f8:	400b      	ands	r3, r1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_I2C_Init+0x138>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1e59      	subs	r1, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	fbb1 f3f3 	udiv	r3, r1, r3
 800410c:	3301      	adds	r3, #1
 800410e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004112:	e051      	b.n	80041b8 <HAL_I2C_Init+0x1dc>
 8004114:	2304      	movs	r3, #4
 8004116:	e04f      	b.n	80041b8 <HAL_I2C_Init+0x1dc>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d111      	bne.n	8004144 <HAL_I2C_Init+0x168>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1e58      	subs	r0, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	440b      	add	r3, r1
 800412e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004132:	3301      	adds	r3, #1
 8004134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e012      	b.n	800416a <HAL_I2C_Init+0x18e>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1e58      	subs	r0, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	0099      	lsls	r1, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	fbb0 f3f3 	udiv	r3, r0, r3
 800415a:	3301      	adds	r3, #1
 800415c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Init+0x196>
 800416e:	2301      	movs	r3, #1
 8004170:	e022      	b.n	80041b8 <HAL_I2C_Init+0x1dc>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10e      	bne.n	8004198 <HAL_I2C_Init+0x1bc>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1e58      	subs	r0, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	460b      	mov	r3, r1
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	440b      	add	r3, r1
 8004188:	fbb0 f3f3 	udiv	r3, r0, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004196:	e00f      	b.n	80041b8 <HAL_I2C_Init+0x1dc>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1e58      	subs	r0, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	0099      	lsls	r1, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ae:	3301      	adds	r3, #1
 80041b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	6809      	ldr	r1, [r1, #0]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6911      	ldr	r1, [r2, #16]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68d2      	ldr	r2, [r2, #12]
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	000186a0 	.word	0x000186a0
 8004254:	001e847f 	.word	0x001e847f
 8004258:	003d08ff 	.word	0x003d08ff
 800425c:	431bde83 	.word	0x431bde83
 8004260:	10624dd3 	.word	0x10624dd3

08004264 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004276:	2b80      	cmp	r3, #128	@ 0x80
 8004278:	d103      	bne.n	8004282 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
  }
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	461a      	mov	r2, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	817b      	strh	r3, [r7, #10]
 80042a2:	460b      	mov	r3, r1
 80042a4:	813b      	strh	r3, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042aa:	f7ff f803 	bl	80032b4 <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	f040 80d9 	bne.w	8004470 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	2319      	movs	r3, #25
 80042c4:	2201      	movs	r2, #1
 80042c6:	496d      	ldr	r1, [pc, #436]	@ (800447c <HAL_I2C_Mem_Write+0x1ec>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f002 fa63 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
 80042d6:	e0cc      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_I2C_Mem_Write+0x56>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e0c5      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d007      	beq.n	800430c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800431a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2221      	movs	r2, #33	@ 0x21
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2240      	movs	r2, #64	@ 0x40
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800433c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a4d      	ldr	r2, [pc, #308]	@ (8004480 <HAL_I2C_Mem_Write+0x1f0>)
 800434c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800434e:	88f8      	ldrh	r0, [r7, #6]
 8004350:	893a      	ldrh	r2, [r7, #8]
 8004352:	8979      	ldrh	r1, [r7, #10]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	4603      	mov	r3, r0
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f001 fff2 	bl	8006348 <I2C_RequestMemoryWrite>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d052      	beq.n	8004410 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e081      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f002 fb28 	bl	80069c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00d      	beq.n	800439a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	2b04      	cmp	r3, #4
 8004384:	d107      	bne.n	8004396 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004394:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e06b      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d11b      	bne.n	8004410 <HAL_I2C_Mem_Write+0x180>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d017      	beq.n	8004410 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1aa      	bne.n	800436e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f002 fb1b 	bl	8006a58 <I2C_WaitOnBTFFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	2b04      	cmp	r3, #4
 800442e:	d107      	bne.n	8004440 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e016      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e000      	b.n	8004472 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004470:	2302      	movs	r3, #2
  }
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	00100002 	.word	0x00100002
 8004480:	ffff0000 	.word	0xffff0000

08004484 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	@ 0x30
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	460b      	mov	r3, r1
 8004498:	813b      	strh	r3, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800449e:	f7fe ff09 	bl	80032b4 <HAL_GetTick>
 80044a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	f040 8214 	bne.w	80048da <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2319      	movs	r3, #25
 80044b8:	2201      	movs	r2, #1
 80044ba:	497b      	ldr	r1, [pc, #492]	@ (80046a8 <HAL_I2C_Mem_Read+0x224>)
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f002 f969 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
 80044ca:	e207      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_I2C_Mem_Read+0x56>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e200      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d007      	beq.n	8004500 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800450e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2222      	movs	r2, #34	@ 0x22
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2240      	movs	r2, #64	@ 0x40
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004530:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a5b      	ldr	r2, [pc, #364]	@ (80046ac <HAL_I2C_Mem_Read+0x228>)
 8004540:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004542:	88f8      	ldrh	r0, [r7, #6]
 8004544:	893a      	ldrh	r2, [r7, #8]
 8004546:	8979      	ldrh	r1, [r7, #10]
 8004548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	4603      	mov	r3, r0
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f001 ff8e 	bl	8006474 <I2C_RequestMemoryRead>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e1bc      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d113      	bne.n	8004592 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	623b      	str	r3, [r7, #32]
 800457e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e190      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004596:	2b01      	cmp	r3, #1
 8004598:	d11b      	bne.n	80045d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e170      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d11b      	bne.n	8004612 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	e150      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004628:	e144      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462e:	2b03      	cmp	r3, #3
 8004630:	f200 80f1 	bhi.w	8004816 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004638:	2b01      	cmp	r3, #1
 800463a:	d123      	bne.n	8004684 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f002 fa83 	bl	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e145      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004682:	e117      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004688:	2b02      	cmp	r3, #2
 800468a:	d14e      	bne.n	800472a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004692:	2200      	movs	r2, #0
 8004694:	4906      	ldr	r1, [pc, #24]	@ (80046b0 <HAL_I2C_Mem_Read+0x22c>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f002 f87c 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e11a      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
 80046a6:	bf00      	nop
 80046a8:	00100002 	.word	0x00100002
 80046ac:	ffff0000 	.word	0xffff0000
 80046b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004728:	e0c4      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	2200      	movs	r2, #0
 8004732:	496c      	ldr	r1, [pc, #432]	@ (80048e4 <HAL_I2C_Mem_Read+0x460>)
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f002 f82d 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0cb      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478c:	2200      	movs	r2, #0
 800478e:	4955      	ldr	r1, [pc, #340]	@ (80048e4 <HAL_I2C_Mem_Read+0x460>)
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f001 ffff 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e09d      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004814:	e04e      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004818:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f002 f996 	bl	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e058      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d124      	bne.n	80048b4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486e:	2b03      	cmp	r3, #3
 8004870:	d107      	bne.n	8004882 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004880:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f47f aeb6 	bne.w	800462a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e000      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3728      	adds	r7, #40	@ 0x28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	00010004 	.word	0x00010004

080048e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	@ 0x28
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	460b      	mov	r3, r1
 80048f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80048f8:	f7fe fcdc 	bl	80032b4 <HAL_GetTick>
 80048fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b20      	cmp	r3, #32
 800490c:	f040 8111 	bne.w	8004b32 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2319      	movs	r3, #25
 8004916:	2201      	movs	r2, #1
 8004918:	4988      	ldr	r1, [pc, #544]	@ (8004b3c <HAL_I2C_IsDeviceReady+0x254>)
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f001 ff3a 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
 8004928:	e104      	b.n	8004b34 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_I2C_IsDeviceReady+0x50>
 8004934:	2302      	movs	r3, #2
 8004936:	e0fd      	b.n	8004b34 <HAL_I2C_IsDeviceReady+0x24c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d007      	beq.n	800495e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800496c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2224      	movs	r2, #36	@ 0x24
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a70      	ldr	r2, [pc, #448]	@ (8004b40 <HAL_I2C_IsDeviceReady+0x258>)
 8004980:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004990:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2200      	movs	r2, #0
 800499a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f001 fef8 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00d      	beq.n	80049c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b8:	d103      	bne.n	80049c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e0b6      	b.n	8004b34 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049c6:	897b      	ldrh	r3, [r7, #10]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80049d6:	f7fe fc6d 	bl	80032b4 <HAL_GetTick>
 80049da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a00:	bf0c      	ite	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	2300      	movne	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a0a:	e025      	b.n	8004a58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a0c:	f7fe fc52 	bl	80032b4 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d302      	bcc.n	8004a22 <HAL_I2C_IsDeviceReady+0x13a>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d103      	bne.n	8004a2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	22a0      	movs	r2, #160	@ 0xa0
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a62:	d005      	beq.n	8004a70 <HAL_I2C_IsDeviceReady+0x188>
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <HAL_I2C_IsDeviceReady+0x188>
 8004a6a:	7dbb      	ldrb	r3, [r7, #22]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0cd      	beq.n	8004a0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d129      	bne.n	8004ada <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	2319      	movs	r3, #25
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	4921      	ldr	r1, [pc, #132]	@ (8004b3c <HAL_I2C_IsDeviceReady+0x254>)
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f001 fe6c 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e036      	b.n	8004b34 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e02c      	b.n	8004b34 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004af2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	2319      	movs	r3, #25
 8004afa:	2201      	movs	r2, #1
 8004afc:	490f      	ldr	r1, [pc, #60]	@ (8004b3c <HAL_I2C_IsDeviceReady+0x254>)
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f001 fe48 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e012      	b.n	8004b34 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	3301      	adds	r3, #1
 8004b12:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	f4ff af32 	bcc.w	8004982 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	00100002 	.word	0x00100002
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d003      	beq.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b40      	cmp	r3, #64	@ 0x40
 8004b78:	f040 80c1 	bne.w	8004cfe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10d      	bne.n	8004bb2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004b9c:	d003      	beq.n	8004ba6 <HAL_I2C_EV_IRQHandler+0x62>
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004ba4:	d101      	bne.n	8004baa <HAL_I2C_EV_IRQHandler+0x66>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_I2C_EV_IRQHandler+0x68>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	f000 8132 	beq.w	8004e16 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00c      	beq.n	8004bd6 <HAL_I2C_EV_IRQHandler+0x92>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	0a5b      	lsrs	r3, r3, #9
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f002 f84b 	bl	8006c64 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fd9b 	bl	800570a <I2C_Master_SB>
 8004bd4:	e092      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_I2C_EV_IRQHandler+0xb2>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	0a5b      	lsrs	r3, r3, #9
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fe11 	bl	8005816 <I2C_Master_ADD10>
 8004bf4:	e082      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <HAL_I2C_EV_IRQHandler+0xd2>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	0a5b      	lsrs	r3, r3, #9
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fe2b 	bl	800586a <I2C_Master_ADDR>
 8004c14:	e072      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	089b      	lsrs	r3, r3, #2
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d03b      	beq.n	8004c9a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c30:	f000 80f3 	beq.w	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	09db      	lsrs	r3, r3, #7
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00f      	beq.n	8004c60 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	0a9b      	lsrs	r3, r3, #10
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f9f3 	bl	8005044 <I2C_MasterTransmit_TXE>
 8004c5e:	e04d      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80d6 	beq.w	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	0a5b      	lsrs	r3, r3, #9
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 80cf 	beq.w	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c7c:	7bbb      	ldrb	r3, [r7, #14]
 8004c7e:	2b21      	cmp	r3, #33	@ 0x21
 8004c80:	d103      	bne.n	8004c8a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fa7a 	bl	800517c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c88:	e0c7      	b.n	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	2b40      	cmp	r3, #64	@ 0x40
 8004c8e:	f040 80c4 	bne.w	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fae8 	bl	8005268 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c98:	e0bf      	b.n	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca8:	f000 80b7 	beq.w	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	099b      	lsrs	r3, r3, #6
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00f      	beq.n	8004cd8 <HAL_I2C_EV_IRQHandler+0x194>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	0a9b      	lsrs	r3, r3, #10
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_I2C_EV_IRQHandler+0x194>
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fb61 	bl	8005398 <I2C_MasterReceive_RXNE>
 8004cd6:	e011      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	089b      	lsrs	r3, r3, #2
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 809a 	beq.w	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	0a5b      	lsrs	r3, r3, #9
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8093 	beq.w	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fc17 	bl	8005528 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cfa:	e08e      	b.n	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cfc:	e08d      	b.n	8004e1a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e007      	b.n	8004d20 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d012      	beq.n	8004d52 <HAL_I2C_EV_IRQHandler+0x20e>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	0a5b      	lsrs	r3, r3, #9
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00c      	beq.n	8004d52 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 ffdc 	bl	8005d08 <I2C_Slave_ADDR>
 8004d50:	e066      	b.n	8004e20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <HAL_I2C_EV_IRQHandler+0x22e>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	0a5b      	lsrs	r3, r3, #9
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f001 f816 	bl	8005d9c <I2C_Slave_STOPF>
 8004d70:	e056      	b.n	8004e20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d72:	7bbb      	ldrb	r3, [r7, #14]
 8004d74:	2b21      	cmp	r3, #33	@ 0x21
 8004d76:	d002      	beq.n	8004d7e <HAL_I2C_EV_IRQHandler+0x23a>
 8004d78:	7bbb      	ldrb	r3, [r7, #14]
 8004d7a:	2b29      	cmp	r3, #41	@ 0x29
 8004d7c:	d125      	bne.n	8004dca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	09db      	lsrs	r3, r3, #7
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00f      	beq.n	8004daa <HAL_I2C_EV_IRQHandler+0x266>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	0a9b      	lsrs	r3, r3, #10
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_I2C_EV_IRQHandler+0x266>
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	089b      	lsrs	r3, r3, #2
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fef2 	bl	8005b8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004da8:	e039      	b.n	8004e1e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	089b      	lsrs	r3, r3, #2
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d033      	beq.n	8004e1e <HAL_I2C_EV_IRQHandler+0x2da>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	0a5b      	lsrs	r3, r3, #9
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d02d      	beq.n	8004e1e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 ff1f 	bl	8005c06 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dc8:	e029      	b.n	8004e1e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	099b      	lsrs	r3, r3, #6
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00f      	beq.n	8004df6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	0a9b      	lsrs	r3, r3, #10
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	089b      	lsrs	r3, r3, #2
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 ff2a 	bl	8005c48 <I2C_SlaveReceive_RXNE>
 8004df4:	e014      	b.n	8004e20 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	089b      	lsrs	r3, r3, #2
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00e      	beq.n	8004e20 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	0a5b      	lsrs	r3, r3, #9
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 ff58 	bl	8005cc4 <I2C_SlaveReceive_BTF>
 8004e14:	e004      	b.n	8004e20 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004e16:	bf00      	nop
 8004e18:	e002      	b.n	8004e20 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b08a      	sub	sp, #40	@ 0x28
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e48:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	0a1b      	lsrs	r3, r3, #8
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <HAL_I2C_ER_IRQHandler+0x4e>
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	0a1b      	lsrs	r3, r3, #8
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e72:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	0a5b      	lsrs	r3, r3, #9
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <HAL_I2C_ER_IRQHandler+0x78>
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	f043 0302 	orr.w	r3, r3, #2
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004e9c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	0a9b      	lsrs	r3, r3, #10
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d03f      	beq.n	8004f2a <HAL_I2C_ER_IRQHandler+0x104>
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d039      	beq.n	8004f2a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004eb6:	7efb      	ldrb	r3, [r7, #27]
 8004eb8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ece:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004ed0:	7ebb      	ldrb	r3, [r7, #26]
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d112      	bne.n	8004efc <HAL_I2C_ER_IRQHandler+0xd6>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10f      	bne.n	8004efc <HAL_I2C_ER_IRQHandler+0xd6>
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	2b21      	cmp	r3, #33	@ 0x21
 8004ee0:	d008      	beq.n	8004ef4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	2b29      	cmp	r3, #41	@ 0x29
 8004ee6:	d005      	beq.n	8004ef4 <HAL_I2C_ER_IRQHandler+0xce>
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	2b28      	cmp	r3, #40	@ 0x28
 8004eec:	d106      	bne.n	8004efc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b21      	cmp	r3, #33	@ 0x21
 8004ef2:	d103      	bne.n	8004efc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 f881 	bl	8005ffc <I2C_Slave_AF>
 8004efa:	e016      	b.n	8004f2a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f04:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	f043 0304 	orr.w	r3, r3, #4
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f0e:	7efb      	ldrb	r3, [r7, #27]
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d002      	beq.n	8004f1a <HAL_I2C_ER_IRQHandler+0xf4>
 8004f14:	7efb      	ldrb	r3, [r7, #27]
 8004f16:	2b40      	cmp	r3, #64	@ 0x40
 8004f18:	d107      	bne.n	8004f2a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f28:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	0adb      	lsrs	r3, r3, #11
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00e      	beq.n	8004f54 <HAL_I2C_ER_IRQHandler+0x12e>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	f043 0308 	orr.w	r3, r3, #8
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004f52:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 f8bc 	bl	80060e4 <I2C_ITError>
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3728      	adds	r7, #40	@ 0x28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005052:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800505a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	d150      	bne.n	800510c <I2C_MasterTransmit_TXE+0xc8>
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b21      	cmp	r3, #33	@ 0x21
 800506e:	d14d      	bne.n	800510c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b08      	cmp	r3, #8
 8005074:	d01d      	beq.n	80050b2 <I2C_MasterTransmit_TXE+0x6e>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b20      	cmp	r3, #32
 800507a:	d01a      	beq.n	80050b2 <I2C_MasterTransmit_TXE+0x6e>
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005082:	d016      	beq.n	80050b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005092:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2211      	movs	r2, #17
 8005098:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff ff62 	bl	8004f74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050b0:	e060      	b.n	8005174 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b40      	cmp	r3, #64	@ 0x40
 80050ea:	d107      	bne.n	80050fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff ff7d 	bl	8004ff4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050fa:	e03b      	b.n	8005174 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff35 	bl	8004f74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800510a:	e033      	b.n	8005174 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b21      	cmp	r3, #33	@ 0x21
 8005110:	d005      	beq.n	800511e <I2C_MasterTransmit_TXE+0xda>
 8005112:	7bbb      	ldrb	r3, [r7, #14]
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d12d      	bne.n	8005174 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b22      	cmp	r3, #34	@ 0x22
 800511c:	d12a      	bne.n	8005174 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d108      	bne.n	800513a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005136:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005138:	e01c      	b.n	8005174 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b40      	cmp	r3, #64	@ 0x40
 8005144:	d103      	bne.n	800514e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f88e 	bl	8005268 <I2C_MemoryTransmit_TXE_BTF>
}
 800514c:	e012      	b.n	8005174 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	781a      	ldrb	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005172:	e7ff      	b.n	8005174 <I2C_MasterTransmit_TXE+0x130>
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005188:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b21      	cmp	r3, #33	@ 0x21
 8005194:	d164      	bne.n	8005260 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d012      	beq.n	80051c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80051c4:	e04c      	b.n	8005260 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d01d      	beq.n	8005208 <I2C_MasterTransmit_BTF+0x8c>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d01a      	beq.n	8005208 <I2C_MasterTransmit_BTF+0x8c>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051d8:	d016      	beq.n	8005208 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2211      	movs	r2, #17
 80051ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff feb7 	bl	8004f74 <HAL_I2C_MasterTxCpltCallback>
}
 8005206:	e02b      	b.n	8005260 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005216:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005226:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b40      	cmp	r3, #64	@ 0x40
 8005240:	d107      	bne.n	8005252 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fed2 	bl	8004ff4 <HAL_I2C_MemTxCpltCallback>
}
 8005250:	e006      	b.n	8005260 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fe8a 	bl	8004f74 <HAL_I2C_MasterTxCpltCallback>
}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005276:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527c:	2b00      	cmp	r3, #0
 800527e:	d11d      	bne.n	80052bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d10b      	bne.n	80052a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528c:	b2da      	uxtb	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005298:	1c9a      	adds	r2, r3, #2
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800529e:	e077      	b.n	8005390 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	121b      	asrs	r3, r3, #8
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80052ba:	e069      	b.n	8005390 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10b      	bne.n	80052dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80052da:	e059      	b.n	8005390 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d152      	bne.n	800538a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b22      	cmp	r3, #34	@ 0x22
 80052e8:	d10d      	bne.n	8005306 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005304:	e044      	b.n	8005390 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b21      	cmp	r3, #33	@ 0x21
 8005314:	d112      	bne.n	800533c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800533a:	e029      	b.n	8005390 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d124      	bne.n	8005390 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	2b21      	cmp	r3, #33	@ 0x21
 800534a:	d121      	bne.n	8005390 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800535a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800536a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff fe36 	bl	8004ff4 <HAL_I2C_MemTxCpltCallback>
}
 8005388:	e002      	b.n	8005390 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fe ff6a 	bl	8004264 <I2C_Flush_DR>
}
 8005390:	bf00      	nop
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b22      	cmp	r3, #34	@ 0x22
 80053aa:	f040 80b9 	bne.w	8005520 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d921      	bls.n	8005406 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	f040 8096 	bne.w	8005520 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005402:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005404:	e08c      	b.n	8005520 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	2b02      	cmp	r3, #2
 800540c:	d07f      	beq.n	800550e <I2C_MasterReceive_RXNE+0x176>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d002      	beq.n	800541a <I2C_MasterReceive_RXNE+0x82>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d179      	bne.n	800550e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f001 fb64 	bl	8006ae8 <I2C_WaitOnSTOPRequestThroughIT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d14c      	bne.n	80054c0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005434:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005444:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b40      	cmp	r3, #64	@ 0x40
 800547e:	d10a      	bne.n	8005496 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fdba 	bl	8005008 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005494:	e044      	b.n	8005520 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d002      	beq.n	80054aa <I2C_MasterReceive_RXNE+0x112>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d103      	bne.n	80054b2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80054b0:	e002      	b.n	80054b8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2212      	movs	r2, #18
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff fd65 	bl	8004f88 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80054be:	e02f      	b.n	8005520 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fd88 	bl	800501c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800550c:	e008      	b.n	8005520 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551c:	605a      	str	r2, [r3, #4]
}
 800551e:	e7ff      	b.n	8005520 <I2C_MasterReceive_RXNE+0x188>
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b04      	cmp	r3, #4
 800553e:	d11b      	bne.n	8005578 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800554e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005576:	e0c4      	b.n	8005702 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d129      	bne.n	80055d6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005590:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b04      	cmp	r3, #4
 8005596:	d00a      	beq.n	80055ae <I2C_MasterReceive_BTF+0x86>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d007      	beq.n	80055ae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80055d4:	e095      	b.n	8005702 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d17d      	bne.n	80056dc <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d002      	beq.n	80055ec <I2C_MasterReceive_BTF+0xc4>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d108      	bne.n	80055fe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e016      	b.n	800562c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d002      	beq.n	800560a <I2C_MasterReceive_BTF+0xe2>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d108      	bne.n	800561c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e007      	b.n	800562c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800562a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005686:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b40      	cmp	r3, #64	@ 0x40
 800569a:	d10a      	bne.n	80056b2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff fcac 	bl	8005008 <HAL_I2C_MemRxCpltCallback>
}
 80056b0:	e027      	b.n	8005702 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d002      	beq.n	80056c6 <I2C_MasterReceive_BTF+0x19e>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d103      	bne.n	80056ce <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80056cc:	e002      	b.n	80056d4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2212      	movs	r2, #18
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff fc57 	bl	8004f88 <HAL_I2C_MasterRxCpltCallback>
}
 80056da:	e012      	b.n	8005702 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b40      	cmp	r3, #64	@ 0x40
 800571c:	d117      	bne.n	800574e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005736:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005738:	e067      	b.n	800580a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	b2da      	uxtb	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]
}
 800574c:	e05d      	b.n	800580a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005756:	d133      	bne.n	80057c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b21      	cmp	r3, #33	@ 0x21
 8005762:	d109      	bne.n	8005778 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005774:	611a      	str	r2, [r3, #16]
 8005776:	e008      	b.n	800578a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800578e:	2b00      	cmp	r3, #0
 8005790:	d004      	beq.n	800579c <I2C_Master_SB+0x92>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d108      	bne.n	80057ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d032      	beq.n	800580a <I2C_Master_SB+0x100>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d02d      	beq.n	800580a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057bc:	605a      	str	r2, [r3, #4]
}
 80057be:	e024      	b.n	800580a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10e      	bne.n	80057e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	11db      	asrs	r3, r3, #7
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 0306 	and.w	r3, r3, #6
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f063 030f 	orn	r3, r3, #15
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	611a      	str	r2, [r3, #16]
}
 80057e4:	e011      	b.n	800580a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d10d      	bne.n	800580a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	11db      	asrs	r3, r3, #7
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 0306 	and.w	r3, r3, #6
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f063 030e 	orn	r3, r3, #14
 8005802:	b2da      	uxtb	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	611a      	str	r2, [r3, #16]
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005822:	b2da      	uxtb	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <I2C_Master_ADD10+0x26>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d108      	bne.n	800584e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <I2C_Master_ADD10+0x48>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800585c:	605a      	str	r2, [r3, #4]
  }
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800586a:	b480      	push	{r7}
 800586c:	b091      	sub	sp, #68	@ 0x44
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005878:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005880:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b22      	cmp	r3, #34	@ 0x22
 8005892:	f040 8169 	bne.w	8005b68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10f      	bne.n	80058be <I2C_Master_ADDR+0x54>
 800589e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80058a2:	2b40      	cmp	r3, #64	@ 0x40
 80058a4:	d10b      	bne.n	80058be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a6:	2300      	movs	r3, #0
 80058a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	e160      	b.n	8005b80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d11d      	bne.n	8005902 <I2C_Master_ADDR+0x98>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80058ce:	d118      	bne.n	8005902 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d0:	2300      	movs	r3, #0
 80058d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8005900:	e13e      	b.n	8005b80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d113      	bne.n	8005934 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800590c:	2300      	movs	r3, #0
 800590e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e115      	b.n	8005b60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	f040 808a 	bne.w	8005a54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005942:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005946:	d137      	bne.n	80059b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005956:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005966:	d113      	bne.n	8005990 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005976:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005978:	2300      	movs	r3, #0
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	627b      	str	r3, [r7, #36]	@ 0x24
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	e0e7      	b.n	8005b60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005990:	2300      	movs	r3, #0
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	623b      	str	r3, [r7, #32]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	623b      	str	r3, [r7, #32]
 80059a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e0d3      	b.n	8005b60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d02e      	beq.n	8005a1c <I2C_Master_ADDR+0x1b2>
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d02b      	beq.n	8005a1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80059c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c6:	2b12      	cmp	r3, #18
 80059c8:	d102      	bne.n	80059d0 <I2C_Master_ADDR+0x166>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d125      	bne.n	8005a1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d00e      	beq.n	80059f4 <I2C_Master_ADDR+0x18a>
 80059d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d00b      	beq.n	80059f4 <I2C_Master_ADDR+0x18a>
 80059dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059de:	2b10      	cmp	r3, #16
 80059e0:	d008      	beq.n	80059f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e007      	b.n	8005a04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a04:	2300      	movs	r3, #0
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	e0a1      	b.n	8005b60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	61bb      	str	r3, [r7, #24]
 8005a40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	e085      	b.n	8005b60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d14d      	bne.n	8005afa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d016      	beq.n	8005a92 <I2C_Master_ADDR+0x228>
 8005a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d013      	beq.n	8005a92 <I2C_Master_ADDR+0x228>
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6c:	2b10      	cmp	r3, #16
 8005a6e:	d010      	beq.n	8005a92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e007      	b.n	8005aa2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005aa0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab0:	d117      	bne.n	8005ae2 <I2C_Master_ADDR+0x278>
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ab8:	d00b      	beq.n	8005ad2 <I2C_Master_ADDR+0x268>
 8005aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d008      	beq.n	8005ad2 <I2C_Master_ADDR+0x268>
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d005      	beq.n	8005ad2 <I2C_Master_ADDR+0x268>
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d002      	beq.n	8005ad2 <I2C_Master_ADDR+0x268>
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d107      	bne.n	8005ae2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ae0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	e032      	b.n	8005b60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b18:	d117      	bne.n	8005b4a <I2C_Master_ADDR+0x2e0>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b20:	d00b      	beq.n	8005b3a <I2C_Master_ADDR+0x2d0>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d008      	beq.n	8005b3a <I2C_Master_ADDR+0x2d0>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d005      	beq.n	8005b3a <I2C_Master_ADDR+0x2d0>
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d002      	beq.n	8005b3a <I2C_Master_ADDR+0x2d0>
 8005b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d107      	bne.n	8005b4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005b66:	e00b      	b.n	8005b80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
}
 8005b7e:	e7ff      	b.n	8005b80 <I2C_Master_ADDR+0x316>
 8005b80:	bf00      	nop
 8005b82:	3744      	adds	r7, #68	@ 0x44
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d02b      	beq.n	8005bfe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d114      	bne.n	8005bfe <I2C_SlaveTransmit_TXE+0x72>
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b29      	cmp	r3, #41	@ 0x29
 8005bd8:	d111      	bne.n	8005bfe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2221      	movs	r2, #33	@ 0x21
 8005bee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2228      	movs	r2, #40	@ 0x28
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff f9cf 	bl	8004f9c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d011      	beq.n	8005c3c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d02c      	beq.n	8005cbc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d114      	bne.n	8005cbc <I2C_SlaveReceive_RXNE+0x74>
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c96:	d111      	bne.n	8005cbc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ca6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2222      	movs	r2, #34	@ 0x22
 8005cac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2228      	movs	r2, #40	@ 0x28
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff f97a 	bl	8004fb0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d012      	beq.n	8005cfc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d22:	2b28      	cmp	r3, #40	@ 0x28
 8005d24:	d127      	bne.n	8005d76 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d34:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	089b      	lsrs	r3, r3, #2
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005d42:	2301      	movs	r3, #1
 8005d44:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	09db      	lsrs	r3, r3, #7
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d103      	bne.n	8005d5a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	81bb      	strh	r3, [r7, #12]
 8005d58:	e002      	b.n	8005d60 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d68:	89ba      	ldrh	r2, [r7, #12]
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff f928 	bl	8004fc4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d74:	e00e      	b.n	8005d94 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005daa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005dba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005df8:	d172      	bne.n	8005ee0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	2b22      	cmp	r3, #34	@ 0x22
 8005dfe:	d002      	beq.n	8005e06 <I2C_Slave_STOPF+0x6a>
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e04:	d135      	bne.n	8005e72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	f043 0204 	orr.w	r2, r3, #4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fd fe44 	bl	8003acc <HAL_DMA_GetState>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d049      	beq.n	8005ede <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4e:	4a69      	ldr	r2, [pc, #420]	@ (8005ff4 <I2C_Slave_STOPF+0x258>)
 8005e50:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fd fc8c 	bl	8003774 <HAL_DMA_Abort_IT>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d03d      	beq.n	8005ede <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e70:	e035      	b.n	8005ede <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	f043 0204 	orr.w	r2, r3, #4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ea4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fd fe0e 	bl	8003acc <HAL_DMA_GetState>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d014      	beq.n	8005ee0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eba:	4a4e      	ldr	r2, [pc, #312]	@ (8005ff4 <I2C_Slave_STOPF+0x258>)
 8005ebc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fd fc56 	bl	8003774 <HAL_DMA_Abort_IT>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4798      	blx	r3
 8005edc:	e000      	b.n	8005ee0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ede:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d03e      	beq.n	8005f68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d112      	bne.n	8005f1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f28:	2b40      	cmp	r3, #64	@ 0x40
 8005f2a:	d112      	bne.n	8005f52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f60:	f043 0204 	orr.w	r2, r3, #4
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f8b7 	bl	80060e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005f76:	e039      	b.n	8005fec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f7c:	d109      	bne.n	8005f92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2228      	movs	r2, #40	@ 0x28
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff f80f 	bl	8004fb0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b28      	cmp	r3, #40	@ 0x28
 8005f9c:	d111      	bne.n	8005fc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a15      	ldr	r2, [pc, #84]	@ (8005ff8 <I2C_Slave_STOPF+0x25c>)
 8005fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff f810 	bl	8004fe0 <HAL_I2C_ListenCpltCallback>
}
 8005fc0:	e014      	b.n	8005fec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc6:	2b22      	cmp	r3, #34	@ 0x22
 8005fc8:	d002      	beq.n	8005fd0 <I2C_Slave_STOPF+0x234>
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b22      	cmp	r3, #34	@ 0x22
 8005fce:	d10d      	bne.n	8005fec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fe ffe2 	bl	8004fb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	08006645 	.word	0x08006645
 8005ff8:	ffff0000 	.word	0xffff0000

08005ffc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800600a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b08      	cmp	r3, #8
 8006016:	d002      	beq.n	800601e <I2C_Slave_AF+0x22>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b20      	cmp	r3, #32
 800601c:	d129      	bne.n	8006072 <I2C_Slave_AF+0x76>
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	2b28      	cmp	r3, #40	@ 0x28
 8006022:	d126      	bne.n	8006072 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a2e      	ldr	r2, [pc, #184]	@ (80060e0 <I2C_Slave_AF+0xe4>)
 8006028:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006038:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006042:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006052:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fe ffb8 	bl	8004fe0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006070:	e031      	b.n	80060d6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	2b21      	cmp	r3, #33	@ 0x21
 8006076:	d129      	bne.n	80060cc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a19      	ldr	r2, [pc, #100]	@ (80060e0 <I2C_Slave_AF+0xe4>)
 800607c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2221      	movs	r2, #33	@ 0x21
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060bc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fe f8d0 	bl	8004264 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fe ff69 	bl	8004f9c <HAL_I2C_SlaveTxCpltCallback>
}
 80060ca:	e004      	b.n	80060d6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060d4:	615a      	str	r2, [r3, #20]
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	ffff0000 	.word	0xffff0000

080060e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	2b10      	cmp	r3, #16
 8006100:	d002      	beq.n	8006108 <I2C_ITError+0x24>
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	2b40      	cmp	r3, #64	@ 0x40
 8006106:	d10a      	bne.n	800611e <I2C_ITError+0x3a>
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b22      	cmp	r3, #34	@ 0x22
 800610c:	d107      	bne.n	800611e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800611c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006124:	2b28      	cmp	r3, #40	@ 0x28
 8006126:	d107      	bne.n	8006138 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2228      	movs	r2, #40	@ 0x28
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006136:	e015      	b.n	8006164 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006146:	d00a      	beq.n	800615e <I2C_ITError+0x7a>
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b60      	cmp	r3, #96	@ 0x60
 800614c:	d007      	beq.n	800615e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800616e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006172:	d162      	bne.n	800623a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006182:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	d020      	beq.n	80061d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006196:	4a6a      	ldr	r2, [pc, #424]	@ (8006340 <I2C_ITError+0x25c>)
 8006198:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fd fae8 	bl	8003774 <HAL_DMA_Abort_IT>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8089 	beq.w	80062be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061ce:	4610      	mov	r0, r2
 80061d0:	4798      	blx	r3
 80061d2:	e074      	b.n	80062be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d8:	4a59      	ldr	r2, [pc, #356]	@ (8006340 <I2C_ITError+0x25c>)
 80061da:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fd fac7 	bl	8003774 <HAL_DMA_Abort_IT>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d068      	beq.n	80062be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f6:	2b40      	cmp	r3, #64	@ 0x40
 80061f8:	d10b      	bne.n	8006212 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0201 	bic.w	r2, r2, #1
 8006220:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006234:	4610      	mov	r0, r2
 8006236:	4798      	blx	r3
 8006238:	e041      	b.n	80062be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b60      	cmp	r3, #96	@ 0x60
 8006244:	d125      	bne.n	8006292 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625e:	2b40      	cmp	r3, #64	@ 0x40
 8006260:	d10b      	bne.n	800627a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0201 	bic.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fe fed0 	bl	8005030 <HAL_I2C_AbortCpltCallback>
 8006290:	e015      	b.n	80062be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629c:	2b40      	cmp	r3, #64	@ 0x40
 800629e:	d10b      	bne.n	80062b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fe feaf 	bl	800501c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10e      	bne.n	80062ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d109      	bne.n	80062ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006302:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b04      	cmp	r3, #4
 800630e:	d113      	bne.n	8006338 <I2C_ITError+0x254>
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	2b28      	cmp	r3, #40	@ 0x28
 8006314:	d110      	bne.n	8006338 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a0a      	ldr	r2, [pc, #40]	@ (8006344 <I2C_ITError+0x260>)
 800631a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fe fe54 	bl	8004fe0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	08006645 	.word	0x08006645
 8006344:	ffff0000 	.word	0xffff0000

08006348 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	461a      	mov	r2, r3
 8006356:	4603      	mov	r3, r0
 8006358:	817b      	strh	r3, [r7, #10]
 800635a:	460b      	mov	r3, r1
 800635c:	813b      	strh	r3, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006370:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	2200      	movs	r2, #0
 800637a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 fa08 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00d      	beq.n	80063a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006398:	d103      	bne.n	80063a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e05f      	b.n	8006466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063a6:	897b      	ldrh	r3, [r7, #10]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80063b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	6a3a      	ldr	r2, [r7, #32]
 80063ba:	492d      	ldr	r1, [pc, #180]	@ (8006470 <I2C_RequestMemoryWrite+0x128>)
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fa63 	bl	8006888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e04c      	b.n	8006466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063cc:	2300      	movs	r3, #0
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e4:	6a39      	ldr	r1, [r7, #32]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 faee 	bl	80069c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00d      	beq.n	800640e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d107      	bne.n	800640a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006408:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e02b      	b.n	8006466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d105      	bne.n	8006420 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006414:	893b      	ldrh	r3, [r7, #8]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	611a      	str	r2, [r3, #16]
 800641e:	e021      	b.n	8006464 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006420:	893b      	ldrh	r3, [r7, #8]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	b29b      	uxth	r3, r3
 8006426:	b2da      	uxtb	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800642e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006430:	6a39      	ldr	r1, [r7, #32]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fac8 	bl	80069c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00d      	beq.n	800645a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	2b04      	cmp	r3, #4
 8006444:	d107      	bne.n	8006456 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006454:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e005      	b.n	8006466 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800645a:	893b      	ldrh	r3, [r7, #8]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	00010002 	.word	0x00010002

08006474 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	4608      	mov	r0, r1
 800647e:	4611      	mov	r1, r2
 8006480:	461a      	mov	r2, r3
 8006482:	4603      	mov	r3, r0
 8006484:	817b      	strh	r3, [r7, #10]
 8006486:	460b      	mov	r3, r1
 8006488:	813b      	strh	r3, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800649c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f96a 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00d      	beq.n	80064e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d4:	d103      	bne.n	80064de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e0aa      	b.n	8006638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064e2:	897b      	ldrh	r3, [r7, #10]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	6a3a      	ldr	r2, [r7, #32]
 80064f6:	4952      	ldr	r1, [pc, #328]	@ (8006640 <I2C_RequestMemoryRead+0x1cc>)
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f9c5 	bl	8006888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e097      	b.n	8006638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800651e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006520:	6a39      	ldr	r1, [r7, #32]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fa50 	bl	80069c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	2b04      	cmp	r3, #4
 8006534:	d107      	bne.n	8006546 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006544:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e076      	b.n	8006638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d105      	bne.n	800655c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006550:	893b      	ldrh	r3, [r7, #8]
 8006552:	b2da      	uxtb	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	611a      	str	r2, [r3, #16]
 800655a:	e021      	b.n	80065a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800655c:	893b      	ldrh	r3, [r7, #8]
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	b29b      	uxth	r3, r3
 8006562:	b2da      	uxtb	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800656a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800656c:	6a39      	ldr	r1, [r7, #32]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 fa2a 	bl	80069c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00d      	beq.n	8006596 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	2b04      	cmp	r3, #4
 8006580:	d107      	bne.n	8006592 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006590:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e050      	b.n	8006638 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006596:	893b      	ldrh	r3, [r7, #8]
 8006598:	b2da      	uxtb	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a2:	6a39      	ldr	r1, [r7, #32]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fa0f 	bl	80069c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00d      	beq.n	80065cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d107      	bne.n	80065c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e035      	b.n	8006638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f8d3 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00d      	beq.n	8006610 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006602:	d103      	bne.n	800660c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800660a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e013      	b.n	8006638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006610:	897b      	ldrh	r3, [r7, #10]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	b2da      	uxtb	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	6a3a      	ldr	r2, [r7, #32]
 8006624:	4906      	ldr	r1, [pc, #24]	@ (8006640 <I2C_RequestMemoryRead+0x1cc>)
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f92e 	bl	8006888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	00010002 	.word	0x00010002

08006644 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800665c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800665e:	4b4b      	ldr	r3, [pc, #300]	@ (800678c <I2C_DMAAbort+0x148>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	08db      	lsrs	r3, r3, #3
 8006664:	4a4a      	ldr	r2, [pc, #296]	@ (8006790 <I2C_DMAAbort+0x14c>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	0a1a      	lsrs	r2, r3, #8
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	00da      	lsls	r2, r3, #3
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006682:	f043 0220 	orr.w	r2, r3, #32
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800668a:	e00a      	b.n	80066a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3b01      	subs	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800669c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a0:	d0ea      	beq.n	8006678 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ae:	2200      	movs	r2, #0
 80066b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	2200      	movs	r2, #0
 80066c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2200      	movs	r2, #0
 80066d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e4:	2200      	movs	r2, #0
 80066e6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f4:	2200      	movs	r2, #0
 80066f6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b60      	cmp	r3, #96	@ 0x60
 8006712:	d10e      	bne.n	8006732 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2200      	movs	r2, #0
 8006728:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800672a:	6978      	ldr	r0, [r7, #20]
 800672c:	f7fe fc80 	bl	8005030 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006730:	e027      	b.n	8006782 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006738:	2b28      	cmp	r3, #40	@ 0x28
 800673a:	d117      	bne.n	800676c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800675a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2200      	movs	r2, #0
 8006760:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2228      	movs	r2, #40	@ 0x28
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800676a:	e007      	b.n	800677c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800677c:	6978      	ldr	r0, [r7, #20]
 800677e:	f7fe fc4d 	bl	800501c <HAL_I2C_ErrorCallback>
}
 8006782:	bf00      	nop
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000004 	.word	0x20000004
 8006790:	14f8b589 	.word	0x14f8b589

08006794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	4613      	mov	r3, r2
 80067a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067a4:	e048      	b.n	8006838 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d044      	beq.n	8006838 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ae:	f7fc fd81 	bl	80032b4 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d302      	bcc.n	80067c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d139      	bne.n	8006838 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10d      	bne.n	80067ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	43da      	mvns	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4013      	ands	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bf0c      	ite	eq
 80067e0:	2301      	moveq	r3, #1
 80067e2:	2300      	movne	r3, #0
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	e00c      	b.n	8006804 <I2C_WaitOnFlagUntilTimeout+0x70>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	43da      	mvns	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4013      	ands	r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	bf0c      	ite	eq
 80067fc:	2301      	moveq	r3, #1
 80067fe:	2300      	movne	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	429a      	cmp	r2, r3
 8006808:	d116      	bne.n	8006838 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006824:	f043 0220 	orr.w	r2, r3, #32
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e023      	b.n	8006880 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	0c1b      	lsrs	r3, r3, #16
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b01      	cmp	r3, #1
 8006840:	d10d      	bne.n	800685e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	43da      	mvns	r2, r3
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	4013      	ands	r3, r2
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	461a      	mov	r2, r3
 800685c:	e00c      	b.n	8006878 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	43da      	mvns	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	4013      	ands	r3, r2
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	429a      	cmp	r2, r3
 800687c:	d093      	beq.n	80067a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006896:	e071      	b.n	800697c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a6:	d123      	bne.n	80068f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068dc:	f043 0204 	orr.w	r2, r3, #4
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e067      	b.n	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d041      	beq.n	800697c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f8:	f7fc fcdc 	bl	80032b4 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	d302      	bcc.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d136      	bne.n	800697c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d10c      	bne.n	8006932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	43da      	mvns	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf14      	ite	ne
 800692a:	2301      	movne	r3, #1
 800692c:	2300      	moveq	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	e00b      	b.n	800694a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	43da      	mvns	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	bf14      	ite	ne
 8006944:	2301      	movne	r3, #1
 8006946:	2300      	moveq	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d016      	beq.n	800697c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006968:	f043 0220 	orr.w	r2, r3, #32
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e021      	b.n	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	0c1b      	lsrs	r3, r3, #16
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10c      	bne.n	80069a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	43da      	mvns	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4013      	ands	r3, r2
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf14      	ite	ne
 8006998:	2301      	movne	r3, #1
 800699a:	2300      	moveq	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	e00b      	b.n	80069b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	43da      	mvns	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4013      	ands	r3, r2
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bf14      	ite	ne
 80069b2:	2301      	movne	r3, #1
 80069b4:	2300      	moveq	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f47f af6d 	bne.w	8006898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069d4:	e034      	b.n	8006a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 f915 	bl	8006c06 <I2C_IsAcknowledgeFailed>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e034      	b.n	8006a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d028      	beq.n	8006a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fc fc61 	bl	80032b4 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d11d      	bne.n	8006a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a0e:	2b80      	cmp	r3, #128	@ 0x80
 8006a10:	d016      	beq.n	8006a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e007      	b.n	8006a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4a:	2b80      	cmp	r3, #128	@ 0x80
 8006a4c:	d1c3      	bne.n	80069d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a64:	e034      	b.n	8006ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f8cd 	bl	8006c06 <I2C_IsAcknowledgeFailed>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e034      	b.n	8006ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d028      	beq.n	8006ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7e:	f7fc fc19 	bl	80032b4 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d302      	bcc.n	8006a94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11d      	bne.n	8006ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d016      	beq.n	8006ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abc:	f043 0220 	orr.w	r2, r3, #32
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e007      	b.n	8006ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d1c3      	bne.n	8006a66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006af4:	4b13      	ldr	r3, [pc, #76]	@ (8006b44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	08db      	lsrs	r3, r3, #3
 8006afa:	4a13      	ldr	r2, [pc, #76]	@ (8006b48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	0a1a      	lsrs	r2, r3, #8
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d107      	bne.n	8006b26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1a:	f043 0220 	orr.w	r2, r3, #32
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e008      	b.n	8006b38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b34:	d0e9      	beq.n	8006b0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	20000004 	.word	0x20000004
 8006b48:	14f8b589 	.word	0x14f8b589

08006b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b58:	e049      	b.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d119      	bne.n	8006b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0210 	mvn.w	r2, #16
 8006b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e030      	b.n	8006bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9c:	f7fc fb8a 	bl	80032b4 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d11d      	bne.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbc:	2b40      	cmp	r3, #64	@ 0x40
 8006bbe:	d016      	beq.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	f043 0220 	orr.w	r2, r3, #32
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e007      	b.n	8006bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf8:	2b40      	cmp	r3, #64	@ 0x40
 8006bfa:	d1ae      	bne.n	8006b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1c:	d11b      	bne.n	8006c56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c42:	f043 0204 	orr.w	r2, r3, #4
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006c74:	d103      	bne.n	8006c7e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c7c:	e007      	b.n	8006c8e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c82:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006c86:	d102      	bne.n	8006c8e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d129      	bne.n	8006d04 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2224      	movs	r2, #36	@ 0x24
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0201 	bic.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0210 	bic.w	r2, r2, #16
 8006cd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	e000      	b.n	8006d06 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
  }
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d12a      	bne.n	8006d82 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2224      	movs	r2, #36	@ 0x24
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0201 	bic.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006d4c:	89fb      	ldrh	r3, [r7, #14]
 8006d4e:	f023 030f 	bic.w	r3, r3, #15
 8006d52:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	89fb      	ldrh	r3, [r7, #14]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	89fa      	ldrh	r2, [r7, #14]
 8006d64:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f042 0201 	orr.w	r2, r2, #1
 8006d74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e000      	b.n	8006d84 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006d82:	2302      	movs	r3, #2
  }
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0cc      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006da4:	4b68      	ldr	r3, [pc, #416]	@ (8006f48 <HAL_RCC_ClockConfig+0x1b8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 030f 	and.w	r3, r3, #15
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d90c      	bls.n	8006dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db2:	4b65      	ldr	r3, [pc, #404]	@ (8006f48 <HAL_RCC_ClockConfig+0x1b8>)
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dba:	4b63      	ldr	r3, [pc, #396]	@ (8006f48 <HAL_RCC_ClockConfig+0x1b8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0b8      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d020      	beq.n	8006e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006de4:	4b59      	ldr	r3, [pc, #356]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	4a58      	ldr	r2, [pc, #352]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006dee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dfc:	4b53      	ldr	r3, [pc, #332]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	4a52      	ldr	r2, [pc, #328]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e08:	4b50      	ldr	r3, [pc, #320]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	494d      	ldr	r1, [pc, #308]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d044      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e2e:	4b47      	ldr	r3, [pc, #284]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d119      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e07f      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d003      	beq.n	8006e4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d107      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e06f      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e067      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e6e:	4b37      	ldr	r3, [pc, #220]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f023 0203 	bic.w	r2, r3, #3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4934      	ldr	r1, [pc, #208]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e80:	f7fc fa18 	bl	80032b4 <HAL_GetTick>
 8006e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e86:	e00a      	b.n	8006e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e88:	f7fc fa14 	bl	80032b4 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e04f      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 020c 	and.w	r2, r3, #12
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d1eb      	bne.n	8006e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb0:	4b25      	ldr	r3, [pc, #148]	@ (8006f48 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d20c      	bcs.n	8006ed8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebe:	4b22      	ldr	r3, [pc, #136]	@ (8006f48 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ec6:	4b20      	ldr	r3, [pc, #128]	@ (8006f48 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d001      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e032      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ee4:	4b19      	ldr	r3, [pc, #100]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	4916      	ldr	r1, [pc, #88]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f02:	4b12      	ldr	r3, [pc, #72]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	490e      	ldr	r1, [pc, #56]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f16:	f000 f855 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f4c <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	091b      	lsrs	r3, r3, #4
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	490a      	ldr	r1, [pc, #40]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c0>)
 8006f28:	5ccb      	ldrb	r3, [r1, r3]
 8006f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2e:	4a09      	ldr	r2, [pc, #36]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006f32:	4b09      	ldr	r3, [pc, #36]	@ (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fc f978 	bl	800322c <HAL_InitTick>

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40023c00 	.word	0x40023c00
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	0800e7a8 	.word	0x0800e7a8
 8006f54:	20000004 	.word	0x20000004
 8006f58:	20000008 	.word	0x20000008

08006f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f60:	4b03      	ldr	r3, [pc, #12]	@ (8006f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f62:	681b      	ldr	r3, [r3, #0]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	20000004 	.word	0x20000004

08006f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f78:	f7ff fff0 	bl	8006f5c <HAL_RCC_GetHCLKFreq>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	4b05      	ldr	r3, [pc, #20]	@ (8006f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	0a9b      	lsrs	r3, r3, #10
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	4903      	ldr	r1, [pc, #12]	@ (8006f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f8a:	5ccb      	ldrb	r3, [r1, r3]
 8006f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	40023800 	.word	0x40023800
 8006f98:	0800e7b8 	.word	0x0800e7b8

08006f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fa0:	f7ff ffdc 	bl	8006f5c <HAL_RCC_GetHCLKFreq>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b05      	ldr	r3, [pc, #20]	@ (8006fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	0b5b      	lsrs	r3, r3, #13
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	4903      	ldr	r1, [pc, #12]	@ (8006fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fb2:	5ccb      	ldrb	r3, [r1, r3]
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	0800e7b8 	.word	0x0800e7b8

08006fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc8:	b0ae      	sub	sp, #184	@ 0xb8
 8006fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fea:	4bcb      	ldr	r3, [pc, #812]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 030c 	and.w	r3, r3, #12
 8006ff2:	2b0c      	cmp	r3, #12
 8006ff4:	f200 8206 	bhi.w	8007404 <HAL_RCC_GetSysClockFreq+0x440>
 8006ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8007000 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007035 	.word	0x08007035
 8007004:	08007405 	.word	0x08007405
 8007008:	08007405 	.word	0x08007405
 800700c:	08007405 	.word	0x08007405
 8007010:	0800703d 	.word	0x0800703d
 8007014:	08007405 	.word	0x08007405
 8007018:	08007405 	.word	0x08007405
 800701c:	08007405 	.word	0x08007405
 8007020:	08007045 	.word	0x08007045
 8007024:	08007405 	.word	0x08007405
 8007028:	08007405 	.word	0x08007405
 800702c:	08007405 	.word	0x08007405
 8007030:	08007235 	.word	0x08007235
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007034:	4bb9      	ldr	r3, [pc, #740]	@ (800731c <HAL_RCC_GetSysClockFreq+0x358>)
 8007036:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800703a:	e1e7      	b.n	800740c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800703c:	4bb8      	ldr	r3, [pc, #736]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x35c>)
 800703e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007042:	e1e3      	b.n	800740c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007044:	4bb4      	ldr	r3, [pc, #720]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x354>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800704c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007050:	4bb1      	ldr	r3, [pc, #708]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x354>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d071      	beq.n	8007140 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800705c:	4bae      	ldr	r3, [pc, #696]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x354>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	099b      	lsrs	r3, r3, #6
 8007062:	2200      	movs	r2, #0
 8007064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007068:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800706c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007074:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007078:	2300      	movs	r3, #0
 800707a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800707e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007082:	4622      	mov	r2, r4
 8007084:	462b      	mov	r3, r5
 8007086:	f04f 0000 	mov.w	r0, #0
 800708a:	f04f 0100 	mov.w	r1, #0
 800708e:	0159      	lsls	r1, r3, #5
 8007090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007094:	0150      	lsls	r0, r2, #5
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4621      	mov	r1, r4
 800709c:	1a51      	subs	r1, r2, r1
 800709e:	6439      	str	r1, [r7, #64]	@ 0x40
 80070a0:	4629      	mov	r1, r5
 80070a2:	eb63 0301 	sbc.w	r3, r3, r1
 80070a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80070b4:	4649      	mov	r1, r9
 80070b6:	018b      	lsls	r3, r1, #6
 80070b8:	4641      	mov	r1, r8
 80070ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070be:	4641      	mov	r1, r8
 80070c0:	018a      	lsls	r2, r1, #6
 80070c2:	4641      	mov	r1, r8
 80070c4:	1a51      	subs	r1, r2, r1
 80070c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070c8:	4649      	mov	r1, r9
 80070ca:	eb63 0301 	sbc.w	r3, r3, r1
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80070dc:	4649      	mov	r1, r9
 80070de:	00cb      	lsls	r3, r1, #3
 80070e0:	4641      	mov	r1, r8
 80070e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070e6:	4641      	mov	r1, r8
 80070e8:	00ca      	lsls	r2, r1, #3
 80070ea:	4610      	mov	r0, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	4603      	mov	r3, r0
 80070f0:	4622      	mov	r2, r4
 80070f2:	189b      	adds	r3, r3, r2
 80070f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80070f6:	462b      	mov	r3, r5
 80070f8:	460a      	mov	r2, r1
 80070fa:	eb42 0303 	adc.w	r3, r2, r3
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800710c:	4629      	mov	r1, r5
 800710e:	024b      	lsls	r3, r1, #9
 8007110:	4621      	mov	r1, r4
 8007112:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007116:	4621      	mov	r1, r4
 8007118:	024a      	lsls	r2, r1, #9
 800711a:	4610      	mov	r0, r2
 800711c:	4619      	mov	r1, r3
 800711e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007128:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800712c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007130:	f7f9 fdca 	bl	8000cc8 <__aeabi_uldivmod>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4613      	mov	r3, r2
 800713a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800713e:	e067      	b.n	8007210 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007140:	4b75      	ldr	r3, [pc, #468]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x354>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	099b      	lsrs	r3, r3, #6
 8007146:	2200      	movs	r2, #0
 8007148:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800714c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007150:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007158:	67bb      	str	r3, [r7, #120]	@ 0x78
 800715a:	2300      	movs	r3, #0
 800715c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800715e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007162:	4622      	mov	r2, r4
 8007164:	462b      	mov	r3, r5
 8007166:	f04f 0000 	mov.w	r0, #0
 800716a:	f04f 0100 	mov.w	r1, #0
 800716e:	0159      	lsls	r1, r3, #5
 8007170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007174:	0150      	lsls	r0, r2, #5
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4621      	mov	r1, r4
 800717c:	1a51      	subs	r1, r2, r1
 800717e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007180:	4629      	mov	r1, r5
 8007182:	eb63 0301 	sbc.w	r3, r3, r1
 8007186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007194:	4649      	mov	r1, r9
 8007196:	018b      	lsls	r3, r1, #6
 8007198:	4641      	mov	r1, r8
 800719a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800719e:	4641      	mov	r1, r8
 80071a0:	018a      	lsls	r2, r1, #6
 80071a2:	4641      	mov	r1, r8
 80071a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80071a8:	4649      	mov	r1, r9
 80071aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071c2:	4692      	mov	sl, r2
 80071c4:	469b      	mov	fp, r3
 80071c6:	4623      	mov	r3, r4
 80071c8:	eb1a 0303 	adds.w	r3, sl, r3
 80071cc:	623b      	str	r3, [r7, #32]
 80071ce:	462b      	mov	r3, r5
 80071d0:	eb4b 0303 	adc.w	r3, fp, r3
 80071d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80071e2:	4629      	mov	r1, r5
 80071e4:	028b      	lsls	r3, r1, #10
 80071e6:	4621      	mov	r1, r4
 80071e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071ec:	4621      	mov	r1, r4
 80071ee:	028a      	lsls	r2, r1, #10
 80071f0:	4610      	mov	r0, r2
 80071f2:	4619      	mov	r1, r3
 80071f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071f8:	2200      	movs	r2, #0
 80071fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80071fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80071fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007202:	f7f9 fd61 	bl	8000cc8 <__aeabi_uldivmod>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4613      	mov	r3, r2
 800720c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007210:	4b41      	ldr	r3, [pc, #260]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x354>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	3301      	adds	r3, #1
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8007222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800722a:	fbb2 f3f3 	udiv	r3, r2, r3
 800722e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007232:	e0eb      	b.n	800740c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007234:	4b38      	ldr	r3, [pc, #224]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x354>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800723c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007240:	4b35      	ldr	r3, [pc, #212]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x354>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d06b      	beq.n	8007324 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800724c:	4b32      	ldr	r3, [pc, #200]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x354>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	099b      	lsrs	r3, r3, #6
 8007252:	2200      	movs	r2, #0
 8007254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007256:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007258:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007260:	2300      	movs	r3, #0
 8007262:	667b      	str	r3, [r7, #100]	@ 0x64
 8007264:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007268:	4622      	mov	r2, r4
 800726a:	462b      	mov	r3, r5
 800726c:	f04f 0000 	mov.w	r0, #0
 8007270:	f04f 0100 	mov.w	r1, #0
 8007274:	0159      	lsls	r1, r3, #5
 8007276:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800727a:	0150      	lsls	r0, r2, #5
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4621      	mov	r1, r4
 8007282:	1a51      	subs	r1, r2, r1
 8007284:	61b9      	str	r1, [r7, #24]
 8007286:	4629      	mov	r1, r5
 8007288:	eb63 0301 	sbc.w	r3, r3, r1
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800729a:	4659      	mov	r1, fp
 800729c:	018b      	lsls	r3, r1, #6
 800729e:	4651      	mov	r1, sl
 80072a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072a4:	4651      	mov	r1, sl
 80072a6:	018a      	lsls	r2, r1, #6
 80072a8:	4651      	mov	r1, sl
 80072aa:	ebb2 0801 	subs.w	r8, r2, r1
 80072ae:	4659      	mov	r1, fp
 80072b0:	eb63 0901 	sbc.w	r9, r3, r1
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072c8:	4690      	mov	r8, r2
 80072ca:	4699      	mov	r9, r3
 80072cc:	4623      	mov	r3, r4
 80072ce:	eb18 0303 	adds.w	r3, r8, r3
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	462b      	mov	r3, r5
 80072d6:	eb49 0303 	adc.w	r3, r9, r3
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80072e8:	4629      	mov	r1, r5
 80072ea:	024b      	lsls	r3, r1, #9
 80072ec:	4621      	mov	r1, r4
 80072ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072f2:	4621      	mov	r1, r4
 80072f4:	024a      	lsls	r2, r1, #9
 80072f6:	4610      	mov	r0, r2
 80072f8:	4619      	mov	r1, r3
 80072fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072fe:	2200      	movs	r2, #0
 8007300:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007302:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007304:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007308:	f7f9 fcde 	bl	8000cc8 <__aeabi_uldivmod>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4613      	mov	r3, r2
 8007312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007316:	e065      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0x420>
 8007318:	40023800 	.word	0x40023800
 800731c:	00f42400 	.word	0x00f42400
 8007320:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007324:	4b3d      	ldr	r3, [pc, #244]	@ (800741c <HAL_RCC_GetSysClockFreq+0x458>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	099b      	lsrs	r3, r3, #6
 800732a:	2200      	movs	r2, #0
 800732c:	4618      	mov	r0, r3
 800732e:	4611      	mov	r1, r2
 8007330:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007334:	653b      	str	r3, [r7, #80]	@ 0x50
 8007336:	2300      	movs	r3, #0
 8007338:	657b      	str	r3, [r7, #84]	@ 0x54
 800733a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800733e:	4642      	mov	r2, r8
 8007340:	464b      	mov	r3, r9
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f04f 0100 	mov.w	r1, #0
 800734a:	0159      	lsls	r1, r3, #5
 800734c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007350:	0150      	lsls	r0, r2, #5
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4641      	mov	r1, r8
 8007358:	1a51      	subs	r1, r2, r1
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	4649      	mov	r1, r9
 800735e:	eb63 0301 	sbc.w	r3, r3, r1
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007370:	4659      	mov	r1, fp
 8007372:	018b      	lsls	r3, r1, #6
 8007374:	4651      	mov	r1, sl
 8007376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800737a:	4651      	mov	r1, sl
 800737c:	018a      	lsls	r2, r1, #6
 800737e:	4651      	mov	r1, sl
 8007380:	1a54      	subs	r4, r2, r1
 8007382:	4659      	mov	r1, fp
 8007384:	eb63 0501 	sbc.w	r5, r3, r1
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	00eb      	lsls	r3, r5, #3
 8007392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007396:	00e2      	lsls	r2, r4, #3
 8007398:	4614      	mov	r4, r2
 800739a:	461d      	mov	r5, r3
 800739c:	4643      	mov	r3, r8
 800739e:	18e3      	adds	r3, r4, r3
 80073a0:	603b      	str	r3, [r7, #0]
 80073a2:	464b      	mov	r3, r9
 80073a4:	eb45 0303 	adc.w	r3, r5, r3
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073b6:	4629      	mov	r1, r5
 80073b8:	028b      	lsls	r3, r1, #10
 80073ba:	4621      	mov	r1, r4
 80073bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073c0:	4621      	mov	r1, r4
 80073c2:	028a      	lsls	r2, r1, #10
 80073c4:	4610      	mov	r0, r2
 80073c6:	4619      	mov	r1, r3
 80073c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073cc:	2200      	movs	r2, #0
 80073ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80073d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073d6:	f7f9 fc77 	bl	8000cc8 <__aeabi_uldivmod>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4613      	mov	r3, r2
 80073e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80073e4:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <HAL_RCC_GetSysClockFreq+0x458>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	0f1b      	lsrs	r3, r3, #28
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80073f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007402:	e003      	b.n	800740c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007404:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800740a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800740c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007410:	4618      	mov	r0, r3
 8007412:	37b8      	adds	r7, #184	@ 0xb8
 8007414:	46bd      	mov	sp, r7
 8007416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800741a:	bf00      	nop
 800741c:	40023800 	.word	0x40023800
 8007420:	00f42400 	.word	0x00f42400

08007424 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e28d      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 8083 	beq.w	800754a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007444:	4b94      	ldr	r3, [pc, #592]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 030c 	and.w	r3, r3, #12
 800744c:	2b04      	cmp	r3, #4
 800744e:	d019      	beq.n	8007484 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007450:	4b91      	ldr	r3, [pc, #580]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 030c 	and.w	r3, r3, #12
        || \
 8007458:	2b08      	cmp	r3, #8
 800745a:	d106      	bne.n	800746a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800745c:	4b8e      	ldr	r3, [pc, #568]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007464:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007468:	d00c      	beq.n	8007484 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800746a:	4b8b      	ldr	r3, [pc, #556]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007472:	2b0c      	cmp	r3, #12
 8007474:	d112      	bne.n	800749c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007476:	4b88      	ldr	r3, [pc, #544]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800747e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007482:	d10b      	bne.n	800749c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007484:	4b84      	ldr	r3, [pc, #528]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d05b      	beq.n	8007548 <HAL_RCC_OscConfig+0x124>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d157      	bne.n	8007548 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e25a      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a4:	d106      	bne.n	80074b4 <HAL_RCC_OscConfig+0x90>
 80074a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a7b      	ldr	r2, [pc, #492]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	e01d      	b.n	80074f0 <HAL_RCC_OscConfig+0xcc>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074bc:	d10c      	bne.n	80074d8 <HAL_RCC_OscConfig+0xb4>
 80074be:	4b76      	ldr	r3, [pc, #472]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a75      	ldr	r2, [pc, #468]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	4b73      	ldr	r3, [pc, #460]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a72      	ldr	r2, [pc, #456]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	e00b      	b.n	80074f0 <HAL_RCC_OscConfig+0xcc>
 80074d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a6e      	ldr	r2, [pc, #440]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	4b6c      	ldr	r3, [pc, #432]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a6b      	ldr	r2, [pc, #428]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80074ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d013      	beq.n	8007520 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f8:	f7fb fedc 	bl	80032b4 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007500:	f7fb fed8 	bl	80032b4 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b64      	cmp	r3, #100	@ 0x64
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e21f      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007512:	4b61      	ldr	r3, [pc, #388]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f0      	beq.n	8007500 <HAL_RCC_OscConfig+0xdc>
 800751e:	e014      	b.n	800754a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007520:	f7fb fec8 	bl	80032b4 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007528:	f7fb fec4 	bl	80032b4 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b64      	cmp	r3, #100	@ 0x64
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e20b      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800753a:	4b57      	ldr	r3, [pc, #348]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f0      	bne.n	8007528 <HAL_RCC_OscConfig+0x104>
 8007546:	e000      	b.n	800754a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d06f      	beq.n	8007636 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007556:	4b50      	ldr	r3, [pc, #320]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 030c 	and.w	r3, r3, #12
 800755e:	2b00      	cmp	r3, #0
 8007560:	d017      	beq.n	8007592 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007562:	4b4d      	ldr	r3, [pc, #308]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 030c 	and.w	r3, r3, #12
        || \
 800756a:	2b08      	cmp	r3, #8
 800756c:	d105      	bne.n	800757a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800756e:	4b4a      	ldr	r3, [pc, #296]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800757a:	4b47      	ldr	r3, [pc, #284]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007582:	2b0c      	cmp	r3, #12
 8007584:	d11c      	bne.n	80075c0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007586:	4b44      	ldr	r3, [pc, #272]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d116      	bne.n	80075c0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007592:	4b41      	ldr	r3, [pc, #260]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <HAL_RCC_OscConfig+0x186>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d001      	beq.n	80075aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e1d3      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4937      	ldr	r1, [pc, #220]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075be:	e03a      	b.n	8007636 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d020      	beq.n	800760a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075c8:	4b34      	ldr	r3, [pc, #208]	@ (800769c <HAL_RCC_OscConfig+0x278>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ce:	f7fb fe71 	bl	80032b4 <HAL_GetTick>
 80075d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075d4:	e008      	b.n	80075e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075d6:	f7fb fe6d 	bl	80032b4 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e1b4      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0f0      	beq.n	80075d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f4:	4b28      	ldr	r3, [pc, #160]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	4925      	ldr	r1, [pc, #148]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]
 8007608:	e015      	b.n	8007636 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800760a:	4b24      	ldr	r3, [pc, #144]	@ (800769c <HAL_RCC_OscConfig+0x278>)
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007610:	f7fb fe50 	bl	80032b4 <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007618:	f7fb fe4c 	bl	80032b4 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e193      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800762a:	4b1b      	ldr	r3, [pc, #108]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f0      	bne.n	8007618 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0308 	and.w	r3, r3, #8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d036      	beq.n	80076b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d016      	beq.n	8007678 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800764a:	4b15      	ldr	r3, [pc, #84]	@ (80076a0 <HAL_RCC_OscConfig+0x27c>)
 800764c:	2201      	movs	r2, #1
 800764e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007650:	f7fb fe30 	bl	80032b4 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007658:	f7fb fe2c 	bl	80032b4 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e173      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800766a:	4b0b      	ldr	r3, [pc, #44]	@ (8007698 <HAL_RCC_OscConfig+0x274>)
 800766c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0x234>
 8007676:	e01b      	b.n	80076b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007678:	4b09      	ldr	r3, [pc, #36]	@ (80076a0 <HAL_RCC_OscConfig+0x27c>)
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800767e:	f7fb fe19 	bl	80032b4 <HAL_GetTick>
 8007682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007684:	e00e      	b.n	80076a4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007686:	f7fb fe15 	bl	80032b4 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d907      	bls.n	80076a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e15c      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
 8007698:	40023800 	.word	0x40023800
 800769c:	42470000 	.word	0x42470000
 80076a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076a4:	4b8a      	ldr	r3, [pc, #552]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80076a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1ea      	bne.n	8007686 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8097 	beq.w	80077ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076be:	2300      	movs	r3, #0
 80076c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076c2:	4b83      	ldr	r3, [pc, #524]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80076c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10f      	bne.n	80076ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	4b7f      	ldr	r3, [pc, #508]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	4a7e      	ldr	r2, [pc, #504]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80076d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80076de:	4b7c      	ldr	r3, [pc, #496]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076e6:	60bb      	str	r3, [r7, #8]
 80076e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076ea:	2301      	movs	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ee:	4b79      	ldr	r3, [pc, #484]	@ (80078d4 <HAL_RCC_OscConfig+0x4b0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d118      	bne.n	800772c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076fa:	4b76      	ldr	r3, [pc, #472]	@ (80078d4 <HAL_RCC_OscConfig+0x4b0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a75      	ldr	r2, [pc, #468]	@ (80078d4 <HAL_RCC_OscConfig+0x4b0>)
 8007700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007706:	f7fb fdd5 	bl	80032b4 <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800770c:	e008      	b.n	8007720 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800770e:	f7fb fdd1 	bl	80032b4 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e118      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007720:	4b6c      	ldr	r3, [pc, #432]	@ (80078d4 <HAL_RCC_OscConfig+0x4b0>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0f0      	beq.n	800770e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d106      	bne.n	8007742 <HAL_RCC_OscConfig+0x31e>
 8007734:	4b66      	ldr	r3, [pc, #408]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 8007736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007738:	4a65      	ldr	r2, [pc, #404]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007740:	e01c      	b.n	800777c <HAL_RCC_OscConfig+0x358>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	2b05      	cmp	r3, #5
 8007748:	d10c      	bne.n	8007764 <HAL_RCC_OscConfig+0x340>
 800774a:	4b61      	ldr	r3, [pc, #388]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 800774c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800774e:	4a60      	ldr	r2, [pc, #384]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 8007750:	f043 0304 	orr.w	r3, r3, #4
 8007754:	6713      	str	r3, [r2, #112]	@ 0x70
 8007756:	4b5e      	ldr	r3, [pc, #376]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775a:	4a5d      	ldr	r2, [pc, #372]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 800775c:	f043 0301 	orr.w	r3, r3, #1
 8007760:	6713      	str	r3, [r2, #112]	@ 0x70
 8007762:	e00b      	b.n	800777c <HAL_RCC_OscConfig+0x358>
 8007764:	4b5a      	ldr	r3, [pc, #360]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 8007766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007768:	4a59      	ldr	r2, [pc, #356]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007770:	4b57      	ldr	r3, [pc, #348]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 8007772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007774:	4a56      	ldr	r2, [pc, #344]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 8007776:	f023 0304 	bic.w	r3, r3, #4
 800777a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d015      	beq.n	80077b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007784:	f7fb fd96 	bl	80032b4 <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800778a:	e00a      	b.n	80077a2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800778c:	f7fb fd92 	bl	80032b4 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800779a:	4293      	cmp	r3, r2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e0d7      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a2:	4b4b      	ldr	r3, [pc, #300]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80077a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0ee      	beq.n	800778c <HAL_RCC_OscConfig+0x368>
 80077ae:	e014      	b.n	80077da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b0:	f7fb fd80 	bl	80032b4 <HAL_GetTick>
 80077b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077b6:	e00a      	b.n	80077ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b8:	f7fb fd7c 	bl	80032b4 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e0c1      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077ce:	4b40      	ldr	r3, [pc, #256]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80077d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1ee      	bne.n	80077b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d105      	bne.n	80077ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077e0:	4b3b      	ldr	r3, [pc, #236]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80077e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e4:	4a3a      	ldr	r2, [pc, #232]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80077e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 80ad 	beq.w	8007950 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077f6:	4b36      	ldr	r3, [pc, #216]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 030c 	and.w	r3, r3, #12
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d060      	beq.n	80078c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d145      	bne.n	8007896 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800780a:	4b33      	ldr	r3, [pc, #204]	@ (80078d8 <HAL_RCC_OscConfig+0x4b4>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007810:	f7fb fd50 	bl	80032b4 <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007818:	f7fb fd4c 	bl	80032b4 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e093      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800782a:	4b29      	ldr	r3, [pc, #164]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69da      	ldr	r2, [r3, #28]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007844:	019b      	lsls	r3, r3, #6
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	085b      	lsrs	r3, r3, #1
 800784e:	3b01      	subs	r3, #1
 8007850:	041b      	lsls	r3, r3, #16
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007858:	061b      	lsls	r3, r3, #24
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007860:	071b      	lsls	r3, r3, #28
 8007862:	491b      	ldr	r1, [pc, #108]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 8007864:	4313      	orrs	r3, r2
 8007866:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007868:	4b1b      	ldr	r3, [pc, #108]	@ (80078d8 <HAL_RCC_OscConfig+0x4b4>)
 800786a:	2201      	movs	r2, #1
 800786c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786e:	f7fb fd21 	bl	80032b4 <HAL_GetTick>
 8007872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007874:	e008      	b.n	8007888 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007876:	f7fb fd1d 	bl	80032b4 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d901      	bls.n	8007888 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e064      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007888:	4b11      	ldr	r3, [pc, #68]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0f0      	beq.n	8007876 <HAL_RCC_OscConfig+0x452>
 8007894:	e05c      	b.n	8007950 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007896:	4b10      	ldr	r3, [pc, #64]	@ (80078d8 <HAL_RCC_OscConfig+0x4b4>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789c:	f7fb fd0a 	bl	80032b4 <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a4:	f7fb fd06 	bl	80032b4 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e04d      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078b6:	4b06      	ldr	r3, [pc, #24]	@ (80078d0 <HAL_RCC_OscConfig+0x4ac>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f0      	bne.n	80078a4 <HAL_RCC_OscConfig+0x480>
 80078c2:	e045      	b.n	8007950 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d107      	bne.n	80078dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e040      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
 80078d0:	40023800 	.word	0x40023800
 80078d4:	40007000 	.word	0x40007000
 80078d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078dc:	4b1f      	ldr	r3, [pc, #124]	@ (800795c <HAL_RCC_OscConfig+0x538>)
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d030      	beq.n	800794c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d129      	bne.n	800794c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007902:	429a      	cmp	r2, r3
 8007904:	d122      	bne.n	800794c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800790c:	4013      	ands	r3, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007912:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007914:	4293      	cmp	r3, r2
 8007916:	d119      	bne.n	800794c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007922:	085b      	lsrs	r3, r3, #1
 8007924:	3b01      	subs	r3, #1
 8007926:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007928:	429a      	cmp	r2, r3
 800792a:	d10f      	bne.n	800794c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007936:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007938:	429a      	cmp	r2, r3
 800793a:	d107      	bne.n	800794c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007946:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007948:	429a      	cmp	r2, r3
 800794a:	d001      	beq.n	8007950 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	40023800 	.word	0x40023800

08007960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e041      	b.n	80079f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fb f9f8 	bl	8002d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f000 fae6 	bl	8007f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d001      	beq.n	8007a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e046      	b.n	8007aa6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a23      	ldr	r2, [pc, #140]	@ (8007ab4 <HAL_TIM_Base_Start+0xb4>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d022      	beq.n	8007a70 <HAL_TIM_Base_Start+0x70>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a32:	d01d      	beq.n	8007a70 <HAL_TIM_Base_Start+0x70>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a1f      	ldr	r2, [pc, #124]	@ (8007ab8 <HAL_TIM_Base_Start+0xb8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d018      	beq.n	8007a70 <HAL_TIM_Base_Start+0x70>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1e      	ldr	r2, [pc, #120]	@ (8007abc <HAL_TIM_Base_Start+0xbc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d013      	beq.n	8007a70 <HAL_TIM_Base_Start+0x70>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac0 <HAL_TIM_Base_Start+0xc0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00e      	beq.n	8007a70 <HAL_TIM_Base_Start+0x70>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac4 <HAL_TIM_Base_Start+0xc4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d009      	beq.n	8007a70 <HAL_TIM_Base_Start+0x70>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a19      	ldr	r2, [pc, #100]	@ (8007ac8 <HAL_TIM_Base_Start+0xc8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d004      	beq.n	8007a70 <HAL_TIM_Base_Start+0x70>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <HAL_TIM_Base_Start+0xcc>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d111      	bne.n	8007a94 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b06      	cmp	r3, #6
 8007a80:	d010      	beq.n	8007aa4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0201 	orr.w	r2, r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a92:	e007      	b.n	8007aa4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	40010000 	.word	0x40010000
 8007ab8:	40000400 	.word	0x40000400
 8007abc:	40000800 	.word	0x40000800
 8007ac0:	40000c00 	.word	0x40000c00
 8007ac4:	40010400 	.word	0x40010400
 8007ac8:	40014000 	.word	0x40014000
 8007acc:	40001800 	.word	0x40001800

08007ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d001      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e04e      	b.n	8007b86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a23      	ldr	r2, [pc, #140]	@ (8007b94 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d022      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b12:	d01d      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1f      	ldr	r2, [pc, #124]	@ (8007b98 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1e      	ldr	r2, [pc, #120]	@ (8007b9c <HAL_TIM_Base_Start_IT+0xcc>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a19      	ldr	r2, [pc, #100]	@ (8007ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a18      	ldr	r2, [pc, #96]	@ (8007bac <HAL_TIM_Base_Start_IT+0xdc>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d111      	bne.n	8007b74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b06      	cmp	r3, #6
 8007b60:	d010      	beq.n	8007b84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0201 	orr.w	r2, r2, #1
 8007b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b72:	e007      	b.n	8007b84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0201 	orr.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40000800 	.word	0x40000800
 8007ba0:	40000c00 	.word	0x40000c00
 8007ba4:	40010400 	.word	0x40010400
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40001800 	.word	0x40001800

08007bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d020      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01b      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0202 	mvn.w	r2, #2
 8007be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f999 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007c00:	e005      	b.n	8007c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f98b 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f99c 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d020      	beq.n	8007c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01b      	beq.n	8007c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0204 	mvn.w	r2, #4
 8007c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2202      	movs	r2, #2
 8007c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f973 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007c4c:	e005      	b.n	8007c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f965 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f976 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d020      	beq.n	8007cac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d01b      	beq.n	8007cac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f06f 0208 	mvn.w	r2, #8
 8007c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2204      	movs	r2, #4
 8007c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f94d 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007c98:	e005      	b.n	8007ca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f93f 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f950 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d020      	beq.n	8007cf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01b      	beq.n	8007cf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f06f 0210 	mvn.w	r2, #16
 8007cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2208      	movs	r2, #8
 8007cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f927 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007ce4:	e005      	b.n	8007cf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f919 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f92a 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00c      	beq.n	8007d1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0201 	mvn.w	r2, #1
 8007d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7fa feb4 	bl	8002a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00c      	beq.n	8007d40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d007      	beq.n	8007d40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fade 	bl	80082fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00c      	beq.n	8007d64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8fb 	bl	8007f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00c      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f003 0320 	and.w	r3, r3, #32
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0220 	mvn.w	r2, #32
 8007d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fab0 	bl	80082e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d88:	bf00      	nop
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d101      	bne.n	8007dac <HAL_TIM_ConfigClockSource+0x1c>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e0b4      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x186>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007de4:	d03e      	beq.n	8007e64 <HAL_TIM_ConfigClockSource+0xd4>
 8007de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dea:	f200 8087 	bhi.w	8007efc <HAL_TIM_ConfigClockSource+0x16c>
 8007dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df2:	f000 8086 	beq.w	8007f02 <HAL_TIM_ConfigClockSource+0x172>
 8007df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dfa:	d87f      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x16c>
 8007dfc:	2b70      	cmp	r3, #112	@ 0x70
 8007dfe:	d01a      	beq.n	8007e36 <HAL_TIM_ConfigClockSource+0xa6>
 8007e00:	2b70      	cmp	r3, #112	@ 0x70
 8007e02:	d87b      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x16c>
 8007e04:	2b60      	cmp	r3, #96	@ 0x60
 8007e06:	d050      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x11a>
 8007e08:	2b60      	cmp	r3, #96	@ 0x60
 8007e0a:	d877      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x16c>
 8007e0c:	2b50      	cmp	r3, #80	@ 0x50
 8007e0e:	d03c      	beq.n	8007e8a <HAL_TIM_ConfigClockSource+0xfa>
 8007e10:	2b50      	cmp	r3, #80	@ 0x50
 8007e12:	d873      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x16c>
 8007e14:	2b40      	cmp	r3, #64	@ 0x40
 8007e16:	d058      	beq.n	8007eca <HAL_TIM_ConfigClockSource+0x13a>
 8007e18:	2b40      	cmp	r3, #64	@ 0x40
 8007e1a:	d86f      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x16c>
 8007e1c:	2b30      	cmp	r3, #48	@ 0x30
 8007e1e:	d064      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x15a>
 8007e20:	2b30      	cmp	r3, #48	@ 0x30
 8007e22:	d86b      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x16c>
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d060      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x15a>
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d867      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x16c>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d05c      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x15a>
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d05a      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x15a>
 8007e34:	e062      	b.n	8007efc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e46:	f000 f9b3 	bl	80081b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	609a      	str	r2, [r3, #8]
      break;
 8007e62:	e04f      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e74:	f000 f99c 	bl	80081b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e86:	609a      	str	r2, [r3, #8]
      break;
 8007e88:	e03c      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e96:	461a      	mov	r2, r3
 8007e98:	f000 f910 	bl	80080bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2150      	movs	r1, #80	@ 0x50
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 f969 	bl	800817a <TIM_ITRx_SetConfig>
      break;
 8007ea8:	e02c      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f000 f92f 	bl	800811a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2160      	movs	r1, #96	@ 0x60
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f959 	bl	800817a <TIM_ITRx_SetConfig>
      break;
 8007ec8:	e01c      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f000 f8f0 	bl	80080bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2140      	movs	r1, #64	@ 0x40
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f949 	bl	800817a <TIM_ITRx_SetConfig>
      break;
 8007ee8:	e00c      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f000 f940 	bl	800817a <TIM_ITRx_SetConfig>
      break;
 8007efa:	e003      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
      break;
 8007f00:	e000      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a43      	ldr	r2, [pc, #268]	@ (8008090 <TIM_Base_SetConfig+0x120>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f8e:	d00f      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a40      	ldr	r2, [pc, #256]	@ (8008094 <TIM_Base_SetConfig+0x124>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00b      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8008098 <TIM_Base_SetConfig+0x128>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d007      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800809c <TIM_Base_SetConfig+0x12c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d003      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a3d      	ldr	r2, [pc, #244]	@ (80080a0 <TIM_Base_SetConfig+0x130>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d108      	bne.n	8007fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a32      	ldr	r2, [pc, #200]	@ (8008090 <TIM_Base_SetConfig+0x120>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d02b      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd0:	d027      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2f      	ldr	r2, [pc, #188]	@ (8008094 <TIM_Base_SetConfig+0x124>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d023      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8008098 <TIM_Base_SetConfig+0x128>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d01f      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800809c <TIM_Base_SetConfig+0x12c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d01b      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a2c      	ldr	r2, [pc, #176]	@ (80080a0 <TIM_Base_SetConfig+0x130>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d017      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a2b      	ldr	r2, [pc, #172]	@ (80080a4 <TIM_Base_SetConfig+0x134>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d013      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80080a8 <TIM_Base_SetConfig+0x138>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00f      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a29      	ldr	r2, [pc, #164]	@ (80080ac <TIM_Base_SetConfig+0x13c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00b      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a28      	ldr	r2, [pc, #160]	@ (80080b0 <TIM_Base_SetConfig+0x140>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d007      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a27      	ldr	r2, [pc, #156]	@ (80080b4 <TIM_Base_SetConfig+0x144>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d003      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a26      	ldr	r2, [pc, #152]	@ (80080b8 <TIM_Base_SetConfig+0x148>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d108      	bne.n	8008034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a0e      	ldr	r2, [pc, #56]	@ (8008090 <TIM_Base_SetConfig+0x120>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d003      	beq.n	8008062 <TIM_Base_SetConfig+0xf2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a10      	ldr	r2, [pc, #64]	@ (80080a0 <TIM_Base_SetConfig+0x130>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d103      	bne.n	800806a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f043 0204 	orr.w	r2, r3, #4
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	601a      	str	r2, [r3, #0]
}
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40010000 	.word	0x40010000
 8008094:	40000400 	.word	0x40000400
 8008098:	40000800 	.word	0x40000800
 800809c:	40000c00 	.word	0x40000c00
 80080a0:	40010400 	.word	0x40010400
 80080a4:	40014000 	.word	0x40014000
 80080a8:	40014400 	.word	0x40014400
 80080ac:	40014800 	.word	0x40014800
 80080b0:	40001800 	.word	0x40001800
 80080b4:	40001c00 	.word	0x40001c00
 80080b8:	40002000 	.word	0x40002000

080080bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	f023 0201 	bic.w	r2, r3, #1
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	011b      	lsls	r3, r3, #4
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f023 030a 	bic.w	r3, r3, #10
 80080f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4313      	orrs	r3, r2
 8008100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	621a      	str	r2, [r3, #32]
}
 800810e:	bf00      	nop
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800811a:	b480      	push	{r7}
 800811c:	b087      	sub	sp, #28
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	f023 0210 	bic.w	r2, r3, #16
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	031b      	lsls	r3, r3, #12
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008156:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	621a      	str	r2, [r3, #32]
}
 800816e:	bf00      	nop
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800817a:	b480      	push	{r7}
 800817c:	b085      	sub	sp, #20
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	f043 0307 	orr.w	r3, r3, #7
 800819c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	609a      	str	r2, [r3, #8]
}
 80081a4:	bf00      	nop
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	021a      	lsls	r2, r3, #8
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	431a      	orrs	r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	4313      	orrs	r3, r2
 80081dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	609a      	str	r2, [r3, #8]
}
 80081e4:	bf00      	nop
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008204:	2302      	movs	r3, #2
 8008206:	e05a      	b.n	80082be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800822e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a21      	ldr	r2, [pc, #132]	@ (80082cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d022      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008254:	d01d      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1d      	ldr	r2, [pc, #116]	@ (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d018      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1b      	ldr	r2, [pc, #108]	@ (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d013      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1a      	ldr	r2, [pc, #104]	@ (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00e      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a18      	ldr	r2, [pc, #96]	@ (80082dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d009      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a17      	ldr	r2, [pc, #92]	@ (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d004      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a15      	ldr	r2, [pc, #84]	@ (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d10c      	bne.n	80082ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	40010000 	.word	0x40010000
 80082d0:	40000400 	.word	0x40000400
 80082d4:	40000800 	.word	0x40000800
 80082d8:	40000c00 	.word	0x40000c00
 80082dc:	40010400 	.word	0x40010400
 80082e0:	40014000 	.word	0x40014000
 80082e4:	40001800 	.word	0x40001800

080082e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e042      	b.n	80083a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fa fd48 	bl	8002dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2224      	movs	r2, #36	@ 0x24
 8008340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fd7f 	bl	8008e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691a      	ldr	r2, [r3, #16]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695a      	ldr	r2, [r3, #20]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2220      	movs	r2, #32
 8008394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	@ 0x28
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	d175      	bne.n	80084bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_UART_Transmit+0x2c>
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e06e      	b.n	80084be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2221      	movs	r2, #33	@ 0x21
 80083ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083ee:	f7fa ff61 	bl	80032b4 <HAL_GetTick>
 80083f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	88fa      	ldrh	r2, [r7, #6]
 80083f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	88fa      	ldrh	r2, [r7, #6]
 80083fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008408:	d108      	bne.n	800841c <HAL_UART_Transmit+0x6c>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	61bb      	str	r3, [r7, #24]
 800841a:	e003      	b.n	8008424 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008420:	2300      	movs	r3, #0
 8008422:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008424:	e02e      	b.n	8008484 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2200      	movs	r2, #0
 800842e:	2180      	movs	r1, #128	@ 0x80
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 fb1d 	bl	8008a70 <UART_WaitOnFlagUntilTimeout>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2220      	movs	r2, #32
 8008440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e03a      	b.n	80084be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800845c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	3302      	adds	r3, #2
 8008462:	61bb      	str	r3, [r7, #24]
 8008464:	e007      	b.n	8008476 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	781a      	ldrb	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	3301      	adds	r3, #1
 8008474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800847a:	b29b      	uxth	r3, r3
 800847c:	3b01      	subs	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1cb      	bne.n	8008426 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2200      	movs	r2, #0
 8008496:	2140      	movs	r1, #64	@ 0x40
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 fae9 	bl	8008a70 <UART_WaitOnFlagUntilTimeout>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e006      	b.n	80084be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	e000      	b.n	80084be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80084bc:	2302      	movs	r3, #2
  }
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3720      	adds	r7, #32
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b0ba      	sub	sp, #232	@ 0xe8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fe:	f003 030f 	and.w	r3, r3, #15
 8008502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10f      	bne.n	800852e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800850e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <HAL_UART_IRQHandler+0x66>
 800851a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fbd7 	bl	8008cda <UART_Receive_IT>
      return;
 800852c:	e273      	b.n	8008a16 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800852e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80de 	beq.w	80086f4 <HAL_UART_IRQHandler+0x22c>
 8008538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d106      	bne.n	8008552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008548:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80d1 	beq.w	80086f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <HAL_UART_IRQHandler+0xae>
 800855e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856e:	f043 0201 	orr.w	r2, r3, #1
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <HAL_UART_IRQHandler+0xd2>
 8008582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008592:	f043 0202 	orr.w	r2, r3, #2
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800859a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00b      	beq.n	80085be <HAL_UART_IRQHandler+0xf6>
 80085a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b6:	f043 0204 	orr.w	r2, r3, #4
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d011      	beq.n	80085ee <HAL_UART_IRQHandler+0x126>
 80085ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ce:	f003 0320 	and.w	r3, r3, #32
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d005      	beq.n	80085ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e6:	f043 0208 	orr.w	r2, r3, #8
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 820a 	beq.w	8008a0c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085fc:	f003 0320 	and.w	r3, r3, #32
 8008600:	2b00      	cmp	r3, #0
 8008602:	d008      	beq.n	8008616 <HAL_UART_IRQHandler+0x14e>
 8008604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fb62 	bl	8008cda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008620:	2b40      	cmp	r3, #64	@ 0x40
 8008622:	bf0c      	ite	eq
 8008624:	2301      	moveq	r3, #1
 8008626:	2300      	movne	r3, #0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d103      	bne.n	8008642 <HAL_UART_IRQHandler+0x17a>
 800863a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800863e:	2b00      	cmp	r3, #0
 8008640:	d04f      	beq.n	80086e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa6d 	bl	8008b22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008652:	2b40      	cmp	r3, #64	@ 0x40
 8008654:	d141      	bne.n	80086da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3314      	adds	r3, #20
 800865c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800866c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3314      	adds	r3, #20
 800867e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008682:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800868e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800869a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1d9      	bne.n	8008656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d013      	beq.n	80086d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ae:	4a8a      	ldr	r2, [pc, #552]	@ (80088d8 <HAL_UART_IRQHandler+0x410>)
 80086b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fb f85c 	bl	8003774 <HAL_DMA_Abort_IT>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d016      	beq.n	80086f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d0:	e00e      	b.n	80086f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f9b6 	bl	8008a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	e00a      	b.n	80086f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f9b2 	bl	8008a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e0:	e006      	b.n	80086f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f9ae 	bl	8008a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80086ee:	e18d      	b.n	8008a0c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f0:	bf00      	nop
    return;
 80086f2:	e18b      	b.n	8008a0c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	f040 8167 	bne.w	80089cc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008702:	f003 0310 	and.w	r3, r3, #16
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 8160 	beq.w	80089cc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800870c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 8159 	beq.w	80089cc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800871a:	2300      	movs	r3, #0
 800871c:	60bb      	str	r3, [r7, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60bb      	str	r3, [r7, #8]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800873a:	2b40      	cmp	r3, #64	@ 0x40
 800873c:	f040 80ce 	bne.w	80088dc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800874c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 80a9 	beq.w	80088a8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800875a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800875e:	429a      	cmp	r2, r3
 8008760:	f080 80a2 	bcs.w	80088a8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800876a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008776:	f000 8088 	beq.w	800888a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	330c      	adds	r3, #12
 8008780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	330c      	adds	r3, #12
 80087a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80087a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80087b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1d9      	bne.n	800877a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3314      	adds	r3, #20
 80087cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087d8:	f023 0301 	bic.w	r3, r3, #1
 80087dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3314      	adds	r3, #20
 80087e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e1      	bne.n	80087c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3314      	adds	r3, #20
 8008808:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3314      	adds	r3, #20
 8008822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008826:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008828:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800882c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e3      	bne.n	8008802 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	330c      	adds	r3, #12
 800884e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800885a:	f023 0310 	bic.w	r3, r3, #16
 800885e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	330c      	adds	r3, #12
 8008868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800886c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800886e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008872:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800887a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e3      	bne.n	8008848 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008884:	4618      	mov	r0, r3
 8008886:	f7fa ff05 	bl	8003694 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2202      	movs	r2, #2
 800888e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008898:	b29b      	uxth	r3, r3
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	b29b      	uxth	r3, r3
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f8d9 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80088a6:	e0b3      	b.n	8008a10 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088b0:	429a      	cmp	r2, r3
 80088b2:	f040 80ad 	bne.w	8008a10 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088c0:	f040 80a6 	bne.w	8008a10 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8c1 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
      return;
 80088d6:	e09b      	b.n	8008a10 <HAL_UART_IRQHandler+0x548>
 80088d8:	08008be9 	.word	0x08008be9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 808e 	beq.w	8008a14 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80088f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 8089 	beq.w	8008a14 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	330c      	adds	r3, #12
 8008908:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008918:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	330c      	adds	r3, #12
 8008922:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008926:	647a      	str	r2, [r7, #68]	@ 0x44
 8008928:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800892c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e3      	bne.n	8008902 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3314      	adds	r3, #20
 8008940:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	623b      	str	r3, [r7, #32]
   return(result);
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	f023 0301 	bic.w	r3, r3, #1
 8008950:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3314      	adds	r3, #20
 800895a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800895e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008960:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800896c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e3      	bne.n	800893a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	330c      	adds	r3, #12
 8008986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 0310 	bic.w	r3, r3, #16
 8008996:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	330c      	adds	r3, #12
 80089a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80089a4:	61fa      	str	r2, [r7, #28]
 80089a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	69b9      	ldr	r1, [r7, #24]
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	617b      	str	r3, [r7, #20]
   return(result);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e3      	bne.n	8008980 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f847 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089ca:	e023      	b.n	8008a14 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d009      	beq.n	80089ec <HAL_UART_IRQHandler+0x524>
 80089d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f910 	bl	8008c0a <UART_Transmit_IT>
    return;
 80089ea:	e014      	b.n	8008a16 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00e      	beq.n	8008a16 <HAL_UART_IRQHandler+0x54e>
 80089f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d008      	beq.n	8008a16 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f950 	bl	8008caa <UART_EndTransmit_IT>
    return;
 8008a0a:	e004      	b.n	8008a16 <HAL_UART_IRQHandler+0x54e>
    return;
 8008a0c:	bf00      	nop
 8008a0e:	e002      	b.n	8008a16 <HAL_UART_IRQHandler+0x54e>
      return;
 8008a10:	bf00      	nop
 8008a12:	e000      	b.n	8008a16 <HAL_UART_IRQHandler+0x54e>
      return;
 8008a14:	bf00      	nop
  }
}
 8008a16:	37e8      	adds	r7, #232	@ 0xe8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a80:	e03b      	b.n	8008afa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a88:	d037      	beq.n	8008afa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a8a:	f7fa fc13 	bl	80032b4 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	6a3a      	ldr	r2, [r7, #32]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d302      	bcc.n	8008aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e03a      	b.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d023      	beq.n	8008afa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b80      	cmp	r3, #128	@ 0x80
 8008ab6:	d020      	beq.n	8008afa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b40      	cmp	r3, #64	@ 0x40
 8008abc:	d01d      	beq.n	8008afa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	d116      	bne.n	8008afa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	617b      	str	r3, [r7, #20]
 8008ae0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 f81d 	bl	8008b22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2208      	movs	r2, #8
 8008aec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e00f      	b.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4013      	ands	r3, r2
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	bf0c      	ite	eq
 8008b0a:	2301      	moveq	r3, #1
 8008b0c:	2300      	movne	r3, #0
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	461a      	mov	r2, r3
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d0b4      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b095      	sub	sp, #84	@ 0x54
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	330c      	adds	r3, #12
 8008b30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	330c      	adds	r3, #12
 8008b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e5      	bne.n	8008b2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3314      	adds	r3, #20
 8008b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3314      	adds	r3, #20
 8008b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e5      	bne.n	8008b5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d119      	bne.n	8008bce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	330c      	adds	r3, #12
 8008ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f023 0310 	bic.w	r3, r3, #16
 8008bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bba:	61ba      	str	r2, [r7, #24]
 8008bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6979      	ldr	r1, [r7, #20]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e5      	bne.n	8008b9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008bdc:	bf00      	nop
 8008bde:	3754      	adds	r7, #84	@ 0x54
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7ff ff21 	bl	8008a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b21      	cmp	r3, #33	@ 0x21
 8008c1c:	d13e      	bne.n	8008c9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c26:	d114      	bne.n	8008c52 <UART_Transmit_IT+0x48>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d110      	bne.n	8008c52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	1c9a      	adds	r2, r3, #2
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	621a      	str	r2, [r3, #32]
 8008c50:	e008      	b.n	8008c64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	1c59      	adds	r1, r3, #1
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	6211      	str	r1, [r2, #32]
 8008c5c:	781a      	ldrb	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4619      	mov	r1, r3
 8008c72:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10f      	bne.n	8008c98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e000      	b.n	8008c9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c9c:	2302      	movs	r3, #2
  }
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff fea6 	bl	8008a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b08c      	sub	sp, #48	@ 0x30
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b22      	cmp	r3, #34	@ 0x22
 8008cf4:	f040 80aa 	bne.w	8008e4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d00:	d115      	bne.n	8008d2e <UART_Receive_IT+0x54>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d111      	bne.n	8008d2e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d26:	1c9a      	adds	r2, r3, #2
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d2c:	e024      	b.n	8008d78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d3c:	d007      	beq.n	8008d4e <UART_Receive_IT+0x74>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10a      	bne.n	8008d5c <UART_Receive_IT+0x82>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d106      	bne.n	8008d5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	e008      	b.n	8008d6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	4619      	mov	r1, r3
 8008d86:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d15d      	bne.n	8008e48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68da      	ldr	r2, [r3, #12]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f022 0220 	bic.w	r2, r2, #32
 8008d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695a      	ldr	r2, [r3, #20]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d135      	bne.n	8008e3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	330c      	adds	r3, #12
 8008dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	613b      	str	r3, [r7, #16]
   return(result);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f023 0310 	bic.w	r3, r3, #16
 8008dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	330c      	adds	r3, #12
 8008df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df8:	623a      	str	r2, [r7, #32]
 8008dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	69f9      	ldr	r1, [r7, #28]
 8008dfe:	6a3a      	ldr	r2, [r7, #32]
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e5      	bne.n	8008dd8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0310 	and.w	r3, r3, #16
 8008e16:	2b10      	cmp	r3, #16
 8008e18:	d10a      	bne.n	8008e30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff fe0e 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
 8008e3c:	e002      	b.n	8008e44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fdf6 	bl	8008a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	e002      	b.n	8008e4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	e000      	b.n	8008e4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e4c:	2302      	movs	r3, #2
  }
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3730      	adds	r7, #48	@ 0x30
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e5c:	b0c0      	sub	sp, #256	@ 0x100
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e74:	68d9      	ldr	r1, [r3, #12]
 8008e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	ea40 0301 	orr.w	r3, r0, r1
 8008e80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	431a      	orrs	r2, r3
 8008e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008eb0:	f021 010c 	bic.w	r1, r1, #12
 8008eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ebe:	430b      	orrs	r3, r1
 8008ec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed2:	6999      	ldr	r1, [r3, #24]
 8008ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	ea40 0301 	orr.w	r3, r0, r1
 8008ede:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	4b8f      	ldr	r3, [pc, #572]	@ (8009124 <UART_SetConfig+0x2cc>)
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d005      	beq.n	8008ef8 <UART_SetConfig+0xa0>
 8008eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	4b8d      	ldr	r3, [pc, #564]	@ (8009128 <UART_SetConfig+0x2d0>)
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d104      	bne.n	8008f02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ef8:	f7fe f850 	bl	8006f9c <HAL_RCC_GetPCLK2Freq>
 8008efc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008f00:	e003      	b.n	8008f0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f02:	f7fe f837 	bl	8006f74 <HAL_RCC_GetPCLK1Freq>
 8008f06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f14:	f040 810c 	bne.w	8009130 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008f26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	1891      	adds	r1, r2, r2
 8008f30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008f32:	415b      	adcs	r3, r3
 8008f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	eb12 0801 	adds.w	r8, r2, r1
 8008f40:	4629      	mov	r1, r5
 8008f42:	eb43 0901 	adc.w	r9, r3, r1
 8008f46:	f04f 0200 	mov.w	r2, #0
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f5a:	4690      	mov	r8, r2
 8008f5c:	4699      	mov	r9, r3
 8008f5e:	4623      	mov	r3, r4
 8008f60:	eb18 0303 	adds.w	r3, r8, r3
 8008f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f68:	462b      	mov	r3, r5
 8008f6a:	eb49 0303 	adc.w	r3, r9, r3
 8008f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f86:	460b      	mov	r3, r1
 8008f88:	18db      	adds	r3, r3, r3
 8008f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	eb42 0303 	adc.w	r3, r2, r3
 8008f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f9c:	f7f7 fe94 	bl	8000cc8 <__aeabi_uldivmod>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4b61      	ldr	r3, [pc, #388]	@ (800912c <UART_SetConfig+0x2d4>)
 8008fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	011c      	lsls	r4, r3, #4
 8008fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008fbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	1891      	adds	r1, r2, r2
 8008fc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008fc8:	415b      	adcs	r3, r3
 8008fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	eb12 0a01 	adds.w	sl, r2, r1
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	eb43 0b01 	adc.w	fp, r3, r1
 8008fdc:	f04f 0200 	mov.w	r2, #0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fe8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ff0:	4692      	mov	sl, r2
 8008ff2:	469b      	mov	fp, r3
 8008ff4:	4643      	mov	r3, r8
 8008ff6:	eb1a 0303 	adds.w	r3, sl, r3
 8008ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ffe:	464b      	mov	r3, r9
 8009000:	eb4b 0303 	adc.w	r3, fp, r3
 8009004:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009014:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009018:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800901c:	460b      	mov	r3, r1
 800901e:	18db      	adds	r3, r3, r3
 8009020:	643b      	str	r3, [r7, #64]	@ 0x40
 8009022:	4613      	mov	r3, r2
 8009024:	eb42 0303 	adc.w	r3, r2, r3
 8009028:	647b      	str	r3, [r7, #68]	@ 0x44
 800902a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800902e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009032:	f7f7 fe49 	bl	8000cc8 <__aeabi_uldivmod>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4611      	mov	r1, r2
 800903c:	4b3b      	ldr	r3, [pc, #236]	@ (800912c <UART_SetConfig+0x2d4>)
 800903e:	fba3 2301 	umull	r2, r3, r3, r1
 8009042:	095b      	lsrs	r3, r3, #5
 8009044:	2264      	movs	r2, #100	@ 0x64
 8009046:	fb02 f303 	mul.w	r3, r2, r3
 800904a:	1acb      	subs	r3, r1, r3
 800904c:	00db      	lsls	r3, r3, #3
 800904e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009052:	4b36      	ldr	r3, [pc, #216]	@ (800912c <UART_SetConfig+0x2d4>)
 8009054:	fba3 2302 	umull	r2, r3, r3, r2
 8009058:	095b      	lsrs	r3, r3, #5
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009060:	441c      	add	r4, r3
 8009062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009066:	2200      	movs	r2, #0
 8009068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800906c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009070:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009074:	4642      	mov	r2, r8
 8009076:	464b      	mov	r3, r9
 8009078:	1891      	adds	r1, r2, r2
 800907a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800907c:	415b      	adcs	r3, r3
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009080:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009084:	4641      	mov	r1, r8
 8009086:	1851      	adds	r1, r2, r1
 8009088:	6339      	str	r1, [r7, #48]	@ 0x30
 800908a:	4649      	mov	r1, r9
 800908c:	414b      	adcs	r3, r1
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800909c:	4659      	mov	r1, fp
 800909e:	00cb      	lsls	r3, r1, #3
 80090a0:	4651      	mov	r1, sl
 80090a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090a6:	4651      	mov	r1, sl
 80090a8:	00ca      	lsls	r2, r1, #3
 80090aa:	4610      	mov	r0, r2
 80090ac:	4619      	mov	r1, r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	4642      	mov	r2, r8
 80090b2:	189b      	adds	r3, r3, r2
 80090b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090b8:	464b      	mov	r3, r9
 80090ba:	460a      	mov	r2, r1
 80090bc:	eb42 0303 	adc.w	r3, r2, r3
 80090c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80090d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80090d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80090d8:	460b      	mov	r3, r1
 80090da:	18db      	adds	r3, r3, r3
 80090dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090de:	4613      	mov	r3, r2
 80090e0:	eb42 0303 	adc.w	r3, r2, r3
 80090e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80090ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80090ee:	f7f7 fdeb 	bl	8000cc8 <__aeabi_uldivmod>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4b0d      	ldr	r3, [pc, #52]	@ (800912c <UART_SetConfig+0x2d4>)
 80090f8:	fba3 1302 	umull	r1, r3, r3, r2
 80090fc:	095b      	lsrs	r3, r3, #5
 80090fe:	2164      	movs	r1, #100	@ 0x64
 8009100:	fb01 f303 	mul.w	r3, r1, r3
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	3332      	adds	r3, #50	@ 0x32
 800910a:	4a08      	ldr	r2, [pc, #32]	@ (800912c <UART_SetConfig+0x2d4>)
 800910c:	fba2 2303 	umull	r2, r3, r2, r3
 8009110:	095b      	lsrs	r3, r3, #5
 8009112:	f003 0207 	and.w	r2, r3, #7
 8009116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4422      	add	r2, r4
 800911e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009120:	e106      	b.n	8009330 <UART_SetConfig+0x4d8>
 8009122:	bf00      	nop
 8009124:	40011000 	.word	0x40011000
 8009128:	40011400 	.word	0x40011400
 800912c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009134:	2200      	movs	r2, #0
 8009136:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800913a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800913e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009142:	4642      	mov	r2, r8
 8009144:	464b      	mov	r3, r9
 8009146:	1891      	adds	r1, r2, r2
 8009148:	6239      	str	r1, [r7, #32]
 800914a:	415b      	adcs	r3, r3
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
 800914e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009152:	4641      	mov	r1, r8
 8009154:	1854      	adds	r4, r2, r1
 8009156:	4649      	mov	r1, r9
 8009158:	eb43 0501 	adc.w	r5, r3, r1
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	f04f 0300 	mov.w	r3, #0
 8009164:	00eb      	lsls	r3, r5, #3
 8009166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800916a:	00e2      	lsls	r2, r4, #3
 800916c:	4614      	mov	r4, r2
 800916e:	461d      	mov	r5, r3
 8009170:	4643      	mov	r3, r8
 8009172:	18e3      	adds	r3, r4, r3
 8009174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009178:	464b      	mov	r3, r9
 800917a:	eb45 0303 	adc.w	r3, r5, r3
 800917e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800918e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009192:	f04f 0200 	mov.w	r2, #0
 8009196:	f04f 0300 	mov.w	r3, #0
 800919a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800919e:	4629      	mov	r1, r5
 80091a0:	008b      	lsls	r3, r1, #2
 80091a2:	4621      	mov	r1, r4
 80091a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091a8:	4621      	mov	r1, r4
 80091aa:	008a      	lsls	r2, r1, #2
 80091ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80091b0:	f7f7 fd8a 	bl	8000cc8 <__aeabi_uldivmod>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4b60      	ldr	r3, [pc, #384]	@ (800933c <UART_SetConfig+0x4e4>)
 80091ba:	fba3 2302 	umull	r2, r3, r3, r2
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	011c      	lsls	r4, r3, #4
 80091c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091c6:	2200      	movs	r2, #0
 80091c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80091d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80091d4:	4642      	mov	r2, r8
 80091d6:	464b      	mov	r3, r9
 80091d8:	1891      	adds	r1, r2, r2
 80091da:	61b9      	str	r1, [r7, #24]
 80091dc:	415b      	adcs	r3, r3
 80091de:	61fb      	str	r3, [r7, #28]
 80091e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091e4:	4641      	mov	r1, r8
 80091e6:	1851      	adds	r1, r2, r1
 80091e8:	6139      	str	r1, [r7, #16]
 80091ea:	4649      	mov	r1, r9
 80091ec:	414b      	adcs	r3, r1
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091fc:	4659      	mov	r1, fp
 80091fe:	00cb      	lsls	r3, r1, #3
 8009200:	4651      	mov	r1, sl
 8009202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009206:	4651      	mov	r1, sl
 8009208:	00ca      	lsls	r2, r1, #3
 800920a:	4610      	mov	r0, r2
 800920c:	4619      	mov	r1, r3
 800920e:	4603      	mov	r3, r0
 8009210:	4642      	mov	r2, r8
 8009212:	189b      	adds	r3, r3, r2
 8009214:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009218:	464b      	mov	r3, r9
 800921a:	460a      	mov	r2, r1
 800921c:	eb42 0303 	adc.w	r3, r2, r3
 8009220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800922e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	f04f 0300 	mov.w	r3, #0
 8009238:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800923c:	4649      	mov	r1, r9
 800923e:	008b      	lsls	r3, r1, #2
 8009240:	4641      	mov	r1, r8
 8009242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009246:	4641      	mov	r1, r8
 8009248:	008a      	lsls	r2, r1, #2
 800924a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800924e:	f7f7 fd3b 	bl	8000cc8 <__aeabi_uldivmod>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4611      	mov	r1, r2
 8009258:	4b38      	ldr	r3, [pc, #224]	@ (800933c <UART_SetConfig+0x4e4>)
 800925a:	fba3 2301 	umull	r2, r3, r3, r1
 800925e:	095b      	lsrs	r3, r3, #5
 8009260:	2264      	movs	r2, #100	@ 0x64
 8009262:	fb02 f303 	mul.w	r3, r2, r3
 8009266:	1acb      	subs	r3, r1, r3
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	3332      	adds	r3, #50	@ 0x32
 800926c:	4a33      	ldr	r2, [pc, #204]	@ (800933c <UART_SetConfig+0x4e4>)
 800926e:	fba2 2303 	umull	r2, r3, r2, r3
 8009272:	095b      	lsrs	r3, r3, #5
 8009274:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009278:	441c      	add	r4, r3
 800927a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800927e:	2200      	movs	r2, #0
 8009280:	673b      	str	r3, [r7, #112]	@ 0x70
 8009282:	677a      	str	r2, [r7, #116]	@ 0x74
 8009284:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009288:	4642      	mov	r2, r8
 800928a:	464b      	mov	r3, r9
 800928c:	1891      	adds	r1, r2, r2
 800928e:	60b9      	str	r1, [r7, #8]
 8009290:	415b      	adcs	r3, r3
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009298:	4641      	mov	r1, r8
 800929a:	1851      	adds	r1, r2, r1
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	4649      	mov	r1, r9
 80092a0:	414b      	adcs	r3, r1
 80092a2:	607b      	str	r3, [r7, #4]
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	f04f 0300 	mov.w	r3, #0
 80092ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092b0:	4659      	mov	r1, fp
 80092b2:	00cb      	lsls	r3, r1, #3
 80092b4:	4651      	mov	r1, sl
 80092b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ba:	4651      	mov	r1, sl
 80092bc:	00ca      	lsls	r2, r1, #3
 80092be:	4610      	mov	r0, r2
 80092c0:	4619      	mov	r1, r3
 80092c2:	4603      	mov	r3, r0
 80092c4:	4642      	mov	r2, r8
 80092c6:	189b      	adds	r3, r3, r2
 80092c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092ca:	464b      	mov	r3, r9
 80092cc:	460a      	mov	r2, r1
 80092ce:	eb42 0303 	adc.w	r3, r2, r3
 80092d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80092d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80092de:	667a      	str	r2, [r7, #100]	@ 0x64
 80092e0:	f04f 0200 	mov.w	r2, #0
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80092ec:	4649      	mov	r1, r9
 80092ee:	008b      	lsls	r3, r1, #2
 80092f0:	4641      	mov	r1, r8
 80092f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092f6:	4641      	mov	r1, r8
 80092f8:	008a      	lsls	r2, r1, #2
 80092fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80092fe:	f7f7 fce3 	bl	8000cc8 <__aeabi_uldivmod>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4b0d      	ldr	r3, [pc, #52]	@ (800933c <UART_SetConfig+0x4e4>)
 8009308:	fba3 1302 	umull	r1, r3, r3, r2
 800930c:	095b      	lsrs	r3, r3, #5
 800930e:	2164      	movs	r1, #100	@ 0x64
 8009310:	fb01 f303 	mul.w	r3, r1, r3
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	3332      	adds	r3, #50	@ 0x32
 800931a:	4a08      	ldr	r2, [pc, #32]	@ (800933c <UART_SetConfig+0x4e4>)
 800931c:	fba2 2303 	umull	r2, r3, r2, r3
 8009320:	095b      	lsrs	r3, r3, #5
 8009322:	f003 020f 	and.w	r2, r3, #15
 8009326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4422      	add	r2, r4
 800932e:	609a      	str	r2, [r3, #8]
}
 8009330:	bf00      	nop
 8009332:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009336:	46bd      	mov	sp, r7
 8009338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800933c:	51eb851f 	.word	0x51eb851f

08009340 <__cvt>:
 8009340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	ec57 6b10 	vmov	r6, r7, d0
 8009348:	2f00      	cmp	r7, #0
 800934a:	460c      	mov	r4, r1
 800934c:	4619      	mov	r1, r3
 800934e:	463b      	mov	r3, r7
 8009350:	bfbb      	ittet	lt
 8009352:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009356:	461f      	movlt	r7, r3
 8009358:	2300      	movge	r3, #0
 800935a:	232d      	movlt	r3, #45	@ 0x2d
 800935c:	700b      	strb	r3, [r1, #0]
 800935e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009360:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009364:	4691      	mov	r9, r2
 8009366:	f023 0820 	bic.w	r8, r3, #32
 800936a:	bfbc      	itt	lt
 800936c:	4632      	movlt	r2, r6
 800936e:	4616      	movlt	r6, r2
 8009370:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009374:	d005      	beq.n	8009382 <__cvt+0x42>
 8009376:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800937a:	d100      	bne.n	800937e <__cvt+0x3e>
 800937c:	3401      	adds	r4, #1
 800937e:	2102      	movs	r1, #2
 8009380:	e000      	b.n	8009384 <__cvt+0x44>
 8009382:	2103      	movs	r1, #3
 8009384:	ab03      	add	r3, sp, #12
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	ab02      	add	r3, sp, #8
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	ec47 6b10 	vmov	d0, r6, r7
 8009390:	4653      	mov	r3, sl
 8009392:	4622      	mov	r2, r4
 8009394:	f001 fa30 	bl	800a7f8 <_dtoa_r>
 8009398:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800939c:	4605      	mov	r5, r0
 800939e:	d119      	bne.n	80093d4 <__cvt+0x94>
 80093a0:	f019 0f01 	tst.w	r9, #1
 80093a4:	d00e      	beq.n	80093c4 <__cvt+0x84>
 80093a6:	eb00 0904 	add.w	r9, r0, r4
 80093aa:	2200      	movs	r2, #0
 80093ac:	2300      	movs	r3, #0
 80093ae:	4630      	mov	r0, r6
 80093b0:	4639      	mov	r1, r7
 80093b2:	f7f7 fba9 	bl	8000b08 <__aeabi_dcmpeq>
 80093b6:	b108      	cbz	r0, 80093bc <__cvt+0x7c>
 80093b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80093bc:	2230      	movs	r2, #48	@ 0x30
 80093be:	9b03      	ldr	r3, [sp, #12]
 80093c0:	454b      	cmp	r3, r9
 80093c2:	d31e      	bcc.n	8009402 <__cvt+0xc2>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093c8:	1b5b      	subs	r3, r3, r5
 80093ca:	4628      	mov	r0, r5
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	b004      	add	sp, #16
 80093d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093d8:	eb00 0904 	add.w	r9, r0, r4
 80093dc:	d1e5      	bne.n	80093aa <__cvt+0x6a>
 80093de:	7803      	ldrb	r3, [r0, #0]
 80093e0:	2b30      	cmp	r3, #48	@ 0x30
 80093e2:	d10a      	bne.n	80093fa <__cvt+0xba>
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	4630      	mov	r0, r6
 80093ea:	4639      	mov	r1, r7
 80093ec:	f7f7 fb8c 	bl	8000b08 <__aeabi_dcmpeq>
 80093f0:	b918      	cbnz	r0, 80093fa <__cvt+0xba>
 80093f2:	f1c4 0401 	rsb	r4, r4, #1
 80093f6:	f8ca 4000 	str.w	r4, [sl]
 80093fa:	f8da 3000 	ldr.w	r3, [sl]
 80093fe:	4499      	add	r9, r3
 8009400:	e7d3      	b.n	80093aa <__cvt+0x6a>
 8009402:	1c59      	adds	r1, r3, #1
 8009404:	9103      	str	r1, [sp, #12]
 8009406:	701a      	strb	r2, [r3, #0]
 8009408:	e7d9      	b.n	80093be <__cvt+0x7e>

0800940a <__exponent>:
 800940a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800940c:	2900      	cmp	r1, #0
 800940e:	bfba      	itte	lt
 8009410:	4249      	neglt	r1, r1
 8009412:	232d      	movlt	r3, #45	@ 0x2d
 8009414:	232b      	movge	r3, #43	@ 0x2b
 8009416:	2909      	cmp	r1, #9
 8009418:	7002      	strb	r2, [r0, #0]
 800941a:	7043      	strb	r3, [r0, #1]
 800941c:	dd29      	ble.n	8009472 <__exponent+0x68>
 800941e:	f10d 0307 	add.w	r3, sp, #7
 8009422:	461d      	mov	r5, r3
 8009424:	270a      	movs	r7, #10
 8009426:	461a      	mov	r2, r3
 8009428:	fbb1 f6f7 	udiv	r6, r1, r7
 800942c:	fb07 1416 	mls	r4, r7, r6, r1
 8009430:	3430      	adds	r4, #48	@ 0x30
 8009432:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009436:	460c      	mov	r4, r1
 8009438:	2c63      	cmp	r4, #99	@ 0x63
 800943a:	f103 33ff 	add.w	r3, r3, #4294967295
 800943e:	4631      	mov	r1, r6
 8009440:	dcf1      	bgt.n	8009426 <__exponent+0x1c>
 8009442:	3130      	adds	r1, #48	@ 0x30
 8009444:	1e94      	subs	r4, r2, #2
 8009446:	f803 1c01 	strb.w	r1, [r3, #-1]
 800944a:	1c41      	adds	r1, r0, #1
 800944c:	4623      	mov	r3, r4
 800944e:	42ab      	cmp	r3, r5
 8009450:	d30a      	bcc.n	8009468 <__exponent+0x5e>
 8009452:	f10d 0309 	add.w	r3, sp, #9
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	42ac      	cmp	r4, r5
 800945a:	bf88      	it	hi
 800945c:	2300      	movhi	r3, #0
 800945e:	3302      	adds	r3, #2
 8009460:	4403      	add	r3, r0
 8009462:	1a18      	subs	r0, r3, r0
 8009464:	b003      	add	sp, #12
 8009466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009468:	f813 6b01 	ldrb.w	r6, [r3], #1
 800946c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009470:	e7ed      	b.n	800944e <__exponent+0x44>
 8009472:	2330      	movs	r3, #48	@ 0x30
 8009474:	3130      	adds	r1, #48	@ 0x30
 8009476:	7083      	strb	r3, [r0, #2]
 8009478:	70c1      	strb	r1, [r0, #3]
 800947a:	1d03      	adds	r3, r0, #4
 800947c:	e7f1      	b.n	8009462 <__exponent+0x58>
	...

08009480 <_printf_float>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	b08d      	sub	sp, #52	@ 0x34
 8009486:	460c      	mov	r4, r1
 8009488:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800948c:	4616      	mov	r6, r2
 800948e:	461f      	mov	r7, r3
 8009490:	4605      	mov	r5, r0
 8009492:	f001 f8a9 	bl	800a5e8 <_localeconv_r>
 8009496:	6803      	ldr	r3, [r0, #0]
 8009498:	9304      	str	r3, [sp, #16]
 800949a:	4618      	mov	r0, r3
 800949c:	f7f6 ff08 	bl	80002b0 <strlen>
 80094a0:	2300      	movs	r3, #0
 80094a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80094a4:	f8d8 3000 	ldr.w	r3, [r8]
 80094a8:	9005      	str	r0, [sp, #20]
 80094aa:	3307      	adds	r3, #7
 80094ac:	f023 0307 	bic.w	r3, r3, #7
 80094b0:	f103 0208 	add.w	r2, r3, #8
 80094b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80094b8:	f8d4 b000 	ldr.w	fp, [r4]
 80094bc:	f8c8 2000 	str.w	r2, [r8]
 80094c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80094c8:	9307      	str	r3, [sp, #28]
 80094ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80094ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80094d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094d6:	4b9c      	ldr	r3, [pc, #624]	@ (8009748 <_printf_float+0x2c8>)
 80094d8:	f04f 32ff 	mov.w	r2, #4294967295
 80094dc:	f7f7 fb46 	bl	8000b6c <__aeabi_dcmpun>
 80094e0:	bb70      	cbnz	r0, 8009540 <_printf_float+0xc0>
 80094e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094e6:	4b98      	ldr	r3, [pc, #608]	@ (8009748 <_printf_float+0x2c8>)
 80094e8:	f04f 32ff 	mov.w	r2, #4294967295
 80094ec:	f7f7 fb20 	bl	8000b30 <__aeabi_dcmple>
 80094f0:	bb30      	cbnz	r0, 8009540 <_printf_float+0xc0>
 80094f2:	2200      	movs	r2, #0
 80094f4:	2300      	movs	r3, #0
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f7 fb0f 	bl	8000b1c <__aeabi_dcmplt>
 80094fe:	b110      	cbz	r0, 8009506 <_printf_float+0x86>
 8009500:	232d      	movs	r3, #45	@ 0x2d
 8009502:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009506:	4a91      	ldr	r2, [pc, #580]	@ (800974c <_printf_float+0x2cc>)
 8009508:	4b91      	ldr	r3, [pc, #580]	@ (8009750 <_printf_float+0x2d0>)
 800950a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800950e:	bf8c      	ite	hi
 8009510:	4690      	movhi	r8, r2
 8009512:	4698      	movls	r8, r3
 8009514:	2303      	movs	r3, #3
 8009516:	6123      	str	r3, [r4, #16]
 8009518:	f02b 0304 	bic.w	r3, fp, #4
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	f04f 0900 	mov.w	r9, #0
 8009522:	9700      	str	r7, [sp, #0]
 8009524:	4633      	mov	r3, r6
 8009526:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009528:	4621      	mov	r1, r4
 800952a:	4628      	mov	r0, r5
 800952c:	f000 f9d2 	bl	80098d4 <_printf_common>
 8009530:	3001      	adds	r0, #1
 8009532:	f040 808d 	bne.w	8009650 <_printf_float+0x1d0>
 8009536:	f04f 30ff 	mov.w	r0, #4294967295
 800953a:	b00d      	add	sp, #52	@ 0x34
 800953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009540:	4642      	mov	r2, r8
 8009542:	464b      	mov	r3, r9
 8009544:	4640      	mov	r0, r8
 8009546:	4649      	mov	r1, r9
 8009548:	f7f7 fb10 	bl	8000b6c <__aeabi_dcmpun>
 800954c:	b140      	cbz	r0, 8009560 <_printf_float+0xe0>
 800954e:	464b      	mov	r3, r9
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfbc      	itt	lt
 8009554:	232d      	movlt	r3, #45	@ 0x2d
 8009556:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800955a:	4a7e      	ldr	r2, [pc, #504]	@ (8009754 <_printf_float+0x2d4>)
 800955c:	4b7e      	ldr	r3, [pc, #504]	@ (8009758 <_printf_float+0x2d8>)
 800955e:	e7d4      	b.n	800950a <_printf_float+0x8a>
 8009560:	6863      	ldr	r3, [r4, #4]
 8009562:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009566:	9206      	str	r2, [sp, #24]
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	d13b      	bne.n	80095e4 <_printf_float+0x164>
 800956c:	2306      	movs	r3, #6
 800956e:	6063      	str	r3, [r4, #4]
 8009570:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009574:	2300      	movs	r3, #0
 8009576:	6022      	str	r2, [r4, #0]
 8009578:	9303      	str	r3, [sp, #12]
 800957a:	ab0a      	add	r3, sp, #40	@ 0x28
 800957c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009580:	ab09      	add	r3, sp, #36	@ 0x24
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	6861      	ldr	r1, [r4, #4]
 8009586:	ec49 8b10 	vmov	d0, r8, r9
 800958a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800958e:	4628      	mov	r0, r5
 8009590:	f7ff fed6 	bl	8009340 <__cvt>
 8009594:	9b06      	ldr	r3, [sp, #24]
 8009596:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009598:	2b47      	cmp	r3, #71	@ 0x47
 800959a:	4680      	mov	r8, r0
 800959c:	d129      	bne.n	80095f2 <_printf_float+0x172>
 800959e:	1cc8      	adds	r0, r1, #3
 80095a0:	db02      	blt.n	80095a8 <_printf_float+0x128>
 80095a2:	6863      	ldr	r3, [r4, #4]
 80095a4:	4299      	cmp	r1, r3
 80095a6:	dd41      	ble.n	800962c <_printf_float+0x1ac>
 80095a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80095ac:	fa5f fa8a 	uxtb.w	sl, sl
 80095b0:	3901      	subs	r1, #1
 80095b2:	4652      	mov	r2, sl
 80095b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80095b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80095ba:	f7ff ff26 	bl	800940a <__exponent>
 80095be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095c0:	1813      	adds	r3, r2, r0
 80095c2:	2a01      	cmp	r2, #1
 80095c4:	4681      	mov	r9, r0
 80095c6:	6123      	str	r3, [r4, #16]
 80095c8:	dc02      	bgt.n	80095d0 <_printf_float+0x150>
 80095ca:	6822      	ldr	r2, [r4, #0]
 80095cc:	07d2      	lsls	r2, r2, #31
 80095ce:	d501      	bpl.n	80095d4 <_printf_float+0x154>
 80095d0:	3301      	adds	r3, #1
 80095d2:	6123      	str	r3, [r4, #16]
 80095d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d0a2      	beq.n	8009522 <_printf_float+0xa2>
 80095dc:	232d      	movs	r3, #45	@ 0x2d
 80095de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095e2:	e79e      	b.n	8009522 <_printf_float+0xa2>
 80095e4:	9a06      	ldr	r2, [sp, #24]
 80095e6:	2a47      	cmp	r2, #71	@ 0x47
 80095e8:	d1c2      	bne.n	8009570 <_printf_float+0xf0>
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1c0      	bne.n	8009570 <_printf_float+0xf0>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e7bd      	b.n	800956e <_printf_float+0xee>
 80095f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80095f6:	d9db      	bls.n	80095b0 <_printf_float+0x130>
 80095f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80095fc:	d118      	bne.n	8009630 <_printf_float+0x1b0>
 80095fe:	2900      	cmp	r1, #0
 8009600:	6863      	ldr	r3, [r4, #4]
 8009602:	dd0b      	ble.n	800961c <_printf_float+0x19c>
 8009604:	6121      	str	r1, [r4, #16]
 8009606:	b913      	cbnz	r3, 800960e <_printf_float+0x18e>
 8009608:	6822      	ldr	r2, [r4, #0]
 800960a:	07d0      	lsls	r0, r2, #31
 800960c:	d502      	bpl.n	8009614 <_printf_float+0x194>
 800960e:	3301      	adds	r3, #1
 8009610:	440b      	add	r3, r1
 8009612:	6123      	str	r3, [r4, #16]
 8009614:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009616:	f04f 0900 	mov.w	r9, #0
 800961a:	e7db      	b.n	80095d4 <_printf_float+0x154>
 800961c:	b913      	cbnz	r3, 8009624 <_printf_float+0x1a4>
 800961e:	6822      	ldr	r2, [r4, #0]
 8009620:	07d2      	lsls	r2, r2, #31
 8009622:	d501      	bpl.n	8009628 <_printf_float+0x1a8>
 8009624:	3302      	adds	r3, #2
 8009626:	e7f4      	b.n	8009612 <_printf_float+0x192>
 8009628:	2301      	movs	r3, #1
 800962a:	e7f2      	b.n	8009612 <_printf_float+0x192>
 800962c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009632:	4299      	cmp	r1, r3
 8009634:	db05      	blt.n	8009642 <_printf_float+0x1c2>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	6121      	str	r1, [r4, #16]
 800963a:	07d8      	lsls	r0, r3, #31
 800963c:	d5ea      	bpl.n	8009614 <_printf_float+0x194>
 800963e:	1c4b      	adds	r3, r1, #1
 8009640:	e7e7      	b.n	8009612 <_printf_float+0x192>
 8009642:	2900      	cmp	r1, #0
 8009644:	bfd4      	ite	le
 8009646:	f1c1 0202 	rsble	r2, r1, #2
 800964a:	2201      	movgt	r2, #1
 800964c:	4413      	add	r3, r2
 800964e:	e7e0      	b.n	8009612 <_printf_float+0x192>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	055a      	lsls	r2, r3, #21
 8009654:	d407      	bmi.n	8009666 <_printf_float+0x1e6>
 8009656:	6923      	ldr	r3, [r4, #16]
 8009658:	4642      	mov	r2, r8
 800965a:	4631      	mov	r1, r6
 800965c:	4628      	mov	r0, r5
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	d12b      	bne.n	80096bc <_printf_float+0x23c>
 8009664:	e767      	b.n	8009536 <_printf_float+0xb6>
 8009666:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800966a:	f240 80dd 	bls.w	8009828 <_printf_float+0x3a8>
 800966e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009672:	2200      	movs	r2, #0
 8009674:	2300      	movs	r3, #0
 8009676:	f7f7 fa47 	bl	8000b08 <__aeabi_dcmpeq>
 800967a:	2800      	cmp	r0, #0
 800967c:	d033      	beq.n	80096e6 <_printf_float+0x266>
 800967e:	4a37      	ldr	r2, [pc, #220]	@ (800975c <_printf_float+0x2dc>)
 8009680:	2301      	movs	r3, #1
 8009682:	4631      	mov	r1, r6
 8009684:	4628      	mov	r0, r5
 8009686:	47b8      	blx	r7
 8009688:	3001      	adds	r0, #1
 800968a:	f43f af54 	beq.w	8009536 <_printf_float+0xb6>
 800968e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009692:	4543      	cmp	r3, r8
 8009694:	db02      	blt.n	800969c <_printf_float+0x21c>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	07d8      	lsls	r0, r3, #31
 800969a:	d50f      	bpl.n	80096bc <_printf_float+0x23c>
 800969c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096a0:	4631      	mov	r1, r6
 80096a2:	4628      	mov	r0, r5
 80096a4:	47b8      	blx	r7
 80096a6:	3001      	adds	r0, #1
 80096a8:	f43f af45 	beq.w	8009536 <_printf_float+0xb6>
 80096ac:	f04f 0900 	mov.w	r9, #0
 80096b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80096b4:	f104 0a1a 	add.w	sl, r4, #26
 80096b8:	45c8      	cmp	r8, r9
 80096ba:	dc09      	bgt.n	80096d0 <_printf_float+0x250>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	079b      	lsls	r3, r3, #30
 80096c0:	f100 8103 	bmi.w	80098ca <_printf_float+0x44a>
 80096c4:	68e0      	ldr	r0, [r4, #12]
 80096c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096c8:	4298      	cmp	r0, r3
 80096ca:	bfb8      	it	lt
 80096cc:	4618      	movlt	r0, r3
 80096ce:	e734      	b.n	800953a <_printf_float+0xba>
 80096d0:	2301      	movs	r3, #1
 80096d2:	4652      	mov	r2, sl
 80096d4:	4631      	mov	r1, r6
 80096d6:	4628      	mov	r0, r5
 80096d8:	47b8      	blx	r7
 80096da:	3001      	adds	r0, #1
 80096dc:	f43f af2b 	beq.w	8009536 <_printf_float+0xb6>
 80096e0:	f109 0901 	add.w	r9, r9, #1
 80096e4:	e7e8      	b.n	80096b8 <_printf_float+0x238>
 80096e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dc39      	bgt.n	8009760 <_printf_float+0x2e0>
 80096ec:	4a1b      	ldr	r2, [pc, #108]	@ (800975c <_printf_float+0x2dc>)
 80096ee:	2301      	movs	r3, #1
 80096f0:	4631      	mov	r1, r6
 80096f2:	4628      	mov	r0, r5
 80096f4:	47b8      	blx	r7
 80096f6:	3001      	adds	r0, #1
 80096f8:	f43f af1d 	beq.w	8009536 <_printf_float+0xb6>
 80096fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009700:	ea59 0303 	orrs.w	r3, r9, r3
 8009704:	d102      	bne.n	800970c <_printf_float+0x28c>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	07d9      	lsls	r1, r3, #31
 800970a:	d5d7      	bpl.n	80096bc <_printf_float+0x23c>
 800970c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f af0d 	beq.w	8009536 <_printf_float+0xb6>
 800971c:	f04f 0a00 	mov.w	sl, #0
 8009720:	f104 0b1a 	add.w	fp, r4, #26
 8009724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009726:	425b      	negs	r3, r3
 8009728:	4553      	cmp	r3, sl
 800972a:	dc01      	bgt.n	8009730 <_printf_float+0x2b0>
 800972c:	464b      	mov	r3, r9
 800972e:	e793      	b.n	8009658 <_printf_float+0x1d8>
 8009730:	2301      	movs	r3, #1
 8009732:	465a      	mov	r2, fp
 8009734:	4631      	mov	r1, r6
 8009736:	4628      	mov	r0, r5
 8009738:	47b8      	blx	r7
 800973a:	3001      	adds	r0, #1
 800973c:	f43f aefb 	beq.w	8009536 <_printf_float+0xb6>
 8009740:	f10a 0a01 	add.w	sl, sl, #1
 8009744:	e7ee      	b.n	8009724 <_printf_float+0x2a4>
 8009746:	bf00      	nop
 8009748:	7fefffff 	.word	0x7fefffff
 800974c:	0800e7cc 	.word	0x0800e7cc
 8009750:	0800e7c8 	.word	0x0800e7c8
 8009754:	0800e7d4 	.word	0x0800e7d4
 8009758:	0800e7d0 	.word	0x0800e7d0
 800975c:	0800e7d8 	.word	0x0800e7d8
 8009760:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009762:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009766:	4553      	cmp	r3, sl
 8009768:	bfa8      	it	ge
 800976a:	4653      	movge	r3, sl
 800976c:	2b00      	cmp	r3, #0
 800976e:	4699      	mov	r9, r3
 8009770:	dc36      	bgt.n	80097e0 <_printf_float+0x360>
 8009772:	f04f 0b00 	mov.w	fp, #0
 8009776:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800977a:	f104 021a 	add.w	r2, r4, #26
 800977e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009780:	9306      	str	r3, [sp, #24]
 8009782:	eba3 0309 	sub.w	r3, r3, r9
 8009786:	455b      	cmp	r3, fp
 8009788:	dc31      	bgt.n	80097ee <_printf_float+0x36e>
 800978a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978c:	459a      	cmp	sl, r3
 800978e:	dc3a      	bgt.n	8009806 <_printf_float+0x386>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	07da      	lsls	r2, r3, #31
 8009794:	d437      	bmi.n	8009806 <_printf_float+0x386>
 8009796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009798:	ebaa 0903 	sub.w	r9, sl, r3
 800979c:	9b06      	ldr	r3, [sp, #24]
 800979e:	ebaa 0303 	sub.w	r3, sl, r3
 80097a2:	4599      	cmp	r9, r3
 80097a4:	bfa8      	it	ge
 80097a6:	4699      	movge	r9, r3
 80097a8:	f1b9 0f00 	cmp.w	r9, #0
 80097ac:	dc33      	bgt.n	8009816 <_printf_float+0x396>
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097b6:	f104 0b1a 	add.w	fp, r4, #26
 80097ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097bc:	ebaa 0303 	sub.w	r3, sl, r3
 80097c0:	eba3 0309 	sub.w	r3, r3, r9
 80097c4:	4543      	cmp	r3, r8
 80097c6:	f77f af79 	ble.w	80096bc <_printf_float+0x23c>
 80097ca:	2301      	movs	r3, #1
 80097cc:	465a      	mov	r2, fp
 80097ce:	4631      	mov	r1, r6
 80097d0:	4628      	mov	r0, r5
 80097d2:	47b8      	blx	r7
 80097d4:	3001      	adds	r0, #1
 80097d6:	f43f aeae 	beq.w	8009536 <_printf_float+0xb6>
 80097da:	f108 0801 	add.w	r8, r8, #1
 80097de:	e7ec      	b.n	80097ba <_printf_float+0x33a>
 80097e0:	4642      	mov	r2, r8
 80097e2:	4631      	mov	r1, r6
 80097e4:	4628      	mov	r0, r5
 80097e6:	47b8      	blx	r7
 80097e8:	3001      	adds	r0, #1
 80097ea:	d1c2      	bne.n	8009772 <_printf_float+0x2f2>
 80097ec:	e6a3      	b.n	8009536 <_printf_float+0xb6>
 80097ee:	2301      	movs	r3, #1
 80097f0:	4631      	mov	r1, r6
 80097f2:	4628      	mov	r0, r5
 80097f4:	9206      	str	r2, [sp, #24]
 80097f6:	47b8      	blx	r7
 80097f8:	3001      	adds	r0, #1
 80097fa:	f43f ae9c 	beq.w	8009536 <_printf_float+0xb6>
 80097fe:	9a06      	ldr	r2, [sp, #24]
 8009800:	f10b 0b01 	add.w	fp, fp, #1
 8009804:	e7bb      	b.n	800977e <_printf_float+0x2fe>
 8009806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800980a:	4631      	mov	r1, r6
 800980c:	4628      	mov	r0, r5
 800980e:	47b8      	blx	r7
 8009810:	3001      	adds	r0, #1
 8009812:	d1c0      	bne.n	8009796 <_printf_float+0x316>
 8009814:	e68f      	b.n	8009536 <_printf_float+0xb6>
 8009816:	9a06      	ldr	r2, [sp, #24]
 8009818:	464b      	mov	r3, r9
 800981a:	4442      	add	r2, r8
 800981c:	4631      	mov	r1, r6
 800981e:	4628      	mov	r0, r5
 8009820:	47b8      	blx	r7
 8009822:	3001      	adds	r0, #1
 8009824:	d1c3      	bne.n	80097ae <_printf_float+0x32e>
 8009826:	e686      	b.n	8009536 <_printf_float+0xb6>
 8009828:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800982c:	f1ba 0f01 	cmp.w	sl, #1
 8009830:	dc01      	bgt.n	8009836 <_printf_float+0x3b6>
 8009832:	07db      	lsls	r3, r3, #31
 8009834:	d536      	bpl.n	80098a4 <_printf_float+0x424>
 8009836:	2301      	movs	r3, #1
 8009838:	4642      	mov	r2, r8
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	f43f ae78 	beq.w	8009536 <_printf_float+0xb6>
 8009846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	f43f ae70 	beq.w	8009536 <_printf_float+0xb6>
 8009856:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800985a:	2200      	movs	r2, #0
 800985c:	2300      	movs	r3, #0
 800985e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009862:	f7f7 f951 	bl	8000b08 <__aeabi_dcmpeq>
 8009866:	b9c0      	cbnz	r0, 800989a <_printf_float+0x41a>
 8009868:	4653      	mov	r3, sl
 800986a:	f108 0201 	add.w	r2, r8, #1
 800986e:	4631      	mov	r1, r6
 8009870:	4628      	mov	r0, r5
 8009872:	47b8      	blx	r7
 8009874:	3001      	adds	r0, #1
 8009876:	d10c      	bne.n	8009892 <_printf_float+0x412>
 8009878:	e65d      	b.n	8009536 <_printf_float+0xb6>
 800987a:	2301      	movs	r3, #1
 800987c:	465a      	mov	r2, fp
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	47b8      	blx	r7
 8009884:	3001      	adds	r0, #1
 8009886:	f43f ae56 	beq.w	8009536 <_printf_float+0xb6>
 800988a:	f108 0801 	add.w	r8, r8, #1
 800988e:	45d0      	cmp	r8, sl
 8009890:	dbf3      	blt.n	800987a <_printf_float+0x3fa>
 8009892:	464b      	mov	r3, r9
 8009894:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009898:	e6df      	b.n	800965a <_printf_float+0x1da>
 800989a:	f04f 0800 	mov.w	r8, #0
 800989e:	f104 0b1a 	add.w	fp, r4, #26
 80098a2:	e7f4      	b.n	800988e <_printf_float+0x40e>
 80098a4:	2301      	movs	r3, #1
 80098a6:	4642      	mov	r2, r8
 80098a8:	e7e1      	b.n	800986e <_printf_float+0x3ee>
 80098aa:	2301      	movs	r3, #1
 80098ac:	464a      	mov	r2, r9
 80098ae:	4631      	mov	r1, r6
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b8      	blx	r7
 80098b4:	3001      	adds	r0, #1
 80098b6:	f43f ae3e 	beq.w	8009536 <_printf_float+0xb6>
 80098ba:	f108 0801 	add.w	r8, r8, #1
 80098be:	68e3      	ldr	r3, [r4, #12]
 80098c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098c2:	1a5b      	subs	r3, r3, r1
 80098c4:	4543      	cmp	r3, r8
 80098c6:	dcf0      	bgt.n	80098aa <_printf_float+0x42a>
 80098c8:	e6fc      	b.n	80096c4 <_printf_float+0x244>
 80098ca:	f04f 0800 	mov.w	r8, #0
 80098ce:	f104 0919 	add.w	r9, r4, #25
 80098d2:	e7f4      	b.n	80098be <_printf_float+0x43e>

080098d4 <_printf_common>:
 80098d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d8:	4616      	mov	r6, r2
 80098da:	4698      	mov	r8, r3
 80098dc:	688a      	ldr	r2, [r1, #8]
 80098de:	690b      	ldr	r3, [r1, #16]
 80098e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098e4:	4293      	cmp	r3, r2
 80098e6:	bfb8      	it	lt
 80098e8:	4613      	movlt	r3, r2
 80098ea:	6033      	str	r3, [r6, #0]
 80098ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098f0:	4607      	mov	r7, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	b10a      	cbz	r2, 80098fa <_printf_common+0x26>
 80098f6:	3301      	adds	r3, #1
 80098f8:	6033      	str	r3, [r6, #0]
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	0699      	lsls	r1, r3, #26
 80098fe:	bf42      	ittt	mi
 8009900:	6833      	ldrmi	r3, [r6, #0]
 8009902:	3302      	addmi	r3, #2
 8009904:	6033      	strmi	r3, [r6, #0]
 8009906:	6825      	ldr	r5, [r4, #0]
 8009908:	f015 0506 	ands.w	r5, r5, #6
 800990c:	d106      	bne.n	800991c <_printf_common+0x48>
 800990e:	f104 0a19 	add.w	sl, r4, #25
 8009912:	68e3      	ldr	r3, [r4, #12]
 8009914:	6832      	ldr	r2, [r6, #0]
 8009916:	1a9b      	subs	r3, r3, r2
 8009918:	42ab      	cmp	r3, r5
 800991a:	dc26      	bgt.n	800996a <_printf_common+0x96>
 800991c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009920:	6822      	ldr	r2, [r4, #0]
 8009922:	3b00      	subs	r3, #0
 8009924:	bf18      	it	ne
 8009926:	2301      	movne	r3, #1
 8009928:	0692      	lsls	r2, r2, #26
 800992a:	d42b      	bmi.n	8009984 <_printf_common+0xb0>
 800992c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009930:	4641      	mov	r1, r8
 8009932:	4638      	mov	r0, r7
 8009934:	47c8      	blx	r9
 8009936:	3001      	adds	r0, #1
 8009938:	d01e      	beq.n	8009978 <_printf_common+0xa4>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	6922      	ldr	r2, [r4, #16]
 800993e:	f003 0306 	and.w	r3, r3, #6
 8009942:	2b04      	cmp	r3, #4
 8009944:	bf02      	ittt	eq
 8009946:	68e5      	ldreq	r5, [r4, #12]
 8009948:	6833      	ldreq	r3, [r6, #0]
 800994a:	1aed      	subeq	r5, r5, r3
 800994c:	68a3      	ldr	r3, [r4, #8]
 800994e:	bf0c      	ite	eq
 8009950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009954:	2500      	movne	r5, #0
 8009956:	4293      	cmp	r3, r2
 8009958:	bfc4      	itt	gt
 800995a:	1a9b      	subgt	r3, r3, r2
 800995c:	18ed      	addgt	r5, r5, r3
 800995e:	2600      	movs	r6, #0
 8009960:	341a      	adds	r4, #26
 8009962:	42b5      	cmp	r5, r6
 8009964:	d11a      	bne.n	800999c <_printf_common+0xc8>
 8009966:	2000      	movs	r0, #0
 8009968:	e008      	b.n	800997c <_printf_common+0xa8>
 800996a:	2301      	movs	r3, #1
 800996c:	4652      	mov	r2, sl
 800996e:	4641      	mov	r1, r8
 8009970:	4638      	mov	r0, r7
 8009972:	47c8      	blx	r9
 8009974:	3001      	adds	r0, #1
 8009976:	d103      	bne.n	8009980 <_printf_common+0xac>
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009980:	3501      	adds	r5, #1
 8009982:	e7c6      	b.n	8009912 <_printf_common+0x3e>
 8009984:	18e1      	adds	r1, r4, r3
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	2030      	movs	r0, #48	@ 0x30
 800998a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800998e:	4422      	add	r2, r4
 8009990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009998:	3302      	adds	r3, #2
 800999a:	e7c7      	b.n	800992c <_printf_common+0x58>
 800999c:	2301      	movs	r3, #1
 800999e:	4622      	mov	r2, r4
 80099a0:	4641      	mov	r1, r8
 80099a2:	4638      	mov	r0, r7
 80099a4:	47c8      	blx	r9
 80099a6:	3001      	adds	r0, #1
 80099a8:	d0e6      	beq.n	8009978 <_printf_common+0xa4>
 80099aa:	3601      	adds	r6, #1
 80099ac:	e7d9      	b.n	8009962 <_printf_common+0x8e>
	...

080099b0 <_printf_i>:
 80099b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	7e0f      	ldrb	r7, [r1, #24]
 80099b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099b8:	2f78      	cmp	r7, #120	@ 0x78
 80099ba:	4691      	mov	r9, r2
 80099bc:	4680      	mov	r8, r0
 80099be:	460c      	mov	r4, r1
 80099c0:	469a      	mov	sl, r3
 80099c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099c6:	d807      	bhi.n	80099d8 <_printf_i+0x28>
 80099c8:	2f62      	cmp	r7, #98	@ 0x62
 80099ca:	d80a      	bhi.n	80099e2 <_printf_i+0x32>
 80099cc:	2f00      	cmp	r7, #0
 80099ce:	f000 80d1 	beq.w	8009b74 <_printf_i+0x1c4>
 80099d2:	2f58      	cmp	r7, #88	@ 0x58
 80099d4:	f000 80b8 	beq.w	8009b48 <_printf_i+0x198>
 80099d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099e0:	e03a      	b.n	8009a58 <_printf_i+0xa8>
 80099e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099e6:	2b15      	cmp	r3, #21
 80099e8:	d8f6      	bhi.n	80099d8 <_printf_i+0x28>
 80099ea:	a101      	add	r1, pc, #4	@ (adr r1, 80099f0 <_printf_i+0x40>)
 80099ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099f0:	08009a49 	.word	0x08009a49
 80099f4:	08009a5d 	.word	0x08009a5d
 80099f8:	080099d9 	.word	0x080099d9
 80099fc:	080099d9 	.word	0x080099d9
 8009a00:	080099d9 	.word	0x080099d9
 8009a04:	080099d9 	.word	0x080099d9
 8009a08:	08009a5d 	.word	0x08009a5d
 8009a0c:	080099d9 	.word	0x080099d9
 8009a10:	080099d9 	.word	0x080099d9
 8009a14:	080099d9 	.word	0x080099d9
 8009a18:	080099d9 	.word	0x080099d9
 8009a1c:	08009b5b 	.word	0x08009b5b
 8009a20:	08009a87 	.word	0x08009a87
 8009a24:	08009b15 	.word	0x08009b15
 8009a28:	080099d9 	.word	0x080099d9
 8009a2c:	080099d9 	.word	0x080099d9
 8009a30:	08009b7d 	.word	0x08009b7d
 8009a34:	080099d9 	.word	0x080099d9
 8009a38:	08009a87 	.word	0x08009a87
 8009a3c:	080099d9 	.word	0x080099d9
 8009a40:	080099d9 	.word	0x080099d9
 8009a44:	08009b1d 	.word	0x08009b1d
 8009a48:	6833      	ldr	r3, [r6, #0]
 8009a4a:	1d1a      	adds	r2, r3, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6032      	str	r2, [r6, #0]
 8009a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e09c      	b.n	8009b96 <_printf_i+0x1e6>
 8009a5c:	6833      	ldr	r3, [r6, #0]
 8009a5e:	6820      	ldr	r0, [r4, #0]
 8009a60:	1d19      	adds	r1, r3, #4
 8009a62:	6031      	str	r1, [r6, #0]
 8009a64:	0606      	lsls	r6, r0, #24
 8009a66:	d501      	bpl.n	8009a6c <_printf_i+0xbc>
 8009a68:	681d      	ldr	r5, [r3, #0]
 8009a6a:	e003      	b.n	8009a74 <_printf_i+0xc4>
 8009a6c:	0645      	lsls	r5, r0, #25
 8009a6e:	d5fb      	bpl.n	8009a68 <_printf_i+0xb8>
 8009a70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a74:	2d00      	cmp	r5, #0
 8009a76:	da03      	bge.n	8009a80 <_printf_i+0xd0>
 8009a78:	232d      	movs	r3, #45	@ 0x2d
 8009a7a:	426d      	negs	r5, r5
 8009a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a80:	4858      	ldr	r0, [pc, #352]	@ (8009be4 <_printf_i+0x234>)
 8009a82:	230a      	movs	r3, #10
 8009a84:	e011      	b.n	8009aaa <_printf_i+0xfa>
 8009a86:	6821      	ldr	r1, [r4, #0]
 8009a88:	6833      	ldr	r3, [r6, #0]
 8009a8a:	0608      	lsls	r0, r1, #24
 8009a8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a90:	d402      	bmi.n	8009a98 <_printf_i+0xe8>
 8009a92:	0649      	lsls	r1, r1, #25
 8009a94:	bf48      	it	mi
 8009a96:	b2ad      	uxthmi	r5, r5
 8009a98:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a9a:	4852      	ldr	r0, [pc, #328]	@ (8009be4 <_printf_i+0x234>)
 8009a9c:	6033      	str	r3, [r6, #0]
 8009a9e:	bf14      	ite	ne
 8009aa0:	230a      	movne	r3, #10
 8009aa2:	2308      	moveq	r3, #8
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009aaa:	6866      	ldr	r6, [r4, #4]
 8009aac:	60a6      	str	r6, [r4, #8]
 8009aae:	2e00      	cmp	r6, #0
 8009ab0:	db05      	blt.n	8009abe <_printf_i+0x10e>
 8009ab2:	6821      	ldr	r1, [r4, #0]
 8009ab4:	432e      	orrs	r6, r5
 8009ab6:	f021 0104 	bic.w	r1, r1, #4
 8009aba:	6021      	str	r1, [r4, #0]
 8009abc:	d04b      	beq.n	8009b56 <_printf_i+0x1a6>
 8009abe:	4616      	mov	r6, r2
 8009ac0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ac4:	fb03 5711 	mls	r7, r3, r1, r5
 8009ac8:	5dc7      	ldrb	r7, [r0, r7]
 8009aca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ace:	462f      	mov	r7, r5
 8009ad0:	42bb      	cmp	r3, r7
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	d9f4      	bls.n	8009ac0 <_printf_i+0x110>
 8009ad6:	2b08      	cmp	r3, #8
 8009ad8:	d10b      	bne.n	8009af2 <_printf_i+0x142>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	07df      	lsls	r7, r3, #31
 8009ade:	d508      	bpl.n	8009af2 <_printf_i+0x142>
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	6861      	ldr	r1, [r4, #4]
 8009ae4:	4299      	cmp	r1, r3
 8009ae6:	bfde      	ittt	le
 8009ae8:	2330      	movle	r3, #48	@ 0x30
 8009aea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009aee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009af2:	1b92      	subs	r2, r2, r6
 8009af4:	6122      	str	r2, [r4, #16]
 8009af6:	f8cd a000 	str.w	sl, [sp]
 8009afa:	464b      	mov	r3, r9
 8009afc:	aa03      	add	r2, sp, #12
 8009afe:	4621      	mov	r1, r4
 8009b00:	4640      	mov	r0, r8
 8009b02:	f7ff fee7 	bl	80098d4 <_printf_common>
 8009b06:	3001      	adds	r0, #1
 8009b08:	d14a      	bne.n	8009ba0 <_printf_i+0x1f0>
 8009b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0e:	b004      	add	sp, #16
 8009b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	f043 0320 	orr.w	r3, r3, #32
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	4832      	ldr	r0, [pc, #200]	@ (8009be8 <_printf_i+0x238>)
 8009b1e:	2778      	movs	r7, #120	@ 0x78
 8009b20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	6831      	ldr	r1, [r6, #0]
 8009b28:	061f      	lsls	r7, r3, #24
 8009b2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b2e:	d402      	bmi.n	8009b36 <_printf_i+0x186>
 8009b30:	065f      	lsls	r7, r3, #25
 8009b32:	bf48      	it	mi
 8009b34:	b2ad      	uxthmi	r5, r5
 8009b36:	6031      	str	r1, [r6, #0]
 8009b38:	07d9      	lsls	r1, r3, #31
 8009b3a:	bf44      	itt	mi
 8009b3c:	f043 0320 	orrmi.w	r3, r3, #32
 8009b40:	6023      	strmi	r3, [r4, #0]
 8009b42:	b11d      	cbz	r5, 8009b4c <_printf_i+0x19c>
 8009b44:	2310      	movs	r3, #16
 8009b46:	e7ad      	b.n	8009aa4 <_printf_i+0xf4>
 8009b48:	4826      	ldr	r0, [pc, #152]	@ (8009be4 <_printf_i+0x234>)
 8009b4a:	e7e9      	b.n	8009b20 <_printf_i+0x170>
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	f023 0320 	bic.w	r3, r3, #32
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	e7f6      	b.n	8009b44 <_printf_i+0x194>
 8009b56:	4616      	mov	r6, r2
 8009b58:	e7bd      	b.n	8009ad6 <_printf_i+0x126>
 8009b5a:	6833      	ldr	r3, [r6, #0]
 8009b5c:	6825      	ldr	r5, [r4, #0]
 8009b5e:	6961      	ldr	r1, [r4, #20]
 8009b60:	1d18      	adds	r0, r3, #4
 8009b62:	6030      	str	r0, [r6, #0]
 8009b64:	062e      	lsls	r6, r5, #24
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	d501      	bpl.n	8009b6e <_printf_i+0x1be>
 8009b6a:	6019      	str	r1, [r3, #0]
 8009b6c:	e002      	b.n	8009b74 <_printf_i+0x1c4>
 8009b6e:	0668      	lsls	r0, r5, #25
 8009b70:	d5fb      	bpl.n	8009b6a <_printf_i+0x1ba>
 8009b72:	8019      	strh	r1, [r3, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	4616      	mov	r6, r2
 8009b7a:	e7bc      	b.n	8009af6 <_printf_i+0x146>
 8009b7c:	6833      	ldr	r3, [r6, #0]
 8009b7e:	1d1a      	adds	r2, r3, #4
 8009b80:	6032      	str	r2, [r6, #0]
 8009b82:	681e      	ldr	r6, [r3, #0]
 8009b84:	6862      	ldr	r2, [r4, #4]
 8009b86:	2100      	movs	r1, #0
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f7f6 fb41 	bl	8000210 <memchr>
 8009b8e:	b108      	cbz	r0, 8009b94 <_printf_i+0x1e4>
 8009b90:	1b80      	subs	r0, r0, r6
 8009b92:	6060      	str	r0, [r4, #4]
 8009b94:	6863      	ldr	r3, [r4, #4]
 8009b96:	6123      	str	r3, [r4, #16]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b9e:	e7aa      	b.n	8009af6 <_printf_i+0x146>
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	4632      	mov	r2, r6
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	47d0      	blx	sl
 8009baa:	3001      	adds	r0, #1
 8009bac:	d0ad      	beq.n	8009b0a <_printf_i+0x15a>
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	079b      	lsls	r3, r3, #30
 8009bb2:	d413      	bmi.n	8009bdc <_printf_i+0x22c>
 8009bb4:	68e0      	ldr	r0, [r4, #12]
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	4298      	cmp	r0, r3
 8009bba:	bfb8      	it	lt
 8009bbc:	4618      	movlt	r0, r3
 8009bbe:	e7a6      	b.n	8009b0e <_printf_i+0x15e>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	4632      	mov	r2, r6
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	47d0      	blx	sl
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d09d      	beq.n	8009b0a <_printf_i+0x15a>
 8009bce:	3501      	adds	r5, #1
 8009bd0:	68e3      	ldr	r3, [r4, #12]
 8009bd2:	9903      	ldr	r1, [sp, #12]
 8009bd4:	1a5b      	subs	r3, r3, r1
 8009bd6:	42ab      	cmp	r3, r5
 8009bd8:	dcf2      	bgt.n	8009bc0 <_printf_i+0x210>
 8009bda:	e7eb      	b.n	8009bb4 <_printf_i+0x204>
 8009bdc:	2500      	movs	r5, #0
 8009bde:	f104 0619 	add.w	r6, r4, #25
 8009be2:	e7f5      	b.n	8009bd0 <_printf_i+0x220>
 8009be4:	0800e7da 	.word	0x0800e7da
 8009be8:	0800e7eb 	.word	0x0800e7eb

08009bec <_scanf_float>:
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	b087      	sub	sp, #28
 8009bf2:	4691      	mov	r9, r2
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	688b      	ldr	r3, [r1, #8]
 8009bf8:	1e5a      	subs	r2, r3, #1
 8009bfa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009bfe:	bf81      	itttt	hi
 8009c00:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009c04:	eb03 0b05 	addhi.w	fp, r3, r5
 8009c08:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009c0c:	608b      	strhi	r3, [r1, #8]
 8009c0e:	680b      	ldr	r3, [r1, #0]
 8009c10:	460a      	mov	r2, r1
 8009c12:	f04f 0500 	mov.w	r5, #0
 8009c16:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009c1a:	f842 3b1c 	str.w	r3, [r2], #28
 8009c1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009c22:	4680      	mov	r8, r0
 8009c24:	460c      	mov	r4, r1
 8009c26:	bf98      	it	ls
 8009c28:	f04f 0b00 	movls.w	fp, #0
 8009c2c:	9201      	str	r2, [sp, #4]
 8009c2e:	4616      	mov	r6, r2
 8009c30:	46aa      	mov	sl, r5
 8009c32:	462f      	mov	r7, r5
 8009c34:	9502      	str	r5, [sp, #8]
 8009c36:	68a2      	ldr	r2, [r4, #8]
 8009c38:	b15a      	cbz	r2, 8009c52 <_scanf_float+0x66>
 8009c3a:	f8d9 3000 	ldr.w	r3, [r9]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b4e      	cmp	r3, #78	@ 0x4e
 8009c42:	d863      	bhi.n	8009d0c <_scanf_float+0x120>
 8009c44:	2b40      	cmp	r3, #64	@ 0x40
 8009c46:	d83b      	bhi.n	8009cc0 <_scanf_float+0xd4>
 8009c48:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009c4c:	b2c8      	uxtb	r0, r1
 8009c4e:	280e      	cmp	r0, #14
 8009c50:	d939      	bls.n	8009cc6 <_scanf_float+0xda>
 8009c52:	b11f      	cbz	r7, 8009c5c <_scanf_float+0x70>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c60:	f1ba 0f01 	cmp.w	sl, #1
 8009c64:	f200 8114 	bhi.w	8009e90 <_scanf_float+0x2a4>
 8009c68:	9b01      	ldr	r3, [sp, #4]
 8009c6a:	429e      	cmp	r6, r3
 8009c6c:	f200 8105 	bhi.w	8009e7a <_scanf_float+0x28e>
 8009c70:	2001      	movs	r0, #1
 8009c72:	b007      	add	sp, #28
 8009c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c78:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009c7c:	2a0d      	cmp	r2, #13
 8009c7e:	d8e8      	bhi.n	8009c52 <_scanf_float+0x66>
 8009c80:	a101      	add	r1, pc, #4	@ (adr r1, 8009c88 <_scanf_float+0x9c>)
 8009c82:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c86:	bf00      	nop
 8009c88:	08009dd1 	.word	0x08009dd1
 8009c8c:	08009c53 	.word	0x08009c53
 8009c90:	08009c53 	.word	0x08009c53
 8009c94:	08009c53 	.word	0x08009c53
 8009c98:	08009e2d 	.word	0x08009e2d
 8009c9c:	08009e07 	.word	0x08009e07
 8009ca0:	08009c53 	.word	0x08009c53
 8009ca4:	08009c53 	.word	0x08009c53
 8009ca8:	08009ddf 	.word	0x08009ddf
 8009cac:	08009c53 	.word	0x08009c53
 8009cb0:	08009c53 	.word	0x08009c53
 8009cb4:	08009c53 	.word	0x08009c53
 8009cb8:	08009c53 	.word	0x08009c53
 8009cbc:	08009d9b 	.word	0x08009d9b
 8009cc0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009cc4:	e7da      	b.n	8009c7c <_scanf_float+0x90>
 8009cc6:	290e      	cmp	r1, #14
 8009cc8:	d8c3      	bhi.n	8009c52 <_scanf_float+0x66>
 8009cca:	a001      	add	r0, pc, #4	@ (adr r0, 8009cd0 <_scanf_float+0xe4>)
 8009ccc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009cd0:	08009d8b 	.word	0x08009d8b
 8009cd4:	08009c53 	.word	0x08009c53
 8009cd8:	08009d8b 	.word	0x08009d8b
 8009cdc:	08009e1b 	.word	0x08009e1b
 8009ce0:	08009c53 	.word	0x08009c53
 8009ce4:	08009d2d 	.word	0x08009d2d
 8009ce8:	08009d71 	.word	0x08009d71
 8009cec:	08009d71 	.word	0x08009d71
 8009cf0:	08009d71 	.word	0x08009d71
 8009cf4:	08009d71 	.word	0x08009d71
 8009cf8:	08009d71 	.word	0x08009d71
 8009cfc:	08009d71 	.word	0x08009d71
 8009d00:	08009d71 	.word	0x08009d71
 8009d04:	08009d71 	.word	0x08009d71
 8009d08:	08009d71 	.word	0x08009d71
 8009d0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009d0e:	d809      	bhi.n	8009d24 <_scanf_float+0x138>
 8009d10:	2b60      	cmp	r3, #96	@ 0x60
 8009d12:	d8b1      	bhi.n	8009c78 <_scanf_float+0x8c>
 8009d14:	2b54      	cmp	r3, #84	@ 0x54
 8009d16:	d07b      	beq.n	8009e10 <_scanf_float+0x224>
 8009d18:	2b59      	cmp	r3, #89	@ 0x59
 8009d1a:	d19a      	bne.n	8009c52 <_scanf_float+0x66>
 8009d1c:	2d07      	cmp	r5, #7
 8009d1e:	d198      	bne.n	8009c52 <_scanf_float+0x66>
 8009d20:	2508      	movs	r5, #8
 8009d22:	e02f      	b.n	8009d84 <_scanf_float+0x198>
 8009d24:	2b74      	cmp	r3, #116	@ 0x74
 8009d26:	d073      	beq.n	8009e10 <_scanf_float+0x224>
 8009d28:	2b79      	cmp	r3, #121	@ 0x79
 8009d2a:	e7f6      	b.n	8009d1a <_scanf_float+0x12e>
 8009d2c:	6821      	ldr	r1, [r4, #0]
 8009d2e:	05c8      	lsls	r0, r1, #23
 8009d30:	d51e      	bpl.n	8009d70 <_scanf_float+0x184>
 8009d32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009d36:	6021      	str	r1, [r4, #0]
 8009d38:	3701      	adds	r7, #1
 8009d3a:	f1bb 0f00 	cmp.w	fp, #0
 8009d3e:	d003      	beq.n	8009d48 <_scanf_float+0x15c>
 8009d40:	3201      	adds	r2, #1
 8009d42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d46:	60a2      	str	r2, [r4, #8]
 8009d48:	68a3      	ldr	r3, [r4, #8]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	3301      	adds	r3, #1
 8009d52:	6123      	str	r3, [r4, #16]
 8009d54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f8c9 3004 	str.w	r3, [r9, #4]
 8009d60:	f340 8082 	ble.w	8009e68 <_scanf_float+0x27c>
 8009d64:	f8d9 3000 	ldr.w	r3, [r9]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	f8c9 3000 	str.w	r3, [r9]
 8009d6e:	e762      	b.n	8009c36 <_scanf_float+0x4a>
 8009d70:	eb1a 0105 	adds.w	r1, sl, r5
 8009d74:	f47f af6d 	bne.w	8009c52 <_scanf_float+0x66>
 8009d78:	6822      	ldr	r2, [r4, #0]
 8009d7a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009d7e:	6022      	str	r2, [r4, #0]
 8009d80:	460d      	mov	r5, r1
 8009d82:	468a      	mov	sl, r1
 8009d84:	f806 3b01 	strb.w	r3, [r6], #1
 8009d88:	e7de      	b.n	8009d48 <_scanf_float+0x15c>
 8009d8a:	6822      	ldr	r2, [r4, #0]
 8009d8c:	0610      	lsls	r0, r2, #24
 8009d8e:	f57f af60 	bpl.w	8009c52 <_scanf_float+0x66>
 8009d92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d96:	6022      	str	r2, [r4, #0]
 8009d98:	e7f4      	b.n	8009d84 <_scanf_float+0x198>
 8009d9a:	f1ba 0f00 	cmp.w	sl, #0
 8009d9e:	d10c      	bne.n	8009dba <_scanf_float+0x1ce>
 8009da0:	b977      	cbnz	r7, 8009dc0 <_scanf_float+0x1d4>
 8009da2:	6822      	ldr	r2, [r4, #0]
 8009da4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009da8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009dac:	d108      	bne.n	8009dc0 <_scanf_float+0x1d4>
 8009dae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	f04f 0a01 	mov.w	sl, #1
 8009db8:	e7e4      	b.n	8009d84 <_scanf_float+0x198>
 8009dba:	f1ba 0f02 	cmp.w	sl, #2
 8009dbe:	d050      	beq.n	8009e62 <_scanf_float+0x276>
 8009dc0:	2d01      	cmp	r5, #1
 8009dc2:	d002      	beq.n	8009dca <_scanf_float+0x1de>
 8009dc4:	2d04      	cmp	r5, #4
 8009dc6:	f47f af44 	bne.w	8009c52 <_scanf_float+0x66>
 8009dca:	3501      	adds	r5, #1
 8009dcc:	b2ed      	uxtb	r5, r5
 8009dce:	e7d9      	b.n	8009d84 <_scanf_float+0x198>
 8009dd0:	f1ba 0f01 	cmp.w	sl, #1
 8009dd4:	f47f af3d 	bne.w	8009c52 <_scanf_float+0x66>
 8009dd8:	f04f 0a02 	mov.w	sl, #2
 8009ddc:	e7d2      	b.n	8009d84 <_scanf_float+0x198>
 8009dde:	b975      	cbnz	r5, 8009dfe <_scanf_float+0x212>
 8009de0:	2f00      	cmp	r7, #0
 8009de2:	f47f af37 	bne.w	8009c54 <_scanf_float+0x68>
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009dec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009df0:	f040 8103 	bne.w	8009ffa <_scanf_float+0x40e>
 8009df4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009df8:	6022      	str	r2, [r4, #0]
 8009dfa:	2501      	movs	r5, #1
 8009dfc:	e7c2      	b.n	8009d84 <_scanf_float+0x198>
 8009dfe:	2d03      	cmp	r5, #3
 8009e00:	d0e3      	beq.n	8009dca <_scanf_float+0x1de>
 8009e02:	2d05      	cmp	r5, #5
 8009e04:	e7df      	b.n	8009dc6 <_scanf_float+0x1da>
 8009e06:	2d02      	cmp	r5, #2
 8009e08:	f47f af23 	bne.w	8009c52 <_scanf_float+0x66>
 8009e0c:	2503      	movs	r5, #3
 8009e0e:	e7b9      	b.n	8009d84 <_scanf_float+0x198>
 8009e10:	2d06      	cmp	r5, #6
 8009e12:	f47f af1e 	bne.w	8009c52 <_scanf_float+0x66>
 8009e16:	2507      	movs	r5, #7
 8009e18:	e7b4      	b.n	8009d84 <_scanf_float+0x198>
 8009e1a:	6822      	ldr	r2, [r4, #0]
 8009e1c:	0591      	lsls	r1, r2, #22
 8009e1e:	f57f af18 	bpl.w	8009c52 <_scanf_float+0x66>
 8009e22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009e26:	6022      	str	r2, [r4, #0]
 8009e28:	9702      	str	r7, [sp, #8]
 8009e2a:	e7ab      	b.n	8009d84 <_scanf_float+0x198>
 8009e2c:	6822      	ldr	r2, [r4, #0]
 8009e2e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009e32:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009e36:	d005      	beq.n	8009e44 <_scanf_float+0x258>
 8009e38:	0550      	lsls	r0, r2, #21
 8009e3a:	f57f af0a 	bpl.w	8009c52 <_scanf_float+0x66>
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	f000 80db 	beq.w	8009ffa <_scanf_float+0x40e>
 8009e44:	0591      	lsls	r1, r2, #22
 8009e46:	bf58      	it	pl
 8009e48:	9902      	ldrpl	r1, [sp, #8]
 8009e4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e4e:	bf58      	it	pl
 8009e50:	1a79      	subpl	r1, r7, r1
 8009e52:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009e56:	bf58      	it	pl
 8009e58:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009e5c:	6022      	str	r2, [r4, #0]
 8009e5e:	2700      	movs	r7, #0
 8009e60:	e790      	b.n	8009d84 <_scanf_float+0x198>
 8009e62:	f04f 0a03 	mov.w	sl, #3
 8009e66:	e78d      	b.n	8009d84 <_scanf_float+0x198>
 8009e68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009e6c:	4649      	mov	r1, r9
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4798      	blx	r3
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f43f aedf 	beq.w	8009c36 <_scanf_float+0x4a>
 8009e78:	e6eb      	b.n	8009c52 <_scanf_float+0x66>
 8009e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e82:	464a      	mov	r2, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	4798      	blx	r3
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	6123      	str	r3, [r4, #16]
 8009e8e:	e6eb      	b.n	8009c68 <_scanf_float+0x7c>
 8009e90:	1e6b      	subs	r3, r5, #1
 8009e92:	2b06      	cmp	r3, #6
 8009e94:	d824      	bhi.n	8009ee0 <_scanf_float+0x2f4>
 8009e96:	2d02      	cmp	r5, #2
 8009e98:	d836      	bhi.n	8009f08 <_scanf_float+0x31c>
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	429e      	cmp	r6, r3
 8009e9e:	f67f aee7 	bls.w	8009c70 <_scanf_float+0x84>
 8009ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ea6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009eaa:	464a      	mov	r2, r9
 8009eac:	4640      	mov	r0, r8
 8009eae:	4798      	blx	r3
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	6123      	str	r3, [r4, #16]
 8009eb6:	e7f0      	b.n	8009e9a <_scanf_float+0x2ae>
 8009eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ebc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009ec0:	464a      	mov	r2, r9
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	4798      	blx	r3
 8009ec6:	6923      	ldr	r3, [r4, #16]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	6123      	str	r3, [r4, #16]
 8009ecc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ed0:	fa5f fa8a 	uxtb.w	sl, sl
 8009ed4:	f1ba 0f02 	cmp.w	sl, #2
 8009ed8:	d1ee      	bne.n	8009eb8 <_scanf_float+0x2cc>
 8009eda:	3d03      	subs	r5, #3
 8009edc:	b2ed      	uxtb	r5, r5
 8009ede:	1b76      	subs	r6, r6, r5
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	05da      	lsls	r2, r3, #23
 8009ee4:	d530      	bpl.n	8009f48 <_scanf_float+0x35c>
 8009ee6:	055b      	lsls	r3, r3, #21
 8009ee8:	d511      	bpl.n	8009f0e <_scanf_float+0x322>
 8009eea:	9b01      	ldr	r3, [sp, #4]
 8009eec:	429e      	cmp	r6, r3
 8009eee:	f67f aebf 	bls.w	8009c70 <_scanf_float+0x84>
 8009ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ef6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009efa:	464a      	mov	r2, r9
 8009efc:	4640      	mov	r0, r8
 8009efe:	4798      	blx	r3
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	6123      	str	r3, [r4, #16]
 8009f06:	e7f0      	b.n	8009eea <_scanf_float+0x2fe>
 8009f08:	46aa      	mov	sl, r5
 8009f0a:	46b3      	mov	fp, r6
 8009f0c:	e7de      	b.n	8009ecc <_scanf_float+0x2e0>
 8009f0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009f12:	6923      	ldr	r3, [r4, #16]
 8009f14:	2965      	cmp	r1, #101	@ 0x65
 8009f16:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009f1e:	6123      	str	r3, [r4, #16]
 8009f20:	d00c      	beq.n	8009f3c <_scanf_float+0x350>
 8009f22:	2945      	cmp	r1, #69	@ 0x45
 8009f24:	d00a      	beq.n	8009f3c <_scanf_float+0x350>
 8009f26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f2a:	464a      	mov	r2, r9
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4798      	blx	r3
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009f36:	3b01      	subs	r3, #1
 8009f38:	1eb5      	subs	r5, r6, #2
 8009f3a:	6123      	str	r3, [r4, #16]
 8009f3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f40:	464a      	mov	r2, r9
 8009f42:	4640      	mov	r0, r8
 8009f44:	4798      	blx	r3
 8009f46:	462e      	mov	r6, r5
 8009f48:	6822      	ldr	r2, [r4, #0]
 8009f4a:	f012 0210 	ands.w	r2, r2, #16
 8009f4e:	d001      	beq.n	8009f54 <_scanf_float+0x368>
 8009f50:	2000      	movs	r0, #0
 8009f52:	e68e      	b.n	8009c72 <_scanf_float+0x86>
 8009f54:	7032      	strb	r2, [r6, #0]
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f60:	d125      	bne.n	8009fae <_scanf_float+0x3c2>
 8009f62:	9b02      	ldr	r3, [sp, #8]
 8009f64:	429f      	cmp	r7, r3
 8009f66:	d00a      	beq.n	8009f7e <_scanf_float+0x392>
 8009f68:	1bda      	subs	r2, r3, r7
 8009f6a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009f6e:	429e      	cmp	r6, r3
 8009f70:	bf28      	it	cs
 8009f72:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009f76:	4922      	ldr	r1, [pc, #136]	@ (800a000 <_scanf_float+0x414>)
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 fa33 	bl	800a3e4 <siprintf>
 8009f7e:	9901      	ldr	r1, [sp, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	4640      	mov	r0, r8
 8009f84:	f002 fdb4 	bl	800caf0 <_strtod_r>
 8009f88:	9b03      	ldr	r3, [sp, #12]
 8009f8a:	6821      	ldr	r1, [r4, #0]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f011 0f02 	tst.w	r1, #2
 8009f92:	ec57 6b10 	vmov	r6, r7, d0
 8009f96:	f103 0204 	add.w	r2, r3, #4
 8009f9a:	d015      	beq.n	8009fc8 <_scanf_float+0x3dc>
 8009f9c:	9903      	ldr	r1, [sp, #12]
 8009f9e:	600a      	str	r2, [r1, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	e9c3 6700 	strd	r6, r7, [r3]
 8009fa6:	68e3      	ldr	r3, [r4, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60e3      	str	r3, [r4, #12]
 8009fac:	e7d0      	b.n	8009f50 <_scanf_float+0x364>
 8009fae:	9b04      	ldr	r3, [sp, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d0e4      	beq.n	8009f7e <_scanf_float+0x392>
 8009fb4:	9905      	ldr	r1, [sp, #20]
 8009fb6:	230a      	movs	r3, #10
 8009fb8:	3101      	adds	r1, #1
 8009fba:	4640      	mov	r0, r8
 8009fbc:	f002 fe18 	bl	800cbf0 <_strtol_r>
 8009fc0:	9b04      	ldr	r3, [sp, #16]
 8009fc2:	9e05      	ldr	r6, [sp, #20]
 8009fc4:	1ac2      	subs	r2, r0, r3
 8009fc6:	e7d0      	b.n	8009f6a <_scanf_float+0x37e>
 8009fc8:	f011 0f04 	tst.w	r1, #4
 8009fcc:	9903      	ldr	r1, [sp, #12]
 8009fce:	600a      	str	r2, [r1, #0]
 8009fd0:	d1e6      	bne.n	8009fa0 <_scanf_float+0x3b4>
 8009fd2:	681d      	ldr	r5, [r3, #0]
 8009fd4:	4632      	mov	r2, r6
 8009fd6:	463b      	mov	r3, r7
 8009fd8:	4630      	mov	r0, r6
 8009fda:	4639      	mov	r1, r7
 8009fdc:	f7f6 fdc6 	bl	8000b6c <__aeabi_dcmpun>
 8009fe0:	b128      	cbz	r0, 8009fee <_scanf_float+0x402>
 8009fe2:	4808      	ldr	r0, [pc, #32]	@ (800a004 <_scanf_float+0x418>)
 8009fe4:	f000 fb78 	bl	800a6d8 <nanf>
 8009fe8:	ed85 0a00 	vstr	s0, [r5]
 8009fec:	e7db      	b.n	8009fa6 <_scanf_float+0x3ba>
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	f7f6 fe19 	bl	8000c28 <__aeabi_d2f>
 8009ff6:	6028      	str	r0, [r5, #0]
 8009ff8:	e7d5      	b.n	8009fa6 <_scanf_float+0x3ba>
 8009ffa:	2700      	movs	r7, #0
 8009ffc:	e62e      	b.n	8009c5c <_scanf_float+0x70>
 8009ffe:	bf00      	nop
 800a000:	0800e7fc 	.word	0x0800e7fc
 800a004:	0800e93d 	.word	0x0800e93d

0800a008 <std>:
 800a008:	2300      	movs	r3, #0
 800a00a:	b510      	push	{r4, lr}
 800a00c:	4604      	mov	r4, r0
 800a00e:	e9c0 3300 	strd	r3, r3, [r0]
 800a012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a016:	6083      	str	r3, [r0, #8]
 800a018:	8181      	strh	r1, [r0, #12]
 800a01a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a01c:	81c2      	strh	r2, [r0, #14]
 800a01e:	6183      	str	r3, [r0, #24]
 800a020:	4619      	mov	r1, r3
 800a022:	2208      	movs	r2, #8
 800a024:	305c      	adds	r0, #92	@ 0x5c
 800a026:	f000 fad7 	bl	800a5d8 <memset>
 800a02a:	4b0d      	ldr	r3, [pc, #52]	@ (800a060 <std+0x58>)
 800a02c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a02e:	4b0d      	ldr	r3, [pc, #52]	@ (800a064 <std+0x5c>)
 800a030:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a032:	4b0d      	ldr	r3, [pc, #52]	@ (800a068 <std+0x60>)
 800a034:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a036:	4b0d      	ldr	r3, [pc, #52]	@ (800a06c <std+0x64>)
 800a038:	6323      	str	r3, [r4, #48]	@ 0x30
 800a03a:	4b0d      	ldr	r3, [pc, #52]	@ (800a070 <std+0x68>)
 800a03c:	6224      	str	r4, [r4, #32]
 800a03e:	429c      	cmp	r4, r3
 800a040:	d006      	beq.n	800a050 <std+0x48>
 800a042:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a046:	4294      	cmp	r4, r2
 800a048:	d002      	beq.n	800a050 <std+0x48>
 800a04a:	33d0      	adds	r3, #208	@ 0xd0
 800a04c:	429c      	cmp	r4, r3
 800a04e:	d105      	bne.n	800a05c <std+0x54>
 800a050:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a058:	f000 bb3a 	b.w	800a6d0 <__retarget_lock_init_recursive>
 800a05c:	bd10      	pop	{r4, pc}
 800a05e:	bf00      	nop
 800a060:	0800a429 	.word	0x0800a429
 800a064:	0800a44b 	.word	0x0800a44b
 800a068:	0800a483 	.word	0x0800a483
 800a06c:	0800a4a7 	.word	0x0800a4a7
 800a070:	200004f4 	.word	0x200004f4

0800a074 <stdio_exit_handler>:
 800a074:	4a02      	ldr	r2, [pc, #8]	@ (800a080 <stdio_exit_handler+0xc>)
 800a076:	4903      	ldr	r1, [pc, #12]	@ (800a084 <stdio_exit_handler+0x10>)
 800a078:	4803      	ldr	r0, [pc, #12]	@ (800a088 <stdio_exit_handler+0x14>)
 800a07a:	f000 b869 	b.w	800a150 <_fwalk_sglue>
 800a07e:	bf00      	nop
 800a080:	20000010 	.word	0x20000010
 800a084:	0800d231 	.word	0x0800d231
 800a088:	20000020 	.word	0x20000020

0800a08c <cleanup_stdio>:
 800a08c:	6841      	ldr	r1, [r0, #4]
 800a08e:	4b0c      	ldr	r3, [pc, #48]	@ (800a0c0 <cleanup_stdio+0x34>)
 800a090:	4299      	cmp	r1, r3
 800a092:	b510      	push	{r4, lr}
 800a094:	4604      	mov	r4, r0
 800a096:	d001      	beq.n	800a09c <cleanup_stdio+0x10>
 800a098:	f003 f8ca 	bl	800d230 <_fflush_r>
 800a09c:	68a1      	ldr	r1, [r4, #8]
 800a09e:	4b09      	ldr	r3, [pc, #36]	@ (800a0c4 <cleanup_stdio+0x38>)
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	d002      	beq.n	800a0aa <cleanup_stdio+0x1e>
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f003 f8c3 	bl	800d230 <_fflush_r>
 800a0aa:	68e1      	ldr	r1, [r4, #12]
 800a0ac:	4b06      	ldr	r3, [pc, #24]	@ (800a0c8 <cleanup_stdio+0x3c>)
 800a0ae:	4299      	cmp	r1, r3
 800a0b0:	d004      	beq.n	800a0bc <cleanup_stdio+0x30>
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b8:	f003 b8ba 	b.w	800d230 <_fflush_r>
 800a0bc:	bd10      	pop	{r4, pc}
 800a0be:	bf00      	nop
 800a0c0:	200004f4 	.word	0x200004f4
 800a0c4:	2000055c 	.word	0x2000055c
 800a0c8:	200005c4 	.word	0x200005c4

0800a0cc <global_stdio_init.part.0>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a0fc <global_stdio_init.part.0+0x30>)
 800a0d0:	4c0b      	ldr	r4, [pc, #44]	@ (800a100 <global_stdio_init.part.0+0x34>)
 800a0d2:	4a0c      	ldr	r2, [pc, #48]	@ (800a104 <global_stdio_init.part.0+0x38>)
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	2200      	movs	r2, #0
 800a0da:	2104      	movs	r1, #4
 800a0dc:	f7ff ff94 	bl	800a008 <std>
 800a0e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	2109      	movs	r1, #9
 800a0e8:	f7ff ff8e 	bl	800a008 <std>
 800a0ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f6:	2112      	movs	r1, #18
 800a0f8:	f7ff bf86 	b.w	800a008 <std>
 800a0fc:	2000062c 	.word	0x2000062c
 800a100:	200004f4 	.word	0x200004f4
 800a104:	0800a075 	.word	0x0800a075

0800a108 <__sfp_lock_acquire>:
 800a108:	4801      	ldr	r0, [pc, #4]	@ (800a110 <__sfp_lock_acquire+0x8>)
 800a10a:	f000 bae2 	b.w	800a6d2 <__retarget_lock_acquire_recursive>
 800a10e:	bf00      	nop
 800a110:	20000635 	.word	0x20000635

0800a114 <__sfp_lock_release>:
 800a114:	4801      	ldr	r0, [pc, #4]	@ (800a11c <__sfp_lock_release+0x8>)
 800a116:	f000 badd 	b.w	800a6d4 <__retarget_lock_release_recursive>
 800a11a:	bf00      	nop
 800a11c:	20000635 	.word	0x20000635

0800a120 <__sinit>:
 800a120:	b510      	push	{r4, lr}
 800a122:	4604      	mov	r4, r0
 800a124:	f7ff fff0 	bl	800a108 <__sfp_lock_acquire>
 800a128:	6a23      	ldr	r3, [r4, #32]
 800a12a:	b11b      	cbz	r3, 800a134 <__sinit+0x14>
 800a12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a130:	f7ff bff0 	b.w	800a114 <__sfp_lock_release>
 800a134:	4b04      	ldr	r3, [pc, #16]	@ (800a148 <__sinit+0x28>)
 800a136:	6223      	str	r3, [r4, #32]
 800a138:	4b04      	ldr	r3, [pc, #16]	@ (800a14c <__sinit+0x2c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1f5      	bne.n	800a12c <__sinit+0xc>
 800a140:	f7ff ffc4 	bl	800a0cc <global_stdio_init.part.0>
 800a144:	e7f2      	b.n	800a12c <__sinit+0xc>
 800a146:	bf00      	nop
 800a148:	0800a08d 	.word	0x0800a08d
 800a14c:	2000062c 	.word	0x2000062c

0800a150 <_fwalk_sglue>:
 800a150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a154:	4607      	mov	r7, r0
 800a156:	4688      	mov	r8, r1
 800a158:	4614      	mov	r4, r2
 800a15a:	2600      	movs	r6, #0
 800a15c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a160:	f1b9 0901 	subs.w	r9, r9, #1
 800a164:	d505      	bpl.n	800a172 <_fwalk_sglue+0x22>
 800a166:	6824      	ldr	r4, [r4, #0]
 800a168:	2c00      	cmp	r4, #0
 800a16a:	d1f7      	bne.n	800a15c <_fwalk_sglue+0xc>
 800a16c:	4630      	mov	r0, r6
 800a16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a172:	89ab      	ldrh	r3, [r5, #12]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d907      	bls.n	800a188 <_fwalk_sglue+0x38>
 800a178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a17c:	3301      	adds	r3, #1
 800a17e:	d003      	beq.n	800a188 <_fwalk_sglue+0x38>
 800a180:	4629      	mov	r1, r5
 800a182:	4638      	mov	r0, r7
 800a184:	47c0      	blx	r8
 800a186:	4306      	orrs	r6, r0
 800a188:	3568      	adds	r5, #104	@ 0x68
 800a18a:	e7e9      	b.n	800a160 <_fwalk_sglue+0x10>

0800a18c <iprintf>:
 800a18c:	b40f      	push	{r0, r1, r2, r3}
 800a18e:	b507      	push	{r0, r1, r2, lr}
 800a190:	4906      	ldr	r1, [pc, #24]	@ (800a1ac <iprintf+0x20>)
 800a192:	ab04      	add	r3, sp, #16
 800a194:	6808      	ldr	r0, [r1, #0]
 800a196:	f853 2b04 	ldr.w	r2, [r3], #4
 800a19a:	6881      	ldr	r1, [r0, #8]
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	f002 feab 	bl	800cef8 <_vfiprintf_r>
 800a1a2:	b003      	add	sp, #12
 800a1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1a8:	b004      	add	sp, #16
 800a1aa:	4770      	bx	lr
 800a1ac:	2000001c 	.word	0x2000001c

0800a1b0 <_puts_r>:
 800a1b0:	6a03      	ldr	r3, [r0, #32]
 800a1b2:	b570      	push	{r4, r5, r6, lr}
 800a1b4:	6884      	ldr	r4, [r0, #8]
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	460e      	mov	r6, r1
 800a1ba:	b90b      	cbnz	r3, 800a1c0 <_puts_r+0x10>
 800a1bc:	f7ff ffb0 	bl	800a120 <__sinit>
 800a1c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1c2:	07db      	lsls	r3, r3, #31
 800a1c4:	d405      	bmi.n	800a1d2 <_puts_r+0x22>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	0598      	lsls	r0, r3, #22
 800a1ca:	d402      	bmi.n	800a1d2 <_puts_r+0x22>
 800a1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ce:	f000 fa80 	bl	800a6d2 <__retarget_lock_acquire_recursive>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	0719      	lsls	r1, r3, #28
 800a1d6:	d502      	bpl.n	800a1de <_puts_r+0x2e>
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d135      	bne.n	800a24a <_puts_r+0x9a>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 f9a3 	bl	800a52c <__swsetup_r>
 800a1e6:	b380      	cbz	r0, 800a24a <_puts_r+0x9a>
 800a1e8:	f04f 35ff 	mov.w	r5, #4294967295
 800a1ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1ee:	07da      	lsls	r2, r3, #31
 800a1f0:	d405      	bmi.n	800a1fe <_puts_r+0x4e>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	059b      	lsls	r3, r3, #22
 800a1f6:	d402      	bmi.n	800a1fe <_puts_r+0x4e>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1fa:	f000 fa6b 	bl	800a6d4 <__retarget_lock_release_recursive>
 800a1fe:	4628      	mov	r0, r5
 800a200:	bd70      	pop	{r4, r5, r6, pc}
 800a202:	2b00      	cmp	r3, #0
 800a204:	da04      	bge.n	800a210 <_puts_r+0x60>
 800a206:	69a2      	ldr	r2, [r4, #24]
 800a208:	429a      	cmp	r2, r3
 800a20a:	dc17      	bgt.n	800a23c <_puts_r+0x8c>
 800a20c:	290a      	cmp	r1, #10
 800a20e:	d015      	beq.n	800a23c <_puts_r+0x8c>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	7019      	strb	r1, [r3, #0]
 800a218:	68a3      	ldr	r3, [r4, #8]
 800a21a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a21e:	3b01      	subs	r3, #1
 800a220:	60a3      	str	r3, [r4, #8]
 800a222:	2900      	cmp	r1, #0
 800a224:	d1ed      	bne.n	800a202 <_puts_r+0x52>
 800a226:	2b00      	cmp	r3, #0
 800a228:	da11      	bge.n	800a24e <_puts_r+0x9e>
 800a22a:	4622      	mov	r2, r4
 800a22c:	210a      	movs	r1, #10
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 f93d 	bl	800a4ae <__swbuf_r>
 800a234:	3001      	adds	r0, #1
 800a236:	d0d7      	beq.n	800a1e8 <_puts_r+0x38>
 800a238:	250a      	movs	r5, #10
 800a23a:	e7d7      	b.n	800a1ec <_puts_r+0x3c>
 800a23c:	4622      	mov	r2, r4
 800a23e:	4628      	mov	r0, r5
 800a240:	f000 f935 	bl	800a4ae <__swbuf_r>
 800a244:	3001      	adds	r0, #1
 800a246:	d1e7      	bne.n	800a218 <_puts_r+0x68>
 800a248:	e7ce      	b.n	800a1e8 <_puts_r+0x38>
 800a24a:	3e01      	subs	r6, #1
 800a24c:	e7e4      	b.n	800a218 <_puts_r+0x68>
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	6022      	str	r2, [r4, #0]
 800a254:	220a      	movs	r2, #10
 800a256:	701a      	strb	r2, [r3, #0]
 800a258:	e7ee      	b.n	800a238 <_puts_r+0x88>
	...

0800a25c <puts>:
 800a25c:	4b02      	ldr	r3, [pc, #8]	@ (800a268 <puts+0xc>)
 800a25e:	4601      	mov	r1, r0
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	f7ff bfa5 	b.w	800a1b0 <_puts_r>
 800a266:	bf00      	nop
 800a268:	2000001c 	.word	0x2000001c

0800a26c <setbuf>:
 800a26c:	fab1 f281 	clz	r2, r1
 800a270:	0952      	lsrs	r2, r2, #5
 800a272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a276:	0052      	lsls	r2, r2, #1
 800a278:	f000 b800 	b.w	800a27c <setvbuf>

0800a27c <setvbuf>:
 800a27c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a280:	461d      	mov	r5, r3
 800a282:	4b57      	ldr	r3, [pc, #348]	@ (800a3e0 <setvbuf+0x164>)
 800a284:	681f      	ldr	r7, [r3, #0]
 800a286:	4604      	mov	r4, r0
 800a288:	460e      	mov	r6, r1
 800a28a:	4690      	mov	r8, r2
 800a28c:	b127      	cbz	r7, 800a298 <setvbuf+0x1c>
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	b913      	cbnz	r3, 800a298 <setvbuf+0x1c>
 800a292:	4638      	mov	r0, r7
 800a294:	f7ff ff44 	bl	800a120 <__sinit>
 800a298:	f1b8 0f02 	cmp.w	r8, #2
 800a29c:	d006      	beq.n	800a2ac <setvbuf+0x30>
 800a29e:	f1b8 0f01 	cmp.w	r8, #1
 800a2a2:	f200 809a 	bhi.w	800a3da <setvbuf+0x15e>
 800a2a6:	2d00      	cmp	r5, #0
 800a2a8:	f2c0 8097 	blt.w	800a3da <setvbuf+0x15e>
 800a2ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2ae:	07d9      	lsls	r1, r3, #31
 800a2b0:	d405      	bmi.n	800a2be <setvbuf+0x42>
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	059a      	lsls	r2, r3, #22
 800a2b6:	d402      	bmi.n	800a2be <setvbuf+0x42>
 800a2b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2ba:	f000 fa0a 	bl	800a6d2 <__retarget_lock_acquire_recursive>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	f002 ffb5 	bl	800d230 <_fflush_r>
 800a2c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2c8:	b141      	cbz	r1, 800a2dc <setvbuf+0x60>
 800a2ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2ce:	4299      	cmp	r1, r3
 800a2d0:	d002      	beq.n	800a2d8 <setvbuf+0x5c>
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	f001 f860 	bl	800b398 <_free_r>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61a3      	str	r3, [r4, #24]
 800a2e0:	6063      	str	r3, [r4, #4]
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	061b      	lsls	r3, r3, #24
 800a2e6:	d503      	bpl.n	800a2f0 <setvbuf+0x74>
 800a2e8:	6921      	ldr	r1, [r4, #16]
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	f001 f854 	bl	800b398 <_free_r>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800a2f6:	f023 0303 	bic.w	r3, r3, #3
 800a2fa:	f1b8 0f02 	cmp.w	r8, #2
 800a2fe:	81a3      	strh	r3, [r4, #12]
 800a300:	d061      	beq.n	800a3c6 <setvbuf+0x14a>
 800a302:	ab01      	add	r3, sp, #4
 800a304:	466a      	mov	r2, sp
 800a306:	4621      	mov	r1, r4
 800a308:	4638      	mov	r0, r7
 800a30a:	f002 ffb9 	bl	800d280 <__swhatbuf_r>
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	4318      	orrs	r0, r3
 800a312:	81a0      	strh	r0, [r4, #12]
 800a314:	bb2d      	cbnz	r5, 800a362 <setvbuf+0xe6>
 800a316:	9d00      	ldr	r5, [sp, #0]
 800a318:	4628      	mov	r0, r5
 800a31a:	f001 f887 	bl	800b42c <malloc>
 800a31e:	4606      	mov	r6, r0
 800a320:	2800      	cmp	r0, #0
 800a322:	d152      	bne.n	800a3ca <setvbuf+0x14e>
 800a324:	f8dd 9000 	ldr.w	r9, [sp]
 800a328:	45a9      	cmp	r9, r5
 800a32a:	d140      	bne.n	800a3ae <setvbuf+0x132>
 800a32c:	f04f 35ff 	mov.w	r5, #4294967295
 800a330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a334:	f043 0202 	orr.w	r2, r3, #2
 800a338:	81a2      	strh	r2, [r4, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	60a2      	str	r2, [r4, #8]
 800a33e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800a342:	6022      	str	r2, [r4, #0]
 800a344:	6122      	str	r2, [r4, #16]
 800a346:	2201      	movs	r2, #1
 800a348:	6162      	str	r2, [r4, #20]
 800a34a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a34c:	07d6      	lsls	r6, r2, #31
 800a34e:	d404      	bmi.n	800a35a <setvbuf+0xde>
 800a350:	0598      	lsls	r0, r3, #22
 800a352:	d402      	bmi.n	800a35a <setvbuf+0xde>
 800a354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a356:	f000 f9bd 	bl	800a6d4 <__retarget_lock_release_recursive>
 800a35a:	4628      	mov	r0, r5
 800a35c:	b003      	add	sp, #12
 800a35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a362:	2e00      	cmp	r6, #0
 800a364:	d0d8      	beq.n	800a318 <setvbuf+0x9c>
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	b913      	cbnz	r3, 800a370 <setvbuf+0xf4>
 800a36a:	4638      	mov	r0, r7
 800a36c:	f7ff fed8 	bl	800a120 <__sinit>
 800a370:	f1b8 0f01 	cmp.w	r8, #1
 800a374:	bf08      	it	eq
 800a376:	89a3      	ldrheq	r3, [r4, #12]
 800a378:	6026      	str	r6, [r4, #0]
 800a37a:	bf04      	itt	eq
 800a37c:	f043 0301 	orreq.w	r3, r3, #1
 800a380:	81a3      	strheq	r3, [r4, #12]
 800a382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a386:	f013 0208 	ands.w	r2, r3, #8
 800a38a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a38e:	d01e      	beq.n	800a3ce <setvbuf+0x152>
 800a390:	07d9      	lsls	r1, r3, #31
 800a392:	bf41      	itttt	mi
 800a394:	2200      	movmi	r2, #0
 800a396:	426d      	negmi	r5, r5
 800a398:	60a2      	strmi	r2, [r4, #8]
 800a39a:	61a5      	strmi	r5, [r4, #24]
 800a39c:	bf58      	it	pl
 800a39e:	60a5      	strpl	r5, [r4, #8]
 800a3a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3a2:	07d2      	lsls	r2, r2, #31
 800a3a4:	d401      	bmi.n	800a3aa <setvbuf+0x12e>
 800a3a6:	059b      	lsls	r3, r3, #22
 800a3a8:	d513      	bpl.n	800a3d2 <setvbuf+0x156>
 800a3aa:	2500      	movs	r5, #0
 800a3ac:	e7d5      	b.n	800a35a <setvbuf+0xde>
 800a3ae:	4648      	mov	r0, r9
 800a3b0:	f001 f83c 	bl	800b42c <malloc>
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d0b8      	beq.n	800a32c <setvbuf+0xb0>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	464d      	mov	r5, r9
 800a3c4:	e7cf      	b.n	800a366 <setvbuf+0xea>
 800a3c6:	2500      	movs	r5, #0
 800a3c8:	e7b2      	b.n	800a330 <setvbuf+0xb4>
 800a3ca:	46a9      	mov	r9, r5
 800a3cc:	e7f5      	b.n	800a3ba <setvbuf+0x13e>
 800a3ce:	60a2      	str	r2, [r4, #8]
 800a3d0:	e7e6      	b.n	800a3a0 <setvbuf+0x124>
 800a3d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3d4:	f000 f97e 	bl	800a6d4 <__retarget_lock_release_recursive>
 800a3d8:	e7e7      	b.n	800a3aa <setvbuf+0x12e>
 800a3da:	f04f 35ff 	mov.w	r5, #4294967295
 800a3de:	e7bc      	b.n	800a35a <setvbuf+0xde>
 800a3e0:	2000001c 	.word	0x2000001c

0800a3e4 <siprintf>:
 800a3e4:	b40e      	push	{r1, r2, r3}
 800a3e6:	b510      	push	{r4, lr}
 800a3e8:	b09d      	sub	sp, #116	@ 0x74
 800a3ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a3ec:	9002      	str	r0, [sp, #8]
 800a3ee:	9006      	str	r0, [sp, #24]
 800a3f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3f4:	480a      	ldr	r0, [pc, #40]	@ (800a420 <siprintf+0x3c>)
 800a3f6:	9107      	str	r1, [sp, #28]
 800a3f8:	9104      	str	r1, [sp, #16]
 800a3fa:	490a      	ldr	r1, [pc, #40]	@ (800a424 <siprintf+0x40>)
 800a3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a400:	9105      	str	r1, [sp, #20]
 800a402:	2400      	movs	r4, #0
 800a404:	a902      	add	r1, sp, #8
 800a406:	6800      	ldr	r0, [r0, #0]
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a40c:	f002 fc4e 	bl	800ccac <_svfiprintf_r>
 800a410:	9b02      	ldr	r3, [sp, #8]
 800a412:	701c      	strb	r4, [r3, #0]
 800a414:	b01d      	add	sp, #116	@ 0x74
 800a416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41a:	b003      	add	sp, #12
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	2000001c 	.word	0x2000001c
 800a424:	ffff0208 	.word	0xffff0208

0800a428 <__sread>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	460c      	mov	r4, r1
 800a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a430:	f000 f900 	bl	800a634 <_read_r>
 800a434:	2800      	cmp	r0, #0
 800a436:	bfab      	itete	ge
 800a438:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a43a:	89a3      	ldrhlt	r3, [r4, #12]
 800a43c:	181b      	addge	r3, r3, r0
 800a43e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a442:	bfac      	ite	ge
 800a444:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a446:	81a3      	strhlt	r3, [r4, #12]
 800a448:	bd10      	pop	{r4, pc}

0800a44a <__swrite>:
 800a44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	461f      	mov	r7, r3
 800a450:	898b      	ldrh	r3, [r1, #12]
 800a452:	05db      	lsls	r3, r3, #23
 800a454:	4605      	mov	r5, r0
 800a456:	460c      	mov	r4, r1
 800a458:	4616      	mov	r6, r2
 800a45a:	d505      	bpl.n	800a468 <__swrite+0x1e>
 800a45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a460:	2302      	movs	r3, #2
 800a462:	2200      	movs	r2, #0
 800a464:	f000 f8d4 	bl	800a610 <_lseek_r>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a46e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	4632      	mov	r2, r6
 800a476:	463b      	mov	r3, r7
 800a478:	4628      	mov	r0, r5
 800a47a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a47e:	f000 b8eb 	b.w	800a658 <_write_r>

0800a482 <__sseek>:
 800a482:	b510      	push	{r4, lr}
 800a484:	460c      	mov	r4, r1
 800a486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48a:	f000 f8c1 	bl	800a610 <_lseek_r>
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	bf15      	itete	ne
 800a494:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a496:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a49a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a49e:	81a3      	strheq	r3, [r4, #12]
 800a4a0:	bf18      	it	ne
 800a4a2:	81a3      	strhne	r3, [r4, #12]
 800a4a4:	bd10      	pop	{r4, pc}

0800a4a6 <__sclose>:
 800a4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4aa:	f000 b8a1 	b.w	800a5f0 <_close_r>

0800a4ae <__swbuf_r>:
 800a4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b0:	460e      	mov	r6, r1
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	b118      	cbz	r0, 800a4c0 <__swbuf_r+0x12>
 800a4b8:	6a03      	ldr	r3, [r0, #32]
 800a4ba:	b90b      	cbnz	r3, 800a4c0 <__swbuf_r+0x12>
 800a4bc:	f7ff fe30 	bl	800a120 <__sinit>
 800a4c0:	69a3      	ldr	r3, [r4, #24]
 800a4c2:	60a3      	str	r3, [r4, #8]
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	071a      	lsls	r2, r3, #28
 800a4c8:	d501      	bpl.n	800a4ce <__swbuf_r+0x20>
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	b943      	cbnz	r3, 800a4e0 <__swbuf_r+0x32>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f000 f82b 	bl	800a52c <__swsetup_r>
 800a4d6:	b118      	cbz	r0, 800a4e0 <__swbuf_r+0x32>
 800a4d8:	f04f 37ff 	mov.w	r7, #4294967295
 800a4dc:	4638      	mov	r0, r7
 800a4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	6922      	ldr	r2, [r4, #16]
 800a4e4:	1a98      	subs	r0, r3, r2
 800a4e6:	6963      	ldr	r3, [r4, #20]
 800a4e8:	b2f6      	uxtb	r6, r6
 800a4ea:	4283      	cmp	r3, r0
 800a4ec:	4637      	mov	r7, r6
 800a4ee:	dc05      	bgt.n	800a4fc <__swbuf_r+0x4e>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f002 fe9c 	bl	800d230 <_fflush_r>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d1ed      	bne.n	800a4d8 <__swbuf_r+0x2a>
 800a4fc:	68a3      	ldr	r3, [r4, #8]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	60a3      	str	r3, [r4, #8]
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	6022      	str	r2, [r4, #0]
 800a508:	701e      	strb	r6, [r3, #0]
 800a50a:	6962      	ldr	r2, [r4, #20]
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	429a      	cmp	r2, r3
 800a510:	d004      	beq.n	800a51c <__swbuf_r+0x6e>
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	07db      	lsls	r3, r3, #31
 800a516:	d5e1      	bpl.n	800a4dc <__swbuf_r+0x2e>
 800a518:	2e0a      	cmp	r6, #10
 800a51a:	d1df      	bne.n	800a4dc <__swbuf_r+0x2e>
 800a51c:	4621      	mov	r1, r4
 800a51e:	4628      	mov	r0, r5
 800a520:	f002 fe86 	bl	800d230 <_fflush_r>
 800a524:	2800      	cmp	r0, #0
 800a526:	d0d9      	beq.n	800a4dc <__swbuf_r+0x2e>
 800a528:	e7d6      	b.n	800a4d8 <__swbuf_r+0x2a>
	...

0800a52c <__swsetup_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4b29      	ldr	r3, [pc, #164]	@ (800a5d4 <__swsetup_r+0xa8>)
 800a530:	4605      	mov	r5, r0
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	460c      	mov	r4, r1
 800a536:	b118      	cbz	r0, 800a540 <__swsetup_r+0x14>
 800a538:	6a03      	ldr	r3, [r0, #32]
 800a53a:	b90b      	cbnz	r3, 800a540 <__swsetup_r+0x14>
 800a53c:	f7ff fdf0 	bl	800a120 <__sinit>
 800a540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a544:	0719      	lsls	r1, r3, #28
 800a546:	d422      	bmi.n	800a58e <__swsetup_r+0x62>
 800a548:	06da      	lsls	r2, r3, #27
 800a54a:	d407      	bmi.n	800a55c <__swsetup_r+0x30>
 800a54c:	2209      	movs	r2, #9
 800a54e:	602a      	str	r2, [r5, #0]
 800a550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	f04f 30ff 	mov.w	r0, #4294967295
 800a55a:	e033      	b.n	800a5c4 <__swsetup_r+0x98>
 800a55c:	0758      	lsls	r0, r3, #29
 800a55e:	d512      	bpl.n	800a586 <__swsetup_r+0x5a>
 800a560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a562:	b141      	cbz	r1, 800a576 <__swsetup_r+0x4a>
 800a564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a568:	4299      	cmp	r1, r3
 800a56a:	d002      	beq.n	800a572 <__swsetup_r+0x46>
 800a56c:	4628      	mov	r0, r5
 800a56e:	f000 ff13 	bl	800b398 <_free_r>
 800a572:	2300      	movs	r3, #0
 800a574:	6363      	str	r3, [r4, #52]	@ 0x34
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	2300      	movs	r3, #0
 800a580:	6063      	str	r3, [r4, #4]
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	f043 0308 	orr.w	r3, r3, #8
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	b94b      	cbnz	r3, 800a5a6 <__swsetup_r+0x7a>
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a59c:	d003      	beq.n	800a5a6 <__swsetup_r+0x7a>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f002 fe93 	bl	800d2cc <__smakebuf_r>
 800a5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5aa:	f013 0201 	ands.w	r2, r3, #1
 800a5ae:	d00a      	beq.n	800a5c6 <__swsetup_r+0x9a>
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	60a2      	str	r2, [r4, #8]
 800a5b4:	6962      	ldr	r2, [r4, #20]
 800a5b6:	4252      	negs	r2, r2
 800a5b8:	61a2      	str	r2, [r4, #24]
 800a5ba:	6922      	ldr	r2, [r4, #16]
 800a5bc:	b942      	cbnz	r2, 800a5d0 <__swsetup_r+0xa4>
 800a5be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5c2:	d1c5      	bne.n	800a550 <__swsetup_r+0x24>
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	0799      	lsls	r1, r3, #30
 800a5c8:	bf58      	it	pl
 800a5ca:	6962      	ldrpl	r2, [r4, #20]
 800a5cc:	60a2      	str	r2, [r4, #8]
 800a5ce:	e7f4      	b.n	800a5ba <__swsetup_r+0x8e>
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	e7f7      	b.n	800a5c4 <__swsetup_r+0x98>
 800a5d4:	2000001c 	.word	0x2000001c

0800a5d8 <memset>:
 800a5d8:	4402      	add	r2, r0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d100      	bne.n	800a5e2 <memset+0xa>
 800a5e0:	4770      	bx	lr
 800a5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5e6:	e7f9      	b.n	800a5dc <memset+0x4>

0800a5e8 <_localeconv_r>:
 800a5e8:	4800      	ldr	r0, [pc, #0]	@ (800a5ec <_localeconv_r+0x4>)
 800a5ea:	4770      	bx	lr
 800a5ec:	2000015c 	.word	0x2000015c

0800a5f0 <_close_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4d06      	ldr	r5, [pc, #24]	@ (800a60c <_close_r+0x1c>)
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	602b      	str	r3, [r5, #0]
 800a5fc:	f7f8 fd4e 	bl	800309c <_close>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_close_r+0x1a>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	b103      	cbz	r3, 800a60a <_close_r+0x1a>
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20000630 	.word	0x20000630

0800a610 <_lseek_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d07      	ldr	r5, [pc, #28]	@ (800a630 <_lseek_r+0x20>)
 800a614:	4604      	mov	r4, r0
 800a616:	4608      	mov	r0, r1
 800a618:	4611      	mov	r1, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	f7f8 fd63 	bl	80030ea <_lseek>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_lseek_r+0x1e>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_lseek_r+0x1e>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	20000630 	.word	0x20000630

0800a634 <_read_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4d07      	ldr	r5, [pc, #28]	@ (800a654 <_read_r+0x20>)
 800a638:	4604      	mov	r4, r0
 800a63a:	4608      	mov	r0, r1
 800a63c:	4611      	mov	r1, r2
 800a63e:	2200      	movs	r2, #0
 800a640:	602a      	str	r2, [r5, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	f7f8 fcf1 	bl	800302a <_read>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_read_r+0x1e>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_read_r+0x1e>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	20000630 	.word	0x20000630

0800a658 <_write_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d07      	ldr	r5, [pc, #28]	@ (800a678 <_write_r+0x20>)
 800a65c:	4604      	mov	r4, r0
 800a65e:	4608      	mov	r0, r1
 800a660:	4611      	mov	r1, r2
 800a662:	2200      	movs	r2, #0
 800a664:	602a      	str	r2, [r5, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	f7f8 fcfc 	bl	8003064 <_write>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_write_r+0x1e>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_write_r+0x1e>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	20000630 	.word	0x20000630

0800a67c <__errno>:
 800a67c:	4b01      	ldr	r3, [pc, #4]	@ (800a684 <__errno+0x8>)
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	2000001c 	.word	0x2000001c

0800a688 <__libc_init_array>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	4d0d      	ldr	r5, [pc, #52]	@ (800a6c0 <__libc_init_array+0x38>)
 800a68c:	4c0d      	ldr	r4, [pc, #52]	@ (800a6c4 <__libc_init_array+0x3c>)
 800a68e:	1b64      	subs	r4, r4, r5
 800a690:	10a4      	asrs	r4, r4, #2
 800a692:	2600      	movs	r6, #0
 800a694:	42a6      	cmp	r6, r4
 800a696:	d109      	bne.n	800a6ac <__libc_init_array+0x24>
 800a698:	4d0b      	ldr	r5, [pc, #44]	@ (800a6c8 <__libc_init_array+0x40>)
 800a69a:	4c0c      	ldr	r4, [pc, #48]	@ (800a6cc <__libc_init_array+0x44>)
 800a69c:	f003 fbde 	bl	800de5c <_init>
 800a6a0:	1b64      	subs	r4, r4, r5
 800a6a2:	10a4      	asrs	r4, r4, #2
 800a6a4:	2600      	movs	r6, #0
 800a6a6:	42a6      	cmp	r6, r4
 800a6a8:	d105      	bne.n	800a6b6 <__libc_init_array+0x2e>
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
 800a6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b0:	4798      	blx	r3
 800a6b2:	3601      	adds	r6, #1
 800a6b4:	e7ee      	b.n	800a694 <__libc_init_array+0xc>
 800a6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ba:	4798      	blx	r3
 800a6bc:	3601      	adds	r6, #1
 800a6be:	e7f2      	b.n	800a6a6 <__libc_init_array+0x1e>
 800a6c0:	0800ec04 	.word	0x0800ec04
 800a6c4:	0800ec04 	.word	0x0800ec04
 800a6c8:	0800ec04 	.word	0x0800ec04
 800a6cc:	0800ec08 	.word	0x0800ec08

0800a6d0 <__retarget_lock_init_recursive>:
 800a6d0:	4770      	bx	lr

0800a6d2 <__retarget_lock_acquire_recursive>:
 800a6d2:	4770      	bx	lr

0800a6d4 <__retarget_lock_release_recursive>:
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <nanf>:
 800a6d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a6e0 <nanf+0x8>
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	7fc00000 	.word	0x7fc00000

0800a6e4 <quorem>:
 800a6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	6903      	ldr	r3, [r0, #16]
 800a6ea:	690c      	ldr	r4, [r1, #16]
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	db7e      	blt.n	800a7f0 <quorem+0x10c>
 800a6f2:	3c01      	subs	r4, #1
 800a6f4:	f101 0814 	add.w	r8, r1, #20
 800a6f8:	00a3      	lsls	r3, r4, #2
 800a6fa:	f100 0514 	add.w	r5, r0, #20
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a704:	9301      	str	r3, [sp, #4]
 800a706:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a70a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a70e:	3301      	adds	r3, #1
 800a710:	429a      	cmp	r2, r3
 800a712:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a716:	fbb2 f6f3 	udiv	r6, r2, r3
 800a71a:	d32e      	bcc.n	800a77a <quorem+0x96>
 800a71c:	f04f 0a00 	mov.w	sl, #0
 800a720:	46c4      	mov	ip, r8
 800a722:	46ae      	mov	lr, r5
 800a724:	46d3      	mov	fp, sl
 800a726:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a72a:	b298      	uxth	r0, r3
 800a72c:	fb06 a000 	mla	r0, r6, r0, sl
 800a730:	0c02      	lsrs	r2, r0, #16
 800a732:	0c1b      	lsrs	r3, r3, #16
 800a734:	fb06 2303 	mla	r3, r6, r3, r2
 800a738:	f8de 2000 	ldr.w	r2, [lr]
 800a73c:	b280      	uxth	r0, r0
 800a73e:	b292      	uxth	r2, r2
 800a740:	1a12      	subs	r2, r2, r0
 800a742:	445a      	add	r2, fp
 800a744:	f8de 0000 	ldr.w	r0, [lr]
 800a748:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a752:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a756:	b292      	uxth	r2, r2
 800a758:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a75c:	45e1      	cmp	r9, ip
 800a75e:	f84e 2b04 	str.w	r2, [lr], #4
 800a762:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a766:	d2de      	bcs.n	800a726 <quorem+0x42>
 800a768:	9b00      	ldr	r3, [sp, #0]
 800a76a:	58eb      	ldr	r3, [r5, r3]
 800a76c:	b92b      	cbnz	r3, 800a77a <quorem+0x96>
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	3b04      	subs	r3, #4
 800a772:	429d      	cmp	r5, r3
 800a774:	461a      	mov	r2, r3
 800a776:	d32f      	bcc.n	800a7d8 <quorem+0xf4>
 800a778:	613c      	str	r4, [r7, #16]
 800a77a:	4638      	mov	r0, r7
 800a77c:	f001 f9c8 	bl	800bb10 <__mcmp>
 800a780:	2800      	cmp	r0, #0
 800a782:	db25      	blt.n	800a7d0 <quorem+0xec>
 800a784:	4629      	mov	r1, r5
 800a786:	2000      	movs	r0, #0
 800a788:	f858 2b04 	ldr.w	r2, [r8], #4
 800a78c:	f8d1 c000 	ldr.w	ip, [r1]
 800a790:	fa1f fe82 	uxth.w	lr, r2
 800a794:	fa1f f38c 	uxth.w	r3, ip
 800a798:	eba3 030e 	sub.w	r3, r3, lr
 800a79c:	4403      	add	r3, r0
 800a79e:	0c12      	lsrs	r2, r2, #16
 800a7a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7ae:	45c1      	cmp	r9, r8
 800a7b0:	f841 3b04 	str.w	r3, [r1], #4
 800a7b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7b8:	d2e6      	bcs.n	800a788 <quorem+0xa4>
 800a7ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7c2:	b922      	cbnz	r2, 800a7ce <quorem+0xea>
 800a7c4:	3b04      	subs	r3, #4
 800a7c6:	429d      	cmp	r5, r3
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	d30b      	bcc.n	800a7e4 <quorem+0x100>
 800a7cc:	613c      	str	r4, [r7, #16]
 800a7ce:	3601      	adds	r6, #1
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	b003      	add	sp, #12
 800a7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d8:	6812      	ldr	r2, [r2, #0]
 800a7da:	3b04      	subs	r3, #4
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	d1cb      	bne.n	800a778 <quorem+0x94>
 800a7e0:	3c01      	subs	r4, #1
 800a7e2:	e7c6      	b.n	800a772 <quorem+0x8e>
 800a7e4:	6812      	ldr	r2, [r2, #0]
 800a7e6:	3b04      	subs	r3, #4
 800a7e8:	2a00      	cmp	r2, #0
 800a7ea:	d1ef      	bne.n	800a7cc <quorem+0xe8>
 800a7ec:	3c01      	subs	r4, #1
 800a7ee:	e7ea      	b.n	800a7c6 <quorem+0xe2>
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e7ee      	b.n	800a7d2 <quorem+0xee>
 800a7f4:	0000      	movs	r0, r0
	...

0800a7f8 <_dtoa_r>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	69c7      	ldr	r7, [r0, #28]
 800a7fe:	b097      	sub	sp, #92	@ 0x5c
 800a800:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a804:	ec55 4b10 	vmov	r4, r5, d0
 800a808:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a80a:	9107      	str	r1, [sp, #28]
 800a80c:	4681      	mov	r9, r0
 800a80e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a810:	9311      	str	r3, [sp, #68]	@ 0x44
 800a812:	b97f      	cbnz	r7, 800a834 <_dtoa_r+0x3c>
 800a814:	2010      	movs	r0, #16
 800a816:	f000 fe09 	bl	800b42c <malloc>
 800a81a:	4602      	mov	r2, r0
 800a81c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a820:	b920      	cbnz	r0, 800a82c <_dtoa_r+0x34>
 800a822:	4ba9      	ldr	r3, [pc, #676]	@ (800aac8 <_dtoa_r+0x2d0>)
 800a824:	21ef      	movs	r1, #239	@ 0xef
 800a826:	48a9      	ldr	r0, [pc, #676]	@ (800aacc <_dtoa_r+0x2d4>)
 800a828:	f002 fe02 	bl	800d430 <__assert_func>
 800a82c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a830:	6007      	str	r7, [r0, #0]
 800a832:	60c7      	str	r7, [r0, #12]
 800a834:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a838:	6819      	ldr	r1, [r3, #0]
 800a83a:	b159      	cbz	r1, 800a854 <_dtoa_r+0x5c>
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	604a      	str	r2, [r1, #4]
 800a840:	2301      	movs	r3, #1
 800a842:	4093      	lsls	r3, r2
 800a844:	608b      	str	r3, [r1, #8]
 800a846:	4648      	mov	r0, r9
 800a848:	f000 fee6 	bl	800b618 <_Bfree>
 800a84c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a850:	2200      	movs	r2, #0
 800a852:	601a      	str	r2, [r3, #0]
 800a854:	1e2b      	subs	r3, r5, #0
 800a856:	bfb9      	ittee	lt
 800a858:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a85c:	9305      	strlt	r3, [sp, #20]
 800a85e:	2300      	movge	r3, #0
 800a860:	6033      	strge	r3, [r6, #0]
 800a862:	9f05      	ldr	r7, [sp, #20]
 800a864:	4b9a      	ldr	r3, [pc, #616]	@ (800aad0 <_dtoa_r+0x2d8>)
 800a866:	bfbc      	itt	lt
 800a868:	2201      	movlt	r2, #1
 800a86a:	6032      	strlt	r2, [r6, #0]
 800a86c:	43bb      	bics	r3, r7
 800a86e:	d112      	bne.n	800a896 <_dtoa_r+0x9e>
 800a870:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a872:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a87c:	4323      	orrs	r3, r4
 800a87e:	f000 855a 	beq.w	800b336 <_dtoa_r+0xb3e>
 800a882:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a884:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800aae4 <_dtoa_r+0x2ec>
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 855c 	beq.w	800b346 <_dtoa_r+0xb4e>
 800a88e:	f10a 0303 	add.w	r3, sl, #3
 800a892:	f000 bd56 	b.w	800b342 <_dtoa_r+0xb4a>
 800a896:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a89a:	2200      	movs	r2, #0
 800a89c:	ec51 0b17 	vmov	r0, r1, d7
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a8a6:	f7f6 f92f 	bl	8000b08 <__aeabi_dcmpeq>
 800a8aa:	4680      	mov	r8, r0
 800a8ac:	b158      	cbz	r0, 800a8c6 <_dtoa_r+0xce>
 800a8ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8b6:	b113      	cbz	r3, 800a8be <_dtoa_r+0xc6>
 800a8b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a8ba:	4b86      	ldr	r3, [pc, #536]	@ (800aad4 <_dtoa_r+0x2dc>)
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800aae8 <_dtoa_r+0x2f0>
 800a8c2:	f000 bd40 	b.w	800b346 <_dtoa_r+0xb4e>
 800a8c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a8ca:	aa14      	add	r2, sp, #80	@ 0x50
 800a8cc:	a915      	add	r1, sp, #84	@ 0x54
 800a8ce:	4648      	mov	r0, r9
 800a8d0:	f001 fa3e 	bl	800bd50 <__d2b>
 800a8d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a8d8:	9002      	str	r0, [sp, #8]
 800a8da:	2e00      	cmp	r6, #0
 800a8dc:	d078      	beq.n	800a9d0 <_dtoa_r+0x1d8>
 800a8de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a8e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a8ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a8f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a8f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	4b76      	ldr	r3, [pc, #472]	@ (800aad8 <_dtoa_r+0x2e0>)
 800a8fe:	f7f5 fce3 	bl	80002c8 <__aeabi_dsub>
 800a902:	a36b      	add	r3, pc, #428	@ (adr r3, 800aab0 <_dtoa_r+0x2b8>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	f7f5 fe96 	bl	8000638 <__aeabi_dmul>
 800a90c:	a36a      	add	r3, pc, #424	@ (adr r3, 800aab8 <_dtoa_r+0x2c0>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	f7f5 fcdb 	bl	80002cc <__adddf3>
 800a916:	4604      	mov	r4, r0
 800a918:	4630      	mov	r0, r6
 800a91a:	460d      	mov	r5, r1
 800a91c:	f7f5 fe22 	bl	8000564 <__aeabi_i2d>
 800a920:	a367      	add	r3, pc, #412	@ (adr r3, 800aac0 <_dtoa_r+0x2c8>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f7f5 fe87 	bl	8000638 <__aeabi_dmul>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fccb 	bl	80002cc <__adddf3>
 800a936:	4604      	mov	r4, r0
 800a938:	460d      	mov	r5, r1
 800a93a:	f7f6 f92d 	bl	8000b98 <__aeabi_d2iz>
 800a93e:	2200      	movs	r2, #0
 800a940:	4607      	mov	r7, r0
 800a942:	2300      	movs	r3, #0
 800a944:	4620      	mov	r0, r4
 800a946:	4629      	mov	r1, r5
 800a948:	f7f6 f8e8 	bl	8000b1c <__aeabi_dcmplt>
 800a94c:	b140      	cbz	r0, 800a960 <_dtoa_r+0x168>
 800a94e:	4638      	mov	r0, r7
 800a950:	f7f5 fe08 	bl	8000564 <__aeabi_i2d>
 800a954:	4622      	mov	r2, r4
 800a956:	462b      	mov	r3, r5
 800a958:	f7f6 f8d6 	bl	8000b08 <__aeabi_dcmpeq>
 800a95c:	b900      	cbnz	r0, 800a960 <_dtoa_r+0x168>
 800a95e:	3f01      	subs	r7, #1
 800a960:	2f16      	cmp	r7, #22
 800a962:	d852      	bhi.n	800aa0a <_dtoa_r+0x212>
 800a964:	4b5d      	ldr	r3, [pc, #372]	@ (800aadc <_dtoa_r+0x2e4>)
 800a966:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a972:	f7f6 f8d3 	bl	8000b1c <__aeabi_dcmplt>
 800a976:	2800      	cmp	r0, #0
 800a978:	d049      	beq.n	800aa0e <_dtoa_r+0x216>
 800a97a:	3f01      	subs	r7, #1
 800a97c:	2300      	movs	r3, #0
 800a97e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a980:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a982:	1b9b      	subs	r3, r3, r6
 800a984:	1e5a      	subs	r2, r3, #1
 800a986:	bf45      	ittet	mi
 800a988:	f1c3 0301 	rsbmi	r3, r3, #1
 800a98c:	9300      	strmi	r3, [sp, #0]
 800a98e:	2300      	movpl	r3, #0
 800a990:	2300      	movmi	r3, #0
 800a992:	9206      	str	r2, [sp, #24]
 800a994:	bf54      	ite	pl
 800a996:	9300      	strpl	r3, [sp, #0]
 800a998:	9306      	strmi	r3, [sp, #24]
 800a99a:	2f00      	cmp	r7, #0
 800a99c:	db39      	blt.n	800aa12 <_dtoa_r+0x21a>
 800a99e:	9b06      	ldr	r3, [sp, #24]
 800a9a0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a9a2:	443b      	add	r3, r7
 800a9a4:	9306      	str	r3, [sp, #24]
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	9308      	str	r3, [sp, #32]
 800a9aa:	9b07      	ldr	r3, [sp, #28]
 800a9ac:	2b09      	cmp	r3, #9
 800a9ae:	d863      	bhi.n	800aa78 <_dtoa_r+0x280>
 800a9b0:	2b05      	cmp	r3, #5
 800a9b2:	bfc4      	itt	gt
 800a9b4:	3b04      	subgt	r3, #4
 800a9b6:	9307      	strgt	r3, [sp, #28]
 800a9b8:	9b07      	ldr	r3, [sp, #28]
 800a9ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a9be:	bfcc      	ite	gt
 800a9c0:	2400      	movgt	r4, #0
 800a9c2:	2401      	movle	r4, #1
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d863      	bhi.n	800aa90 <_dtoa_r+0x298>
 800a9c8:	e8df f003 	tbb	[pc, r3]
 800a9cc:	2b375452 	.word	0x2b375452
 800a9d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a9d4:	441e      	add	r6, r3
 800a9d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a9da:	2b20      	cmp	r3, #32
 800a9dc:	bfc1      	itttt	gt
 800a9de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a9e2:	409f      	lslgt	r7, r3
 800a9e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a9e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a9ec:	bfd6      	itet	le
 800a9ee:	f1c3 0320 	rsble	r3, r3, #32
 800a9f2:	ea47 0003 	orrgt.w	r0, r7, r3
 800a9f6:	fa04 f003 	lslle.w	r0, r4, r3
 800a9fa:	f7f5 fda3 	bl	8000544 <__aeabi_ui2d>
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa04:	3e01      	subs	r6, #1
 800aa06:	9212      	str	r2, [sp, #72]	@ 0x48
 800aa08:	e776      	b.n	800a8f8 <_dtoa_r+0x100>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e7b7      	b.n	800a97e <_dtoa_r+0x186>
 800aa0e:	9010      	str	r0, [sp, #64]	@ 0x40
 800aa10:	e7b6      	b.n	800a980 <_dtoa_r+0x188>
 800aa12:	9b00      	ldr	r3, [sp, #0]
 800aa14:	1bdb      	subs	r3, r3, r7
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	427b      	negs	r3, r7
 800aa1a:	9308      	str	r3, [sp, #32]
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	930d      	str	r3, [sp, #52]	@ 0x34
 800aa20:	e7c3      	b.n	800a9aa <_dtoa_r+0x1b2>
 800aa22:	2301      	movs	r3, #1
 800aa24:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa28:	eb07 0b03 	add.w	fp, r7, r3
 800aa2c:	f10b 0301 	add.w	r3, fp, #1
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	9303      	str	r3, [sp, #12]
 800aa34:	bfb8      	it	lt
 800aa36:	2301      	movlt	r3, #1
 800aa38:	e006      	b.n	800aa48 <_dtoa_r+0x250>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	dd28      	ble.n	800aa96 <_dtoa_r+0x29e>
 800aa44:	469b      	mov	fp, r3
 800aa46:	9303      	str	r3, [sp, #12]
 800aa48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	2204      	movs	r2, #4
 800aa50:	f102 0514 	add.w	r5, r2, #20
 800aa54:	429d      	cmp	r5, r3
 800aa56:	d926      	bls.n	800aaa6 <_dtoa_r+0x2ae>
 800aa58:	6041      	str	r1, [r0, #4]
 800aa5a:	4648      	mov	r0, r9
 800aa5c:	f000 fd9c 	bl	800b598 <_Balloc>
 800aa60:	4682      	mov	sl, r0
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d142      	bne.n	800aaec <_dtoa_r+0x2f4>
 800aa66:	4b1e      	ldr	r3, [pc, #120]	@ (800aae0 <_dtoa_r+0x2e8>)
 800aa68:	4602      	mov	r2, r0
 800aa6a:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa6e:	e6da      	b.n	800a826 <_dtoa_r+0x2e>
 800aa70:	2300      	movs	r3, #0
 800aa72:	e7e3      	b.n	800aa3c <_dtoa_r+0x244>
 800aa74:	2300      	movs	r3, #0
 800aa76:	e7d5      	b.n	800aa24 <_dtoa_r+0x22c>
 800aa78:	2401      	movs	r4, #1
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9307      	str	r3, [sp, #28]
 800aa7e:	9409      	str	r4, [sp, #36]	@ 0x24
 800aa80:	f04f 3bff 	mov.w	fp, #4294967295
 800aa84:	2200      	movs	r2, #0
 800aa86:	f8cd b00c 	str.w	fp, [sp, #12]
 800aa8a:	2312      	movs	r3, #18
 800aa8c:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa8e:	e7db      	b.n	800aa48 <_dtoa_r+0x250>
 800aa90:	2301      	movs	r3, #1
 800aa92:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa94:	e7f4      	b.n	800aa80 <_dtoa_r+0x288>
 800aa96:	f04f 0b01 	mov.w	fp, #1
 800aa9a:	f8cd b00c 	str.w	fp, [sp, #12]
 800aa9e:	465b      	mov	r3, fp
 800aaa0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800aaa4:	e7d0      	b.n	800aa48 <_dtoa_r+0x250>
 800aaa6:	3101      	adds	r1, #1
 800aaa8:	0052      	lsls	r2, r2, #1
 800aaaa:	e7d1      	b.n	800aa50 <_dtoa_r+0x258>
 800aaac:	f3af 8000 	nop.w
 800aab0:	636f4361 	.word	0x636f4361
 800aab4:	3fd287a7 	.word	0x3fd287a7
 800aab8:	8b60c8b3 	.word	0x8b60c8b3
 800aabc:	3fc68a28 	.word	0x3fc68a28
 800aac0:	509f79fb 	.word	0x509f79fb
 800aac4:	3fd34413 	.word	0x3fd34413
 800aac8:	0800e80e 	.word	0x0800e80e
 800aacc:	0800e825 	.word	0x0800e825
 800aad0:	7ff00000 	.word	0x7ff00000
 800aad4:	0800e7d9 	.word	0x0800e7d9
 800aad8:	3ff80000 	.word	0x3ff80000
 800aadc:	0800e9d8 	.word	0x0800e9d8
 800aae0:	0800e87d 	.word	0x0800e87d
 800aae4:	0800e80a 	.word	0x0800e80a
 800aae8:	0800e7d8 	.word	0x0800e7d8
 800aaec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aaf0:	6018      	str	r0, [r3, #0]
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	2b0e      	cmp	r3, #14
 800aaf6:	f200 80a1 	bhi.w	800ac3c <_dtoa_r+0x444>
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	f000 809e 	beq.w	800ac3c <_dtoa_r+0x444>
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	dd33      	ble.n	800ab6c <_dtoa_r+0x374>
 800ab04:	4b9c      	ldr	r3, [pc, #624]	@ (800ad78 <_dtoa_r+0x580>)
 800ab06:	f007 020f 	and.w	r2, r7, #15
 800ab0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab0e:	ed93 7b00 	vldr	d7, [r3]
 800ab12:	05f8      	lsls	r0, r7, #23
 800ab14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ab18:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab1c:	d516      	bpl.n	800ab4c <_dtoa_r+0x354>
 800ab1e:	4b97      	ldr	r3, [pc, #604]	@ (800ad7c <_dtoa_r+0x584>)
 800ab20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab28:	f7f5 feb0 	bl	800088c <__aeabi_ddiv>
 800ab2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab30:	f004 040f 	and.w	r4, r4, #15
 800ab34:	2603      	movs	r6, #3
 800ab36:	4d91      	ldr	r5, [pc, #580]	@ (800ad7c <_dtoa_r+0x584>)
 800ab38:	b954      	cbnz	r4, 800ab50 <_dtoa_r+0x358>
 800ab3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab42:	f7f5 fea3 	bl	800088c <__aeabi_ddiv>
 800ab46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab4a:	e028      	b.n	800ab9e <_dtoa_r+0x3a6>
 800ab4c:	2602      	movs	r6, #2
 800ab4e:	e7f2      	b.n	800ab36 <_dtoa_r+0x33e>
 800ab50:	07e1      	lsls	r1, r4, #31
 800ab52:	d508      	bpl.n	800ab66 <_dtoa_r+0x36e>
 800ab54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ab58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab5c:	f7f5 fd6c 	bl	8000638 <__aeabi_dmul>
 800ab60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab64:	3601      	adds	r6, #1
 800ab66:	1064      	asrs	r4, r4, #1
 800ab68:	3508      	adds	r5, #8
 800ab6a:	e7e5      	b.n	800ab38 <_dtoa_r+0x340>
 800ab6c:	f000 80af 	beq.w	800acce <_dtoa_r+0x4d6>
 800ab70:	427c      	negs	r4, r7
 800ab72:	4b81      	ldr	r3, [pc, #516]	@ (800ad78 <_dtoa_r+0x580>)
 800ab74:	4d81      	ldr	r5, [pc, #516]	@ (800ad7c <_dtoa_r+0x584>)
 800ab76:	f004 020f 	and.w	r2, r4, #15
 800ab7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab86:	f7f5 fd57 	bl	8000638 <__aeabi_dmul>
 800ab8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab8e:	1124      	asrs	r4, r4, #4
 800ab90:	2300      	movs	r3, #0
 800ab92:	2602      	movs	r6, #2
 800ab94:	2c00      	cmp	r4, #0
 800ab96:	f040 808f 	bne.w	800acb8 <_dtoa_r+0x4c0>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1d3      	bne.n	800ab46 <_dtoa_r+0x34e>
 800ab9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aba0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 8094 	beq.w	800acd2 <_dtoa_r+0x4da>
 800abaa:	4b75      	ldr	r3, [pc, #468]	@ (800ad80 <_dtoa_r+0x588>)
 800abac:	2200      	movs	r2, #0
 800abae:	4620      	mov	r0, r4
 800abb0:	4629      	mov	r1, r5
 800abb2:	f7f5 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f000 808b 	beq.w	800acd2 <_dtoa_r+0x4da>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 8087 	beq.w	800acd2 <_dtoa_r+0x4da>
 800abc4:	f1bb 0f00 	cmp.w	fp, #0
 800abc8:	dd34      	ble.n	800ac34 <_dtoa_r+0x43c>
 800abca:	4620      	mov	r0, r4
 800abcc:	4b6d      	ldr	r3, [pc, #436]	@ (800ad84 <_dtoa_r+0x58c>)
 800abce:	2200      	movs	r2, #0
 800abd0:	4629      	mov	r1, r5
 800abd2:	f7f5 fd31 	bl	8000638 <__aeabi_dmul>
 800abd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abda:	f107 38ff 	add.w	r8, r7, #4294967295
 800abde:	3601      	adds	r6, #1
 800abe0:	465c      	mov	r4, fp
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7f5 fcbe 	bl	8000564 <__aeabi_i2d>
 800abe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abec:	f7f5 fd24 	bl	8000638 <__aeabi_dmul>
 800abf0:	4b65      	ldr	r3, [pc, #404]	@ (800ad88 <_dtoa_r+0x590>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	f7f5 fb6a 	bl	80002cc <__adddf3>
 800abf8:	4605      	mov	r5, r0
 800abfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800abfe:	2c00      	cmp	r4, #0
 800ac00:	d16a      	bne.n	800acd8 <_dtoa_r+0x4e0>
 800ac02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac06:	4b61      	ldr	r3, [pc, #388]	@ (800ad8c <_dtoa_r+0x594>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f7f5 fb5d 	bl	80002c8 <__aeabi_dsub>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac16:	462a      	mov	r2, r5
 800ac18:	4633      	mov	r3, r6
 800ac1a:	f7f5 ff9d 	bl	8000b58 <__aeabi_dcmpgt>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	f040 8298 	bne.w	800b154 <_dtoa_r+0x95c>
 800ac24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac28:	462a      	mov	r2, r5
 800ac2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac2e:	f7f5 ff75 	bl	8000b1c <__aeabi_dcmplt>
 800ac32:	bb38      	cbnz	r0, 800ac84 <_dtoa_r+0x48c>
 800ac34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ac38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f2c0 8157 	blt.w	800aef2 <_dtoa_r+0x6fa>
 800ac44:	2f0e      	cmp	r7, #14
 800ac46:	f300 8154 	bgt.w	800aef2 <_dtoa_r+0x6fa>
 800ac4a:	4b4b      	ldr	r3, [pc, #300]	@ (800ad78 <_dtoa_r+0x580>)
 800ac4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac50:	ed93 7b00 	vldr	d7, [r3]
 800ac54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	ed8d 7b00 	vstr	d7, [sp]
 800ac5c:	f280 80e5 	bge.w	800ae2a <_dtoa_r+0x632>
 800ac60:	9b03      	ldr	r3, [sp, #12]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f300 80e1 	bgt.w	800ae2a <_dtoa_r+0x632>
 800ac68:	d10c      	bne.n	800ac84 <_dtoa_r+0x48c>
 800ac6a:	4b48      	ldr	r3, [pc, #288]	@ (800ad8c <_dtoa_r+0x594>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	ec51 0b17 	vmov	r0, r1, d7
 800ac72:	f7f5 fce1 	bl	8000638 <__aeabi_dmul>
 800ac76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac7a:	f7f5 ff63 	bl	8000b44 <__aeabi_dcmpge>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	f000 8266 	beq.w	800b150 <_dtoa_r+0x958>
 800ac84:	2400      	movs	r4, #0
 800ac86:	4625      	mov	r5, r4
 800ac88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac8a:	4656      	mov	r6, sl
 800ac8c:	ea6f 0803 	mvn.w	r8, r3
 800ac90:	2700      	movs	r7, #0
 800ac92:	4621      	mov	r1, r4
 800ac94:	4648      	mov	r0, r9
 800ac96:	f000 fcbf 	bl	800b618 <_Bfree>
 800ac9a:	2d00      	cmp	r5, #0
 800ac9c:	f000 80bd 	beq.w	800ae1a <_dtoa_r+0x622>
 800aca0:	b12f      	cbz	r7, 800acae <_dtoa_r+0x4b6>
 800aca2:	42af      	cmp	r7, r5
 800aca4:	d003      	beq.n	800acae <_dtoa_r+0x4b6>
 800aca6:	4639      	mov	r1, r7
 800aca8:	4648      	mov	r0, r9
 800acaa:	f000 fcb5 	bl	800b618 <_Bfree>
 800acae:	4629      	mov	r1, r5
 800acb0:	4648      	mov	r0, r9
 800acb2:	f000 fcb1 	bl	800b618 <_Bfree>
 800acb6:	e0b0      	b.n	800ae1a <_dtoa_r+0x622>
 800acb8:	07e2      	lsls	r2, r4, #31
 800acba:	d505      	bpl.n	800acc8 <_dtoa_r+0x4d0>
 800acbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acc0:	f7f5 fcba 	bl	8000638 <__aeabi_dmul>
 800acc4:	3601      	adds	r6, #1
 800acc6:	2301      	movs	r3, #1
 800acc8:	1064      	asrs	r4, r4, #1
 800acca:	3508      	adds	r5, #8
 800accc:	e762      	b.n	800ab94 <_dtoa_r+0x39c>
 800acce:	2602      	movs	r6, #2
 800acd0:	e765      	b.n	800ab9e <_dtoa_r+0x3a6>
 800acd2:	9c03      	ldr	r4, [sp, #12]
 800acd4:	46b8      	mov	r8, r7
 800acd6:	e784      	b.n	800abe2 <_dtoa_r+0x3ea>
 800acd8:	4b27      	ldr	r3, [pc, #156]	@ (800ad78 <_dtoa_r+0x580>)
 800acda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ace0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ace4:	4454      	add	r4, sl
 800ace6:	2900      	cmp	r1, #0
 800ace8:	d054      	beq.n	800ad94 <_dtoa_r+0x59c>
 800acea:	4929      	ldr	r1, [pc, #164]	@ (800ad90 <_dtoa_r+0x598>)
 800acec:	2000      	movs	r0, #0
 800acee:	f7f5 fdcd 	bl	800088c <__aeabi_ddiv>
 800acf2:	4633      	mov	r3, r6
 800acf4:	462a      	mov	r2, r5
 800acf6:	f7f5 fae7 	bl	80002c8 <__aeabi_dsub>
 800acfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800acfe:	4656      	mov	r6, sl
 800ad00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad04:	f7f5 ff48 	bl	8000b98 <__aeabi_d2iz>
 800ad08:	4605      	mov	r5, r0
 800ad0a:	f7f5 fc2b 	bl	8000564 <__aeabi_i2d>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	460b      	mov	r3, r1
 800ad12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad16:	f7f5 fad7 	bl	80002c8 <__aeabi_dsub>
 800ad1a:	3530      	adds	r5, #48	@ 0x30
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad24:	f806 5b01 	strb.w	r5, [r6], #1
 800ad28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad2c:	f7f5 fef6 	bl	8000b1c <__aeabi_dcmplt>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d172      	bne.n	800ae1a <_dtoa_r+0x622>
 800ad34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad38:	4911      	ldr	r1, [pc, #68]	@ (800ad80 <_dtoa_r+0x588>)
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	f7f5 fac4 	bl	80002c8 <__aeabi_dsub>
 800ad40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad44:	f7f5 feea 	bl	8000b1c <__aeabi_dcmplt>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	f040 80b4 	bne.w	800aeb6 <_dtoa_r+0x6be>
 800ad4e:	42a6      	cmp	r6, r4
 800ad50:	f43f af70 	beq.w	800ac34 <_dtoa_r+0x43c>
 800ad54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad58:	4b0a      	ldr	r3, [pc, #40]	@ (800ad84 <_dtoa_r+0x58c>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f7f5 fc6c 	bl	8000638 <__aeabi_dmul>
 800ad60:	4b08      	ldr	r3, [pc, #32]	@ (800ad84 <_dtoa_r+0x58c>)
 800ad62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad66:	2200      	movs	r2, #0
 800ad68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad6c:	f7f5 fc64 	bl	8000638 <__aeabi_dmul>
 800ad70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad74:	e7c4      	b.n	800ad00 <_dtoa_r+0x508>
 800ad76:	bf00      	nop
 800ad78:	0800e9d8 	.word	0x0800e9d8
 800ad7c:	0800e9b0 	.word	0x0800e9b0
 800ad80:	3ff00000 	.word	0x3ff00000
 800ad84:	40240000 	.word	0x40240000
 800ad88:	401c0000 	.word	0x401c0000
 800ad8c:	40140000 	.word	0x40140000
 800ad90:	3fe00000 	.word	0x3fe00000
 800ad94:	4631      	mov	r1, r6
 800ad96:	4628      	mov	r0, r5
 800ad98:	f7f5 fc4e 	bl	8000638 <__aeabi_dmul>
 800ad9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ada0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ada2:	4656      	mov	r6, sl
 800ada4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ada8:	f7f5 fef6 	bl	8000b98 <__aeabi_d2iz>
 800adac:	4605      	mov	r5, r0
 800adae:	f7f5 fbd9 	bl	8000564 <__aeabi_i2d>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adba:	f7f5 fa85 	bl	80002c8 <__aeabi_dsub>
 800adbe:	3530      	adds	r5, #48	@ 0x30
 800adc0:	f806 5b01 	strb.w	r5, [r6], #1
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	42a6      	cmp	r6, r4
 800adca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800adce:	f04f 0200 	mov.w	r2, #0
 800add2:	d124      	bne.n	800ae1e <_dtoa_r+0x626>
 800add4:	4baf      	ldr	r3, [pc, #700]	@ (800b094 <_dtoa_r+0x89c>)
 800add6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800adda:	f7f5 fa77 	bl	80002cc <__adddf3>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ade6:	f7f5 feb7 	bl	8000b58 <__aeabi_dcmpgt>
 800adea:	2800      	cmp	r0, #0
 800adec:	d163      	bne.n	800aeb6 <_dtoa_r+0x6be>
 800adee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800adf2:	49a8      	ldr	r1, [pc, #672]	@ (800b094 <_dtoa_r+0x89c>)
 800adf4:	2000      	movs	r0, #0
 800adf6:	f7f5 fa67 	bl	80002c8 <__aeabi_dsub>
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae02:	f7f5 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f43f af14 	beq.w	800ac34 <_dtoa_r+0x43c>
 800ae0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ae0e:	1e73      	subs	r3, r6, #1
 800ae10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae16:	2b30      	cmp	r3, #48	@ 0x30
 800ae18:	d0f8      	beq.n	800ae0c <_dtoa_r+0x614>
 800ae1a:	4647      	mov	r7, r8
 800ae1c:	e03b      	b.n	800ae96 <_dtoa_r+0x69e>
 800ae1e:	4b9e      	ldr	r3, [pc, #632]	@ (800b098 <_dtoa_r+0x8a0>)
 800ae20:	f7f5 fc0a 	bl	8000638 <__aeabi_dmul>
 800ae24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae28:	e7bc      	b.n	800ada4 <_dtoa_r+0x5ac>
 800ae2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ae2e:	4656      	mov	r6, sl
 800ae30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae34:	4620      	mov	r0, r4
 800ae36:	4629      	mov	r1, r5
 800ae38:	f7f5 fd28 	bl	800088c <__aeabi_ddiv>
 800ae3c:	f7f5 feac 	bl	8000b98 <__aeabi_d2iz>
 800ae40:	4680      	mov	r8, r0
 800ae42:	f7f5 fb8f 	bl	8000564 <__aeabi_i2d>
 800ae46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae4a:	f7f5 fbf5 	bl	8000638 <__aeabi_dmul>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4620      	mov	r0, r4
 800ae54:	4629      	mov	r1, r5
 800ae56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae5a:	f7f5 fa35 	bl	80002c8 <__aeabi_dsub>
 800ae5e:	f806 4b01 	strb.w	r4, [r6], #1
 800ae62:	9d03      	ldr	r5, [sp, #12]
 800ae64:	eba6 040a 	sub.w	r4, r6, sl
 800ae68:	42a5      	cmp	r5, r4
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	d133      	bne.n	800aed8 <_dtoa_r+0x6e0>
 800ae70:	f7f5 fa2c 	bl	80002cc <__adddf3>
 800ae74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae78:	4604      	mov	r4, r0
 800ae7a:	460d      	mov	r5, r1
 800ae7c:	f7f5 fe6c 	bl	8000b58 <__aeabi_dcmpgt>
 800ae80:	b9c0      	cbnz	r0, 800aeb4 <_dtoa_r+0x6bc>
 800ae82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 fe3d 	bl	8000b08 <__aeabi_dcmpeq>
 800ae8e:	b110      	cbz	r0, 800ae96 <_dtoa_r+0x69e>
 800ae90:	f018 0f01 	tst.w	r8, #1
 800ae94:	d10e      	bne.n	800aeb4 <_dtoa_r+0x6bc>
 800ae96:	9902      	ldr	r1, [sp, #8]
 800ae98:	4648      	mov	r0, r9
 800ae9a:	f000 fbbd 	bl	800b618 <_Bfree>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	7033      	strb	r3, [r6, #0]
 800aea2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aea4:	3701      	adds	r7, #1
 800aea6:	601f      	str	r7, [r3, #0]
 800aea8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f000 824b 	beq.w	800b346 <_dtoa_r+0xb4e>
 800aeb0:	601e      	str	r6, [r3, #0]
 800aeb2:	e248      	b.n	800b346 <_dtoa_r+0xb4e>
 800aeb4:	46b8      	mov	r8, r7
 800aeb6:	4633      	mov	r3, r6
 800aeb8:	461e      	mov	r6, r3
 800aeba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aebe:	2a39      	cmp	r2, #57	@ 0x39
 800aec0:	d106      	bne.n	800aed0 <_dtoa_r+0x6d8>
 800aec2:	459a      	cmp	sl, r3
 800aec4:	d1f8      	bne.n	800aeb8 <_dtoa_r+0x6c0>
 800aec6:	2230      	movs	r2, #48	@ 0x30
 800aec8:	f108 0801 	add.w	r8, r8, #1
 800aecc:	f88a 2000 	strb.w	r2, [sl]
 800aed0:	781a      	ldrb	r2, [r3, #0]
 800aed2:	3201      	adds	r2, #1
 800aed4:	701a      	strb	r2, [r3, #0]
 800aed6:	e7a0      	b.n	800ae1a <_dtoa_r+0x622>
 800aed8:	4b6f      	ldr	r3, [pc, #444]	@ (800b098 <_dtoa_r+0x8a0>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	f7f5 fbac 	bl	8000638 <__aeabi_dmul>
 800aee0:	2200      	movs	r2, #0
 800aee2:	2300      	movs	r3, #0
 800aee4:	4604      	mov	r4, r0
 800aee6:	460d      	mov	r5, r1
 800aee8:	f7f5 fe0e 	bl	8000b08 <__aeabi_dcmpeq>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d09f      	beq.n	800ae30 <_dtoa_r+0x638>
 800aef0:	e7d1      	b.n	800ae96 <_dtoa_r+0x69e>
 800aef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aef4:	2a00      	cmp	r2, #0
 800aef6:	f000 80ea 	beq.w	800b0ce <_dtoa_r+0x8d6>
 800aefa:	9a07      	ldr	r2, [sp, #28]
 800aefc:	2a01      	cmp	r2, #1
 800aefe:	f300 80cd 	bgt.w	800b09c <_dtoa_r+0x8a4>
 800af02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af04:	2a00      	cmp	r2, #0
 800af06:	f000 80c1 	beq.w	800b08c <_dtoa_r+0x894>
 800af0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af0e:	9c08      	ldr	r4, [sp, #32]
 800af10:	9e00      	ldr	r6, [sp, #0]
 800af12:	9a00      	ldr	r2, [sp, #0]
 800af14:	441a      	add	r2, r3
 800af16:	9200      	str	r2, [sp, #0]
 800af18:	9a06      	ldr	r2, [sp, #24]
 800af1a:	2101      	movs	r1, #1
 800af1c:	441a      	add	r2, r3
 800af1e:	4648      	mov	r0, r9
 800af20:	9206      	str	r2, [sp, #24]
 800af22:	f000 fc77 	bl	800b814 <__i2b>
 800af26:	4605      	mov	r5, r0
 800af28:	b166      	cbz	r6, 800af44 <_dtoa_r+0x74c>
 800af2a:	9b06      	ldr	r3, [sp, #24]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dd09      	ble.n	800af44 <_dtoa_r+0x74c>
 800af30:	42b3      	cmp	r3, r6
 800af32:	9a00      	ldr	r2, [sp, #0]
 800af34:	bfa8      	it	ge
 800af36:	4633      	movge	r3, r6
 800af38:	1ad2      	subs	r2, r2, r3
 800af3a:	9200      	str	r2, [sp, #0]
 800af3c:	9a06      	ldr	r2, [sp, #24]
 800af3e:	1af6      	subs	r6, r6, r3
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	9306      	str	r3, [sp, #24]
 800af44:	9b08      	ldr	r3, [sp, #32]
 800af46:	b30b      	cbz	r3, 800af8c <_dtoa_r+0x794>
 800af48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 80c6 	beq.w	800b0dc <_dtoa_r+0x8e4>
 800af50:	2c00      	cmp	r4, #0
 800af52:	f000 80c0 	beq.w	800b0d6 <_dtoa_r+0x8de>
 800af56:	4629      	mov	r1, r5
 800af58:	4622      	mov	r2, r4
 800af5a:	4648      	mov	r0, r9
 800af5c:	f000 fd12 	bl	800b984 <__pow5mult>
 800af60:	9a02      	ldr	r2, [sp, #8]
 800af62:	4601      	mov	r1, r0
 800af64:	4605      	mov	r5, r0
 800af66:	4648      	mov	r0, r9
 800af68:	f000 fc6a 	bl	800b840 <__multiply>
 800af6c:	9902      	ldr	r1, [sp, #8]
 800af6e:	4680      	mov	r8, r0
 800af70:	4648      	mov	r0, r9
 800af72:	f000 fb51 	bl	800b618 <_Bfree>
 800af76:	9b08      	ldr	r3, [sp, #32]
 800af78:	1b1b      	subs	r3, r3, r4
 800af7a:	9308      	str	r3, [sp, #32]
 800af7c:	f000 80b1 	beq.w	800b0e2 <_dtoa_r+0x8ea>
 800af80:	9a08      	ldr	r2, [sp, #32]
 800af82:	4641      	mov	r1, r8
 800af84:	4648      	mov	r0, r9
 800af86:	f000 fcfd 	bl	800b984 <__pow5mult>
 800af8a:	9002      	str	r0, [sp, #8]
 800af8c:	2101      	movs	r1, #1
 800af8e:	4648      	mov	r0, r9
 800af90:	f000 fc40 	bl	800b814 <__i2b>
 800af94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af96:	4604      	mov	r4, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 81d8 	beq.w	800b34e <_dtoa_r+0xb56>
 800af9e:	461a      	mov	r2, r3
 800afa0:	4601      	mov	r1, r0
 800afa2:	4648      	mov	r0, r9
 800afa4:	f000 fcee 	bl	800b984 <__pow5mult>
 800afa8:	9b07      	ldr	r3, [sp, #28]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	4604      	mov	r4, r0
 800afae:	f300 809f 	bgt.w	800b0f0 <_dtoa_r+0x8f8>
 800afb2:	9b04      	ldr	r3, [sp, #16]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f040 8097 	bne.w	800b0e8 <_dtoa_r+0x8f0>
 800afba:	9b05      	ldr	r3, [sp, #20]
 800afbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f040 8093 	bne.w	800b0ec <_dtoa_r+0x8f4>
 800afc6:	9b05      	ldr	r3, [sp, #20]
 800afc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afcc:	0d1b      	lsrs	r3, r3, #20
 800afce:	051b      	lsls	r3, r3, #20
 800afd0:	b133      	cbz	r3, 800afe0 <_dtoa_r+0x7e8>
 800afd2:	9b00      	ldr	r3, [sp, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	9b06      	ldr	r3, [sp, #24]
 800afda:	3301      	adds	r3, #1
 800afdc:	9306      	str	r3, [sp, #24]
 800afde:	2301      	movs	r3, #1
 800afe0:	9308      	str	r3, [sp, #32]
 800afe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 81b8 	beq.w	800b35a <_dtoa_r+0xb62>
 800afea:	6923      	ldr	r3, [r4, #16]
 800afec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aff0:	6918      	ldr	r0, [r3, #16]
 800aff2:	f000 fbc3 	bl	800b77c <__hi0bits>
 800aff6:	f1c0 0020 	rsb	r0, r0, #32
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	4418      	add	r0, r3
 800affe:	f010 001f 	ands.w	r0, r0, #31
 800b002:	f000 8082 	beq.w	800b10a <_dtoa_r+0x912>
 800b006:	f1c0 0320 	rsb	r3, r0, #32
 800b00a:	2b04      	cmp	r3, #4
 800b00c:	dd73      	ble.n	800b0f6 <_dtoa_r+0x8fe>
 800b00e:	9b00      	ldr	r3, [sp, #0]
 800b010:	f1c0 001c 	rsb	r0, r0, #28
 800b014:	4403      	add	r3, r0
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	9b06      	ldr	r3, [sp, #24]
 800b01a:	4403      	add	r3, r0
 800b01c:	4406      	add	r6, r0
 800b01e:	9306      	str	r3, [sp, #24]
 800b020:	9b00      	ldr	r3, [sp, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	dd05      	ble.n	800b032 <_dtoa_r+0x83a>
 800b026:	9902      	ldr	r1, [sp, #8]
 800b028:	461a      	mov	r2, r3
 800b02a:	4648      	mov	r0, r9
 800b02c:	f000 fd04 	bl	800ba38 <__lshift>
 800b030:	9002      	str	r0, [sp, #8]
 800b032:	9b06      	ldr	r3, [sp, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	dd05      	ble.n	800b044 <_dtoa_r+0x84c>
 800b038:	4621      	mov	r1, r4
 800b03a:	461a      	mov	r2, r3
 800b03c:	4648      	mov	r0, r9
 800b03e:	f000 fcfb 	bl	800ba38 <__lshift>
 800b042:	4604      	mov	r4, r0
 800b044:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d061      	beq.n	800b10e <_dtoa_r+0x916>
 800b04a:	9802      	ldr	r0, [sp, #8]
 800b04c:	4621      	mov	r1, r4
 800b04e:	f000 fd5f 	bl	800bb10 <__mcmp>
 800b052:	2800      	cmp	r0, #0
 800b054:	da5b      	bge.n	800b10e <_dtoa_r+0x916>
 800b056:	2300      	movs	r3, #0
 800b058:	9902      	ldr	r1, [sp, #8]
 800b05a:	220a      	movs	r2, #10
 800b05c:	4648      	mov	r0, r9
 800b05e:	f000 fafd 	bl	800b65c <__multadd>
 800b062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b064:	9002      	str	r0, [sp, #8]
 800b066:	f107 38ff 	add.w	r8, r7, #4294967295
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 8177 	beq.w	800b35e <_dtoa_r+0xb66>
 800b070:	4629      	mov	r1, r5
 800b072:	2300      	movs	r3, #0
 800b074:	220a      	movs	r2, #10
 800b076:	4648      	mov	r0, r9
 800b078:	f000 faf0 	bl	800b65c <__multadd>
 800b07c:	f1bb 0f00 	cmp.w	fp, #0
 800b080:	4605      	mov	r5, r0
 800b082:	dc6f      	bgt.n	800b164 <_dtoa_r+0x96c>
 800b084:	9b07      	ldr	r3, [sp, #28]
 800b086:	2b02      	cmp	r3, #2
 800b088:	dc49      	bgt.n	800b11e <_dtoa_r+0x926>
 800b08a:	e06b      	b.n	800b164 <_dtoa_r+0x96c>
 800b08c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b08e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b092:	e73c      	b.n	800af0e <_dtoa_r+0x716>
 800b094:	3fe00000 	.word	0x3fe00000
 800b098:	40240000 	.word	0x40240000
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	1e5c      	subs	r4, r3, #1
 800b0a0:	9b08      	ldr	r3, [sp, #32]
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	db09      	blt.n	800b0ba <_dtoa_r+0x8c2>
 800b0a6:	1b1c      	subs	r4, r3, r4
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f6bf af30 	bge.w	800af10 <_dtoa_r+0x718>
 800b0b0:	9b00      	ldr	r3, [sp, #0]
 800b0b2:	9a03      	ldr	r2, [sp, #12]
 800b0b4:	1a9e      	subs	r6, r3, r2
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e72b      	b.n	800af12 <_dtoa_r+0x71a>
 800b0ba:	9b08      	ldr	r3, [sp, #32]
 800b0bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b0be:	9408      	str	r4, [sp, #32]
 800b0c0:	1ae3      	subs	r3, r4, r3
 800b0c2:	441a      	add	r2, r3
 800b0c4:	9e00      	ldr	r6, [sp, #0]
 800b0c6:	9b03      	ldr	r3, [sp, #12]
 800b0c8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b0ca:	2400      	movs	r4, #0
 800b0cc:	e721      	b.n	800af12 <_dtoa_r+0x71a>
 800b0ce:	9c08      	ldr	r4, [sp, #32]
 800b0d0:	9e00      	ldr	r6, [sp, #0]
 800b0d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b0d4:	e728      	b.n	800af28 <_dtoa_r+0x730>
 800b0d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b0da:	e751      	b.n	800af80 <_dtoa_r+0x788>
 800b0dc:	9a08      	ldr	r2, [sp, #32]
 800b0de:	9902      	ldr	r1, [sp, #8]
 800b0e0:	e750      	b.n	800af84 <_dtoa_r+0x78c>
 800b0e2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b0e6:	e751      	b.n	800af8c <_dtoa_r+0x794>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	e779      	b.n	800afe0 <_dtoa_r+0x7e8>
 800b0ec:	9b04      	ldr	r3, [sp, #16]
 800b0ee:	e777      	b.n	800afe0 <_dtoa_r+0x7e8>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	9308      	str	r3, [sp, #32]
 800b0f4:	e779      	b.n	800afea <_dtoa_r+0x7f2>
 800b0f6:	d093      	beq.n	800b020 <_dtoa_r+0x828>
 800b0f8:	9a00      	ldr	r2, [sp, #0]
 800b0fa:	331c      	adds	r3, #28
 800b0fc:	441a      	add	r2, r3
 800b0fe:	9200      	str	r2, [sp, #0]
 800b100:	9a06      	ldr	r2, [sp, #24]
 800b102:	441a      	add	r2, r3
 800b104:	441e      	add	r6, r3
 800b106:	9206      	str	r2, [sp, #24]
 800b108:	e78a      	b.n	800b020 <_dtoa_r+0x828>
 800b10a:	4603      	mov	r3, r0
 800b10c:	e7f4      	b.n	800b0f8 <_dtoa_r+0x900>
 800b10e:	9b03      	ldr	r3, [sp, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	46b8      	mov	r8, r7
 800b114:	dc20      	bgt.n	800b158 <_dtoa_r+0x960>
 800b116:	469b      	mov	fp, r3
 800b118:	9b07      	ldr	r3, [sp, #28]
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	dd1e      	ble.n	800b15c <_dtoa_r+0x964>
 800b11e:	f1bb 0f00 	cmp.w	fp, #0
 800b122:	f47f adb1 	bne.w	800ac88 <_dtoa_r+0x490>
 800b126:	4621      	mov	r1, r4
 800b128:	465b      	mov	r3, fp
 800b12a:	2205      	movs	r2, #5
 800b12c:	4648      	mov	r0, r9
 800b12e:	f000 fa95 	bl	800b65c <__multadd>
 800b132:	4601      	mov	r1, r0
 800b134:	4604      	mov	r4, r0
 800b136:	9802      	ldr	r0, [sp, #8]
 800b138:	f000 fcea 	bl	800bb10 <__mcmp>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	f77f ada3 	ble.w	800ac88 <_dtoa_r+0x490>
 800b142:	4656      	mov	r6, sl
 800b144:	2331      	movs	r3, #49	@ 0x31
 800b146:	f806 3b01 	strb.w	r3, [r6], #1
 800b14a:	f108 0801 	add.w	r8, r8, #1
 800b14e:	e59f      	b.n	800ac90 <_dtoa_r+0x498>
 800b150:	9c03      	ldr	r4, [sp, #12]
 800b152:	46b8      	mov	r8, r7
 800b154:	4625      	mov	r5, r4
 800b156:	e7f4      	b.n	800b142 <_dtoa_r+0x94a>
 800b158:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 8101 	beq.w	800b366 <_dtoa_r+0xb6e>
 800b164:	2e00      	cmp	r6, #0
 800b166:	dd05      	ble.n	800b174 <_dtoa_r+0x97c>
 800b168:	4629      	mov	r1, r5
 800b16a:	4632      	mov	r2, r6
 800b16c:	4648      	mov	r0, r9
 800b16e:	f000 fc63 	bl	800ba38 <__lshift>
 800b172:	4605      	mov	r5, r0
 800b174:	9b08      	ldr	r3, [sp, #32]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d05c      	beq.n	800b234 <_dtoa_r+0xa3c>
 800b17a:	6869      	ldr	r1, [r5, #4]
 800b17c:	4648      	mov	r0, r9
 800b17e:	f000 fa0b 	bl	800b598 <_Balloc>
 800b182:	4606      	mov	r6, r0
 800b184:	b928      	cbnz	r0, 800b192 <_dtoa_r+0x99a>
 800b186:	4b82      	ldr	r3, [pc, #520]	@ (800b390 <_dtoa_r+0xb98>)
 800b188:	4602      	mov	r2, r0
 800b18a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b18e:	f7ff bb4a 	b.w	800a826 <_dtoa_r+0x2e>
 800b192:	692a      	ldr	r2, [r5, #16]
 800b194:	3202      	adds	r2, #2
 800b196:	0092      	lsls	r2, r2, #2
 800b198:	f105 010c 	add.w	r1, r5, #12
 800b19c:	300c      	adds	r0, #12
 800b19e:	f002 f92f 	bl	800d400 <memcpy>
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	4631      	mov	r1, r6
 800b1a6:	4648      	mov	r0, r9
 800b1a8:	f000 fc46 	bl	800ba38 <__lshift>
 800b1ac:	f10a 0301 	add.w	r3, sl, #1
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	eb0a 030b 	add.w	r3, sl, fp
 800b1b6:	9308      	str	r3, [sp, #32]
 800b1b8:	9b04      	ldr	r3, [sp, #16]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	462f      	mov	r7, r5
 800b1c0:	9306      	str	r3, [sp, #24]
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	9b00      	ldr	r3, [sp, #0]
 800b1c6:	9802      	ldr	r0, [sp, #8]
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	f103 3bff 	add.w	fp, r3, #4294967295
 800b1ce:	f7ff fa89 	bl	800a6e4 <quorem>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	3330      	adds	r3, #48	@ 0x30
 800b1d6:	9003      	str	r0, [sp, #12]
 800b1d8:	4639      	mov	r1, r7
 800b1da:	9802      	ldr	r0, [sp, #8]
 800b1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1de:	f000 fc97 	bl	800bb10 <__mcmp>
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	9004      	str	r0, [sp, #16]
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4648      	mov	r0, r9
 800b1ea:	f000 fcad 	bl	800bb48 <__mdiff>
 800b1ee:	68c2      	ldr	r2, [r0, #12]
 800b1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	bb02      	cbnz	r2, 800b238 <_dtoa_r+0xa40>
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	9802      	ldr	r0, [sp, #8]
 800b1fa:	f000 fc89 	bl	800bb10 <__mcmp>
 800b1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b200:	4602      	mov	r2, r0
 800b202:	4631      	mov	r1, r6
 800b204:	4648      	mov	r0, r9
 800b206:	920c      	str	r2, [sp, #48]	@ 0x30
 800b208:	9309      	str	r3, [sp, #36]	@ 0x24
 800b20a:	f000 fa05 	bl	800b618 <_Bfree>
 800b20e:	9b07      	ldr	r3, [sp, #28]
 800b210:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b212:	9e00      	ldr	r6, [sp, #0]
 800b214:	ea42 0103 	orr.w	r1, r2, r3
 800b218:	9b06      	ldr	r3, [sp, #24]
 800b21a:	4319      	orrs	r1, r3
 800b21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b21e:	d10d      	bne.n	800b23c <_dtoa_r+0xa44>
 800b220:	2b39      	cmp	r3, #57	@ 0x39
 800b222:	d027      	beq.n	800b274 <_dtoa_r+0xa7c>
 800b224:	9a04      	ldr	r2, [sp, #16]
 800b226:	2a00      	cmp	r2, #0
 800b228:	dd01      	ble.n	800b22e <_dtoa_r+0xa36>
 800b22a:	9b03      	ldr	r3, [sp, #12]
 800b22c:	3331      	adds	r3, #49	@ 0x31
 800b22e:	f88b 3000 	strb.w	r3, [fp]
 800b232:	e52e      	b.n	800ac92 <_dtoa_r+0x49a>
 800b234:	4628      	mov	r0, r5
 800b236:	e7b9      	b.n	800b1ac <_dtoa_r+0x9b4>
 800b238:	2201      	movs	r2, #1
 800b23a:	e7e2      	b.n	800b202 <_dtoa_r+0xa0a>
 800b23c:	9904      	ldr	r1, [sp, #16]
 800b23e:	2900      	cmp	r1, #0
 800b240:	db04      	blt.n	800b24c <_dtoa_r+0xa54>
 800b242:	9807      	ldr	r0, [sp, #28]
 800b244:	4301      	orrs	r1, r0
 800b246:	9806      	ldr	r0, [sp, #24]
 800b248:	4301      	orrs	r1, r0
 800b24a:	d120      	bne.n	800b28e <_dtoa_r+0xa96>
 800b24c:	2a00      	cmp	r2, #0
 800b24e:	ddee      	ble.n	800b22e <_dtoa_r+0xa36>
 800b250:	9902      	ldr	r1, [sp, #8]
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	2201      	movs	r2, #1
 800b256:	4648      	mov	r0, r9
 800b258:	f000 fbee 	bl	800ba38 <__lshift>
 800b25c:	4621      	mov	r1, r4
 800b25e:	9002      	str	r0, [sp, #8]
 800b260:	f000 fc56 	bl	800bb10 <__mcmp>
 800b264:	2800      	cmp	r0, #0
 800b266:	9b00      	ldr	r3, [sp, #0]
 800b268:	dc02      	bgt.n	800b270 <_dtoa_r+0xa78>
 800b26a:	d1e0      	bne.n	800b22e <_dtoa_r+0xa36>
 800b26c:	07da      	lsls	r2, r3, #31
 800b26e:	d5de      	bpl.n	800b22e <_dtoa_r+0xa36>
 800b270:	2b39      	cmp	r3, #57	@ 0x39
 800b272:	d1da      	bne.n	800b22a <_dtoa_r+0xa32>
 800b274:	2339      	movs	r3, #57	@ 0x39
 800b276:	f88b 3000 	strb.w	r3, [fp]
 800b27a:	4633      	mov	r3, r6
 800b27c:	461e      	mov	r6, r3
 800b27e:	3b01      	subs	r3, #1
 800b280:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b284:	2a39      	cmp	r2, #57	@ 0x39
 800b286:	d04e      	beq.n	800b326 <_dtoa_r+0xb2e>
 800b288:	3201      	adds	r2, #1
 800b28a:	701a      	strb	r2, [r3, #0]
 800b28c:	e501      	b.n	800ac92 <_dtoa_r+0x49a>
 800b28e:	2a00      	cmp	r2, #0
 800b290:	dd03      	ble.n	800b29a <_dtoa_r+0xaa2>
 800b292:	2b39      	cmp	r3, #57	@ 0x39
 800b294:	d0ee      	beq.n	800b274 <_dtoa_r+0xa7c>
 800b296:	3301      	adds	r3, #1
 800b298:	e7c9      	b.n	800b22e <_dtoa_r+0xa36>
 800b29a:	9a00      	ldr	r2, [sp, #0]
 800b29c:	9908      	ldr	r1, [sp, #32]
 800b29e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b2a2:	428a      	cmp	r2, r1
 800b2a4:	d028      	beq.n	800b2f8 <_dtoa_r+0xb00>
 800b2a6:	9902      	ldr	r1, [sp, #8]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	220a      	movs	r2, #10
 800b2ac:	4648      	mov	r0, r9
 800b2ae:	f000 f9d5 	bl	800b65c <__multadd>
 800b2b2:	42af      	cmp	r7, r5
 800b2b4:	9002      	str	r0, [sp, #8]
 800b2b6:	f04f 0300 	mov.w	r3, #0
 800b2ba:	f04f 020a 	mov.w	r2, #10
 800b2be:	4639      	mov	r1, r7
 800b2c0:	4648      	mov	r0, r9
 800b2c2:	d107      	bne.n	800b2d4 <_dtoa_r+0xadc>
 800b2c4:	f000 f9ca 	bl	800b65c <__multadd>
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	9b00      	ldr	r3, [sp, #0]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	e777      	b.n	800b1c4 <_dtoa_r+0x9cc>
 800b2d4:	f000 f9c2 	bl	800b65c <__multadd>
 800b2d8:	4629      	mov	r1, r5
 800b2da:	4607      	mov	r7, r0
 800b2dc:	2300      	movs	r3, #0
 800b2de:	220a      	movs	r2, #10
 800b2e0:	4648      	mov	r0, r9
 800b2e2:	f000 f9bb 	bl	800b65c <__multadd>
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	e7f0      	b.n	800b2cc <_dtoa_r+0xad4>
 800b2ea:	f1bb 0f00 	cmp.w	fp, #0
 800b2ee:	bfcc      	ite	gt
 800b2f0:	465e      	movgt	r6, fp
 800b2f2:	2601      	movle	r6, #1
 800b2f4:	4456      	add	r6, sl
 800b2f6:	2700      	movs	r7, #0
 800b2f8:	9902      	ldr	r1, [sp, #8]
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	4648      	mov	r0, r9
 800b300:	f000 fb9a 	bl	800ba38 <__lshift>
 800b304:	4621      	mov	r1, r4
 800b306:	9002      	str	r0, [sp, #8]
 800b308:	f000 fc02 	bl	800bb10 <__mcmp>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	dcb4      	bgt.n	800b27a <_dtoa_r+0xa82>
 800b310:	d102      	bne.n	800b318 <_dtoa_r+0xb20>
 800b312:	9b00      	ldr	r3, [sp, #0]
 800b314:	07db      	lsls	r3, r3, #31
 800b316:	d4b0      	bmi.n	800b27a <_dtoa_r+0xa82>
 800b318:	4633      	mov	r3, r6
 800b31a:	461e      	mov	r6, r3
 800b31c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b320:	2a30      	cmp	r2, #48	@ 0x30
 800b322:	d0fa      	beq.n	800b31a <_dtoa_r+0xb22>
 800b324:	e4b5      	b.n	800ac92 <_dtoa_r+0x49a>
 800b326:	459a      	cmp	sl, r3
 800b328:	d1a8      	bne.n	800b27c <_dtoa_r+0xa84>
 800b32a:	2331      	movs	r3, #49	@ 0x31
 800b32c:	f108 0801 	add.w	r8, r8, #1
 800b330:	f88a 3000 	strb.w	r3, [sl]
 800b334:	e4ad      	b.n	800ac92 <_dtoa_r+0x49a>
 800b336:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b338:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b394 <_dtoa_r+0xb9c>
 800b33c:	b11b      	cbz	r3, 800b346 <_dtoa_r+0xb4e>
 800b33e:	f10a 0308 	add.w	r3, sl, #8
 800b342:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b344:	6013      	str	r3, [r2, #0]
 800b346:	4650      	mov	r0, sl
 800b348:	b017      	add	sp, #92	@ 0x5c
 800b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34e:	9b07      	ldr	r3, [sp, #28]
 800b350:	2b01      	cmp	r3, #1
 800b352:	f77f ae2e 	ble.w	800afb2 <_dtoa_r+0x7ba>
 800b356:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b358:	9308      	str	r3, [sp, #32]
 800b35a:	2001      	movs	r0, #1
 800b35c:	e64d      	b.n	800affa <_dtoa_r+0x802>
 800b35e:	f1bb 0f00 	cmp.w	fp, #0
 800b362:	f77f aed9 	ble.w	800b118 <_dtoa_r+0x920>
 800b366:	4656      	mov	r6, sl
 800b368:	9802      	ldr	r0, [sp, #8]
 800b36a:	4621      	mov	r1, r4
 800b36c:	f7ff f9ba 	bl	800a6e4 <quorem>
 800b370:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b374:	f806 3b01 	strb.w	r3, [r6], #1
 800b378:	eba6 020a 	sub.w	r2, r6, sl
 800b37c:	4593      	cmp	fp, r2
 800b37e:	ddb4      	ble.n	800b2ea <_dtoa_r+0xaf2>
 800b380:	9902      	ldr	r1, [sp, #8]
 800b382:	2300      	movs	r3, #0
 800b384:	220a      	movs	r2, #10
 800b386:	4648      	mov	r0, r9
 800b388:	f000 f968 	bl	800b65c <__multadd>
 800b38c:	9002      	str	r0, [sp, #8]
 800b38e:	e7eb      	b.n	800b368 <_dtoa_r+0xb70>
 800b390:	0800e87d 	.word	0x0800e87d
 800b394:	0800e801 	.word	0x0800e801

0800b398 <_free_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4605      	mov	r5, r0
 800b39c:	2900      	cmp	r1, #0
 800b39e:	d041      	beq.n	800b424 <_free_r+0x8c>
 800b3a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3a4:	1f0c      	subs	r4, r1, #4
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	bfb8      	it	lt
 800b3aa:	18e4      	addlt	r4, r4, r3
 800b3ac:	f000 f8e8 	bl	800b580 <__malloc_lock>
 800b3b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b428 <_free_r+0x90>)
 800b3b2:	6813      	ldr	r3, [r2, #0]
 800b3b4:	b933      	cbnz	r3, 800b3c4 <_free_r+0x2c>
 800b3b6:	6063      	str	r3, [r4, #4]
 800b3b8:	6014      	str	r4, [r2, #0]
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3c0:	f000 b8e4 	b.w	800b58c <__malloc_unlock>
 800b3c4:	42a3      	cmp	r3, r4
 800b3c6:	d908      	bls.n	800b3da <_free_r+0x42>
 800b3c8:	6820      	ldr	r0, [r4, #0]
 800b3ca:	1821      	adds	r1, r4, r0
 800b3cc:	428b      	cmp	r3, r1
 800b3ce:	bf01      	itttt	eq
 800b3d0:	6819      	ldreq	r1, [r3, #0]
 800b3d2:	685b      	ldreq	r3, [r3, #4]
 800b3d4:	1809      	addeq	r1, r1, r0
 800b3d6:	6021      	streq	r1, [r4, #0]
 800b3d8:	e7ed      	b.n	800b3b6 <_free_r+0x1e>
 800b3da:	461a      	mov	r2, r3
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	b10b      	cbz	r3, 800b3e4 <_free_r+0x4c>
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	d9fa      	bls.n	800b3da <_free_r+0x42>
 800b3e4:	6811      	ldr	r1, [r2, #0]
 800b3e6:	1850      	adds	r0, r2, r1
 800b3e8:	42a0      	cmp	r0, r4
 800b3ea:	d10b      	bne.n	800b404 <_free_r+0x6c>
 800b3ec:	6820      	ldr	r0, [r4, #0]
 800b3ee:	4401      	add	r1, r0
 800b3f0:	1850      	adds	r0, r2, r1
 800b3f2:	4283      	cmp	r3, r0
 800b3f4:	6011      	str	r1, [r2, #0]
 800b3f6:	d1e0      	bne.n	800b3ba <_free_r+0x22>
 800b3f8:	6818      	ldr	r0, [r3, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	6053      	str	r3, [r2, #4]
 800b3fe:	4408      	add	r0, r1
 800b400:	6010      	str	r0, [r2, #0]
 800b402:	e7da      	b.n	800b3ba <_free_r+0x22>
 800b404:	d902      	bls.n	800b40c <_free_r+0x74>
 800b406:	230c      	movs	r3, #12
 800b408:	602b      	str	r3, [r5, #0]
 800b40a:	e7d6      	b.n	800b3ba <_free_r+0x22>
 800b40c:	6820      	ldr	r0, [r4, #0]
 800b40e:	1821      	adds	r1, r4, r0
 800b410:	428b      	cmp	r3, r1
 800b412:	bf04      	itt	eq
 800b414:	6819      	ldreq	r1, [r3, #0]
 800b416:	685b      	ldreq	r3, [r3, #4]
 800b418:	6063      	str	r3, [r4, #4]
 800b41a:	bf04      	itt	eq
 800b41c:	1809      	addeq	r1, r1, r0
 800b41e:	6021      	streq	r1, [r4, #0]
 800b420:	6054      	str	r4, [r2, #4]
 800b422:	e7ca      	b.n	800b3ba <_free_r+0x22>
 800b424:	bd38      	pop	{r3, r4, r5, pc}
 800b426:	bf00      	nop
 800b428:	2000063c 	.word	0x2000063c

0800b42c <malloc>:
 800b42c:	4b02      	ldr	r3, [pc, #8]	@ (800b438 <malloc+0xc>)
 800b42e:	4601      	mov	r1, r0
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f000 b825 	b.w	800b480 <_malloc_r>
 800b436:	bf00      	nop
 800b438:	2000001c 	.word	0x2000001c

0800b43c <sbrk_aligned>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	4e0f      	ldr	r6, [pc, #60]	@ (800b47c <sbrk_aligned+0x40>)
 800b440:	460c      	mov	r4, r1
 800b442:	6831      	ldr	r1, [r6, #0]
 800b444:	4605      	mov	r5, r0
 800b446:	b911      	cbnz	r1, 800b44e <sbrk_aligned+0x12>
 800b448:	f001 ffca 	bl	800d3e0 <_sbrk_r>
 800b44c:	6030      	str	r0, [r6, #0]
 800b44e:	4621      	mov	r1, r4
 800b450:	4628      	mov	r0, r5
 800b452:	f001 ffc5 	bl	800d3e0 <_sbrk_r>
 800b456:	1c43      	adds	r3, r0, #1
 800b458:	d103      	bne.n	800b462 <sbrk_aligned+0x26>
 800b45a:	f04f 34ff 	mov.w	r4, #4294967295
 800b45e:	4620      	mov	r0, r4
 800b460:	bd70      	pop	{r4, r5, r6, pc}
 800b462:	1cc4      	adds	r4, r0, #3
 800b464:	f024 0403 	bic.w	r4, r4, #3
 800b468:	42a0      	cmp	r0, r4
 800b46a:	d0f8      	beq.n	800b45e <sbrk_aligned+0x22>
 800b46c:	1a21      	subs	r1, r4, r0
 800b46e:	4628      	mov	r0, r5
 800b470:	f001 ffb6 	bl	800d3e0 <_sbrk_r>
 800b474:	3001      	adds	r0, #1
 800b476:	d1f2      	bne.n	800b45e <sbrk_aligned+0x22>
 800b478:	e7ef      	b.n	800b45a <sbrk_aligned+0x1e>
 800b47a:	bf00      	nop
 800b47c:	20000638 	.word	0x20000638

0800b480 <_malloc_r>:
 800b480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b484:	1ccd      	adds	r5, r1, #3
 800b486:	f025 0503 	bic.w	r5, r5, #3
 800b48a:	3508      	adds	r5, #8
 800b48c:	2d0c      	cmp	r5, #12
 800b48e:	bf38      	it	cc
 800b490:	250c      	movcc	r5, #12
 800b492:	2d00      	cmp	r5, #0
 800b494:	4606      	mov	r6, r0
 800b496:	db01      	blt.n	800b49c <_malloc_r+0x1c>
 800b498:	42a9      	cmp	r1, r5
 800b49a:	d904      	bls.n	800b4a6 <_malloc_r+0x26>
 800b49c:	230c      	movs	r3, #12
 800b49e:	6033      	str	r3, [r6, #0]
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b57c <_malloc_r+0xfc>
 800b4aa:	f000 f869 	bl	800b580 <__malloc_lock>
 800b4ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b2:	461c      	mov	r4, r3
 800b4b4:	bb44      	cbnz	r4, 800b508 <_malloc_r+0x88>
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	f7ff ffbf 	bl	800b43c <sbrk_aligned>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	d158      	bne.n	800b576 <_malloc_r+0xf6>
 800b4c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b4c8:	4627      	mov	r7, r4
 800b4ca:	2f00      	cmp	r7, #0
 800b4cc:	d143      	bne.n	800b556 <_malloc_r+0xd6>
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	d04b      	beq.n	800b56a <_malloc_r+0xea>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	4639      	mov	r1, r7
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	eb04 0903 	add.w	r9, r4, r3
 800b4dc:	f001 ff80 	bl	800d3e0 <_sbrk_r>
 800b4e0:	4581      	cmp	r9, r0
 800b4e2:	d142      	bne.n	800b56a <_malloc_r+0xea>
 800b4e4:	6821      	ldr	r1, [r4, #0]
 800b4e6:	1a6d      	subs	r5, r5, r1
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f7ff ffa6 	bl	800b43c <sbrk_aligned>
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	d03a      	beq.n	800b56a <_malloc_r+0xea>
 800b4f4:	6823      	ldr	r3, [r4, #0]
 800b4f6:	442b      	add	r3, r5
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	bb62      	cbnz	r2, 800b55c <_malloc_r+0xdc>
 800b502:	f8c8 7000 	str.w	r7, [r8]
 800b506:	e00f      	b.n	800b528 <_malloc_r+0xa8>
 800b508:	6822      	ldr	r2, [r4, #0]
 800b50a:	1b52      	subs	r2, r2, r5
 800b50c:	d420      	bmi.n	800b550 <_malloc_r+0xd0>
 800b50e:	2a0b      	cmp	r2, #11
 800b510:	d917      	bls.n	800b542 <_malloc_r+0xc2>
 800b512:	1961      	adds	r1, r4, r5
 800b514:	42a3      	cmp	r3, r4
 800b516:	6025      	str	r5, [r4, #0]
 800b518:	bf18      	it	ne
 800b51a:	6059      	strne	r1, [r3, #4]
 800b51c:	6863      	ldr	r3, [r4, #4]
 800b51e:	bf08      	it	eq
 800b520:	f8c8 1000 	streq.w	r1, [r8]
 800b524:	5162      	str	r2, [r4, r5]
 800b526:	604b      	str	r3, [r1, #4]
 800b528:	4630      	mov	r0, r6
 800b52a:	f000 f82f 	bl	800b58c <__malloc_unlock>
 800b52e:	f104 000b 	add.w	r0, r4, #11
 800b532:	1d23      	adds	r3, r4, #4
 800b534:	f020 0007 	bic.w	r0, r0, #7
 800b538:	1ac2      	subs	r2, r0, r3
 800b53a:	bf1c      	itt	ne
 800b53c:	1a1b      	subne	r3, r3, r0
 800b53e:	50a3      	strne	r3, [r4, r2]
 800b540:	e7af      	b.n	800b4a2 <_malloc_r+0x22>
 800b542:	6862      	ldr	r2, [r4, #4]
 800b544:	42a3      	cmp	r3, r4
 800b546:	bf0c      	ite	eq
 800b548:	f8c8 2000 	streq.w	r2, [r8]
 800b54c:	605a      	strne	r2, [r3, #4]
 800b54e:	e7eb      	b.n	800b528 <_malloc_r+0xa8>
 800b550:	4623      	mov	r3, r4
 800b552:	6864      	ldr	r4, [r4, #4]
 800b554:	e7ae      	b.n	800b4b4 <_malloc_r+0x34>
 800b556:	463c      	mov	r4, r7
 800b558:	687f      	ldr	r7, [r7, #4]
 800b55a:	e7b6      	b.n	800b4ca <_malloc_r+0x4a>
 800b55c:	461a      	mov	r2, r3
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	42a3      	cmp	r3, r4
 800b562:	d1fb      	bne.n	800b55c <_malloc_r+0xdc>
 800b564:	2300      	movs	r3, #0
 800b566:	6053      	str	r3, [r2, #4]
 800b568:	e7de      	b.n	800b528 <_malloc_r+0xa8>
 800b56a:	230c      	movs	r3, #12
 800b56c:	6033      	str	r3, [r6, #0]
 800b56e:	4630      	mov	r0, r6
 800b570:	f000 f80c 	bl	800b58c <__malloc_unlock>
 800b574:	e794      	b.n	800b4a0 <_malloc_r+0x20>
 800b576:	6005      	str	r5, [r0, #0]
 800b578:	e7d6      	b.n	800b528 <_malloc_r+0xa8>
 800b57a:	bf00      	nop
 800b57c:	2000063c 	.word	0x2000063c

0800b580 <__malloc_lock>:
 800b580:	4801      	ldr	r0, [pc, #4]	@ (800b588 <__malloc_lock+0x8>)
 800b582:	f7ff b8a6 	b.w	800a6d2 <__retarget_lock_acquire_recursive>
 800b586:	bf00      	nop
 800b588:	20000634 	.word	0x20000634

0800b58c <__malloc_unlock>:
 800b58c:	4801      	ldr	r0, [pc, #4]	@ (800b594 <__malloc_unlock+0x8>)
 800b58e:	f7ff b8a1 	b.w	800a6d4 <__retarget_lock_release_recursive>
 800b592:	bf00      	nop
 800b594:	20000634 	.word	0x20000634

0800b598 <_Balloc>:
 800b598:	b570      	push	{r4, r5, r6, lr}
 800b59a:	69c6      	ldr	r6, [r0, #28]
 800b59c:	4604      	mov	r4, r0
 800b59e:	460d      	mov	r5, r1
 800b5a0:	b976      	cbnz	r6, 800b5c0 <_Balloc+0x28>
 800b5a2:	2010      	movs	r0, #16
 800b5a4:	f7ff ff42 	bl	800b42c <malloc>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	61e0      	str	r0, [r4, #28]
 800b5ac:	b920      	cbnz	r0, 800b5b8 <_Balloc+0x20>
 800b5ae:	4b18      	ldr	r3, [pc, #96]	@ (800b610 <_Balloc+0x78>)
 800b5b0:	4818      	ldr	r0, [pc, #96]	@ (800b614 <_Balloc+0x7c>)
 800b5b2:	216b      	movs	r1, #107	@ 0x6b
 800b5b4:	f001 ff3c 	bl	800d430 <__assert_func>
 800b5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5bc:	6006      	str	r6, [r0, #0]
 800b5be:	60c6      	str	r6, [r0, #12]
 800b5c0:	69e6      	ldr	r6, [r4, #28]
 800b5c2:	68f3      	ldr	r3, [r6, #12]
 800b5c4:	b183      	cbz	r3, 800b5e8 <_Balloc+0x50>
 800b5c6:	69e3      	ldr	r3, [r4, #28]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5ce:	b9b8      	cbnz	r0, 800b600 <_Balloc+0x68>
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b5d6:	1d72      	adds	r2, r6, #5
 800b5d8:	0092      	lsls	r2, r2, #2
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f001 ff46 	bl	800d46c <_calloc_r>
 800b5e0:	b160      	cbz	r0, 800b5fc <_Balloc+0x64>
 800b5e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5e6:	e00e      	b.n	800b606 <_Balloc+0x6e>
 800b5e8:	2221      	movs	r2, #33	@ 0x21
 800b5ea:	2104      	movs	r1, #4
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f001 ff3d 	bl	800d46c <_calloc_r>
 800b5f2:	69e3      	ldr	r3, [r4, #28]
 800b5f4:	60f0      	str	r0, [r6, #12]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e4      	bne.n	800b5c6 <_Balloc+0x2e>
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}
 800b600:	6802      	ldr	r2, [r0, #0]
 800b602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b606:	2300      	movs	r3, #0
 800b608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b60c:	e7f7      	b.n	800b5fe <_Balloc+0x66>
 800b60e:	bf00      	nop
 800b610:	0800e80e 	.word	0x0800e80e
 800b614:	0800e88e 	.word	0x0800e88e

0800b618 <_Bfree>:
 800b618:	b570      	push	{r4, r5, r6, lr}
 800b61a:	69c6      	ldr	r6, [r0, #28]
 800b61c:	4605      	mov	r5, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	b976      	cbnz	r6, 800b640 <_Bfree+0x28>
 800b622:	2010      	movs	r0, #16
 800b624:	f7ff ff02 	bl	800b42c <malloc>
 800b628:	4602      	mov	r2, r0
 800b62a:	61e8      	str	r0, [r5, #28]
 800b62c:	b920      	cbnz	r0, 800b638 <_Bfree+0x20>
 800b62e:	4b09      	ldr	r3, [pc, #36]	@ (800b654 <_Bfree+0x3c>)
 800b630:	4809      	ldr	r0, [pc, #36]	@ (800b658 <_Bfree+0x40>)
 800b632:	218f      	movs	r1, #143	@ 0x8f
 800b634:	f001 fefc 	bl	800d430 <__assert_func>
 800b638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b63c:	6006      	str	r6, [r0, #0]
 800b63e:	60c6      	str	r6, [r0, #12]
 800b640:	b13c      	cbz	r4, 800b652 <_Bfree+0x3a>
 800b642:	69eb      	ldr	r3, [r5, #28]
 800b644:	6862      	ldr	r2, [r4, #4]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b64c:	6021      	str	r1, [r4, #0]
 800b64e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b652:	bd70      	pop	{r4, r5, r6, pc}
 800b654:	0800e80e 	.word	0x0800e80e
 800b658:	0800e88e 	.word	0x0800e88e

0800b65c <__multadd>:
 800b65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b660:	690d      	ldr	r5, [r1, #16]
 800b662:	4607      	mov	r7, r0
 800b664:	460c      	mov	r4, r1
 800b666:	461e      	mov	r6, r3
 800b668:	f101 0c14 	add.w	ip, r1, #20
 800b66c:	2000      	movs	r0, #0
 800b66e:	f8dc 3000 	ldr.w	r3, [ip]
 800b672:	b299      	uxth	r1, r3
 800b674:	fb02 6101 	mla	r1, r2, r1, r6
 800b678:	0c1e      	lsrs	r6, r3, #16
 800b67a:	0c0b      	lsrs	r3, r1, #16
 800b67c:	fb02 3306 	mla	r3, r2, r6, r3
 800b680:	b289      	uxth	r1, r1
 800b682:	3001      	adds	r0, #1
 800b684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b688:	4285      	cmp	r5, r0
 800b68a:	f84c 1b04 	str.w	r1, [ip], #4
 800b68e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b692:	dcec      	bgt.n	800b66e <__multadd+0x12>
 800b694:	b30e      	cbz	r6, 800b6da <__multadd+0x7e>
 800b696:	68a3      	ldr	r3, [r4, #8]
 800b698:	42ab      	cmp	r3, r5
 800b69a:	dc19      	bgt.n	800b6d0 <__multadd+0x74>
 800b69c:	6861      	ldr	r1, [r4, #4]
 800b69e:	4638      	mov	r0, r7
 800b6a0:	3101      	adds	r1, #1
 800b6a2:	f7ff ff79 	bl	800b598 <_Balloc>
 800b6a6:	4680      	mov	r8, r0
 800b6a8:	b928      	cbnz	r0, 800b6b6 <__multadd+0x5a>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e0 <__multadd+0x84>)
 800b6ae:	480d      	ldr	r0, [pc, #52]	@ (800b6e4 <__multadd+0x88>)
 800b6b0:	21ba      	movs	r1, #186	@ 0xba
 800b6b2:	f001 febd 	bl	800d430 <__assert_func>
 800b6b6:	6922      	ldr	r2, [r4, #16]
 800b6b8:	3202      	adds	r2, #2
 800b6ba:	f104 010c 	add.w	r1, r4, #12
 800b6be:	0092      	lsls	r2, r2, #2
 800b6c0:	300c      	adds	r0, #12
 800b6c2:	f001 fe9d 	bl	800d400 <memcpy>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f7ff ffa5 	bl	800b618 <_Bfree>
 800b6ce:	4644      	mov	r4, r8
 800b6d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6d4:	3501      	adds	r5, #1
 800b6d6:	615e      	str	r6, [r3, #20]
 800b6d8:	6125      	str	r5, [r4, #16]
 800b6da:	4620      	mov	r0, r4
 800b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e0:	0800e87d 	.word	0x0800e87d
 800b6e4:	0800e88e 	.word	0x0800e88e

0800b6e8 <__s2b>:
 800b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	4615      	mov	r5, r2
 800b6f0:	461f      	mov	r7, r3
 800b6f2:	2209      	movs	r2, #9
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	2201      	movs	r2, #1
 800b700:	429a      	cmp	r2, r3
 800b702:	db09      	blt.n	800b718 <__s2b+0x30>
 800b704:	4630      	mov	r0, r6
 800b706:	f7ff ff47 	bl	800b598 <_Balloc>
 800b70a:	b940      	cbnz	r0, 800b71e <__s2b+0x36>
 800b70c:	4602      	mov	r2, r0
 800b70e:	4b19      	ldr	r3, [pc, #100]	@ (800b774 <__s2b+0x8c>)
 800b710:	4819      	ldr	r0, [pc, #100]	@ (800b778 <__s2b+0x90>)
 800b712:	21d3      	movs	r1, #211	@ 0xd3
 800b714:	f001 fe8c 	bl	800d430 <__assert_func>
 800b718:	0052      	lsls	r2, r2, #1
 800b71a:	3101      	adds	r1, #1
 800b71c:	e7f0      	b.n	800b700 <__s2b+0x18>
 800b71e:	9b08      	ldr	r3, [sp, #32]
 800b720:	6143      	str	r3, [r0, #20]
 800b722:	2d09      	cmp	r5, #9
 800b724:	f04f 0301 	mov.w	r3, #1
 800b728:	6103      	str	r3, [r0, #16]
 800b72a:	dd16      	ble.n	800b75a <__s2b+0x72>
 800b72c:	f104 0909 	add.w	r9, r4, #9
 800b730:	46c8      	mov	r8, r9
 800b732:	442c      	add	r4, r5
 800b734:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b738:	4601      	mov	r1, r0
 800b73a:	3b30      	subs	r3, #48	@ 0x30
 800b73c:	220a      	movs	r2, #10
 800b73e:	4630      	mov	r0, r6
 800b740:	f7ff ff8c 	bl	800b65c <__multadd>
 800b744:	45a0      	cmp	r8, r4
 800b746:	d1f5      	bne.n	800b734 <__s2b+0x4c>
 800b748:	f1a5 0408 	sub.w	r4, r5, #8
 800b74c:	444c      	add	r4, r9
 800b74e:	1b2d      	subs	r5, r5, r4
 800b750:	1963      	adds	r3, r4, r5
 800b752:	42bb      	cmp	r3, r7
 800b754:	db04      	blt.n	800b760 <__s2b+0x78>
 800b756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75a:	340a      	adds	r4, #10
 800b75c:	2509      	movs	r5, #9
 800b75e:	e7f6      	b.n	800b74e <__s2b+0x66>
 800b760:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b764:	4601      	mov	r1, r0
 800b766:	3b30      	subs	r3, #48	@ 0x30
 800b768:	220a      	movs	r2, #10
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7ff ff76 	bl	800b65c <__multadd>
 800b770:	e7ee      	b.n	800b750 <__s2b+0x68>
 800b772:	bf00      	nop
 800b774:	0800e87d 	.word	0x0800e87d
 800b778:	0800e88e 	.word	0x0800e88e

0800b77c <__hi0bits>:
 800b77c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b780:	4603      	mov	r3, r0
 800b782:	bf36      	itet	cc
 800b784:	0403      	lslcc	r3, r0, #16
 800b786:	2000      	movcs	r0, #0
 800b788:	2010      	movcc	r0, #16
 800b78a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b78e:	bf3c      	itt	cc
 800b790:	021b      	lslcc	r3, r3, #8
 800b792:	3008      	addcc	r0, #8
 800b794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b798:	bf3c      	itt	cc
 800b79a:	011b      	lslcc	r3, r3, #4
 800b79c:	3004      	addcc	r0, #4
 800b79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7a2:	bf3c      	itt	cc
 800b7a4:	009b      	lslcc	r3, r3, #2
 800b7a6:	3002      	addcc	r0, #2
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	db05      	blt.n	800b7b8 <__hi0bits+0x3c>
 800b7ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b7b0:	f100 0001 	add.w	r0, r0, #1
 800b7b4:	bf08      	it	eq
 800b7b6:	2020      	moveq	r0, #32
 800b7b8:	4770      	bx	lr

0800b7ba <__lo0bits>:
 800b7ba:	6803      	ldr	r3, [r0, #0]
 800b7bc:	4602      	mov	r2, r0
 800b7be:	f013 0007 	ands.w	r0, r3, #7
 800b7c2:	d00b      	beq.n	800b7dc <__lo0bits+0x22>
 800b7c4:	07d9      	lsls	r1, r3, #31
 800b7c6:	d421      	bmi.n	800b80c <__lo0bits+0x52>
 800b7c8:	0798      	lsls	r0, r3, #30
 800b7ca:	bf49      	itett	mi
 800b7cc:	085b      	lsrmi	r3, r3, #1
 800b7ce:	089b      	lsrpl	r3, r3, #2
 800b7d0:	2001      	movmi	r0, #1
 800b7d2:	6013      	strmi	r3, [r2, #0]
 800b7d4:	bf5c      	itt	pl
 800b7d6:	6013      	strpl	r3, [r2, #0]
 800b7d8:	2002      	movpl	r0, #2
 800b7da:	4770      	bx	lr
 800b7dc:	b299      	uxth	r1, r3
 800b7de:	b909      	cbnz	r1, 800b7e4 <__lo0bits+0x2a>
 800b7e0:	0c1b      	lsrs	r3, r3, #16
 800b7e2:	2010      	movs	r0, #16
 800b7e4:	b2d9      	uxtb	r1, r3
 800b7e6:	b909      	cbnz	r1, 800b7ec <__lo0bits+0x32>
 800b7e8:	3008      	adds	r0, #8
 800b7ea:	0a1b      	lsrs	r3, r3, #8
 800b7ec:	0719      	lsls	r1, r3, #28
 800b7ee:	bf04      	itt	eq
 800b7f0:	091b      	lsreq	r3, r3, #4
 800b7f2:	3004      	addeq	r0, #4
 800b7f4:	0799      	lsls	r1, r3, #30
 800b7f6:	bf04      	itt	eq
 800b7f8:	089b      	lsreq	r3, r3, #2
 800b7fa:	3002      	addeq	r0, #2
 800b7fc:	07d9      	lsls	r1, r3, #31
 800b7fe:	d403      	bmi.n	800b808 <__lo0bits+0x4e>
 800b800:	085b      	lsrs	r3, r3, #1
 800b802:	f100 0001 	add.w	r0, r0, #1
 800b806:	d003      	beq.n	800b810 <__lo0bits+0x56>
 800b808:	6013      	str	r3, [r2, #0]
 800b80a:	4770      	bx	lr
 800b80c:	2000      	movs	r0, #0
 800b80e:	4770      	bx	lr
 800b810:	2020      	movs	r0, #32
 800b812:	4770      	bx	lr

0800b814 <__i2b>:
 800b814:	b510      	push	{r4, lr}
 800b816:	460c      	mov	r4, r1
 800b818:	2101      	movs	r1, #1
 800b81a:	f7ff febd 	bl	800b598 <_Balloc>
 800b81e:	4602      	mov	r2, r0
 800b820:	b928      	cbnz	r0, 800b82e <__i2b+0x1a>
 800b822:	4b05      	ldr	r3, [pc, #20]	@ (800b838 <__i2b+0x24>)
 800b824:	4805      	ldr	r0, [pc, #20]	@ (800b83c <__i2b+0x28>)
 800b826:	f240 1145 	movw	r1, #325	@ 0x145
 800b82a:	f001 fe01 	bl	800d430 <__assert_func>
 800b82e:	2301      	movs	r3, #1
 800b830:	6144      	str	r4, [r0, #20]
 800b832:	6103      	str	r3, [r0, #16]
 800b834:	bd10      	pop	{r4, pc}
 800b836:	bf00      	nop
 800b838:	0800e87d 	.word	0x0800e87d
 800b83c:	0800e88e 	.word	0x0800e88e

0800b840 <__multiply>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	4617      	mov	r7, r2
 800b846:	690a      	ldr	r2, [r1, #16]
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	bfa8      	it	ge
 800b84e:	463b      	movge	r3, r7
 800b850:	4689      	mov	r9, r1
 800b852:	bfa4      	itt	ge
 800b854:	460f      	movge	r7, r1
 800b856:	4699      	movge	r9, r3
 800b858:	693d      	ldr	r5, [r7, #16]
 800b85a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	6879      	ldr	r1, [r7, #4]
 800b862:	eb05 060a 	add.w	r6, r5, sl
 800b866:	42b3      	cmp	r3, r6
 800b868:	b085      	sub	sp, #20
 800b86a:	bfb8      	it	lt
 800b86c:	3101      	addlt	r1, #1
 800b86e:	f7ff fe93 	bl	800b598 <_Balloc>
 800b872:	b930      	cbnz	r0, 800b882 <__multiply+0x42>
 800b874:	4602      	mov	r2, r0
 800b876:	4b41      	ldr	r3, [pc, #260]	@ (800b97c <__multiply+0x13c>)
 800b878:	4841      	ldr	r0, [pc, #260]	@ (800b980 <__multiply+0x140>)
 800b87a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b87e:	f001 fdd7 	bl	800d430 <__assert_func>
 800b882:	f100 0414 	add.w	r4, r0, #20
 800b886:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b88a:	4623      	mov	r3, r4
 800b88c:	2200      	movs	r2, #0
 800b88e:	4573      	cmp	r3, lr
 800b890:	d320      	bcc.n	800b8d4 <__multiply+0x94>
 800b892:	f107 0814 	add.w	r8, r7, #20
 800b896:	f109 0114 	add.w	r1, r9, #20
 800b89a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b89e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b8a2:	9302      	str	r3, [sp, #8]
 800b8a4:	1beb      	subs	r3, r5, r7
 800b8a6:	3b15      	subs	r3, #21
 800b8a8:	f023 0303 	bic.w	r3, r3, #3
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	3715      	adds	r7, #21
 800b8b0:	42bd      	cmp	r5, r7
 800b8b2:	bf38      	it	cc
 800b8b4:	2304      	movcc	r3, #4
 800b8b6:	9301      	str	r3, [sp, #4]
 800b8b8:	9b02      	ldr	r3, [sp, #8]
 800b8ba:	9103      	str	r1, [sp, #12]
 800b8bc:	428b      	cmp	r3, r1
 800b8be:	d80c      	bhi.n	800b8da <__multiply+0x9a>
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	dd03      	ble.n	800b8cc <__multiply+0x8c>
 800b8c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d055      	beq.n	800b978 <__multiply+0x138>
 800b8cc:	6106      	str	r6, [r0, #16]
 800b8ce:	b005      	add	sp, #20
 800b8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d4:	f843 2b04 	str.w	r2, [r3], #4
 800b8d8:	e7d9      	b.n	800b88e <__multiply+0x4e>
 800b8da:	f8b1 a000 	ldrh.w	sl, [r1]
 800b8de:	f1ba 0f00 	cmp.w	sl, #0
 800b8e2:	d01f      	beq.n	800b924 <__multiply+0xe4>
 800b8e4:	46c4      	mov	ip, r8
 800b8e6:	46a1      	mov	r9, r4
 800b8e8:	2700      	movs	r7, #0
 800b8ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b8ee:	f8d9 3000 	ldr.w	r3, [r9]
 800b8f2:	fa1f fb82 	uxth.w	fp, r2
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b8fc:	443b      	add	r3, r7
 800b8fe:	f8d9 7000 	ldr.w	r7, [r9]
 800b902:	0c12      	lsrs	r2, r2, #16
 800b904:	0c3f      	lsrs	r7, r7, #16
 800b906:	fb0a 7202 	mla	r2, sl, r2, r7
 800b90a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b90e:	b29b      	uxth	r3, r3
 800b910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b914:	4565      	cmp	r5, ip
 800b916:	f849 3b04 	str.w	r3, [r9], #4
 800b91a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b91e:	d8e4      	bhi.n	800b8ea <__multiply+0xaa>
 800b920:	9b01      	ldr	r3, [sp, #4]
 800b922:	50e7      	str	r7, [r4, r3]
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b92a:	3104      	adds	r1, #4
 800b92c:	f1b9 0f00 	cmp.w	r9, #0
 800b930:	d020      	beq.n	800b974 <__multiply+0x134>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	4647      	mov	r7, r8
 800b936:	46a4      	mov	ip, r4
 800b938:	f04f 0a00 	mov.w	sl, #0
 800b93c:	f8b7 b000 	ldrh.w	fp, [r7]
 800b940:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b944:	fb09 220b 	mla	r2, r9, fp, r2
 800b948:	4452      	add	r2, sl
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b950:	f84c 3b04 	str.w	r3, [ip], #4
 800b954:	f857 3b04 	ldr.w	r3, [r7], #4
 800b958:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b95c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b960:	fb09 330a 	mla	r3, r9, sl, r3
 800b964:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b968:	42bd      	cmp	r5, r7
 800b96a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b96e:	d8e5      	bhi.n	800b93c <__multiply+0xfc>
 800b970:	9a01      	ldr	r2, [sp, #4]
 800b972:	50a3      	str	r3, [r4, r2]
 800b974:	3404      	adds	r4, #4
 800b976:	e79f      	b.n	800b8b8 <__multiply+0x78>
 800b978:	3e01      	subs	r6, #1
 800b97a:	e7a1      	b.n	800b8c0 <__multiply+0x80>
 800b97c:	0800e87d 	.word	0x0800e87d
 800b980:	0800e88e 	.word	0x0800e88e

0800b984 <__pow5mult>:
 800b984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b988:	4615      	mov	r5, r2
 800b98a:	f012 0203 	ands.w	r2, r2, #3
 800b98e:	4607      	mov	r7, r0
 800b990:	460e      	mov	r6, r1
 800b992:	d007      	beq.n	800b9a4 <__pow5mult+0x20>
 800b994:	4c25      	ldr	r4, [pc, #148]	@ (800ba2c <__pow5mult+0xa8>)
 800b996:	3a01      	subs	r2, #1
 800b998:	2300      	movs	r3, #0
 800b99a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b99e:	f7ff fe5d 	bl	800b65c <__multadd>
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	10ad      	asrs	r5, r5, #2
 800b9a6:	d03d      	beq.n	800ba24 <__pow5mult+0xa0>
 800b9a8:	69fc      	ldr	r4, [r7, #28]
 800b9aa:	b97c      	cbnz	r4, 800b9cc <__pow5mult+0x48>
 800b9ac:	2010      	movs	r0, #16
 800b9ae:	f7ff fd3d 	bl	800b42c <malloc>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	61f8      	str	r0, [r7, #28]
 800b9b6:	b928      	cbnz	r0, 800b9c4 <__pow5mult+0x40>
 800b9b8:	4b1d      	ldr	r3, [pc, #116]	@ (800ba30 <__pow5mult+0xac>)
 800b9ba:	481e      	ldr	r0, [pc, #120]	@ (800ba34 <__pow5mult+0xb0>)
 800b9bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b9c0:	f001 fd36 	bl	800d430 <__assert_func>
 800b9c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9c8:	6004      	str	r4, [r0, #0]
 800b9ca:	60c4      	str	r4, [r0, #12]
 800b9cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b9d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9d4:	b94c      	cbnz	r4, 800b9ea <__pow5mult+0x66>
 800b9d6:	f240 2171 	movw	r1, #625	@ 0x271
 800b9da:	4638      	mov	r0, r7
 800b9dc:	f7ff ff1a 	bl	800b814 <__i2b>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	6003      	str	r3, [r0, #0]
 800b9ea:	f04f 0900 	mov.w	r9, #0
 800b9ee:	07eb      	lsls	r3, r5, #31
 800b9f0:	d50a      	bpl.n	800ba08 <__pow5mult+0x84>
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	4622      	mov	r2, r4
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	f7ff ff22 	bl	800b840 <__multiply>
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4680      	mov	r8, r0
 800ba00:	4638      	mov	r0, r7
 800ba02:	f7ff fe09 	bl	800b618 <_Bfree>
 800ba06:	4646      	mov	r6, r8
 800ba08:	106d      	asrs	r5, r5, #1
 800ba0a:	d00b      	beq.n	800ba24 <__pow5mult+0xa0>
 800ba0c:	6820      	ldr	r0, [r4, #0]
 800ba0e:	b938      	cbnz	r0, 800ba20 <__pow5mult+0x9c>
 800ba10:	4622      	mov	r2, r4
 800ba12:	4621      	mov	r1, r4
 800ba14:	4638      	mov	r0, r7
 800ba16:	f7ff ff13 	bl	800b840 <__multiply>
 800ba1a:	6020      	str	r0, [r4, #0]
 800ba1c:	f8c0 9000 	str.w	r9, [r0]
 800ba20:	4604      	mov	r4, r0
 800ba22:	e7e4      	b.n	800b9ee <__pow5mult+0x6a>
 800ba24:	4630      	mov	r0, r6
 800ba26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2a:	bf00      	nop
 800ba2c:	0800e9a0 	.word	0x0800e9a0
 800ba30:	0800e80e 	.word	0x0800e80e
 800ba34:	0800e88e 	.word	0x0800e88e

0800ba38 <__lshift>:
 800ba38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	6849      	ldr	r1, [r1, #4]
 800ba40:	6923      	ldr	r3, [r4, #16]
 800ba42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba46:	68a3      	ldr	r3, [r4, #8]
 800ba48:	4607      	mov	r7, r0
 800ba4a:	4691      	mov	r9, r2
 800ba4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba50:	f108 0601 	add.w	r6, r8, #1
 800ba54:	42b3      	cmp	r3, r6
 800ba56:	db0b      	blt.n	800ba70 <__lshift+0x38>
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f7ff fd9d 	bl	800b598 <_Balloc>
 800ba5e:	4605      	mov	r5, r0
 800ba60:	b948      	cbnz	r0, 800ba76 <__lshift+0x3e>
 800ba62:	4602      	mov	r2, r0
 800ba64:	4b28      	ldr	r3, [pc, #160]	@ (800bb08 <__lshift+0xd0>)
 800ba66:	4829      	ldr	r0, [pc, #164]	@ (800bb0c <__lshift+0xd4>)
 800ba68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba6c:	f001 fce0 	bl	800d430 <__assert_func>
 800ba70:	3101      	adds	r1, #1
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	e7ee      	b.n	800ba54 <__lshift+0x1c>
 800ba76:	2300      	movs	r3, #0
 800ba78:	f100 0114 	add.w	r1, r0, #20
 800ba7c:	f100 0210 	add.w	r2, r0, #16
 800ba80:	4618      	mov	r0, r3
 800ba82:	4553      	cmp	r3, sl
 800ba84:	db33      	blt.n	800baee <__lshift+0xb6>
 800ba86:	6920      	ldr	r0, [r4, #16]
 800ba88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba8c:	f104 0314 	add.w	r3, r4, #20
 800ba90:	f019 091f 	ands.w	r9, r9, #31
 800ba94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba9c:	d02b      	beq.n	800baf6 <__lshift+0xbe>
 800ba9e:	f1c9 0e20 	rsb	lr, r9, #32
 800baa2:	468a      	mov	sl, r1
 800baa4:	2200      	movs	r2, #0
 800baa6:	6818      	ldr	r0, [r3, #0]
 800baa8:	fa00 f009 	lsl.w	r0, r0, r9
 800baac:	4310      	orrs	r0, r2
 800baae:	f84a 0b04 	str.w	r0, [sl], #4
 800bab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab6:	459c      	cmp	ip, r3
 800bab8:	fa22 f20e 	lsr.w	r2, r2, lr
 800babc:	d8f3      	bhi.n	800baa6 <__lshift+0x6e>
 800babe:	ebac 0304 	sub.w	r3, ip, r4
 800bac2:	3b15      	subs	r3, #21
 800bac4:	f023 0303 	bic.w	r3, r3, #3
 800bac8:	3304      	adds	r3, #4
 800baca:	f104 0015 	add.w	r0, r4, #21
 800bace:	4560      	cmp	r0, ip
 800bad0:	bf88      	it	hi
 800bad2:	2304      	movhi	r3, #4
 800bad4:	50ca      	str	r2, [r1, r3]
 800bad6:	b10a      	cbz	r2, 800badc <__lshift+0xa4>
 800bad8:	f108 0602 	add.w	r6, r8, #2
 800badc:	3e01      	subs	r6, #1
 800bade:	4638      	mov	r0, r7
 800bae0:	612e      	str	r6, [r5, #16]
 800bae2:	4621      	mov	r1, r4
 800bae4:	f7ff fd98 	bl	800b618 <_Bfree>
 800bae8:	4628      	mov	r0, r5
 800baea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baee:	f842 0f04 	str.w	r0, [r2, #4]!
 800baf2:	3301      	adds	r3, #1
 800baf4:	e7c5      	b.n	800ba82 <__lshift+0x4a>
 800baf6:	3904      	subs	r1, #4
 800baf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bafc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb00:	459c      	cmp	ip, r3
 800bb02:	d8f9      	bhi.n	800baf8 <__lshift+0xc0>
 800bb04:	e7ea      	b.n	800badc <__lshift+0xa4>
 800bb06:	bf00      	nop
 800bb08:	0800e87d 	.word	0x0800e87d
 800bb0c:	0800e88e 	.word	0x0800e88e

0800bb10 <__mcmp>:
 800bb10:	690a      	ldr	r2, [r1, #16]
 800bb12:	4603      	mov	r3, r0
 800bb14:	6900      	ldr	r0, [r0, #16]
 800bb16:	1a80      	subs	r0, r0, r2
 800bb18:	b530      	push	{r4, r5, lr}
 800bb1a:	d10e      	bne.n	800bb3a <__mcmp+0x2a>
 800bb1c:	3314      	adds	r3, #20
 800bb1e:	3114      	adds	r1, #20
 800bb20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb30:	4295      	cmp	r5, r2
 800bb32:	d003      	beq.n	800bb3c <__mcmp+0x2c>
 800bb34:	d205      	bcs.n	800bb42 <__mcmp+0x32>
 800bb36:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3a:	bd30      	pop	{r4, r5, pc}
 800bb3c:	42a3      	cmp	r3, r4
 800bb3e:	d3f3      	bcc.n	800bb28 <__mcmp+0x18>
 800bb40:	e7fb      	b.n	800bb3a <__mcmp+0x2a>
 800bb42:	2001      	movs	r0, #1
 800bb44:	e7f9      	b.n	800bb3a <__mcmp+0x2a>
	...

0800bb48 <__mdiff>:
 800bb48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	4689      	mov	r9, r1
 800bb4e:	4606      	mov	r6, r0
 800bb50:	4611      	mov	r1, r2
 800bb52:	4648      	mov	r0, r9
 800bb54:	4614      	mov	r4, r2
 800bb56:	f7ff ffdb 	bl	800bb10 <__mcmp>
 800bb5a:	1e05      	subs	r5, r0, #0
 800bb5c:	d112      	bne.n	800bb84 <__mdiff+0x3c>
 800bb5e:	4629      	mov	r1, r5
 800bb60:	4630      	mov	r0, r6
 800bb62:	f7ff fd19 	bl	800b598 <_Balloc>
 800bb66:	4602      	mov	r2, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <__mdiff+0x2e>
 800bb6a:	4b3f      	ldr	r3, [pc, #252]	@ (800bc68 <__mdiff+0x120>)
 800bb6c:	f240 2137 	movw	r1, #567	@ 0x237
 800bb70:	483e      	ldr	r0, [pc, #248]	@ (800bc6c <__mdiff+0x124>)
 800bb72:	f001 fc5d 	bl	800d430 <__assert_func>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	b003      	add	sp, #12
 800bb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb84:	bfbc      	itt	lt
 800bb86:	464b      	movlt	r3, r9
 800bb88:	46a1      	movlt	r9, r4
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb90:	bfba      	itte	lt
 800bb92:	461c      	movlt	r4, r3
 800bb94:	2501      	movlt	r5, #1
 800bb96:	2500      	movge	r5, #0
 800bb98:	f7ff fcfe 	bl	800b598 <_Balloc>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	b918      	cbnz	r0, 800bba8 <__mdiff+0x60>
 800bba0:	4b31      	ldr	r3, [pc, #196]	@ (800bc68 <__mdiff+0x120>)
 800bba2:	f240 2145 	movw	r1, #581	@ 0x245
 800bba6:	e7e3      	b.n	800bb70 <__mdiff+0x28>
 800bba8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bbac:	6926      	ldr	r6, [r4, #16]
 800bbae:	60c5      	str	r5, [r0, #12]
 800bbb0:	f109 0310 	add.w	r3, r9, #16
 800bbb4:	f109 0514 	add.w	r5, r9, #20
 800bbb8:	f104 0e14 	add.w	lr, r4, #20
 800bbbc:	f100 0b14 	add.w	fp, r0, #20
 800bbc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bbc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	46d9      	mov	r9, fp
 800bbcc:	f04f 0c00 	mov.w	ip, #0
 800bbd0:	9b01      	ldr	r3, [sp, #4]
 800bbd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bbd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bbda:	9301      	str	r3, [sp, #4]
 800bbdc:	fa1f f38a 	uxth.w	r3, sl
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	b283      	uxth	r3, r0
 800bbe4:	1acb      	subs	r3, r1, r3
 800bbe6:	0c00      	lsrs	r0, r0, #16
 800bbe8:	4463      	add	r3, ip
 800bbea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bbee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bbf8:	4576      	cmp	r6, lr
 800bbfa:	f849 3b04 	str.w	r3, [r9], #4
 800bbfe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc02:	d8e5      	bhi.n	800bbd0 <__mdiff+0x88>
 800bc04:	1b33      	subs	r3, r6, r4
 800bc06:	3b15      	subs	r3, #21
 800bc08:	f023 0303 	bic.w	r3, r3, #3
 800bc0c:	3415      	adds	r4, #21
 800bc0e:	3304      	adds	r3, #4
 800bc10:	42a6      	cmp	r6, r4
 800bc12:	bf38      	it	cc
 800bc14:	2304      	movcc	r3, #4
 800bc16:	441d      	add	r5, r3
 800bc18:	445b      	add	r3, fp
 800bc1a:	461e      	mov	r6, r3
 800bc1c:	462c      	mov	r4, r5
 800bc1e:	4544      	cmp	r4, r8
 800bc20:	d30e      	bcc.n	800bc40 <__mdiff+0xf8>
 800bc22:	f108 0103 	add.w	r1, r8, #3
 800bc26:	1b49      	subs	r1, r1, r5
 800bc28:	f021 0103 	bic.w	r1, r1, #3
 800bc2c:	3d03      	subs	r5, #3
 800bc2e:	45a8      	cmp	r8, r5
 800bc30:	bf38      	it	cc
 800bc32:	2100      	movcc	r1, #0
 800bc34:	440b      	add	r3, r1
 800bc36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc3a:	b191      	cbz	r1, 800bc62 <__mdiff+0x11a>
 800bc3c:	6117      	str	r7, [r2, #16]
 800bc3e:	e79d      	b.n	800bb7c <__mdiff+0x34>
 800bc40:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc44:	46e6      	mov	lr, ip
 800bc46:	0c08      	lsrs	r0, r1, #16
 800bc48:	fa1c fc81 	uxtah	ip, ip, r1
 800bc4c:	4471      	add	r1, lr
 800bc4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc52:	b289      	uxth	r1, r1
 800bc54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc58:	f846 1b04 	str.w	r1, [r6], #4
 800bc5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc60:	e7dd      	b.n	800bc1e <__mdiff+0xd6>
 800bc62:	3f01      	subs	r7, #1
 800bc64:	e7e7      	b.n	800bc36 <__mdiff+0xee>
 800bc66:	bf00      	nop
 800bc68:	0800e87d 	.word	0x0800e87d
 800bc6c:	0800e88e 	.word	0x0800e88e

0800bc70 <__ulp>:
 800bc70:	b082      	sub	sp, #8
 800bc72:	ed8d 0b00 	vstr	d0, [sp]
 800bc76:	9a01      	ldr	r2, [sp, #4]
 800bc78:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb8 <__ulp+0x48>)
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dc08      	bgt.n	800bc96 <__ulp+0x26>
 800bc84:	425b      	negs	r3, r3
 800bc86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bc8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc8e:	da04      	bge.n	800bc9a <__ulp+0x2a>
 800bc90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bc94:	4113      	asrs	r3, r2
 800bc96:	2200      	movs	r2, #0
 800bc98:	e008      	b.n	800bcac <__ulp+0x3c>
 800bc9a:	f1a2 0314 	sub.w	r3, r2, #20
 800bc9e:	2b1e      	cmp	r3, #30
 800bca0:	bfda      	itte	le
 800bca2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bca6:	40da      	lsrle	r2, r3
 800bca8:	2201      	movgt	r2, #1
 800bcaa:	2300      	movs	r3, #0
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	ec41 0b10 	vmov	d0, r0, r1
 800bcb4:	b002      	add	sp, #8
 800bcb6:	4770      	bx	lr
 800bcb8:	7ff00000 	.word	0x7ff00000

0800bcbc <__b2d>:
 800bcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc0:	6906      	ldr	r6, [r0, #16]
 800bcc2:	f100 0814 	add.w	r8, r0, #20
 800bcc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bcca:	1f37      	subs	r7, r6, #4
 800bccc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	f7ff fd53 	bl	800b77c <__hi0bits>
 800bcd6:	f1c0 0320 	rsb	r3, r0, #32
 800bcda:	280a      	cmp	r0, #10
 800bcdc:	600b      	str	r3, [r1, #0]
 800bcde:	491b      	ldr	r1, [pc, #108]	@ (800bd4c <__b2d+0x90>)
 800bce0:	dc15      	bgt.n	800bd0e <__b2d+0x52>
 800bce2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bce6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bcea:	45b8      	cmp	r8, r7
 800bcec:	ea43 0501 	orr.w	r5, r3, r1
 800bcf0:	bf34      	ite	cc
 800bcf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bcf6:	2300      	movcs	r3, #0
 800bcf8:	3015      	adds	r0, #21
 800bcfa:	fa02 f000 	lsl.w	r0, r2, r0
 800bcfe:	fa23 f30c 	lsr.w	r3, r3, ip
 800bd02:	4303      	orrs	r3, r0
 800bd04:	461c      	mov	r4, r3
 800bd06:	ec45 4b10 	vmov	d0, r4, r5
 800bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0e:	45b8      	cmp	r8, r7
 800bd10:	bf3a      	itte	cc
 800bd12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd16:	f1a6 0708 	subcc.w	r7, r6, #8
 800bd1a:	2300      	movcs	r3, #0
 800bd1c:	380b      	subs	r0, #11
 800bd1e:	d012      	beq.n	800bd46 <__b2d+0x8a>
 800bd20:	f1c0 0120 	rsb	r1, r0, #32
 800bd24:	fa23 f401 	lsr.w	r4, r3, r1
 800bd28:	4082      	lsls	r2, r0
 800bd2a:	4322      	orrs	r2, r4
 800bd2c:	4547      	cmp	r7, r8
 800bd2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bd32:	bf8c      	ite	hi
 800bd34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bd38:	2200      	movls	r2, #0
 800bd3a:	4083      	lsls	r3, r0
 800bd3c:	40ca      	lsrs	r2, r1
 800bd3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bd42:	4313      	orrs	r3, r2
 800bd44:	e7de      	b.n	800bd04 <__b2d+0x48>
 800bd46:	ea42 0501 	orr.w	r5, r2, r1
 800bd4a:	e7db      	b.n	800bd04 <__b2d+0x48>
 800bd4c:	3ff00000 	.word	0x3ff00000

0800bd50 <__d2b>:
 800bd50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd54:	460f      	mov	r7, r1
 800bd56:	2101      	movs	r1, #1
 800bd58:	ec59 8b10 	vmov	r8, r9, d0
 800bd5c:	4616      	mov	r6, r2
 800bd5e:	f7ff fc1b 	bl	800b598 <_Balloc>
 800bd62:	4604      	mov	r4, r0
 800bd64:	b930      	cbnz	r0, 800bd74 <__d2b+0x24>
 800bd66:	4602      	mov	r2, r0
 800bd68:	4b23      	ldr	r3, [pc, #140]	@ (800bdf8 <__d2b+0xa8>)
 800bd6a:	4824      	ldr	r0, [pc, #144]	@ (800bdfc <__d2b+0xac>)
 800bd6c:	f240 310f 	movw	r1, #783	@ 0x30f
 800bd70:	f001 fb5e 	bl	800d430 <__assert_func>
 800bd74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd7c:	b10d      	cbz	r5, 800bd82 <__d2b+0x32>
 800bd7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	f1b8 0300 	subs.w	r3, r8, #0
 800bd88:	d023      	beq.n	800bdd2 <__d2b+0x82>
 800bd8a:	4668      	mov	r0, sp
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	f7ff fd14 	bl	800b7ba <__lo0bits>
 800bd92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd96:	b1d0      	cbz	r0, 800bdce <__d2b+0x7e>
 800bd98:	f1c0 0320 	rsb	r3, r0, #32
 800bd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bda0:	430b      	orrs	r3, r1
 800bda2:	40c2      	lsrs	r2, r0
 800bda4:	6163      	str	r3, [r4, #20]
 800bda6:	9201      	str	r2, [sp, #4]
 800bda8:	9b01      	ldr	r3, [sp, #4]
 800bdaa:	61a3      	str	r3, [r4, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	bf0c      	ite	eq
 800bdb0:	2201      	moveq	r2, #1
 800bdb2:	2202      	movne	r2, #2
 800bdb4:	6122      	str	r2, [r4, #16]
 800bdb6:	b1a5      	cbz	r5, 800bde2 <__d2b+0x92>
 800bdb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bdbc:	4405      	add	r5, r0
 800bdbe:	603d      	str	r5, [r7, #0]
 800bdc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bdc4:	6030      	str	r0, [r6, #0]
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	b003      	add	sp, #12
 800bdca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdce:	6161      	str	r1, [r4, #20]
 800bdd0:	e7ea      	b.n	800bda8 <__d2b+0x58>
 800bdd2:	a801      	add	r0, sp, #4
 800bdd4:	f7ff fcf1 	bl	800b7ba <__lo0bits>
 800bdd8:	9b01      	ldr	r3, [sp, #4]
 800bdda:	6163      	str	r3, [r4, #20]
 800bddc:	3020      	adds	r0, #32
 800bdde:	2201      	movs	r2, #1
 800bde0:	e7e8      	b.n	800bdb4 <__d2b+0x64>
 800bde2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bde6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bdea:	6038      	str	r0, [r7, #0]
 800bdec:	6918      	ldr	r0, [r3, #16]
 800bdee:	f7ff fcc5 	bl	800b77c <__hi0bits>
 800bdf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdf6:	e7e5      	b.n	800bdc4 <__d2b+0x74>
 800bdf8:	0800e87d 	.word	0x0800e87d
 800bdfc:	0800e88e 	.word	0x0800e88e

0800be00 <__ratio>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	b085      	sub	sp, #20
 800be06:	e9cd 1000 	strd	r1, r0, [sp]
 800be0a:	a902      	add	r1, sp, #8
 800be0c:	f7ff ff56 	bl	800bcbc <__b2d>
 800be10:	9800      	ldr	r0, [sp, #0]
 800be12:	a903      	add	r1, sp, #12
 800be14:	ec55 4b10 	vmov	r4, r5, d0
 800be18:	f7ff ff50 	bl	800bcbc <__b2d>
 800be1c:	9b01      	ldr	r3, [sp, #4]
 800be1e:	6919      	ldr	r1, [r3, #16]
 800be20:	9b00      	ldr	r3, [sp, #0]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	1ac9      	subs	r1, r1, r3
 800be26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800be2a:	1a9b      	subs	r3, r3, r2
 800be2c:	ec5b ab10 	vmov	sl, fp, d0
 800be30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800be34:	2b00      	cmp	r3, #0
 800be36:	bfce      	itee	gt
 800be38:	462a      	movgt	r2, r5
 800be3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be3e:	465a      	movle	r2, fp
 800be40:	462f      	mov	r7, r5
 800be42:	46d9      	mov	r9, fp
 800be44:	bfcc      	ite	gt
 800be46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800be4e:	464b      	mov	r3, r9
 800be50:	4652      	mov	r2, sl
 800be52:	4620      	mov	r0, r4
 800be54:	4639      	mov	r1, r7
 800be56:	f7f4 fd19 	bl	800088c <__aeabi_ddiv>
 800be5a:	ec41 0b10 	vmov	d0, r0, r1
 800be5e:	b005      	add	sp, #20
 800be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be64 <__copybits>:
 800be64:	3901      	subs	r1, #1
 800be66:	b570      	push	{r4, r5, r6, lr}
 800be68:	1149      	asrs	r1, r1, #5
 800be6a:	6914      	ldr	r4, [r2, #16]
 800be6c:	3101      	adds	r1, #1
 800be6e:	f102 0314 	add.w	r3, r2, #20
 800be72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be7a:	1f05      	subs	r5, r0, #4
 800be7c:	42a3      	cmp	r3, r4
 800be7e:	d30c      	bcc.n	800be9a <__copybits+0x36>
 800be80:	1aa3      	subs	r3, r4, r2
 800be82:	3b11      	subs	r3, #17
 800be84:	f023 0303 	bic.w	r3, r3, #3
 800be88:	3211      	adds	r2, #17
 800be8a:	42a2      	cmp	r2, r4
 800be8c:	bf88      	it	hi
 800be8e:	2300      	movhi	r3, #0
 800be90:	4418      	add	r0, r3
 800be92:	2300      	movs	r3, #0
 800be94:	4288      	cmp	r0, r1
 800be96:	d305      	bcc.n	800bea4 <__copybits+0x40>
 800be98:	bd70      	pop	{r4, r5, r6, pc}
 800be9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800be9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bea2:	e7eb      	b.n	800be7c <__copybits+0x18>
 800bea4:	f840 3b04 	str.w	r3, [r0], #4
 800bea8:	e7f4      	b.n	800be94 <__copybits+0x30>

0800beaa <__any_on>:
 800beaa:	f100 0214 	add.w	r2, r0, #20
 800beae:	6900      	ldr	r0, [r0, #16]
 800beb0:	114b      	asrs	r3, r1, #5
 800beb2:	4298      	cmp	r0, r3
 800beb4:	b510      	push	{r4, lr}
 800beb6:	db11      	blt.n	800bedc <__any_on+0x32>
 800beb8:	dd0a      	ble.n	800bed0 <__any_on+0x26>
 800beba:	f011 011f 	ands.w	r1, r1, #31
 800bebe:	d007      	beq.n	800bed0 <__any_on+0x26>
 800bec0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bec4:	fa24 f001 	lsr.w	r0, r4, r1
 800bec8:	fa00 f101 	lsl.w	r1, r0, r1
 800becc:	428c      	cmp	r4, r1
 800bece:	d10b      	bne.n	800bee8 <__any_on+0x3e>
 800bed0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d803      	bhi.n	800bee0 <__any_on+0x36>
 800bed8:	2000      	movs	r0, #0
 800beda:	bd10      	pop	{r4, pc}
 800bedc:	4603      	mov	r3, r0
 800bede:	e7f7      	b.n	800bed0 <__any_on+0x26>
 800bee0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bee4:	2900      	cmp	r1, #0
 800bee6:	d0f5      	beq.n	800bed4 <__any_on+0x2a>
 800bee8:	2001      	movs	r0, #1
 800beea:	e7f6      	b.n	800beda <__any_on+0x30>

0800beec <sulp>:
 800beec:	b570      	push	{r4, r5, r6, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	460d      	mov	r5, r1
 800bef2:	ec45 4b10 	vmov	d0, r4, r5
 800bef6:	4616      	mov	r6, r2
 800bef8:	f7ff feba 	bl	800bc70 <__ulp>
 800befc:	ec51 0b10 	vmov	r0, r1, d0
 800bf00:	b17e      	cbz	r6, 800bf22 <sulp+0x36>
 800bf02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf06:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dd09      	ble.n	800bf22 <sulp+0x36>
 800bf0e:	051b      	lsls	r3, r3, #20
 800bf10:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bf14:	2400      	movs	r4, #0
 800bf16:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bf1a:	4622      	mov	r2, r4
 800bf1c:	462b      	mov	r3, r5
 800bf1e:	f7f4 fb8b 	bl	8000638 <__aeabi_dmul>
 800bf22:	ec41 0b10 	vmov	d0, r0, r1
 800bf26:	bd70      	pop	{r4, r5, r6, pc}

0800bf28 <_strtod_l>:
 800bf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2c:	b09f      	sub	sp, #124	@ 0x7c
 800bf2e:	460c      	mov	r4, r1
 800bf30:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bf32:	2200      	movs	r2, #0
 800bf34:	921a      	str	r2, [sp, #104]	@ 0x68
 800bf36:	9005      	str	r0, [sp, #20]
 800bf38:	f04f 0a00 	mov.w	sl, #0
 800bf3c:	f04f 0b00 	mov.w	fp, #0
 800bf40:	460a      	mov	r2, r1
 800bf42:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf44:	7811      	ldrb	r1, [r2, #0]
 800bf46:	292b      	cmp	r1, #43	@ 0x2b
 800bf48:	d04a      	beq.n	800bfe0 <_strtod_l+0xb8>
 800bf4a:	d838      	bhi.n	800bfbe <_strtod_l+0x96>
 800bf4c:	290d      	cmp	r1, #13
 800bf4e:	d832      	bhi.n	800bfb6 <_strtod_l+0x8e>
 800bf50:	2908      	cmp	r1, #8
 800bf52:	d832      	bhi.n	800bfba <_strtod_l+0x92>
 800bf54:	2900      	cmp	r1, #0
 800bf56:	d03b      	beq.n	800bfd0 <_strtod_l+0xa8>
 800bf58:	2200      	movs	r2, #0
 800bf5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bf5e:	782a      	ldrb	r2, [r5, #0]
 800bf60:	2a30      	cmp	r2, #48	@ 0x30
 800bf62:	f040 80b2 	bne.w	800c0ca <_strtod_l+0x1a2>
 800bf66:	786a      	ldrb	r2, [r5, #1]
 800bf68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf6c:	2a58      	cmp	r2, #88	@ 0x58
 800bf6e:	d16e      	bne.n	800c04e <_strtod_l+0x126>
 800bf70:	9302      	str	r3, [sp, #8]
 800bf72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf74:	9301      	str	r3, [sp, #4]
 800bf76:	ab1a      	add	r3, sp, #104	@ 0x68
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	4a8f      	ldr	r2, [pc, #572]	@ (800c1b8 <_strtod_l+0x290>)
 800bf7c:	9805      	ldr	r0, [sp, #20]
 800bf7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bf80:	a919      	add	r1, sp, #100	@ 0x64
 800bf82:	f001 faef 	bl	800d564 <__gethex>
 800bf86:	f010 060f 	ands.w	r6, r0, #15
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	d005      	beq.n	800bf9a <_strtod_l+0x72>
 800bf8e:	2e06      	cmp	r6, #6
 800bf90:	d128      	bne.n	800bfe4 <_strtod_l+0xbc>
 800bf92:	3501      	adds	r5, #1
 800bf94:	2300      	movs	r3, #0
 800bf96:	9519      	str	r5, [sp, #100]	@ 0x64
 800bf98:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f040 858e 	bne.w	800cabe <_strtod_l+0xb96>
 800bfa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa4:	b1cb      	cbz	r3, 800bfda <_strtod_l+0xb2>
 800bfa6:	4652      	mov	r2, sl
 800bfa8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bfac:	ec43 2b10 	vmov	d0, r2, r3
 800bfb0:	b01f      	add	sp, #124	@ 0x7c
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	2920      	cmp	r1, #32
 800bfb8:	d1ce      	bne.n	800bf58 <_strtod_l+0x30>
 800bfba:	3201      	adds	r2, #1
 800bfbc:	e7c1      	b.n	800bf42 <_strtod_l+0x1a>
 800bfbe:	292d      	cmp	r1, #45	@ 0x2d
 800bfc0:	d1ca      	bne.n	800bf58 <_strtod_l+0x30>
 800bfc2:	2101      	movs	r1, #1
 800bfc4:	910e      	str	r1, [sp, #56]	@ 0x38
 800bfc6:	1c51      	adds	r1, r2, #1
 800bfc8:	9119      	str	r1, [sp, #100]	@ 0x64
 800bfca:	7852      	ldrb	r2, [r2, #1]
 800bfcc:	2a00      	cmp	r2, #0
 800bfce:	d1c5      	bne.n	800bf5c <_strtod_l+0x34>
 800bfd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfd2:	9419      	str	r4, [sp, #100]	@ 0x64
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f040 8570 	bne.w	800caba <_strtod_l+0xb92>
 800bfda:	4652      	mov	r2, sl
 800bfdc:	465b      	mov	r3, fp
 800bfde:	e7e5      	b.n	800bfac <_strtod_l+0x84>
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	e7ef      	b.n	800bfc4 <_strtod_l+0x9c>
 800bfe4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bfe6:	b13a      	cbz	r2, 800bff8 <_strtod_l+0xd0>
 800bfe8:	2135      	movs	r1, #53	@ 0x35
 800bfea:	a81c      	add	r0, sp, #112	@ 0x70
 800bfec:	f7ff ff3a 	bl	800be64 <__copybits>
 800bff0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bff2:	9805      	ldr	r0, [sp, #20]
 800bff4:	f7ff fb10 	bl	800b618 <_Bfree>
 800bff8:	3e01      	subs	r6, #1
 800bffa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bffc:	2e04      	cmp	r6, #4
 800bffe:	d806      	bhi.n	800c00e <_strtod_l+0xe6>
 800c000:	e8df f006 	tbb	[pc, r6]
 800c004:	201d0314 	.word	0x201d0314
 800c008:	14          	.byte	0x14
 800c009:	00          	.byte	0x00
 800c00a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c00e:	05e1      	lsls	r1, r4, #23
 800c010:	bf48      	it	mi
 800c012:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c016:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c01a:	0d1b      	lsrs	r3, r3, #20
 800c01c:	051b      	lsls	r3, r3, #20
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1bb      	bne.n	800bf9a <_strtod_l+0x72>
 800c022:	f7fe fb2b 	bl	800a67c <__errno>
 800c026:	2322      	movs	r3, #34	@ 0x22
 800c028:	6003      	str	r3, [r0, #0]
 800c02a:	e7b6      	b.n	800bf9a <_strtod_l+0x72>
 800c02c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c030:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c034:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c038:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c03c:	e7e7      	b.n	800c00e <_strtod_l+0xe6>
 800c03e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c1c0 <_strtod_l+0x298>
 800c042:	e7e4      	b.n	800c00e <_strtod_l+0xe6>
 800c044:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c048:	f04f 3aff 	mov.w	sl, #4294967295
 800c04c:	e7df      	b.n	800c00e <_strtod_l+0xe6>
 800c04e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	9219      	str	r2, [sp, #100]	@ 0x64
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	2b30      	cmp	r3, #48	@ 0x30
 800c058:	d0f9      	beq.n	800c04e <_strtod_l+0x126>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d09d      	beq.n	800bf9a <_strtod_l+0x72>
 800c05e:	2301      	movs	r3, #1
 800c060:	2700      	movs	r7, #0
 800c062:	9308      	str	r3, [sp, #32]
 800c064:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c066:	930c      	str	r3, [sp, #48]	@ 0x30
 800c068:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c06a:	46b9      	mov	r9, r7
 800c06c:	220a      	movs	r2, #10
 800c06e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c070:	7805      	ldrb	r5, [r0, #0]
 800c072:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c076:	b2d9      	uxtb	r1, r3
 800c078:	2909      	cmp	r1, #9
 800c07a:	d928      	bls.n	800c0ce <_strtod_l+0x1a6>
 800c07c:	494f      	ldr	r1, [pc, #316]	@ (800c1bc <_strtod_l+0x294>)
 800c07e:	2201      	movs	r2, #1
 800c080:	f001 f97a 	bl	800d378 <strncmp>
 800c084:	2800      	cmp	r0, #0
 800c086:	d032      	beq.n	800c0ee <_strtod_l+0x1c6>
 800c088:	2000      	movs	r0, #0
 800c08a:	462a      	mov	r2, r5
 800c08c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c08e:	464d      	mov	r5, r9
 800c090:	4603      	mov	r3, r0
 800c092:	2a65      	cmp	r2, #101	@ 0x65
 800c094:	d001      	beq.n	800c09a <_strtod_l+0x172>
 800c096:	2a45      	cmp	r2, #69	@ 0x45
 800c098:	d114      	bne.n	800c0c4 <_strtod_l+0x19c>
 800c09a:	b91d      	cbnz	r5, 800c0a4 <_strtod_l+0x17c>
 800c09c:	9a08      	ldr	r2, [sp, #32]
 800c09e:	4302      	orrs	r2, r0
 800c0a0:	d096      	beq.n	800bfd0 <_strtod_l+0xa8>
 800c0a2:	2500      	movs	r5, #0
 800c0a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c0a6:	1c62      	adds	r2, r4, #1
 800c0a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0aa:	7862      	ldrb	r2, [r4, #1]
 800c0ac:	2a2b      	cmp	r2, #43	@ 0x2b
 800c0ae:	d07a      	beq.n	800c1a6 <_strtod_l+0x27e>
 800c0b0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c0b2:	d07e      	beq.n	800c1b2 <_strtod_l+0x28a>
 800c0b4:	f04f 0c00 	mov.w	ip, #0
 800c0b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c0bc:	2909      	cmp	r1, #9
 800c0be:	f240 8085 	bls.w	800c1cc <_strtod_l+0x2a4>
 800c0c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c0c4:	f04f 0800 	mov.w	r8, #0
 800c0c8:	e0a5      	b.n	800c216 <_strtod_l+0x2ee>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	e7c8      	b.n	800c060 <_strtod_l+0x138>
 800c0ce:	f1b9 0f08 	cmp.w	r9, #8
 800c0d2:	bfd8      	it	le
 800c0d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c0d6:	f100 0001 	add.w	r0, r0, #1
 800c0da:	bfda      	itte	le
 800c0dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c0e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c0e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c0e6:	f109 0901 	add.w	r9, r9, #1
 800c0ea:	9019      	str	r0, [sp, #100]	@ 0x64
 800c0ec:	e7bf      	b.n	800c06e <_strtod_l+0x146>
 800c0ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0f4:	785a      	ldrb	r2, [r3, #1]
 800c0f6:	f1b9 0f00 	cmp.w	r9, #0
 800c0fa:	d03b      	beq.n	800c174 <_strtod_l+0x24c>
 800c0fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0fe:	464d      	mov	r5, r9
 800c100:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c104:	2b09      	cmp	r3, #9
 800c106:	d912      	bls.n	800c12e <_strtod_l+0x206>
 800c108:	2301      	movs	r3, #1
 800c10a:	e7c2      	b.n	800c092 <_strtod_l+0x16a>
 800c10c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	9219      	str	r2, [sp, #100]	@ 0x64
 800c112:	785a      	ldrb	r2, [r3, #1]
 800c114:	3001      	adds	r0, #1
 800c116:	2a30      	cmp	r2, #48	@ 0x30
 800c118:	d0f8      	beq.n	800c10c <_strtod_l+0x1e4>
 800c11a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c11e:	2b08      	cmp	r3, #8
 800c120:	f200 84d2 	bhi.w	800cac8 <_strtod_l+0xba0>
 800c124:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c126:	900a      	str	r0, [sp, #40]	@ 0x28
 800c128:	2000      	movs	r0, #0
 800c12a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c12c:	4605      	mov	r5, r0
 800c12e:	3a30      	subs	r2, #48	@ 0x30
 800c130:	f100 0301 	add.w	r3, r0, #1
 800c134:	d018      	beq.n	800c168 <_strtod_l+0x240>
 800c136:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c138:	4419      	add	r1, r3
 800c13a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c13c:	462e      	mov	r6, r5
 800c13e:	f04f 0e0a 	mov.w	lr, #10
 800c142:	1c71      	adds	r1, r6, #1
 800c144:	eba1 0c05 	sub.w	ip, r1, r5
 800c148:	4563      	cmp	r3, ip
 800c14a:	dc15      	bgt.n	800c178 <_strtod_l+0x250>
 800c14c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c150:	182b      	adds	r3, r5, r0
 800c152:	2b08      	cmp	r3, #8
 800c154:	f105 0501 	add.w	r5, r5, #1
 800c158:	4405      	add	r5, r0
 800c15a:	dc1a      	bgt.n	800c192 <_strtod_l+0x26a>
 800c15c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c15e:	230a      	movs	r3, #10
 800c160:	fb03 2301 	mla	r3, r3, r1, r2
 800c164:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c166:	2300      	movs	r3, #0
 800c168:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c16a:	1c51      	adds	r1, r2, #1
 800c16c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c16e:	7852      	ldrb	r2, [r2, #1]
 800c170:	4618      	mov	r0, r3
 800c172:	e7c5      	b.n	800c100 <_strtod_l+0x1d8>
 800c174:	4648      	mov	r0, r9
 800c176:	e7ce      	b.n	800c116 <_strtod_l+0x1ee>
 800c178:	2e08      	cmp	r6, #8
 800c17a:	dc05      	bgt.n	800c188 <_strtod_l+0x260>
 800c17c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c17e:	fb0e f606 	mul.w	r6, lr, r6
 800c182:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c184:	460e      	mov	r6, r1
 800c186:	e7dc      	b.n	800c142 <_strtod_l+0x21a>
 800c188:	2910      	cmp	r1, #16
 800c18a:	bfd8      	it	le
 800c18c:	fb0e f707 	mulle.w	r7, lr, r7
 800c190:	e7f8      	b.n	800c184 <_strtod_l+0x25c>
 800c192:	2b0f      	cmp	r3, #15
 800c194:	bfdc      	itt	le
 800c196:	230a      	movle	r3, #10
 800c198:	fb03 2707 	mlale	r7, r3, r7, r2
 800c19c:	e7e3      	b.n	800c166 <_strtod_l+0x23e>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e77a      	b.n	800c09c <_strtod_l+0x174>
 800c1a6:	f04f 0c00 	mov.w	ip, #0
 800c1aa:	1ca2      	adds	r2, r4, #2
 800c1ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1ae:	78a2      	ldrb	r2, [r4, #2]
 800c1b0:	e782      	b.n	800c0b8 <_strtod_l+0x190>
 800c1b2:	f04f 0c01 	mov.w	ip, #1
 800c1b6:	e7f8      	b.n	800c1aa <_strtod_l+0x282>
 800c1b8:	0800eab4 	.word	0x0800eab4
 800c1bc:	0800e8e7 	.word	0x0800e8e7
 800c1c0:	7ff00000 	.word	0x7ff00000
 800c1c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1c6:	1c51      	adds	r1, r2, #1
 800c1c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1ca:	7852      	ldrb	r2, [r2, #1]
 800c1cc:	2a30      	cmp	r2, #48	@ 0x30
 800c1ce:	d0f9      	beq.n	800c1c4 <_strtod_l+0x29c>
 800c1d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c1d4:	2908      	cmp	r1, #8
 800c1d6:	f63f af75 	bhi.w	800c0c4 <_strtod_l+0x19c>
 800c1da:	3a30      	subs	r2, #48	@ 0x30
 800c1dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c1e2:	f04f 080a 	mov.w	r8, #10
 800c1e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1e8:	1c56      	adds	r6, r2, #1
 800c1ea:	9619      	str	r6, [sp, #100]	@ 0x64
 800c1ec:	7852      	ldrb	r2, [r2, #1]
 800c1ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c1f2:	f1be 0f09 	cmp.w	lr, #9
 800c1f6:	d939      	bls.n	800c26c <_strtod_l+0x344>
 800c1f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c1fa:	1a76      	subs	r6, r6, r1
 800c1fc:	2e08      	cmp	r6, #8
 800c1fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c202:	dc03      	bgt.n	800c20c <_strtod_l+0x2e4>
 800c204:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c206:	4588      	cmp	r8, r1
 800c208:	bfa8      	it	ge
 800c20a:	4688      	movge	r8, r1
 800c20c:	f1bc 0f00 	cmp.w	ip, #0
 800c210:	d001      	beq.n	800c216 <_strtod_l+0x2ee>
 800c212:	f1c8 0800 	rsb	r8, r8, #0
 800c216:	2d00      	cmp	r5, #0
 800c218:	d14e      	bne.n	800c2b8 <_strtod_l+0x390>
 800c21a:	9908      	ldr	r1, [sp, #32]
 800c21c:	4308      	orrs	r0, r1
 800c21e:	f47f aebc 	bne.w	800bf9a <_strtod_l+0x72>
 800c222:	2b00      	cmp	r3, #0
 800c224:	f47f aed4 	bne.w	800bfd0 <_strtod_l+0xa8>
 800c228:	2a69      	cmp	r2, #105	@ 0x69
 800c22a:	d028      	beq.n	800c27e <_strtod_l+0x356>
 800c22c:	dc25      	bgt.n	800c27a <_strtod_l+0x352>
 800c22e:	2a49      	cmp	r2, #73	@ 0x49
 800c230:	d025      	beq.n	800c27e <_strtod_l+0x356>
 800c232:	2a4e      	cmp	r2, #78	@ 0x4e
 800c234:	f47f aecc 	bne.w	800bfd0 <_strtod_l+0xa8>
 800c238:	499a      	ldr	r1, [pc, #616]	@ (800c4a4 <_strtod_l+0x57c>)
 800c23a:	a819      	add	r0, sp, #100	@ 0x64
 800c23c:	f001 fbb4 	bl	800d9a8 <__match>
 800c240:	2800      	cmp	r0, #0
 800c242:	f43f aec5 	beq.w	800bfd0 <_strtod_l+0xa8>
 800c246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b28      	cmp	r3, #40	@ 0x28
 800c24c:	d12e      	bne.n	800c2ac <_strtod_l+0x384>
 800c24e:	4996      	ldr	r1, [pc, #600]	@ (800c4a8 <_strtod_l+0x580>)
 800c250:	aa1c      	add	r2, sp, #112	@ 0x70
 800c252:	a819      	add	r0, sp, #100	@ 0x64
 800c254:	f001 fbbc 	bl	800d9d0 <__hexnan>
 800c258:	2805      	cmp	r0, #5
 800c25a:	d127      	bne.n	800c2ac <_strtod_l+0x384>
 800c25c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c25e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c262:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c266:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c26a:	e696      	b.n	800bf9a <_strtod_l+0x72>
 800c26c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c26e:	fb08 2101 	mla	r1, r8, r1, r2
 800c272:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c276:	9209      	str	r2, [sp, #36]	@ 0x24
 800c278:	e7b5      	b.n	800c1e6 <_strtod_l+0x2be>
 800c27a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c27c:	e7da      	b.n	800c234 <_strtod_l+0x30c>
 800c27e:	498b      	ldr	r1, [pc, #556]	@ (800c4ac <_strtod_l+0x584>)
 800c280:	a819      	add	r0, sp, #100	@ 0x64
 800c282:	f001 fb91 	bl	800d9a8 <__match>
 800c286:	2800      	cmp	r0, #0
 800c288:	f43f aea2 	beq.w	800bfd0 <_strtod_l+0xa8>
 800c28c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c28e:	4988      	ldr	r1, [pc, #544]	@ (800c4b0 <_strtod_l+0x588>)
 800c290:	3b01      	subs	r3, #1
 800c292:	a819      	add	r0, sp, #100	@ 0x64
 800c294:	9319      	str	r3, [sp, #100]	@ 0x64
 800c296:	f001 fb87 	bl	800d9a8 <__match>
 800c29a:	b910      	cbnz	r0, 800c2a2 <_strtod_l+0x37a>
 800c29c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c29e:	3301      	adds	r3, #1
 800c2a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c2a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c4c0 <_strtod_l+0x598>
 800c2a6:	f04f 0a00 	mov.w	sl, #0
 800c2aa:	e676      	b.n	800bf9a <_strtod_l+0x72>
 800c2ac:	4881      	ldr	r0, [pc, #516]	@ (800c4b4 <_strtod_l+0x58c>)
 800c2ae:	f001 f8b7 	bl	800d420 <nan>
 800c2b2:	ec5b ab10 	vmov	sl, fp, d0
 800c2b6:	e670      	b.n	800bf9a <_strtod_l+0x72>
 800c2b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c2bc:	eba8 0303 	sub.w	r3, r8, r3
 800c2c0:	f1b9 0f00 	cmp.w	r9, #0
 800c2c4:	bf08      	it	eq
 800c2c6:	46a9      	moveq	r9, r5
 800c2c8:	2d10      	cmp	r5, #16
 800c2ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2cc:	462c      	mov	r4, r5
 800c2ce:	bfa8      	it	ge
 800c2d0:	2410      	movge	r4, #16
 800c2d2:	f7f4 f937 	bl	8000544 <__aeabi_ui2d>
 800c2d6:	2d09      	cmp	r5, #9
 800c2d8:	4682      	mov	sl, r0
 800c2da:	468b      	mov	fp, r1
 800c2dc:	dc13      	bgt.n	800c306 <_strtod_l+0x3de>
 800c2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f43f ae5a 	beq.w	800bf9a <_strtod_l+0x72>
 800c2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e8:	dd78      	ble.n	800c3dc <_strtod_l+0x4b4>
 800c2ea:	2b16      	cmp	r3, #22
 800c2ec:	dc5f      	bgt.n	800c3ae <_strtod_l+0x486>
 800c2ee:	4972      	ldr	r1, [pc, #456]	@ (800c4b8 <_strtod_l+0x590>)
 800c2f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f8:	4652      	mov	r2, sl
 800c2fa:	465b      	mov	r3, fp
 800c2fc:	f7f4 f99c 	bl	8000638 <__aeabi_dmul>
 800c300:	4682      	mov	sl, r0
 800c302:	468b      	mov	fp, r1
 800c304:	e649      	b.n	800bf9a <_strtod_l+0x72>
 800c306:	4b6c      	ldr	r3, [pc, #432]	@ (800c4b8 <_strtod_l+0x590>)
 800c308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c30c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c310:	f7f4 f992 	bl	8000638 <__aeabi_dmul>
 800c314:	4682      	mov	sl, r0
 800c316:	4638      	mov	r0, r7
 800c318:	468b      	mov	fp, r1
 800c31a:	f7f4 f913 	bl	8000544 <__aeabi_ui2d>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	4650      	mov	r0, sl
 800c324:	4659      	mov	r1, fp
 800c326:	f7f3 ffd1 	bl	80002cc <__adddf3>
 800c32a:	2d0f      	cmp	r5, #15
 800c32c:	4682      	mov	sl, r0
 800c32e:	468b      	mov	fp, r1
 800c330:	ddd5      	ble.n	800c2de <_strtod_l+0x3b6>
 800c332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c334:	1b2c      	subs	r4, r5, r4
 800c336:	441c      	add	r4, r3
 800c338:	2c00      	cmp	r4, #0
 800c33a:	f340 8093 	ble.w	800c464 <_strtod_l+0x53c>
 800c33e:	f014 030f 	ands.w	r3, r4, #15
 800c342:	d00a      	beq.n	800c35a <_strtod_l+0x432>
 800c344:	495c      	ldr	r1, [pc, #368]	@ (800c4b8 <_strtod_l+0x590>)
 800c346:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c34a:	4652      	mov	r2, sl
 800c34c:	465b      	mov	r3, fp
 800c34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c352:	f7f4 f971 	bl	8000638 <__aeabi_dmul>
 800c356:	4682      	mov	sl, r0
 800c358:	468b      	mov	fp, r1
 800c35a:	f034 040f 	bics.w	r4, r4, #15
 800c35e:	d073      	beq.n	800c448 <_strtod_l+0x520>
 800c360:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c364:	dd49      	ble.n	800c3fa <_strtod_l+0x4d2>
 800c366:	2400      	movs	r4, #0
 800c368:	46a0      	mov	r8, r4
 800c36a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c36c:	46a1      	mov	r9, r4
 800c36e:	9a05      	ldr	r2, [sp, #20]
 800c370:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c4c0 <_strtod_l+0x598>
 800c374:	2322      	movs	r3, #34	@ 0x22
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	f04f 0a00 	mov.w	sl, #0
 800c37c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f43f ae0b 	beq.w	800bf9a <_strtod_l+0x72>
 800c384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c386:	9805      	ldr	r0, [sp, #20]
 800c388:	f7ff f946 	bl	800b618 <_Bfree>
 800c38c:	9805      	ldr	r0, [sp, #20]
 800c38e:	4649      	mov	r1, r9
 800c390:	f7ff f942 	bl	800b618 <_Bfree>
 800c394:	9805      	ldr	r0, [sp, #20]
 800c396:	4641      	mov	r1, r8
 800c398:	f7ff f93e 	bl	800b618 <_Bfree>
 800c39c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c39e:	9805      	ldr	r0, [sp, #20]
 800c3a0:	f7ff f93a 	bl	800b618 <_Bfree>
 800c3a4:	9805      	ldr	r0, [sp, #20]
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	f7ff f936 	bl	800b618 <_Bfree>
 800c3ac:	e5f5      	b.n	800bf9a <_strtod_l+0x72>
 800c3ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	dbbc      	blt.n	800c332 <_strtod_l+0x40a>
 800c3b8:	4c3f      	ldr	r4, [pc, #252]	@ (800c4b8 <_strtod_l+0x590>)
 800c3ba:	f1c5 050f 	rsb	r5, r5, #15
 800c3be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c3c2:	4652      	mov	r2, sl
 800c3c4:	465b      	mov	r3, fp
 800c3c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ca:	f7f4 f935 	bl	8000638 <__aeabi_dmul>
 800c3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3d0:	1b5d      	subs	r5, r3, r5
 800c3d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c3d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c3da:	e78f      	b.n	800c2fc <_strtod_l+0x3d4>
 800c3dc:	3316      	adds	r3, #22
 800c3de:	dba8      	blt.n	800c332 <_strtod_l+0x40a>
 800c3e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3e2:	eba3 0808 	sub.w	r8, r3, r8
 800c3e6:	4b34      	ldr	r3, [pc, #208]	@ (800c4b8 <_strtod_l+0x590>)
 800c3e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c3ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c3f0:	4650      	mov	r0, sl
 800c3f2:	4659      	mov	r1, fp
 800c3f4:	f7f4 fa4a 	bl	800088c <__aeabi_ddiv>
 800c3f8:	e782      	b.n	800c300 <_strtod_l+0x3d8>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	4f2f      	ldr	r7, [pc, #188]	@ (800c4bc <_strtod_l+0x594>)
 800c3fe:	1124      	asrs	r4, r4, #4
 800c400:	4650      	mov	r0, sl
 800c402:	4659      	mov	r1, fp
 800c404:	461e      	mov	r6, r3
 800c406:	2c01      	cmp	r4, #1
 800c408:	dc21      	bgt.n	800c44e <_strtod_l+0x526>
 800c40a:	b10b      	cbz	r3, 800c410 <_strtod_l+0x4e8>
 800c40c:	4682      	mov	sl, r0
 800c40e:	468b      	mov	fp, r1
 800c410:	492a      	ldr	r1, [pc, #168]	@ (800c4bc <_strtod_l+0x594>)
 800c412:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c416:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c41a:	4652      	mov	r2, sl
 800c41c:	465b      	mov	r3, fp
 800c41e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c422:	f7f4 f909 	bl	8000638 <__aeabi_dmul>
 800c426:	4b26      	ldr	r3, [pc, #152]	@ (800c4c0 <_strtod_l+0x598>)
 800c428:	460a      	mov	r2, r1
 800c42a:	400b      	ands	r3, r1
 800c42c:	4925      	ldr	r1, [pc, #148]	@ (800c4c4 <_strtod_l+0x59c>)
 800c42e:	428b      	cmp	r3, r1
 800c430:	4682      	mov	sl, r0
 800c432:	d898      	bhi.n	800c366 <_strtod_l+0x43e>
 800c434:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c438:	428b      	cmp	r3, r1
 800c43a:	bf86      	itte	hi
 800c43c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c4c8 <_strtod_l+0x5a0>
 800c440:	f04f 3aff 	movhi.w	sl, #4294967295
 800c444:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c448:	2300      	movs	r3, #0
 800c44a:	9308      	str	r3, [sp, #32]
 800c44c:	e076      	b.n	800c53c <_strtod_l+0x614>
 800c44e:	07e2      	lsls	r2, r4, #31
 800c450:	d504      	bpl.n	800c45c <_strtod_l+0x534>
 800c452:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c456:	f7f4 f8ef 	bl	8000638 <__aeabi_dmul>
 800c45a:	2301      	movs	r3, #1
 800c45c:	3601      	adds	r6, #1
 800c45e:	1064      	asrs	r4, r4, #1
 800c460:	3708      	adds	r7, #8
 800c462:	e7d0      	b.n	800c406 <_strtod_l+0x4de>
 800c464:	d0f0      	beq.n	800c448 <_strtod_l+0x520>
 800c466:	4264      	negs	r4, r4
 800c468:	f014 020f 	ands.w	r2, r4, #15
 800c46c:	d00a      	beq.n	800c484 <_strtod_l+0x55c>
 800c46e:	4b12      	ldr	r3, [pc, #72]	@ (800c4b8 <_strtod_l+0x590>)
 800c470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c474:	4650      	mov	r0, sl
 800c476:	4659      	mov	r1, fp
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	f7f4 fa06 	bl	800088c <__aeabi_ddiv>
 800c480:	4682      	mov	sl, r0
 800c482:	468b      	mov	fp, r1
 800c484:	1124      	asrs	r4, r4, #4
 800c486:	d0df      	beq.n	800c448 <_strtod_l+0x520>
 800c488:	2c1f      	cmp	r4, #31
 800c48a:	dd1f      	ble.n	800c4cc <_strtod_l+0x5a4>
 800c48c:	2400      	movs	r4, #0
 800c48e:	46a0      	mov	r8, r4
 800c490:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c492:	46a1      	mov	r9, r4
 800c494:	9a05      	ldr	r2, [sp, #20]
 800c496:	2322      	movs	r3, #34	@ 0x22
 800c498:	f04f 0a00 	mov.w	sl, #0
 800c49c:	f04f 0b00 	mov.w	fp, #0
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	e76b      	b.n	800c37c <_strtod_l+0x454>
 800c4a4:	0800e7d5 	.word	0x0800e7d5
 800c4a8:	0800eaa0 	.word	0x0800eaa0
 800c4ac:	0800e7cd 	.word	0x0800e7cd
 800c4b0:	0800e804 	.word	0x0800e804
 800c4b4:	0800e93d 	.word	0x0800e93d
 800c4b8:	0800e9d8 	.word	0x0800e9d8
 800c4bc:	0800e9b0 	.word	0x0800e9b0
 800c4c0:	7ff00000 	.word	0x7ff00000
 800c4c4:	7ca00000 	.word	0x7ca00000
 800c4c8:	7fefffff 	.word	0x7fefffff
 800c4cc:	f014 0310 	ands.w	r3, r4, #16
 800c4d0:	bf18      	it	ne
 800c4d2:	236a      	movne	r3, #106	@ 0x6a
 800c4d4:	4ea9      	ldr	r6, [pc, #676]	@ (800c77c <_strtod_l+0x854>)
 800c4d6:	9308      	str	r3, [sp, #32]
 800c4d8:	4650      	mov	r0, sl
 800c4da:	4659      	mov	r1, fp
 800c4dc:	2300      	movs	r3, #0
 800c4de:	07e7      	lsls	r7, r4, #31
 800c4e0:	d504      	bpl.n	800c4ec <_strtod_l+0x5c4>
 800c4e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c4e6:	f7f4 f8a7 	bl	8000638 <__aeabi_dmul>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	1064      	asrs	r4, r4, #1
 800c4ee:	f106 0608 	add.w	r6, r6, #8
 800c4f2:	d1f4      	bne.n	800c4de <_strtod_l+0x5b6>
 800c4f4:	b10b      	cbz	r3, 800c4fa <_strtod_l+0x5d2>
 800c4f6:	4682      	mov	sl, r0
 800c4f8:	468b      	mov	fp, r1
 800c4fa:	9b08      	ldr	r3, [sp, #32]
 800c4fc:	b1b3      	cbz	r3, 800c52c <_strtod_l+0x604>
 800c4fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c502:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c506:	2b00      	cmp	r3, #0
 800c508:	4659      	mov	r1, fp
 800c50a:	dd0f      	ble.n	800c52c <_strtod_l+0x604>
 800c50c:	2b1f      	cmp	r3, #31
 800c50e:	dd56      	ble.n	800c5be <_strtod_l+0x696>
 800c510:	2b34      	cmp	r3, #52	@ 0x34
 800c512:	bfde      	ittt	le
 800c514:	f04f 33ff 	movle.w	r3, #4294967295
 800c518:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c51c:	4093      	lslle	r3, r2
 800c51e:	f04f 0a00 	mov.w	sl, #0
 800c522:	bfcc      	ite	gt
 800c524:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c528:	ea03 0b01 	andle.w	fp, r3, r1
 800c52c:	2200      	movs	r2, #0
 800c52e:	2300      	movs	r3, #0
 800c530:	4650      	mov	r0, sl
 800c532:	4659      	mov	r1, fp
 800c534:	f7f4 fae8 	bl	8000b08 <__aeabi_dcmpeq>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d1a7      	bne.n	800c48c <_strtod_l+0x564>
 800c53c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c542:	9805      	ldr	r0, [sp, #20]
 800c544:	462b      	mov	r3, r5
 800c546:	464a      	mov	r2, r9
 800c548:	f7ff f8ce 	bl	800b6e8 <__s2b>
 800c54c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c54e:	2800      	cmp	r0, #0
 800c550:	f43f af09 	beq.w	800c366 <_strtod_l+0x43e>
 800c554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c558:	2a00      	cmp	r2, #0
 800c55a:	eba3 0308 	sub.w	r3, r3, r8
 800c55e:	bfa8      	it	ge
 800c560:	2300      	movge	r3, #0
 800c562:	9312      	str	r3, [sp, #72]	@ 0x48
 800c564:	2400      	movs	r4, #0
 800c566:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c56a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c56c:	46a0      	mov	r8, r4
 800c56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c570:	9805      	ldr	r0, [sp, #20]
 800c572:	6859      	ldr	r1, [r3, #4]
 800c574:	f7ff f810 	bl	800b598 <_Balloc>
 800c578:	4681      	mov	r9, r0
 800c57a:	2800      	cmp	r0, #0
 800c57c:	f43f aef7 	beq.w	800c36e <_strtod_l+0x446>
 800c580:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c582:	691a      	ldr	r2, [r3, #16]
 800c584:	3202      	adds	r2, #2
 800c586:	f103 010c 	add.w	r1, r3, #12
 800c58a:	0092      	lsls	r2, r2, #2
 800c58c:	300c      	adds	r0, #12
 800c58e:	f000 ff37 	bl	800d400 <memcpy>
 800c592:	ec4b ab10 	vmov	d0, sl, fp
 800c596:	9805      	ldr	r0, [sp, #20]
 800c598:	aa1c      	add	r2, sp, #112	@ 0x70
 800c59a:	a91b      	add	r1, sp, #108	@ 0x6c
 800c59c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c5a0:	f7ff fbd6 	bl	800bd50 <__d2b>
 800c5a4:	901a      	str	r0, [sp, #104]	@ 0x68
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	f43f aee1 	beq.w	800c36e <_strtod_l+0x446>
 800c5ac:	9805      	ldr	r0, [sp, #20]
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	f7ff f930 	bl	800b814 <__i2b>
 800c5b4:	4680      	mov	r8, r0
 800c5b6:	b948      	cbnz	r0, 800c5cc <_strtod_l+0x6a4>
 800c5b8:	f04f 0800 	mov.w	r8, #0
 800c5bc:	e6d7      	b.n	800c36e <_strtod_l+0x446>
 800c5be:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c6:	ea03 0a0a 	and.w	sl, r3, sl
 800c5ca:	e7af      	b.n	800c52c <_strtod_l+0x604>
 800c5cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c5ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c5d0:	2d00      	cmp	r5, #0
 800c5d2:	bfab      	itete	ge
 800c5d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c5d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c5d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c5da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c5dc:	bfac      	ite	ge
 800c5de:	18ef      	addge	r7, r5, r3
 800c5e0:	1b5e      	sublt	r6, r3, r5
 800c5e2:	9b08      	ldr	r3, [sp, #32]
 800c5e4:	1aed      	subs	r5, r5, r3
 800c5e6:	4415      	add	r5, r2
 800c5e8:	4b65      	ldr	r3, [pc, #404]	@ (800c780 <_strtod_l+0x858>)
 800c5ea:	3d01      	subs	r5, #1
 800c5ec:	429d      	cmp	r5, r3
 800c5ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c5f2:	da50      	bge.n	800c696 <_strtod_l+0x76e>
 800c5f4:	1b5b      	subs	r3, r3, r5
 800c5f6:	2b1f      	cmp	r3, #31
 800c5f8:	eba2 0203 	sub.w	r2, r2, r3
 800c5fc:	f04f 0101 	mov.w	r1, #1
 800c600:	dc3d      	bgt.n	800c67e <_strtod_l+0x756>
 800c602:	fa01 f303 	lsl.w	r3, r1, r3
 800c606:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c608:	2300      	movs	r3, #0
 800c60a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c60c:	18bd      	adds	r5, r7, r2
 800c60e:	9b08      	ldr	r3, [sp, #32]
 800c610:	42af      	cmp	r7, r5
 800c612:	4416      	add	r6, r2
 800c614:	441e      	add	r6, r3
 800c616:	463b      	mov	r3, r7
 800c618:	bfa8      	it	ge
 800c61a:	462b      	movge	r3, r5
 800c61c:	42b3      	cmp	r3, r6
 800c61e:	bfa8      	it	ge
 800c620:	4633      	movge	r3, r6
 800c622:	2b00      	cmp	r3, #0
 800c624:	bfc2      	ittt	gt
 800c626:	1aed      	subgt	r5, r5, r3
 800c628:	1af6      	subgt	r6, r6, r3
 800c62a:	1aff      	subgt	r7, r7, r3
 800c62c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c62e:	2b00      	cmp	r3, #0
 800c630:	dd16      	ble.n	800c660 <_strtod_l+0x738>
 800c632:	4641      	mov	r1, r8
 800c634:	9805      	ldr	r0, [sp, #20]
 800c636:	461a      	mov	r2, r3
 800c638:	f7ff f9a4 	bl	800b984 <__pow5mult>
 800c63c:	4680      	mov	r8, r0
 800c63e:	2800      	cmp	r0, #0
 800c640:	d0ba      	beq.n	800c5b8 <_strtod_l+0x690>
 800c642:	4601      	mov	r1, r0
 800c644:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c646:	9805      	ldr	r0, [sp, #20]
 800c648:	f7ff f8fa 	bl	800b840 <__multiply>
 800c64c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c64e:	2800      	cmp	r0, #0
 800c650:	f43f ae8d 	beq.w	800c36e <_strtod_l+0x446>
 800c654:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c656:	9805      	ldr	r0, [sp, #20]
 800c658:	f7fe ffde 	bl	800b618 <_Bfree>
 800c65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c65e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c660:	2d00      	cmp	r5, #0
 800c662:	dc1d      	bgt.n	800c6a0 <_strtod_l+0x778>
 800c664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c666:	2b00      	cmp	r3, #0
 800c668:	dd23      	ble.n	800c6b2 <_strtod_l+0x78a>
 800c66a:	4649      	mov	r1, r9
 800c66c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c66e:	9805      	ldr	r0, [sp, #20]
 800c670:	f7ff f988 	bl	800b984 <__pow5mult>
 800c674:	4681      	mov	r9, r0
 800c676:	b9e0      	cbnz	r0, 800c6b2 <_strtod_l+0x78a>
 800c678:	f04f 0900 	mov.w	r9, #0
 800c67c:	e677      	b.n	800c36e <_strtod_l+0x446>
 800c67e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c682:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c686:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c68a:	35e2      	adds	r5, #226	@ 0xe2
 800c68c:	fa01 f305 	lsl.w	r3, r1, r5
 800c690:	9310      	str	r3, [sp, #64]	@ 0x40
 800c692:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c694:	e7ba      	b.n	800c60c <_strtod_l+0x6e4>
 800c696:	2300      	movs	r3, #0
 800c698:	9310      	str	r3, [sp, #64]	@ 0x40
 800c69a:	2301      	movs	r3, #1
 800c69c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c69e:	e7b5      	b.n	800c60c <_strtod_l+0x6e4>
 800c6a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6a2:	9805      	ldr	r0, [sp, #20]
 800c6a4:	462a      	mov	r2, r5
 800c6a6:	f7ff f9c7 	bl	800ba38 <__lshift>
 800c6aa:	901a      	str	r0, [sp, #104]	@ 0x68
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d1d9      	bne.n	800c664 <_strtod_l+0x73c>
 800c6b0:	e65d      	b.n	800c36e <_strtod_l+0x446>
 800c6b2:	2e00      	cmp	r6, #0
 800c6b4:	dd07      	ble.n	800c6c6 <_strtod_l+0x79e>
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	9805      	ldr	r0, [sp, #20]
 800c6ba:	4632      	mov	r2, r6
 800c6bc:	f7ff f9bc 	bl	800ba38 <__lshift>
 800c6c0:	4681      	mov	r9, r0
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	d0d8      	beq.n	800c678 <_strtod_l+0x750>
 800c6c6:	2f00      	cmp	r7, #0
 800c6c8:	dd08      	ble.n	800c6dc <_strtod_l+0x7b4>
 800c6ca:	4641      	mov	r1, r8
 800c6cc:	9805      	ldr	r0, [sp, #20]
 800c6ce:	463a      	mov	r2, r7
 800c6d0:	f7ff f9b2 	bl	800ba38 <__lshift>
 800c6d4:	4680      	mov	r8, r0
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	f43f ae49 	beq.w	800c36e <_strtod_l+0x446>
 800c6dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6de:	9805      	ldr	r0, [sp, #20]
 800c6e0:	464a      	mov	r2, r9
 800c6e2:	f7ff fa31 	bl	800bb48 <__mdiff>
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f43f ae40 	beq.w	800c36e <_strtod_l+0x446>
 800c6ee:	68c3      	ldr	r3, [r0, #12]
 800c6f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	60c3      	str	r3, [r0, #12]
 800c6f6:	4641      	mov	r1, r8
 800c6f8:	f7ff fa0a 	bl	800bb10 <__mcmp>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	da45      	bge.n	800c78c <_strtod_l+0x864>
 800c700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c702:	ea53 030a 	orrs.w	r3, r3, sl
 800c706:	d16b      	bne.n	800c7e0 <_strtod_l+0x8b8>
 800c708:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d167      	bne.n	800c7e0 <_strtod_l+0x8b8>
 800c710:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c714:	0d1b      	lsrs	r3, r3, #20
 800c716:	051b      	lsls	r3, r3, #20
 800c718:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c71c:	d960      	bls.n	800c7e0 <_strtod_l+0x8b8>
 800c71e:	6963      	ldr	r3, [r4, #20]
 800c720:	b913      	cbnz	r3, 800c728 <_strtod_l+0x800>
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	2b01      	cmp	r3, #1
 800c726:	dd5b      	ble.n	800c7e0 <_strtod_l+0x8b8>
 800c728:	4621      	mov	r1, r4
 800c72a:	2201      	movs	r2, #1
 800c72c:	9805      	ldr	r0, [sp, #20]
 800c72e:	f7ff f983 	bl	800ba38 <__lshift>
 800c732:	4641      	mov	r1, r8
 800c734:	4604      	mov	r4, r0
 800c736:	f7ff f9eb 	bl	800bb10 <__mcmp>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	dd50      	ble.n	800c7e0 <_strtod_l+0x8b8>
 800c73e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c742:	9a08      	ldr	r2, [sp, #32]
 800c744:	0d1b      	lsrs	r3, r3, #20
 800c746:	051b      	lsls	r3, r3, #20
 800c748:	2a00      	cmp	r2, #0
 800c74a:	d06a      	beq.n	800c822 <_strtod_l+0x8fa>
 800c74c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c750:	d867      	bhi.n	800c822 <_strtod_l+0x8fa>
 800c752:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c756:	f67f ae9d 	bls.w	800c494 <_strtod_l+0x56c>
 800c75a:	4b0a      	ldr	r3, [pc, #40]	@ (800c784 <_strtod_l+0x85c>)
 800c75c:	4650      	mov	r0, sl
 800c75e:	4659      	mov	r1, fp
 800c760:	2200      	movs	r2, #0
 800c762:	f7f3 ff69 	bl	8000638 <__aeabi_dmul>
 800c766:	4b08      	ldr	r3, [pc, #32]	@ (800c788 <_strtod_l+0x860>)
 800c768:	400b      	ands	r3, r1
 800c76a:	4682      	mov	sl, r0
 800c76c:	468b      	mov	fp, r1
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f47f ae08 	bne.w	800c384 <_strtod_l+0x45c>
 800c774:	9a05      	ldr	r2, [sp, #20]
 800c776:	2322      	movs	r3, #34	@ 0x22
 800c778:	6013      	str	r3, [r2, #0]
 800c77a:	e603      	b.n	800c384 <_strtod_l+0x45c>
 800c77c:	0800eac8 	.word	0x0800eac8
 800c780:	fffffc02 	.word	0xfffffc02
 800c784:	39500000 	.word	0x39500000
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c790:	d165      	bne.n	800c85e <_strtod_l+0x936>
 800c792:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c798:	b35a      	cbz	r2, 800c7f2 <_strtod_l+0x8ca>
 800c79a:	4a9f      	ldr	r2, [pc, #636]	@ (800ca18 <_strtod_l+0xaf0>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d12b      	bne.n	800c7f8 <_strtod_l+0x8d0>
 800c7a0:	9b08      	ldr	r3, [sp, #32]
 800c7a2:	4651      	mov	r1, sl
 800c7a4:	b303      	cbz	r3, 800c7e8 <_strtod_l+0x8c0>
 800c7a6:	4b9d      	ldr	r3, [pc, #628]	@ (800ca1c <_strtod_l+0xaf4>)
 800c7a8:	465a      	mov	r2, fp
 800c7aa:	4013      	ands	r3, r2
 800c7ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b4:	d81b      	bhi.n	800c7ee <_strtod_l+0x8c6>
 800c7b6:	0d1b      	lsrs	r3, r3, #20
 800c7b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c0:	4299      	cmp	r1, r3
 800c7c2:	d119      	bne.n	800c7f8 <_strtod_l+0x8d0>
 800c7c4:	4b96      	ldr	r3, [pc, #600]	@ (800ca20 <_strtod_l+0xaf8>)
 800c7c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d102      	bne.n	800c7d2 <_strtod_l+0x8aa>
 800c7cc:	3101      	adds	r1, #1
 800c7ce:	f43f adce 	beq.w	800c36e <_strtod_l+0x446>
 800c7d2:	4b92      	ldr	r3, [pc, #584]	@ (800ca1c <_strtod_l+0xaf4>)
 800c7d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7d6:	401a      	ands	r2, r3
 800c7d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c7dc:	f04f 0a00 	mov.w	sl, #0
 800c7e0:	9b08      	ldr	r3, [sp, #32]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1b9      	bne.n	800c75a <_strtod_l+0x832>
 800c7e6:	e5cd      	b.n	800c384 <_strtod_l+0x45c>
 800c7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ec:	e7e8      	b.n	800c7c0 <_strtod_l+0x898>
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	e7e6      	b.n	800c7c0 <_strtod_l+0x898>
 800c7f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c7f6:	d0a2      	beq.n	800c73e <_strtod_l+0x816>
 800c7f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7fa:	b1db      	cbz	r3, 800c834 <_strtod_l+0x90c>
 800c7fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7fe:	4213      	tst	r3, r2
 800c800:	d0ee      	beq.n	800c7e0 <_strtod_l+0x8b8>
 800c802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c804:	9a08      	ldr	r2, [sp, #32]
 800c806:	4650      	mov	r0, sl
 800c808:	4659      	mov	r1, fp
 800c80a:	b1bb      	cbz	r3, 800c83c <_strtod_l+0x914>
 800c80c:	f7ff fb6e 	bl	800beec <sulp>
 800c810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c814:	ec53 2b10 	vmov	r2, r3, d0
 800c818:	f7f3 fd58 	bl	80002cc <__adddf3>
 800c81c:	4682      	mov	sl, r0
 800c81e:	468b      	mov	fp, r1
 800c820:	e7de      	b.n	800c7e0 <_strtod_l+0x8b8>
 800c822:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c826:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c82a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c82e:	f04f 3aff 	mov.w	sl, #4294967295
 800c832:	e7d5      	b.n	800c7e0 <_strtod_l+0x8b8>
 800c834:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c836:	ea13 0f0a 	tst.w	r3, sl
 800c83a:	e7e1      	b.n	800c800 <_strtod_l+0x8d8>
 800c83c:	f7ff fb56 	bl	800beec <sulp>
 800c840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c844:	ec53 2b10 	vmov	r2, r3, d0
 800c848:	f7f3 fd3e 	bl	80002c8 <__aeabi_dsub>
 800c84c:	2200      	movs	r2, #0
 800c84e:	2300      	movs	r3, #0
 800c850:	4682      	mov	sl, r0
 800c852:	468b      	mov	fp, r1
 800c854:	f7f4 f958 	bl	8000b08 <__aeabi_dcmpeq>
 800c858:	2800      	cmp	r0, #0
 800c85a:	d0c1      	beq.n	800c7e0 <_strtod_l+0x8b8>
 800c85c:	e61a      	b.n	800c494 <_strtod_l+0x56c>
 800c85e:	4641      	mov	r1, r8
 800c860:	4620      	mov	r0, r4
 800c862:	f7ff facd 	bl	800be00 <__ratio>
 800c866:	ec57 6b10 	vmov	r6, r7, d0
 800c86a:	2200      	movs	r2, #0
 800c86c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c870:	4630      	mov	r0, r6
 800c872:	4639      	mov	r1, r7
 800c874:	f7f4 f95c 	bl	8000b30 <__aeabi_dcmple>
 800c878:	2800      	cmp	r0, #0
 800c87a:	d06f      	beq.n	800c95c <_strtod_l+0xa34>
 800c87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d17a      	bne.n	800c978 <_strtod_l+0xa50>
 800c882:	f1ba 0f00 	cmp.w	sl, #0
 800c886:	d158      	bne.n	800c93a <_strtod_l+0xa12>
 800c888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c88a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d15a      	bne.n	800c948 <_strtod_l+0xa20>
 800c892:	4b64      	ldr	r3, [pc, #400]	@ (800ca24 <_strtod_l+0xafc>)
 800c894:	2200      	movs	r2, #0
 800c896:	4630      	mov	r0, r6
 800c898:	4639      	mov	r1, r7
 800c89a:	f7f4 f93f 	bl	8000b1c <__aeabi_dcmplt>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d159      	bne.n	800c956 <_strtod_l+0xa2e>
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	4639      	mov	r1, r7
 800c8a6:	4b60      	ldr	r3, [pc, #384]	@ (800ca28 <_strtod_l+0xb00>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f7f3 fec5 	bl	8000638 <__aeabi_dmul>
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	460f      	mov	r7, r1
 800c8b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c8b6:	9606      	str	r6, [sp, #24]
 800c8b8:	9307      	str	r3, [sp, #28]
 800c8ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8be:	4d57      	ldr	r5, [pc, #348]	@ (800ca1c <_strtod_l+0xaf4>)
 800c8c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c8c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8c6:	401d      	ands	r5, r3
 800c8c8:	4b58      	ldr	r3, [pc, #352]	@ (800ca2c <_strtod_l+0xb04>)
 800c8ca:	429d      	cmp	r5, r3
 800c8cc:	f040 80b2 	bne.w	800ca34 <_strtod_l+0xb0c>
 800c8d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c8d6:	ec4b ab10 	vmov	d0, sl, fp
 800c8da:	f7ff f9c9 	bl	800bc70 <__ulp>
 800c8de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8e2:	ec51 0b10 	vmov	r0, r1, d0
 800c8e6:	f7f3 fea7 	bl	8000638 <__aeabi_dmul>
 800c8ea:	4652      	mov	r2, sl
 800c8ec:	465b      	mov	r3, fp
 800c8ee:	f7f3 fced 	bl	80002cc <__adddf3>
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4949      	ldr	r1, [pc, #292]	@ (800ca1c <_strtod_l+0xaf4>)
 800c8f6:	4a4e      	ldr	r2, [pc, #312]	@ (800ca30 <_strtod_l+0xb08>)
 800c8f8:	4019      	ands	r1, r3
 800c8fa:	4291      	cmp	r1, r2
 800c8fc:	4682      	mov	sl, r0
 800c8fe:	d942      	bls.n	800c986 <_strtod_l+0xa5e>
 800c900:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c902:	4b47      	ldr	r3, [pc, #284]	@ (800ca20 <_strtod_l+0xaf8>)
 800c904:	429a      	cmp	r2, r3
 800c906:	d103      	bne.n	800c910 <_strtod_l+0x9e8>
 800c908:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c90a:	3301      	adds	r3, #1
 800c90c:	f43f ad2f 	beq.w	800c36e <_strtod_l+0x446>
 800c910:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ca20 <_strtod_l+0xaf8>
 800c914:	f04f 3aff 	mov.w	sl, #4294967295
 800c918:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c91a:	9805      	ldr	r0, [sp, #20]
 800c91c:	f7fe fe7c 	bl	800b618 <_Bfree>
 800c920:	9805      	ldr	r0, [sp, #20]
 800c922:	4649      	mov	r1, r9
 800c924:	f7fe fe78 	bl	800b618 <_Bfree>
 800c928:	9805      	ldr	r0, [sp, #20]
 800c92a:	4641      	mov	r1, r8
 800c92c:	f7fe fe74 	bl	800b618 <_Bfree>
 800c930:	9805      	ldr	r0, [sp, #20]
 800c932:	4621      	mov	r1, r4
 800c934:	f7fe fe70 	bl	800b618 <_Bfree>
 800c938:	e619      	b.n	800c56e <_strtod_l+0x646>
 800c93a:	f1ba 0f01 	cmp.w	sl, #1
 800c93e:	d103      	bne.n	800c948 <_strtod_l+0xa20>
 800c940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c942:	2b00      	cmp	r3, #0
 800c944:	f43f ada6 	beq.w	800c494 <_strtod_l+0x56c>
 800c948:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c9f8 <_strtod_l+0xad0>
 800c94c:	4f35      	ldr	r7, [pc, #212]	@ (800ca24 <_strtod_l+0xafc>)
 800c94e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c952:	2600      	movs	r6, #0
 800c954:	e7b1      	b.n	800c8ba <_strtod_l+0x992>
 800c956:	4f34      	ldr	r7, [pc, #208]	@ (800ca28 <_strtod_l+0xb00>)
 800c958:	2600      	movs	r6, #0
 800c95a:	e7aa      	b.n	800c8b2 <_strtod_l+0x98a>
 800c95c:	4b32      	ldr	r3, [pc, #200]	@ (800ca28 <_strtod_l+0xb00>)
 800c95e:	4630      	mov	r0, r6
 800c960:	4639      	mov	r1, r7
 800c962:	2200      	movs	r2, #0
 800c964:	f7f3 fe68 	bl	8000638 <__aeabi_dmul>
 800c968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c96a:	4606      	mov	r6, r0
 800c96c:	460f      	mov	r7, r1
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d09f      	beq.n	800c8b2 <_strtod_l+0x98a>
 800c972:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c976:	e7a0      	b.n	800c8ba <_strtod_l+0x992>
 800c978:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ca00 <_strtod_l+0xad8>
 800c97c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c980:	ec57 6b17 	vmov	r6, r7, d7
 800c984:	e799      	b.n	800c8ba <_strtod_l+0x992>
 800c986:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c98a:	9b08      	ldr	r3, [sp, #32]
 800c98c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1c1      	bne.n	800c918 <_strtod_l+0x9f0>
 800c994:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c998:	0d1b      	lsrs	r3, r3, #20
 800c99a:	051b      	lsls	r3, r3, #20
 800c99c:	429d      	cmp	r5, r3
 800c99e:	d1bb      	bne.n	800c918 <_strtod_l+0x9f0>
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	f7f4 f9a8 	bl	8000cf8 <__aeabi_d2lz>
 800c9a8:	f7f3 fe18 	bl	80005dc <__aeabi_l2d>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	4630      	mov	r0, r6
 800c9b2:	4639      	mov	r1, r7
 800c9b4:	f7f3 fc88 	bl	80002c8 <__aeabi_dsub>
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c9c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9c6:	ea46 060a 	orr.w	r6, r6, sl
 800c9ca:	431e      	orrs	r6, r3
 800c9cc:	d06f      	beq.n	800caae <_strtod_l+0xb86>
 800c9ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800ca08 <_strtod_l+0xae0>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	f7f4 f8a2 	bl	8000b1c <__aeabi_dcmplt>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f47f acd3 	bne.w	800c384 <_strtod_l+0x45c>
 800c9de:	a30c      	add	r3, pc, #48	@ (adr r3, 800ca10 <_strtod_l+0xae8>)
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9e8:	f7f4 f8b6 	bl	8000b58 <__aeabi_dcmpgt>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d093      	beq.n	800c918 <_strtod_l+0x9f0>
 800c9f0:	e4c8      	b.n	800c384 <_strtod_l+0x45c>
 800c9f2:	bf00      	nop
 800c9f4:	f3af 8000 	nop.w
 800c9f8:	00000000 	.word	0x00000000
 800c9fc:	bff00000 	.word	0xbff00000
 800ca00:	00000000 	.word	0x00000000
 800ca04:	3ff00000 	.word	0x3ff00000
 800ca08:	94a03595 	.word	0x94a03595
 800ca0c:	3fdfffff 	.word	0x3fdfffff
 800ca10:	35afe535 	.word	0x35afe535
 800ca14:	3fe00000 	.word	0x3fe00000
 800ca18:	000fffff 	.word	0x000fffff
 800ca1c:	7ff00000 	.word	0x7ff00000
 800ca20:	7fefffff 	.word	0x7fefffff
 800ca24:	3ff00000 	.word	0x3ff00000
 800ca28:	3fe00000 	.word	0x3fe00000
 800ca2c:	7fe00000 	.word	0x7fe00000
 800ca30:	7c9fffff 	.word	0x7c9fffff
 800ca34:	9b08      	ldr	r3, [sp, #32]
 800ca36:	b323      	cbz	r3, 800ca82 <_strtod_l+0xb5a>
 800ca38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ca3c:	d821      	bhi.n	800ca82 <_strtod_l+0xb5a>
 800ca3e:	a328      	add	r3, pc, #160	@ (adr r3, 800cae0 <_strtod_l+0xbb8>)
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	4630      	mov	r0, r6
 800ca46:	4639      	mov	r1, r7
 800ca48:	f7f4 f872 	bl	8000b30 <__aeabi_dcmple>
 800ca4c:	b1a0      	cbz	r0, 800ca78 <_strtod_l+0xb50>
 800ca4e:	4639      	mov	r1, r7
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7f4 f8c9 	bl	8000be8 <__aeabi_d2uiz>
 800ca56:	2801      	cmp	r0, #1
 800ca58:	bf38      	it	cc
 800ca5a:	2001      	movcc	r0, #1
 800ca5c:	f7f3 fd72 	bl	8000544 <__aeabi_ui2d>
 800ca60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca62:	4606      	mov	r6, r0
 800ca64:	460f      	mov	r7, r1
 800ca66:	b9fb      	cbnz	r3, 800caa8 <_strtod_l+0xb80>
 800ca68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca6c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ca6e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ca74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ca7e:	1b5b      	subs	r3, r3, r5
 800ca80:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ca86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ca8a:	f7ff f8f1 	bl	800bc70 <__ulp>
 800ca8e:	4650      	mov	r0, sl
 800ca90:	ec53 2b10 	vmov	r2, r3, d0
 800ca94:	4659      	mov	r1, fp
 800ca96:	f7f3 fdcf 	bl	8000638 <__aeabi_dmul>
 800ca9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ca9e:	f7f3 fc15 	bl	80002cc <__adddf3>
 800caa2:	4682      	mov	sl, r0
 800caa4:	468b      	mov	fp, r1
 800caa6:	e770      	b.n	800c98a <_strtod_l+0xa62>
 800caa8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800caac:	e7e0      	b.n	800ca70 <_strtod_l+0xb48>
 800caae:	a30e      	add	r3, pc, #56	@ (adr r3, 800cae8 <_strtod_l+0xbc0>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f7f4 f832 	bl	8000b1c <__aeabi_dcmplt>
 800cab8:	e798      	b.n	800c9ec <_strtod_l+0xac4>
 800caba:	2300      	movs	r3, #0
 800cabc:	930e      	str	r3, [sp, #56]	@ 0x38
 800cabe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cac0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cac2:	6013      	str	r3, [r2, #0]
 800cac4:	f7ff ba6d 	b.w	800bfa2 <_strtod_l+0x7a>
 800cac8:	2a65      	cmp	r2, #101	@ 0x65
 800caca:	f43f ab68 	beq.w	800c19e <_strtod_l+0x276>
 800cace:	2a45      	cmp	r2, #69	@ 0x45
 800cad0:	f43f ab65 	beq.w	800c19e <_strtod_l+0x276>
 800cad4:	2301      	movs	r3, #1
 800cad6:	f7ff bba0 	b.w	800c21a <_strtod_l+0x2f2>
 800cada:	bf00      	nop
 800cadc:	f3af 8000 	nop.w
 800cae0:	ffc00000 	.word	0xffc00000
 800cae4:	41dfffff 	.word	0x41dfffff
 800cae8:	94a03595 	.word	0x94a03595
 800caec:	3fcfffff 	.word	0x3fcfffff

0800caf0 <_strtod_r>:
 800caf0:	4b01      	ldr	r3, [pc, #4]	@ (800caf8 <_strtod_r+0x8>)
 800caf2:	f7ff ba19 	b.w	800bf28 <_strtod_l>
 800caf6:	bf00      	nop
 800caf8:	2000006c 	.word	0x2000006c

0800cafc <_strtol_l.isra.0>:
 800cafc:	2b24      	cmp	r3, #36	@ 0x24
 800cafe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb02:	4686      	mov	lr, r0
 800cb04:	4690      	mov	r8, r2
 800cb06:	d801      	bhi.n	800cb0c <_strtol_l.isra.0+0x10>
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d106      	bne.n	800cb1a <_strtol_l.isra.0+0x1e>
 800cb0c:	f7fd fdb6 	bl	800a67c <__errno>
 800cb10:	2316      	movs	r3, #22
 800cb12:	6003      	str	r3, [r0, #0]
 800cb14:	2000      	movs	r0, #0
 800cb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb1a:	4834      	ldr	r0, [pc, #208]	@ (800cbec <_strtol_l.isra.0+0xf0>)
 800cb1c:	460d      	mov	r5, r1
 800cb1e:	462a      	mov	r2, r5
 800cb20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb24:	5d06      	ldrb	r6, [r0, r4]
 800cb26:	f016 0608 	ands.w	r6, r6, #8
 800cb2a:	d1f8      	bne.n	800cb1e <_strtol_l.isra.0+0x22>
 800cb2c:	2c2d      	cmp	r4, #45	@ 0x2d
 800cb2e:	d110      	bne.n	800cb52 <_strtol_l.isra.0+0x56>
 800cb30:	782c      	ldrb	r4, [r5, #0]
 800cb32:	2601      	movs	r6, #1
 800cb34:	1c95      	adds	r5, r2, #2
 800cb36:	f033 0210 	bics.w	r2, r3, #16
 800cb3a:	d115      	bne.n	800cb68 <_strtol_l.isra.0+0x6c>
 800cb3c:	2c30      	cmp	r4, #48	@ 0x30
 800cb3e:	d10d      	bne.n	800cb5c <_strtol_l.isra.0+0x60>
 800cb40:	782a      	ldrb	r2, [r5, #0]
 800cb42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cb46:	2a58      	cmp	r2, #88	@ 0x58
 800cb48:	d108      	bne.n	800cb5c <_strtol_l.isra.0+0x60>
 800cb4a:	786c      	ldrb	r4, [r5, #1]
 800cb4c:	3502      	adds	r5, #2
 800cb4e:	2310      	movs	r3, #16
 800cb50:	e00a      	b.n	800cb68 <_strtol_l.isra.0+0x6c>
 800cb52:	2c2b      	cmp	r4, #43	@ 0x2b
 800cb54:	bf04      	itt	eq
 800cb56:	782c      	ldrbeq	r4, [r5, #0]
 800cb58:	1c95      	addeq	r5, r2, #2
 800cb5a:	e7ec      	b.n	800cb36 <_strtol_l.isra.0+0x3a>
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1f6      	bne.n	800cb4e <_strtol_l.isra.0+0x52>
 800cb60:	2c30      	cmp	r4, #48	@ 0x30
 800cb62:	bf14      	ite	ne
 800cb64:	230a      	movne	r3, #10
 800cb66:	2308      	moveq	r3, #8
 800cb68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cb6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cb70:	2200      	movs	r2, #0
 800cb72:	fbbc f9f3 	udiv	r9, ip, r3
 800cb76:	4610      	mov	r0, r2
 800cb78:	fb03 ca19 	mls	sl, r3, r9, ip
 800cb7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cb80:	2f09      	cmp	r7, #9
 800cb82:	d80f      	bhi.n	800cba4 <_strtol_l.isra.0+0xa8>
 800cb84:	463c      	mov	r4, r7
 800cb86:	42a3      	cmp	r3, r4
 800cb88:	dd1b      	ble.n	800cbc2 <_strtol_l.isra.0+0xc6>
 800cb8a:	1c57      	adds	r7, r2, #1
 800cb8c:	d007      	beq.n	800cb9e <_strtol_l.isra.0+0xa2>
 800cb8e:	4581      	cmp	r9, r0
 800cb90:	d314      	bcc.n	800cbbc <_strtol_l.isra.0+0xc0>
 800cb92:	d101      	bne.n	800cb98 <_strtol_l.isra.0+0x9c>
 800cb94:	45a2      	cmp	sl, r4
 800cb96:	db11      	blt.n	800cbbc <_strtol_l.isra.0+0xc0>
 800cb98:	fb00 4003 	mla	r0, r0, r3, r4
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cba2:	e7eb      	b.n	800cb7c <_strtol_l.isra.0+0x80>
 800cba4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cba8:	2f19      	cmp	r7, #25
 800cbaa:	d801      	bhi.n	800cbb0 <_strtol_l.isra.0+0xb4>
 800cbac:	3c37      	subs	r4, #55	@ 0x37
 800cbae:	e7ea      	b.n	800cb86 <_strtol_l.isra.0+0x8a>
 800cbb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cbb4:	2f19      	cmp	r7, #25
 800cbb6:	d804      	bhi.n	800cbc2 <_strtol_l.isra.0+0xc6>
 800cbb8:	3c57      	subs	r4, #87	@ 0x57
 800cbba:	e7e4      	b.n	800cb86 <_strtol_l.isra.0+0x8a>
 800cbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc0:	e7ed      	b.n	800cb9e <_strtol_l.isra.0+0xa2>
 800cbc2:	1c53      	adds	r3, r2, #1
 800cbc4:	d108      	bne.n	800cbd8 <_strtol_l.isra.0+0xdc>
 800cbc6:	2322      	movs	r3, #34	@ 0x22
 800cbc8:	f8ce 3000 	str.w	r3, [lr]
 800cbcc:	4660      	mov	r0, ip
 800cbce:	f1b8 0f00 	cmp.w	r8, #0
 800cbd2:	d0a0      	beq.n	800cb16 <_strtol_l.isra.0+0x1a>
 800cbd4:	1e69      	subs	r1, r5, #1
 800cbd6:	e006      	b.n	800cbe6 <_strtol_l.isra.0+0xea>
 800cbd8:	b106      	cbz	r6, 800cbdc <_strtol_l.isra.0+0xe0>
 800cbda:	4240      	negs	r0, r0
 800cbdc:	f1b8 0f00 	cmp.w	r8, #0
 800cbe0:	d099      	beq.n	800cb16 <_strtol_l.isra.0+0x1a>
 800cbe2:	2a00      	cmp	r2, #0
 800cbe4:	d1f6      	bne.n	800cbd4 <_strtol_l.isra.0+0xd8>
 800cbe6:	f8c8 1000 	str.w	r1, [r8]
 800cbea:	e794      	b.n	800cb16 <_strtol_l.isra.0+0x1a>
 800cbec:	0800eaf1 	.word	0x0800eaf1

0800cbf0 <_strtol_r>:
 800cbf0:	f7ff bf84 	b.w	800cafc <_strtol_l.isra.0>

0800cbf4 <__ssputs_r>:
 800cbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf8:	688e      	ldr	r6, [r1, #8]
 800cbfa:	461f      	mov	r7, r3
 800cbfc:	42be      	cmp	r6, r7
 800cbfe:	680b      	ldr	r3, [r1, #0]
 800cc00:	4682      	mov	sl, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	4690      	mov	r8, r2
 800cc06:	d82d      	bhi.n	800cc64 <__ssputs_r+0x70>
 800cc08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc10:	d026      	beq.n	800cc60 <__ssputs_r+0x6c>
 800cc12:	6965      	ldr	r5, [r4, #20]
 800cc14:	6909      	ldr	r1, [r1, #16]
 800cc16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc1a:	eba3 0901 	sub.w	r9, r3, r1
 800cc1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc22:	1c7b      	adds	r3, r7, #1
 800cc24:	444b      	add	r3, r9
 800cc26:	106d      	asrs	r5, r5, #1
 800cc28:	429d      	cmp	r5, r3
 800cc2a:	bf38      	it	cc
 800cc2c:	461d      	movcc	r5, r3
 800cc2e:	0553      	lsls	r3, r2, #21
 800cc30:	d527      	bpl.n	800cc82 <__ssputs_r+0x8e>
 800cc32:	4629      	mov	r1, r5
 800cc34:	f7fe fc24 	bl	800b480 <_malloc_r>
 800cc38:	4606      	mov	r6, r0
 800cc3a:	b360      	cbz	r0, 800cc96 <__ssputs_r+0xa2>
 800cc3c:	6921      	ldr	r1, [r4, #16]
 800cc3e:	464a      	mov	r2, r9
 800cc40:	f000 fbde 	bl	800d400 <memcpy>
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cc4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc4e:	81a3      	strh	r3, [r4, #12]
 800cc50:	6126      	str	r6, [r4, #16]
 800cc52:	6165      	str	r5, [r4, #20]
 800cc54:	444e      	add	r6, r9
 800cc56:	eba5 0509 	sub.w	r5, r5, r9
 800cc5a:	6026      	str	r6, [r4, #0]
 800cc5c:	60a5      	str	r5, [r4, #8]
 800cc5e:	463e      	mov	r6, r7
 800cc60:	42be      	cmp	r6, r7
 800cc62:	d900      	bls.n	800cc66 <__ssputs_r+0x72>
 800cc64:	463e      	mov	r6, r7
 800cc66:	6820      	ldr	r0, [r4, #0]
 800cc68:	4632      	mov	r2, r6
 800cc6a:	4641      	mov	r1, r8
 800cc6c:	f000 fb6a 	bl	800d344 <memmove>
 800cc70:	68a3      	ldr	r3, [r4, #8]
 800cc72:	1b9b      	subs	r3, r3, r6
 800cc74:	60a3      	str	r3, [r4, #8]
 800cc76:	6823      	ldr	r3, [r4, #0]
 800cc78:	4433      	add	r3, r6
 800cc7a:	6023      	str	r3, [r4, #0]
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc82:	462a      	mov	r2, r5
 800cc84:	f000 ff51 	bl	800db2a <_realloc_r>
 800cc88:	4606      	mov	r6, r0
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d1e0      	bne.n	800cc50 <__ssputs_r+0x5c>
 800cc8e:	6921      	ldr	r1, [r4, #16]
 800cc90:	4650      	mov	r0, sl
 800cc92:	f7fe fb81 	bl	800b398 <_free_r>
 800cc96:	230c      	movs	r3, #12
 800cc98:	f8ca 3000 	str.w	r3, [sl]
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cca2:	81a3      	strh	r3, [r4, #12]
 800cca4:	f04f 30ff 	mov.w	r0, #4294967295
 800cca8:	e7e9      	b.n	800cc7e <__ssputs_r+0x8a>
	...

0800ccac <_svfiprintf_r>:
 800ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	4698      	mov	r8, r3
 800ccb2:	898b      	ldrh	r3, [r1, #12]
 800ccb4:	061b      	lsls	r3, r3, #24
 800ccb6:	b09d      	sub	sp, #116	@ 0x74
 800ccb8:	4607      	mov	r7, r0
 800ccba:	460d      	mov	r5, r1
 800ccbc:	4614      	mov	r4, r2
 800ccbe:	d510      	bpl.n	800cce2 <_svfiprintf_r+0x36>
 800ccc0:	690b      	ldr	r3, [r1, #16]
 800ccc2:	b973      	cbnz	r3, 800cce2 <_svfiprintf_r+0x36>
 800ccc4:	2140      	movs	r1, #64	@ 0x40
 800ccc6:	f7fe fbdb 	bl	800b480 <_malloc_r>
 800ccca:	6028      	str	r0, [r5, #0]
 800cccc:	6128      	str	r0, [r5, #16]
 800ccce:	b930      	cbnz	r0, 800ccde <_svfiprintf_r+0x32>
 800ccd0:	230c      	movs	r3, #12
 800ccd2:	603b      	str	r3, [r7, #0]
 800ccd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd8:	b01d      	add	sp, #116	@ 0x74
 800ccda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccde:	2340      	movs	r3, #64	@ 0x40
 800cce0:	616b      	str	r3, [r5, #20]
 800cce2:	2300      	movs	r3, #0
 800cce4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cce6:	2320      	movs	r3, #32
 800cce8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccec:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccf0:	2330      	movs	r3, #48	@ 0x30
 800ccf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ce90 <_svfiprintf_r+0x1e4>
 800ccf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccfa:	f04f 0901 	mov.w	r9, #1
 800ccfe:	4623      	mov	r3, r4
 800cd00:	469a      	mov	sl, r3
 800cd02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd06:	b10a      	cbz	r2, 800cd0c <_svfiprintf_r+0x60>
 800cd08:	2a25      	cmp	r2, #37	@ 0x25
 800cd0a:	d1f9      	bne.n	800cd00 <_svfiprintf_r+0x54>
 800cd0c:	ebba 0b04 	subs.w	fp, sl, r4
 800cd10:	d00b      	beq.n	800cd2a <_svfiprintf_r+0x7e>
 800cd12:	465b      	mov	r3, fp
 800cd14:	4622      	mov	r2, r4
 800cd16:	4629      	mov	r1, r5
 800cd18:	4638      	mov	r0, r7
 800cd1a:	f7ff ff6b 	bl	800cbf4 <__ssputs_r>
 800cd1e:	3001      	adds	r0, #1
 800cd20:	f000 80a7 	beq.w	800ce72 <_svfiprintf_r+0x1c6>
 800cd24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd26:	445a      	add	r2, fp
 800cd28:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f000 809f 	beq.w	800ce72 <_svfiprintf_r+0x1c6>
 800cd34:	2300      	movs	r3, #0
 800cd36:	f04f 32ff 	mov.w	r2, #4294967295
 800cd3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd3e:	f10a 0a01 	add.w	sl, sl, #1
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	9307      	str	r3, [sp, #28]
 800cd46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd4a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd4c:	4654      	mov	r4, sl
 800cd4e:	2205      	movs	r2, #5
 800cd50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd54:	484e      	ldr	r0, [pc, #312]	@ (800ce90 <_svfiprintf_r+0x1e4>)
 800cd56:	f7f3 fa5b 	bl	8000210 <memchr>
 800cd5a:	9a04      	ldr	r2, [sp, #16]
 800cd5c:	b9d8      	cbnz	r0, 800cd96 <_svfiprintf_r+0xea>
 800cd5e:	06d0      	lsls	r0, r2, #27
 800cd60:	bf44      	itt	mi
 800cd62:	2320      	movmi	r3, #32
 800cd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd68:	0711      	lsls	r1, r2, #28
 800cd6a:	bf44      	itt	mi
 800cd6c:	232b      	movmi	r3, #43	@ 0x2b
 800cd6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd72:	f89a 3000 	ldrb.w	r3, [sl]
 800cd76:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd78:	d015      	beq.n	800cda6 <_svfiprintf_r+0xfa>
 800cd7a:	9a07      	ldr	r2, [sp, #28]
 800cd7c:	4654      	mov	r4, sl
 800cd7e:	2000      	movs	r0, #0
 800cd80:	f04f 0c0a 	mov.w	ip, #10
 800cd84:	4621      	mov	r1, r4
 800cd86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd8a:	3b30      	subs	r3, #48	@ 0x30
 800cd8c:	2b09      	cmp	r3, #9
 800cd8e:	d94b      	bls.n	800ce28 <_svfiprintf_r+0x17c>
 800cd90:	b1b0      	cbz	r0, 800cdc0 <_svfiprintf_r+0x114>
 800cd92:	9207      	str	r2, [sp, #28]
 800cd94:	e014      	b.n	800cdc0 <_svfiprintf_r+0x114>
 800cd96:	eba0 0308 	sub.w	r3, r0, r8
 800cd9a:	fa09 f303 	lsl.w	r3, r9, r3
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	9304      	str	r3, [sp, #16]
 800cda2:	46a2      	mov	sl, r4
 800cda4:	e7d2      	b.n	800cd4c <_svfiprintf_r+0xa0>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	1d19      	adds	r1, r3, #4
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	9103      	str	r1, [sp, #12]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	bfbb      	ittet	lt
 800cdb2:	425b      	neglt	r3, r3
 800cdb4:	f042 0202 	orrlt.w	r2, r2, #2
 800cdb8:	9307      	strge	r3, [sp, #28]
 800cdba:	9307      	strlt	r3, [sp, #28]
 800cdbc:	bfb8      	it	lt
 800cdbe:	9204      	strlt	r2, [sp, #16]
 800cdc0:	7823      	ldrb	r3, [r4, #0]
 800cdc2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdc4:	d10a      	bne.n	800cddc <_svfiprintf_r+0x130>
 800cdc6:	7863      	ldrb	r3, [r4, #1]
 800cdc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdca:	d132      	bne.n	800ce32 <_svfiprintf_r+0x186>
 800cdcc:	9b03      	ldr	r3, [sp, #12]
 800cdce:	1d1a      	adds	r2, r3, #4
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	9203      	str	r2, [sp, #12]
 800cdd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdd8:	3402      	adds	r4, #2
 800cdda:	9305      	str	r3, [sp, #20]
 800cddc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cea0 <_svfiprintf_r+0x1f4>
 800cde0:	7821      	ldrb	r1, [r4, #0]
 800cde2:	2203      	movs	r2, #3
 800cde4:	4650      	mov	r0, sl
 800cde6:	f7f3 fa13 	bl	8000210 <memchr>
 800cdea:	b138      	cbz	r0, 800cdfc <_svfiprintf_r+0x150>
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	eba0 000a 	sub.w	r0, r0, sl
 800cdf2:	2240      	movs	r2, #64	@ 0x40
 800cdf4:	4082      	lsls	r2, r0
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	3401      	adds	r4, #1
 800cdfa:	9304      	str	r3, [sp, #16]
 800cdfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce00:	4824      	ldr	r0, [pc, #144]	@ (800ce94 <_svfiprintf_r+0x1e8>)
 800ce02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce06:	2206      	movs	r2, #6
 800ce08:	f7f3 fa02 	bl	8000210 <memchr>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d036      	beq.n	800ce7e <_svfiprintf_r+0x1d2>
 800ce10:	4b21      	ldr	r3, [pc, #132]	@ (800ce98 <_svfiprintf_r+0x1ec>)
 800ce12:	bb1b      	cbnz	r3, 800ce5c <_svfiprintf_r+0x1b0>
 800ce14:	9b03      	ldr	r3, [sp, #12]
 800ce16:	3307      	adds	r3, #7
 800ce18:	f023 0307 	bic.w	r3, r3, #7
 800ce1c:	3308      	adds	r3, #8
 800ce1e:	9303      	str	r3, [sp, #12]
 800ce20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce22:	4433      	add	r3, r6
 800ce24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce26:	e76a      	b.n	800ccfe <_svfiprintf_r+0x52>
 800ce28:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	2001      	movs	r0, #1
 800ce30:	e7a8      	b.n	800cd84 <_svfiprintf_r+0xd8>
 800ce32:	2300      	movs	r3, #0
 800ce34:	3401      	adds	r4, #1
 800ce36:	9305      	str	r3, [sp, #20]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	f04f 0c0a 	mov.w	ip, #10
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce44:	3a30      	subs	r2, #48	@ 0x30
 800ce46:	2a09      	cmp	r2, #9
 800ce48:	d903      	bls.n	800ce52 <_svfiprintf_r+0x1a6>
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d0c6      	beq.n	800cddc <_svfiprintf_r+0x130>
 800ce4e:	9105      	str	r1, [sp, #20]
 800ce50:	e7c4      	b.n	800cddc <_svfiprintf_r+0x130>
 800ce52:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce56:	4604      	mov	r4, r0
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e7f0      	b.n	800ce3e <_svfiprintf_r+0x192>
 800ce5c:	ab03      	add	r3, sp, #12
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	462a      	mov	r2, r5
 800ce62:	4b0e      	ldr	r3, [pc, #56]	@ (800ce9c <_svfiprintf_r+0x1f0>)
 800ce64:	a904      	add	r1, sp, #16
 800ce66:	4638      	mov	r0, r7
 800ce68:	f7fc fb0a 	bl	8009480 <_printf_float>
 800ce6c:	1c42      	adds	r2, r0, #1
 800ce6e:	4606      	mov	r6, r0
 800ce70:	d1d6      	bne.n	800ce20 <_svfiprintf_r+0x174>
 800ce72:	89ab      	ldrh	r3, [r5, #12]
 800ce74:	065b      	lsls	r3, r3, #25
 800ce76:	f53f af2d 	bmi.w	800ccd4 <_svfiprintf_r+0x28>
 800ce7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce7c:	e72c      	b.n	800ccd8 <_svfiprintf_r+0x2c>
 800ce7e:	ab03      	add	r3, sp, #12
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	462a      	mov	r2, r5
 800ce84:	4b05      	ldr	r3, [pc, #20]	@ (800ce9c <_svfiprintf_r+0x1f0>)
 800ce86:	a904      	add	r1, sp, #16
 800ce88:	4638      	mov	r0, r7
 800ce8a:	f7fc fd91 	bl	80099b0 <_printf_i>
 800ce8e:	e7ed      	b.n	800ce6c <_svfiprintf_r+0x1c0>
 800ce90:	0800e8e9 	.word	0x0800e8e9
 800ce94:	0800e8f3 	.word	0x0800e8f3
 800ce98:	08009481 	.word	0x08009481
 800ce9c:	0800cbf5 	.word	0x0800cbf5
 800cea0:	0800e8ef 	.word	0x0800e8ef

0800cea4 <__sfputc_r>:
 800cea4:	6893      	ldr	r3, [r2, #8]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	b410      	push	{r4}
 800ceac:	6093      	str	r3, [r2, #8]
 800ceae:	da08      	bge.n	800cec2 <__sfputc_r+0x1e>
 800ceb0:	6994      	ldr	r4, [r2, #24]
 800ceb2:	42a3      	cmp	r3, r4
 800ceb4:	db01      	blt.n	800ceba <__sfputc_r+0x16>
 800ceb6:	290a      	cmp	r1, #10
 800ceb8:	d103      	bne.n	800cec2 <__sfputc_r+0x1e>
 800ceba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cebe:	f7fd baf6 	b.w	800a4ae <__swbuf_r>
 800cec2:	6813      	ldr	r3, [r2, #0]
 800cec4:	1c58      	adds	r0, r3, #1
 800cec6:	6010      	str	r0, [r2, #0]
 800cec8:	7019      	strb	r1, [r3, #0]
 800ceca:	4608      	mov	r0, r1
 800cecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <__sfputs_r>:
 800ced2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced4:	4606      	mov	r6, r0
 800ced6:	460f      	mov	r7, r1
 800ced8:	4614      	mov	r4, r2
 800ceda:	18d5      	adds	r5, r2, r3
 800cedc:	42ac      	cmp	r4, r5
 800cede:	d101      	bne.n	800cee4 <__sfputs_r+0x12>
 800cee0:	2000      	movs	r0, #0
 800cee2:	e007      	b.n	800cef4 <__sfputs_r+0x22>
 800cee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee8:	463a      	mov	r2, r7
 800ceea:	4630      	mov	r0, r6
 800ceec:	f7ff ffda 	bl	800cea4 <__sfputc_r>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d1f3      	bne.n	800cedc <__sfputs_r+0xa>
 800cef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cef8 <_vfiprintf_r>:
 800cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	460d      	mov	r5, r1
 800cefe:	b09d      	sub	sp, #116	@ 0x74
 800cf00:	4614      	mov	r4, r2
 800cf02:	4698      	mov	r8, r3
 800cf04:	4606      	mov	r6, r0
 800cf06:	b118      	cbz	r0, 800cf10 <_vfiprintf_r+0x18>
 800cf08:	6a03      	ldr	r3, [r0, #32]
 800cf0a:	b90b      	cbnz	r3, 800cf10 <_vfiprintf_r+0x18>
 800cf0c:	f7fd f908 	bl	800a120 <__sinit>
 800cf10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf12:	07d9      	lsls	r1, r3, #31
 800cf14:	d405      	bmi.n	800cf22 <_vfiprintf_r+0x2a>
 800cf16:	89ab      	ldrh	r3, [r5, #12]
 800cf18:	059a      	lsls	r2, r3, #22
 800cf1a:	d402      	bmi.n	800cf22 <_vfiprintf_r+0x2a>
 800cf1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf1e:	f7fd fbd8 	bl	800a6d2 <__retarget_lock_acquire_recursive>
 800cf22:	89ab      	ldrh	r3, [r5, #12]
 800cf24:	071b      	lsls	r3, r3, #28
 800cf26:	d501      	bpl.n	800cf2c <_vfiprintf_r+0x34>
 800cf28:	692b      	ldr	r3, [r5, #16]
 800cf2a:	b99b      	cbnz	r3, 800cf54 <_vfiprintf_r+0x5c>
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4630      	mov	r0, r6
 800cf30:	f7fd fafc 	bl	800a52c <__swsetup_r>
 800cf34:	b170      	cbz	r0, 800cf54 <_vfiprintf_r+0x5c>
 800cf36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf38:	07dc      	lsls	r4, r3, #31
 800cf3a:	d504      	bpl.n	800cf46 <_vfiprintf_r+0x4e>
 800cf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf40:	b01d      	add	sp, #116	@ 0x74
 800cf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf46:	89ab      	ldrh	r3, [r5, #12]
 800cf48:	0598      	lsls	r0, r3, #22
 800cf4a:	d4f7      	bmi.n	800cf3c <_vfiprintf_r+0x44>
 800cf4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf4e:	f7fd fbc1 	bl	800a6d4 <__retarget_lock_release_recursive>
 800cf52:	e7f3      	b.n	800cf3c <_vfiprintf_r+0x44>
 800cf54:	2300      	movs	r3, #0
 800cf56:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf58:	2320      	movs	r3, #32
 800cf5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf62:	2330      	movs	r3, #48	@ 0x30
 800cf64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d114 <_vfiprintf_r+0x21c>
 800cf68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf6c:	f04f 0901 	mov.w	r9, #1
 800cf70:	4623      	mov	r3, r4
 800cf72:	469a      	mov	sl, r3
 800cf74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf78:	b10a      	cbz	r2, 800cf7e <_vfiprintf_r+0x86>
 800cf7a:	2a25      	cmp	r2, #37	@ 0x25
 800cf7c:	d1f9      	bne.n	800cf72 <_vfiprintf_r+0x7a>
 800cf7e:	ebba 0b04 	subs.w	fp, sl, r4
 800cf82:	d00b      	beq.n	800cf9c <_vfiprintf_r+0xa4>
 800cf84:	465b      	mov	r3, fp
 800cf86:	4622      	mov	r2, r4
 800cf88:	4629      	mov	r1, r5
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f7ff ffa1 	bl	800ced2 <__sfputs_r>
 800cf90:	3001      	adds	r0, #1
 800cf92:	f000 80a7 	beq.w	800d0e4 <_vfiprintf_r+0x1ec>
 800cf96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf98:	445a      	add	r2, fp
 800cf9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f000 809f 	beq.w	800d0e4 <_vfiprintf_r+0x1ec>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f04f 32ff 	mov.w	r2, #4294967295
 800cfac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfb0:	f10a 0a01 	add.w	sl, sl, #1
 800cfb4:	9304      	str	r3, [sp, #16]
 800cfb6:	9307      	str	r3, [sp, #28]
 800cfb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cfbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfbe:	4654      	mov	r4, sl
 800cfc0:	2205      	movs	r2, #5
 800cfc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfc6:	4853      	ldr	r0, [pc, #332]	@ (800d114 <_vfiprintf_r+0x21c>)
 800cfc8:	f7f3 f922 	bl	8000210 <memchr>
 800cfcc:	9a04      	ldr	r2, [sp, #16]
 800cfce:	b9d8      	cbnz	r0, 800d008 <_vfiprintf_r+0x110>
 800cfd0:	06d1      	lsls	r1, r2, #27
 800cfd2:	bf44      	itt	mi
 800cfd4:	2320      	movmi	r3, #32
 800cfd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfda:	0713      	lsls	r3, r2, #28
 800cfdc:	bf44      	itt	mi
 800cfde:	232b      	movmi	r3, #43	@ 0x2b
 800cfe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfe4:	f89a 3000 	ldrb.w	r3, [sl]
 800cfe8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfea:	d015      	beq.n	800d018 <_vfiprintf_r+0x120>
 800cfec:	9a07      	ldr	r2, [sp, #28]
 800cfee:	4654      	mov	r4, sl
 800cff0:	2000      	movs	r0, #0
 800cff2:	f04f 0c0a 	mov.w	ip, #10
 800cff6:	4621      	mov	r1, r4
 800cff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cffc:	3b30      	subs	r3, #48	@ 0x30
 800cffe:	2b09      	cmp	r3, #9
 800d000:	d94b      	bls.n	800d09a <_vfiprintf_r+0x1a2>
 800d002:	b1b0      	cbz	r0, 800d032 <_vfiprintf_r+0x13a>
 800d004:	9207      	str	r2, [sp, #28]
 800d006:	e014      	b.n	800d032 <_vfiprintf_r+0x13a>
 800d008:	eba0 0308 	sub.w	r3, r0, r8
 800d00c:	fa09 f303 	lsl.w	r3, r9, r3
 800d010:	4313      	orrs	r3, r2
 800d012:	9304      	str	r3, [sp, #16]
 800d014:	46a2      	mov	sl, r4
 800d016:	e7d2      	b.n	800cfbe <_vfiprintf_r+0xc6>
 800d018:	9b03      	ldr	r3, [sp, #12]
 800d01a:	1d19      	adds	r1, r3, #4
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	9103      	str	r1, [sp, #12]
 800d020:	2b00      	cmp	r3, #0
 800d022:	bfbb      	ittet	lt
 800d024:	425b      	neglt	r3, r3
 800d026:	f042 0202 	orrlt.w	r2, r2, #2
 800d02a:	9307      	strge	r3, [sp, #28]
 800d02c:	9307      	strlt	r3, [sp, #28]
 800d02e:	bfb8      	it	lt
 800d030:	9204      	strlt	r2, [sp, #16]
 800d032:	7823      	ldrb	r3, [r4, #0]
 800d034:	2b2e      	cmp	r3, #46	@ 0x2e
 800d036:	d10a      	bne.n	800d04e <_vfiprintf_r+0x156>
 800d038:	7863      	ldrb	r3, [r4, #1]
 800d03a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d03c:	d132      	bne.n	800d0a4 <_vfiprintf_r+0x1ac>
 800d03e:	9b03      	ldr	r3, [sp, #12]
 800d040:	1d1a      	adds	r2, r3, #4
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	9203      	str	r2, [sp, #12]
 800d046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d04a:	3402      	adds	r4, #2
 800d04c:	9305      	str	r3, [sp, #20]
 800d04e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d124 <_vfiprintf_r+0x22c>
 800d052:	7821      	ldrb	r1, [r4, #0]
 800d054:	2203      	movs	r2, #3
 800d056:	4650      	mov	r0, sl
 800d058:	f7f3 f8da 	bl	8000210 <memchr>
 800d05c:	b138      	cbz	r0, 800d06e <_vfiprintf_r+0x176>
 800d05e:	9b04      	ldr	r3, [sp, #16]
 800d060:	eba0 000a 	sub.w	r0, r0, sl
 800d064:	2240      	movs	r2, #64	@ 0x40
 800d066:	4082      	lsls	r2, r0
 800d068:	4313      	orrs	r3, r2
 800d06a:	3401      	adds	r4, #1
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d072:	4829      	ldr	r0, [pc, #164]	@ (800d118 <_vfiprintf_r+0x220>)
 800d074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d078:	2206      	movs	r2, #6
 800d07a:	f7f3 f8c9 	bl	8000210 <memchr>
 800d07e:	2800      	cmp	r0, #0
 800d080:	d03f      	beq.n	800d102 <_vfiprintf_r+0x20a>
 800d082:	4b26      	ldr	r3, [pc, #152]	@ (800d11c <_vfiprintf_r+0x224>)
 800d084:	bb1b      	cbnz	r3, 800d0ce <_vfiprintf_r+0x1d6>
 800d086:	9b03      	ldr	r3, [sp, #12]
 800d088:	3307      	adds	r3, #7
 800d08a:	f023 0307 	bic.w	r3, r3, #7
 800d08e:	3308      	adds	r3, #8
 800d090:	9303      	str	r3, [sp, #12]
 800d092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d094:	443b      	add	r3, r7
 800d096:	9309      	str	r3, [sp, #36]	@ 0x24
 800d098:	e76a      	b.n	800cf70 <_vfiprintf_r+0x78>
 800d09a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d09e:	460c      	mov	r4, r1
 800d0a0:	2001      	movs	r0, #1
 800d0a2:	e7a8      	b.n	800cff6 <_vfiprintf_r+0xfe>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	3401      	adds	r4, #1
 800d0a8:	9305      	str	r3, [sp, #20]
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	f04f 0c0a 	mov.w	ip, #10
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0b6:	3a30      	subs	r2, #48	@ 0x30
 800d0b8:	2a09      	cmp	r2, #9
 800d0ba:	d903      	bls.n	800d0c4 <_vfiprintf_r+0x1cc>
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d0c6      	beq.n	800d04e <_vfiprintf_r+0x156>
 800d0c0:	9105      	str	r1, [sp, #20]
 800d0c2:	e7c4      	b.n	800d04e <_vfiprintf_r+0x156>
 800d0c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e7f0      	b.n	800d0b0 <_vfiprintf_r+0x1b8>
 800d0ce:	ab03      	add	r3, sp, #12
 800d0d0:	9300      	str	r3, [sp, #0]
 800d0d2:	462a      	mov	r2, r5
 800d0d4:	4b12      	ldr	r3, [pc, #72]	@ (800d120 <_vfiprintf_r+0x228>)
 800d0d6:	a904      	add	r1, sp, #16
 800d0d8:	4630      	mov	r0, r6
 800d0da:	f7fc f9d1 	bl	8009480 <_printf_float>
 800d0de:	4607      	mov	r7, r0
 800d0e0:	1c78      	adds	r0, r7, #1
 800d0e2:	d1d6      	bne.n	800d092 <_vfiprintf_r+0x19a>
 800d0e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0e6:	07d9      	lsls	r1, r3, #31
 800d0e8:	d405      	bmi.n	800d0f6 <_vfiprintf_r+0x1fe>
 800d0ea:	89ab      	ldrh	r3, [r5, #12]
 800d0ec:	059a      	lsls	r2, r3, #22
 800d0ee:	d402      	bmi.n	800d0f6 <_vfiprintf_r+0x1fe>
 800d0f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0f2:	f7fd faef 	bl	800a6d4 <__retarget_lock_release_recursive>
 800d0f6:	89ab      	ldrh	r3, [r5, #12]
 800d0f8:	065b      	lsls	r3, r3, #25
 800d0fa:	f53f af1f 	bmi.w	800cf3c <_vfiprintf_r+0x44>
 800d0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d100:	e71e      	b.n	800cf40 <_vfiprintf_r+0x48>
 800d102:	ab03      	add	r3, sp, #12
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	462a      	mov	r2, r5
 800d108:	4b05      	ldr	r3, [pc, #20]	@ (800d120 <_vfiprintf_r+0x228>)
 800d10a:	a904      	add	r1, sp, #16
 800d10c:	4630      	mov	r0, r6
 800d10e:	f7fc fc4f 	bl	80099b0 <_printf_i>
 800d112:	e7e4      	b.n	800d0de <_vfiprintf_r+0x1e6>
 800d114:	0800e8e9 	.word	0x0800e8e9
 800d118:	0800e8f3 	.word	0x0800e8f3
 800d11c:	08009481 	.word	0x08009481
 800d120:	0800ced3 	.word	0x0800ced3
 800d124:	0800e8ef 	.word	0x0800e8ef

0800d128 <__sflush_r>:
 800d128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d130:	0716      	lsls	r6, r2, #28
 800d132:	4605      	mov	r5, r0
 800d134:	460c      	mov	r4, r1
 800d136:	d454      	bmi.n	800d1e2 <__sflush_r+0xba>
 800d138:	684b      	ldr	r3, [r1, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	dc02      	bgt.n	800d144 <__sflush_r+0x1c>
 800d13e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d140:	2b00      	cmp	r3, #0
 800d142:	dd48      	ble.n	800d1d6 <__sflush_r+0xae>
 800d144:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d146:	2e00      	cmp	r6, #0
 800d148:	d045      	beq.n	800d1d6 <__sflush_r+0xae>
 800d14a:	2300      	movs	r3, #0
 800d14c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d150:	682f      	ldr	r7, [r5, #0]
 800d152:	6a21      	ldr	r1, [r4, #32]
 800d154:	602b      	str	r3, [r5, #0]
 800d156:	d030      	beq.n	800d1ba <__sflush_r+0x92>
 800d158:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	0759      	lsls	r1, r3, #29
 800d15e:	d505      	bpl.n	800d16c <__sflush_r+0x44>
 800d160:	6863      	ldr	r3, [r4, #4]
 800d162:	1ad2      	subs	r2, r2, r3
 800d164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d166:	b10b      	cbz	r3, 800d16c <__sflush_r+0x44>
 800d168:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d16a:	1ad2      	subs	r2, r2, r3
 800d16c:	2300      	movs	r3, #0
 800d16e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d170:	6a21      	ldr	r1, [r4, #32]
 800d172:	4628      	mov	r0, r5
 800d174:	47b0      	blx	r6
 800d176:	1c43      	adds	r3, r0, #1
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	d106      	bne.n	800d18a <__sflush_r+0x62>
 800d17c:	6829      	ldr	r1, [r5, #0]
 800d17e:	291d      	cmp	r1, #29
 800d180:	d82b      	bhi.n	800d1da <__sflush_r+0xb2>
 800d182:	4a2a      	ldr	r2, [pc, #168]	@ (800d22c <__sflush_r+0x104>)
 800d184:	40ca      	lsrs	r2, r1
 800d186:	07d6      	lsls	r6, r2, #31
 800d188:	d527      	bpl.n	800d1da <__sflush_r+0xb2>
 800d18a:	2200      	movs	r2, #0
 800d18c:	6062      	str	r2, [r4, #4]
 800d18e:	04d9      	lsls	r1, r3, #19
 800d190:	6922      	ldr	r2, [r4, #16]
 800d192:	6022      	str	r2, [r4, #0]
 800d194:	d504      	bpl.n	800d1a0 <__sflush_r+0x78>
 800d196:	1c42      	adds	r2, r0, #1
 800d198:	d101      	bne.n	800d19e <__sflush_r+0x76>
 800d19a:	682b      	ldr	r3, [r5, #0]
 800d19c:	b903      	cbnz	r3, 800d1a0 <__sflush_r+0x78>
 800d19e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1a2:	602f      	str	r7, [r5, #0]
 800d1a4:	b1b9      	cbz	r1, 800d1d6 <__sflush_r+0xae>
 800d1a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1aa:	4299      	cmp	r1, r3
 800d1ac:	d002      	beq.n	800d1b4 <__sflush_r+0x8c>
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f7fe f8f2 	bl	800b398 <_free_r>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1b8:	e00d      	b.n	800d1d6 <__sflush_r+0xae>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	4628      	mov	r0, r5
 800d1be:	47b0      	blx	r6
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	1c50      	adds	r0, r2, #1
 800d1c4:	d1c9      	bne.n	800d15a <__sflush_r+0x32>
 800d1c6:	682b      	ldr	r3, [r5, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d0c6      	beq.n	800d15a <__sflush_r+0x32>
 800d1cc:	2b1d      	cmp	r3, #29
 800d1ce:	d001      	beq.n	800d1d4 <__sflush_r+0xac>
 800d1d0:	2b16      	cmp	r3, #22
 800d1d2:	d11e      	bne.n	800d212 <__sflush_r+0xea>
 800d1d4:	602f      	str	r7, [r5, #0]
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	e022      	b.n	800d220 <__sflush_r+0xf8>
 800d1da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1de:	b21b      	sxth	r3, r3
 800d1e0:	e01b      	b.n	800d21a <__sflush_r+0xf2>
 800d1e2:	690f      	ldr	r7, [r1, #16]
 800d1e4:	2f00      	cmp	r7, #0
 800d1e6:	d0f6      	beq.n	800d1d6 <__sflush_r+0xae>
 800d1e8:	0793      	lsls	r3, r2, #30
 800d1ea:	680e      	ldr	r6, [r1, #0]
 800d1ec:	bf08      	it	eq
 800d1ee:	694b      	ldreq	r3, [r1, #20]
 800d1f0:	600f      	str	r7, [r1, #0]
 800d1f2:	bf18      	it	ne
 800d1f4:	2300      	movne	r3, #0
 800d1f6:	eba6 0807 	sub.w	r8, r6, r7
 800d1fa:	608b      	str	r3, [r1, #8]
 800d1fc:	f1b8 0f00 	cmp.w	r8, #0
 800d200:	dde9      	ble.n	800d1d6 <__sflush_r+0xae>
 800d202:	6a21      	ldr	r1, [r4, #32]
 800d204:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d206:	4643      	mov	r3, r8
 800d208:	463a      	mov	r2, r7
 800d20a:	4628      	mov	r0, r5
 800d20c:	47b0      	blx	r6
 800d20e:	2800      	cmp	r0, #0
 800d210:	dc08      	bgt.n	800d224 <__sflush_r+0xfc>
 800d212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d21a:	81a3      	strh	r3, [r4, #12]
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
 800d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d224:	4407      	add	r7, r0
 800d226:	eba8 0800 	sub.w	r8, r8, r0
 800d22a:	e7e7      	b.n	800d1fc <__sflush_r+0xd4>
 800d22c:	20400001 	.word	0x20400001

0800d230 <_fflush_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	690b      	ldr	r3, [r1, #16]
 800d234:	4605      	mov	r5, r0
 800d236:	460c      	mov	r4, r1
 800d238:	b913      	cbnz	r3, 800d240 <_fflush_r+0x10>
 800d23a:	2500      	movs	r5, #0
 800d23c:	4628      	mov	r0, r5
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	b118      	cbz	r0, 800d24a <_fflush_r+0x1a>
 800d242:	6a03      	ldr	r3, [r0, #32]
 800d244:	b90b      	cbnz	r3, 800d24a <_fflush_r+0x1a>
 800d246:	f7fc ff6b 	bl	800a120 <__sinit>
 800d24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d0f3      	beq.n	800d23a <_fflush_r+0xa>
 800d252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d254:	07d0      	lsls	r0, r2, #31
 800d256:	d404      	bmi.n	800d262 <_fflush_r+0x32>
 800d258:	0599      	lsls	r1, r3, #22
 800d25a:	d402      	bmi.n	800d262 <_fflush_r+0x32>
 800d25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d25e:	f7fd fa38 	bl	800a6d2 <__retarget_lock_acquire_recursive>
 800d262:	4628      	mov	r0, r5
 800d264:	4621      	mov	r1, r4
 800d266:	f7ff ff5f 	bl	800d128 <__sflush_r>
 800d26a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d26c:	07da      	lsls	r2, r3, #31
 800d26e:	4605      	mov	r5, r0
 800d270:	d4e4      	bmi.n	800d23c <_fflush_r+0xc>
 800d272:	89a3      	ldrh	r3, [r4, #12]
 800d274:	059b      	lsls	r3, r3, #22
 800d276:	d4e1      	bmi.n	800d23c <_fflush_r+0xc>
 800d278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d27a:	f7fd fa2b 	bl	800a6d4 <__retarget_lock_release_recursive>
 800d27e:	e7dd      	b.n	800d23c <_fflush_r+0xc>

0800d280 <__swhatbuf_r>:
 800d280:	b570      	push	{r4, r5, r6, lr}
 800d282:	460c      	mov	r4, r1
 800d284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d288:	2900      	cmp	r1, #0
 800d28a:	b096      	sub	sp, #88	@ 0x58
 800d28c:	4615      	mov	r5, r2
 800d28e:	461e      	mov	r6, r3
 800d290:	da0d      	bge.n	800d2ae <__swhatbuf_r+0x2e>
 800d292:	89a3      	ldrh	r3, [r4, #12]
 800d294:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d298:	f04f 0100 	mov.w	r1, #0
 800d29c:	bf14      	ite	ne
 800d29e:	2340      	movne	r3, #64	@ 0x40
 800d2a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	6031      	str	r1, [r6, #0]
 800d2a8:	602b      	str	r3, [r5, #0]
 800d2aa:	b016      	add	sp, #88	@ 0x58
 800d2ac:	bd70      	pop	{r4, r5, r6, pc}
 800d2ae:	466a      	mov	r2, sp
 800d2b0:	f000 f874 	bl	800d39c <_fstat_r>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	dbec      	blt.n	800d292 <__swhatbuf_r+0x12>
 800d2b8:	9901      	ldr	r1, [sp, #4]
 800d2ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2c2:	4259      	negs	r1, r3
 800d2c4:	4159      	adcs	r1, r3
 800d2c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2ca:	e7eb      	b.n	800d2a4 <__swhatbuf_r+0x24>

0800d2cc <__smakebuf_r>:
 800d2cc:	898b      	ldrh	r3, [r1, #12]
 800d2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2d0:	079d      	lsls	r5, r3, #30
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	d507      	bpl.n	800d2e8 <__smakebuf_r+0x1c>
 800d2d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	6123      	str	r3, [r4, #16]
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	6163      	str	r3, [r4, #20]
 800d2e4:	b003      	add	sp, #12
 800d2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e8:	ab01      	add	r3, sp, #4
 800d2ea:	466a      	mov	r2, sp
 800d2ec:	f7ff ffc8 	bl	800d280 <__swhatbuf_r>
 800d2f0:	9f00      	ldr	r7, [sp, #0]
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7fe f8c2 	bl	800b480 <_malloc_r>
 800d2fc:	b948      	cbnz	r0, 800d312 <__smakebuf_r+0x46>
 800d2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d302:	059a      	lsls	r2, r3, #22
 800d304:	d4ee      	bmi.n	800d2e4 <__smakebuf_r+0x18>
 800d306:	f023 0303 	bic.w	r3, r3, #3
 800d30a:	f043 0302 	orr.w	r3, r3, #2
 800d30e:	81a3      	strh	r3, [r4, #12]
 800d310:	e7e2      	b.n	800d2d8 <__smakebuf_r+0xc>
 800d312:	89a3      	ldrh	r3, [r4, #12]
 800d314:	6020      	str	r0, [r4, #0]
 800d316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d31a:	81a3      	strh	r3, [r4, #12]
 800d31c:	9b01      	ldr	r3, [sp, #4]
 800d31e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d322:	b15b      	cbz	r3, 800d33c <__smakebuf_r+0x70>
 800d324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d328:	4630      	mov	r0, r6
 800d32a:	f000 f849 	bl	800d3c0 <_isatty_r>
 800d32e:	b128      	cbz	r0, 800d33c <__smakebuf_r+0x70>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	f023 0303 	bic.w	r3, r3, #3
 800d336:	f043 0301 	orr.w	r3, r3, #1
 800d33a:	81a3      	strh	r3, [r4, #12]
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	431d      	orrs	r5, r3
 800d340:	81a5      	strh	r5, [r4, #12]
 800d342:	e7cf      	b.n	800d2e4 <__smakebuf_r+0x18>

0800d344 <memmove>:
 800d344:	4288      	cmp	r0, r1
 800d346:	b510      	push	{r4, lr}
 800d348:	eb01 0402 	add.w	r4, r1, r2
 800d34c:	d902      	bls.n	800d354 <memmove+0x10>
 800d34e:	4284      	cmp	r4, r0
 800d350:	4623      	mov	r3, r4
 800d352:	d807      	bhi.n	800d364 <memmove+0x20>
 800d354:	1e43      	subs	r3, r0, #1
 800d356:	42a1      	cmp	r1, r4
 800d358:	d008      	beq.n	800d36c <memmove+0x28>
 800d35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d362:	e7f8      	b.n	800d356 <memmove+0x12>
 800d364:	4402      	add	r2, r0
 800d366:	4601      	mov	r1, r0
 800d368:	428a      	cmp	r2, r1
 800d36a:	d100      	bne.n	800d36e <memmove+0x2a>
 800d36c:	bd10      	pop	{r4, pc}
 800d36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d376:	e7f7      	b.n	800d368 <memmove+0x24>

0800d378 <strncmp>:
 800d378:	b510      	push	{r4, lr}
 800d37a:	b16a      	cbz	r2, 800d398 <strncmp+0x20>
 800d37c:	3901      	subs	r1, #1
 800d37e:	1884      	adds	r4, r0, r2
 800d380:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d384:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d388:	429a      	cmp	r2, r3
 800d38a:	d103      	bne.n	800d394 <strncmp+0x1c>
 800d38c:	42a0      	cmp	r0, r4
 800d38e:	d001      	beq.n	800d394 <strncmp+0x1c>
 800d390:	2a00      	cmp	r2, #0
 800d392:	d1f5      	bne.n	800d380 <strncmp+0x8>
 800d394:	1ad0      	subs	r0, r2, r3
 800d396:	bd10      	pop	{r4, pc}
 800d398:	4610      	mov	r0, r2
 800d39a:	e7fc      	b.n	800d396 <strncmp+0x1e>

0800d39c <_fstat_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4d07      	ldr	r5, [pc, #28]	@ (800d3bc <_fstat_r+0x20>)
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	4608      	mov	r0, r1
 800d3a6:	4611      	mov	r1, r2
 800d3a8:	602b      	str	r3, [r5, #0]
 800d3aa:	f7f5 fe83 	bl	80030b4 <_fstat>
 800d3ae:	1c43      	adds	r3, r0, #1
 800d3b0:	d102      	bne.n	800d3b8 <_fstat_r+0x1c>
 800d3b2:	682b      	ldr	r3, [r5, #0]
 800d3b4:	b103      	cbz	r3, 800d3b8 <_fstat_r+0x1c>
 800d3b6:	6023      	str	r3, [r4, #0]
 800d3b8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20000630 	.word	0x20000630

0800d3c0 <_isatty_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d06      	ldr	r5, [pc, #24]	@ (800d3dc <_isatty_r+0x1c>)
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	4608      	mov	r0, r1
 800d3ca:	602b      	str	r3, [r5, #0]
 800d3cc:	f7f5 fe82 	bl	80030d4 <_isatty>
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	d102      	bne.n	800d3da <_isatty_r+0x1a>
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	b103      	cbz	r3, 800d3da <_isatty_r+0x1a>
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	bd38      	pop	{r3, r4, r5, pc}
 800d3dc:	20000630 	.word	0x20000630

0800d3e0 <_sbrk_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	4d06      	ldr	r5, [pc, #24]	@ (800d3fc <_sbrk_r+0x1c>)
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	4608      	mov	r0, r1
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	f7f5 fe8a 	bl	8003104 <_sbrk>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_sbrk_r+0x1a>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_sbrk_r+0x1a>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	20000630 	.word	0x20000630

0800d400 <memcpy>:
 800d400:	440a      	add	r2, r1
 800d402:	4291      	cmp	r1, r2
 800d404:	f100 33ff 	add.w	r3, r0, #4294967295
 800d408:	d100      	bne.n	800d40c <memcpy+0xc>
 800d40a:	4770      	bx	lr
 800d40c:	b510      	push	{r4, lr}
 800d40e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d412:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d416:	4291      	cmp	r1, r2
 800d418:	d1f9      	bne.n	800d40e <memcpy+0xe>
 800d41a:	bd10      	pop	{r4, pc}
 800d41c:	0000      	movs	r0, r0
	...

0800d420 <nan>:
 800d420:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d428 <nan+0x8>
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	00000000 	.word	0x00000000
 800d42c:	7ff80000 	.word	0x7ff80000

0800d430 <__assert_func>:
 800d430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d432:	4614      	mov	r4, r2
 800d434:	461a      	mov	r2, r3
 800d436:	4b09      	ldr	r3, [pc, #36]	@ (800d45c <__assert_func+0x2c>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4605      	mov	r5, r0
 800d43c:	68d8      	ldr	r0, [r3, #12]
 800d43e:	b14c      	cbz	r4, 800d454 <__assert_func+0x24>
 800d440:	4b07      	ldr	r3, [pc, #28]	@ (800d460 <__assert_func+0x30>)
 800d442:	9100      	str	r1, [sp, #0]
 800d444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d448:	4906      	ldr	r1, [pc, #24]	@ (800d464 <__assert_func+0x34>)
 800d44a:	462b      	mov	r3, r5
 800d44c:	f000 fba8 	bl	800dba0 <fiprintf>
 800d450:	f000 fbb8 	bl	800dbc4 <abort>
 800d454:	4b04      	ldr	r3, [pc, #16]	@ (800d468 <__assert_func+0x38>)
 800d456:	461c      	mov	r4, r3
 800d458:	e7f3      	b.n	800d442 <__assert_func+0x12>
 800d45a:	bf00      	nop
 800d45c:	2000001c 	.word	0x2000001c
 800d460:	0800e902 	.word	0x0800e902
 800d464:	0800e90f 	.word	0x0800e90f
 800d468:	0800e93d 	.word	0x0800e93d

0800d46c <_calloc_r>:
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	fba1 5402 	umull	r5, r4, r1, r2
 800d472:	b934      	cbnz	r4, 800d482 <_calloc_r+0x16>
 800d474:	4629      	mov	r1, r5
 800d476:	f7fe f803 	bl	800b480 <_malloc_r>
 800d47a:	4606      	mov	r6, r0
 800d47c:	b928      	cbnz	r0, 800d48a <_calloc_r+0x1e>
 800d47e:	4630      	mov	r0, r6
 800d480:	bd70      	pop	{r4, r5, r6, pc}
 800d482:	220c      	movs	r2, #12
 800d484:	6002      	str	r2, [r0, #0]
 800d486:	2600      	movs	r6, #0
 800d488:	e7f9      	b.n	800d47e <_calloc_r+0x12>
 800d48a:	462a      	mov	r2, r5
 800d48c:	4621      	mov	r1, r4
 800d48e:	f7fd f8a3 	bl	800a5d8 <memset>
 800d492:	e7f4      	b.n	800d47e <_calloc_r+0x12>

0800d494 <rshift>:
 800d494:	6903      	ldr	r3, [r0, #16]
 800d496:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d49a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d49e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4a2:	f100 0414 	add.w	r4, r0, #20
 800d4a6:	dd45      	ble.n	800d534 <rshift+0xa0>
 800d4a8:	f011 011f 	ands.w	r1, r1, #31
 800d4ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4b4:	d10c      	bne.n	800d4d0 <rshift+0x3c>
 800d4b6:	f100 0710 	add.w	r7, r0, #16
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	42b1      	cmp	r1, r6
 800d4be:	d334      	bcc.n	800d52a <rshift+0x96>
 800d4c0:	1a9b      	subs	r3, r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	1eea      	subs	r2, r5, #3
 800d4c6:	4296      	cmp	r6, r2
 800d4c8:	bf38      	it	cc
 800d4ca:	2300      	movcc	r3, #0
 800d4cc:	4423      	add	r3, r4
 800d4ce:	e015      	b.n	800d4fc <rshift+0x68>
 800d4d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d4d4:	f1c1 0820 	rsb	r8, r1, #32
 800d4d8:	40cf      	lsrs	r7, r1
 800d4da:	f105 0e04 	add.w	lr, r5, #4
 800d4de:	46a1      	mov	r9, r4
 800d4e0:	4576      	cmp	r6, lr
 800d4e2:	46f4      	mov	ip, lr
 800d4e4:	d815      	bhi.n	800d512 <rshift+0x7e>
 800d4e6:	1a9a      	subs	r2, r3, r2
 800d4e8:	0092      	lsls	r2, r2, #2
 800d4ea:	3a04      	subs	r2, #4
 800d4ec:	3501      	adds	r5, #1
 800d4ee:	42ae      	cmp	r6, r5
 800d4f0:	bf38      	it	cc
 800d4f2:	2200      	movcc	r2, #0
 800d4f4:	18a3      	adds	r3, r4, r2
 800d4f6:	50a7      	str	r7, [r4, r2]
 800d4f8:	b107      	cbz	r7, 800d4fc <rshift+0x68>
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	1b1a      	subs	r2, r3, r4
 800d4fe:	42a3      	cmp	r3, r4
 800d500:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d504:	bf08      	it	eq
 800d506:	2300      	moveq	r3, #0
 800d508:	6102      	str	r2, [r0, #16]
 800d50a:	bf08      	it	eq
 800d50c:	6143      	streq	r3, [r0, #20]
 800d50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d512:	f8dc c000 	ldr.w	ip, [ip]
 800d516:	fa0c fc08 	lsl.w	ip, ip, r8
 800d51a:	ea4c 0707 	orr.w	r7, ip, r7
 800d51e:	f849 7b04 	str.w	r7, [r9], #4
 800d522:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d526:	40cf      	lsrs	r7, r1
 800d528:	e7da      	b.n	800d4e0 <rshift+0x4c>
 800d52a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d52e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d532:	e7c3      	b.n	800d4bc <rshift+0x28>
 800d534:	4623      	mov	r3, r4
 800d536:	e7e1      	b.n	800d4fc <rshift+0x68>

0800d538 <__hexdig_fun>:
 800d538:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d53c:	2b09      	cmp	r3, #9
 800d53e:	d802      	bhi.n	800d546 <__hexdig_fun+0xe>
 800d540:	3820      	subs	r0, #32
 800d542:	b2c0      	uxtb	r0, r0
 800d544:	4770      	bx	lr
 800d546:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d54a:	2b05      	cmp	r3, #5
 800d54c:	d801      	bhi.n	800d552 <__hexdig_fun+0x1a>
 800d54e:	3847      	subs	r0, #71	@ 0x47
 800d550:	e7f7      	b.n	800d542 <__hexdig_fun+0xa>
 800d552:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d556:	2b05      	cmp	r3, #5
 800d558:	d801      	bhi.n	800d55e <__hexdig_fun+0x26>
 800d55a:	3827      	subs	r0, #39	@ 0x27
 800d55c:	e7f1      	b.n	800d542 <__hexdig_fun+0xa>
 800d55e:	2000      	movs	r0, #0
 800d560:	4770      	bx	lr
	...

0800d564 <__gethex>:
 800d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	b085      	sub	sp, #20
 800d56a:	468a      	mov	sl, r1
 800d56c:	9302      	str	r3, [sp, #8]
 800d56e:	680b      	ldr	r3, [r1, #0]
 800d570:	9001      	str	r0, [sp, #4]
 800d572:	4690      	mov	r8, r2
 800d574:	1c9c      	adds	r4, r3, #2
 800d576:	46a1      	mov	r9, r4
 800d578:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d57c:	2830      	cmp	r0, #48	@ 0x30
 800d57e:	d0fa      	beq.n	800d576 <__gethex+0x12>
 800d580:	eba9 0303 	sub.w	r3, r9, r3
 800d584:	f1a3 0b02 	sub.w	fp, r3, #2
 800d588:	f7ff ffd6 	bl	800d538 <__hexdig_fun>
 800d58c:	4605      	mov	r5, r0
 800d58e:	2800      	cmp	r0, #0
 800d590:	d168      	bne.n	800d664 <__gethex+0x100>
 800d592:	49a0      	ldr	r1, [pc, #640]	@ (800d814 <__gethex+0x2b0>)
 800d594:	2201      	movs	r2, #1
 800d596:	4648      	mov	r0, r9
 800d598:	f7ff feee 	bl	800d378 <strncmp>
 800d59c:	4607      	mov	r7, r0
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d167      	bne.n	800d672 <__gethex+0x10e>
 800d5a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d5a6:	4626      	mov	r6, r4
 800d5a8:	f7ff ffc6 	bl	800d538 <__hexdig_fun>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d062      	beq.n	800d676 <__gethex+0x112>
 800d5b0:	4623      	mov	r3, r4
 800d5b2:	7818      	ldrb	r0, [r3, #0]
 800d5b4:	2830      	cmp	r0, #48	@ 0x30
 800d5b6:	4699      	mov	r9, r3
 800d5b8:	f103 0301 	add.w	r3, r3, #1
 800d5bc:	d0f9      	beq.n	800d5b2 <__gethex+0x4e>
 800d5be:	f7ff ffbb 	bl	800d538 <__hexdig_fun>
 800d5c2:	fab0 f580 	clz	r5, r0
 800d5c6:	096d      	lsrs	r5, r5, #5
 800d5c8:	f04f 0b01 	mov.w	fp, #1
 800d5cc:	464a      	mov	r2, r9
 800d5ce:	4616      	mov	r6, r2
 800d5d0:	3201      	adds	r2, #1
 800d5d2:	7830      	ldrb	r0, [r6, #0]
 800d5d4:	f7ff ffb0 	bl	800d538 <__hexdig_fun>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d1f8      	bne.n	800d5ce <__gethex+0x6a>
 800d5dc:	498d      	ldr	r1, [pc, #564]	@ (800d814 <__gethex+0x2b0>)
 800d5de:	2201      	movs	r2, #1
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff fec9 	bl	800d378 <strncmp>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d13f      	bne.n	800d66a <__gethex+0x106>
 800d5ea:	b944      	cbnz	r4, 800d5fe <__gethex+0x9a>
 800d5ec:	1c74      	adds	r4, r6, #1
 800d5ee:	4622      	mov	r2, r4
 800d5f0:	4616      	mov	r6, r2
 800d5f2:	3201      	adds	r2, #1
 800d5f4:	7830      	ldrb	r0, [r6, #0]
 800d5f6:	f7ff ff9f 	bl	800d538 <__hexdig_fun>
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	d1f8      	bne.n	800d5f0 <__gethex+0x8c>
 800d5fe:	1ba4      	subs	r4, r4, r6
 800d600:	00a7      	lsls	r7, r4, #2
 800d602:	7833      	ldrb	r3, [r6, #0]
 800d604:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d608:	2b50      	cmp	r3, #80	@ 0x50
 800d60a:	d13e      	bne.n	800d68a <__gethex+0x126>
 800d60c:	7873      	ldrb	r3, [r6, #1]
 800d60e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d610:	d033      	beq.n	800d67a <__gethex+0x116>
 800d612:	2b2d      	cmp	r3, #45	@ 0x2d
 800d614:	d034      	beq.n	800d680 <__gethex+0x11c>
 800d616:	1c71      	adds	r1, r6, #1
 800d618:	2400      	movs	r4, #0
 800d61a:	7808      	ldrb	r0, [r1, #0]
 800d61c:	f7ff ff8c 	bl	800d538 <__hexdig_fun>
 800d620:	1e43      	subs	r3, r0, #1
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b18      	cmp	r3, #24
 800d626:	d830      	bhi.n	800d68a <__gethex+0x126>
 800d628:	f1a0 0210 	sub.w	r2, r0, #16
 800d62c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d630:	f7ff ff82 	bl	800d538 <__hexdig_fun>
 800d634:	f100 3cff 	add.w	ip, r0, #4294967295
 800d638:	fa5f fc8c 	uxtb.w	ip, ip
 800d63c:	f1bc 0f18 	cmp.w	ip, #24
 800d640:	f04f 030a 	mov.w	r3, #10
 800d644:	d91e      	bls.n	800d684 <__gethex+0x120>
 800d646:	b104      	cbz	r4, 800d64a <__gethex+0xe6>
 800d648:	4252      	negs	r2, r2
 800d64a:	4417      	add	r7, r2
 800d64c:	f8ca 1000 	str.w	r1, [sl]
 800d650:	b1ed      	cbz	r5, 800d68e <__gethex+0x12a>
 800d652:	f1bb 0f00 	cmp.w	fp, #0
 800d656:	bf0c      	ite	eq
 800d658:	2506      	moveq	r5, #6
 800d65a:	2500      	movne	r5, #0
 800d65c:	4628      	mov	r0, r5
 800d65e:	b005      	add	sp, #20
 800d660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d664:	2500      	movs	r5, #0
 800d666:	462c      	mov	r4, r5
 800d668:	e7b0      	b.n	800d5cc <__gethex+0x68>
 800d66a:	2c00      	cmp	r4, #0
 800d66c:	d1c7      	bne.n	800d5fe <__gethex+0x9a>
 800d66e:	4627      	mov	r7, r4
 800d670:	e7c7      	b.n	800d602 <__gethex+0x9e>
 800d672:	464e      	mov	r6, r9
 800d674:	462f      	mov	r7, r5
 800d676:	2501      	movs	r5, #1
 800d678:	e7c3      	b.n	800d602 <__gethex+0x9e>
 800d67a:	2400      	movs	r4, #0
 800d67c:	1cb1      	adds	r1, r6, #2
 800d67e:	e7cc      	b.n	800d61a <__gethex+0xb6>
 800d680:	2401      	movs	r4, #1
 800d682:	e7fb      	b.n	800d67c <__gethex+0x118>
 800d684:	fb03 0002 	mla	r0, r3, r2, r0
 800d688:	e7ce      	b.n	800d628 <__gethex+0xc4>
 800d68a:	4631      	mov	r1, r6
 800d68c:	e7de      	b.n	800d64c <__gethex+0xe8>
 800d68e:	eba6 0309 	sub.w	r3, r6, r9
 800d692:	3b01      	subs	r3, #1
 800d694:	4629      	mov	r1, r5
 800d696:	2b07      	cmp	r3, #7
 800d698:	dc0a      	bgt.n	800d6b0 <__gethex+0x14c>
 800d69a:	9801      	ldr	r0, [sp, #4]
 800d69c:	f7fd ff7c 	bl	800b598 <_Balloc>
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	b940      	cbnz	r0, 800d6b6 <__gethex+0x152>
 800d6a4:	4b5c      	ldr	r3, [pc, #368]	@ (800d818 <__gethex+0x2b4>)
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	21e4      	movs	r1, #228	@ 0xe4
 800d6aa:	485c      	ldr	r0, [pc, #368]	@ (800d81c <__gethex+0x2b8>)
 800d6ac:	f7ff fec0 	bl	800d430 <__assert_func>
 800d6b0:	3101      	adds	r1, #1
 800d6b2:	105b      	asrs	r3, r3, #1
 800d6b4:	e7ef      	b.n	800d696 <__gethex+0x132>
 800d6b6:	f100 0a14 	add.w	sl, r0, #20
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	4655      	mov	r5, sl
 800d6be:	469b      	mov	fp, r3
 800d6c0:	45b1      	cmp	r9, r6
 800d6c2:	d337      	bcc.n	800d734 <__gethex+0x1d0>
 800d6c4:	f845 bb04 	str.w	fp, [r5], #4
 800d6c8:	eba5 050a 	sub.w	r5, r5, sl
 800d6cc:	10ad      	asrs	r5, r5, #2
 800d6ce:	6125      	str	r5, [r4, #16]
 800d6d0:	4658      	mov	r0, fp
 800d6d2:	f7fe f853 	bl	800b77c <__hi0bits>
 800d6d6:	016d      	lsls	r5, r5, #5
 800d6d8:	f8d8 6000 	ldr.w	r6, [r8]
 800d6dc:	1a2d      	subs	r5, r5, r0
 800d6de:	42b5      	cmp	r5, r6
 800d6e0:	dd54      	ble.n	800d78c <__gethex+0x228>
 800d6e2:	1bad      	subs	r5, r5, r6
 800d6e4:	4629      	mov	r1, r5
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f7fe fbdf 	bl	800beaa <__any_on>
 800d6ec:	4681      	mov	r9, r0
 800d6ee:	b178      	cbz	r0, 800d710 <__gethex+0x1ac>
 800d6f0:	1e6b      	subs	r3, r5, #1
 800d6f2:	1159      	asrs	r1, r3, #5
 800d6f4:	f003 021f 	and.w	r2, r3, #31
 800d6f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d6fc:	f04f 0901 	mov.w	r9, #1
 800d700:	fa09 f202 	lsl.w	r2, r9, r2
 800d704:	420a      	tst	r2, r1
 800d706:	d003      	beq.n	800d710 <__gethex+0x1ac>
 800d708:	454b      	cmp	r3, r9
 800d70a:	dc36      	bgt.n	800d77a <__gethex+0x216>
 800d70c:	f04f 0902 	mov.w	r9, #2
 800d710:	4629      	mov	r1, r5
 800d712:	4620      	mov	r0, r4
 800d714:	f7ff febe 	bl	800d494 <rshift>
 800d718:	442f      	add	r7, r5
 800d71a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d71e:	42bb      	cmp	r3, r7
 800d720:	da42      	bge.n	800d7a8 <__gethex+0x244>
 800d722:	9801      	ldr	r0, [sp, #4]
 800d724:	4621      	mov	r1, r4
 800d726:	f7fd ff77 	bl	800b618 <_Bfree>
 800d72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d72c:	2300      	movs	r3, #0
 800d72e:	6013      	str	r3, [r2, #0]
 800d730:	25a3      	movs	r5, #163	@ 0xa3
 800d732:	e793      	b.n	800d65c <__gethex+0xf8>
 800d734:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d738:	2a2e      	cmp	r2, #46	@ 0x2e
 800d73a:	d012      	beq.n	800d762 <__gethex+0x1fe>
 800d73c:	2b20      	cmp	r3, #32
 800d73e:	d104      	bne.n	800d74a <__gethex+0x1e6>
 800d740:	f845 bb04 	str.w	fp, [r5], #4
 800d744:	f04f 0b00 	mov.w	fp, #0
 800d748:	465b      	mov	r3, fp
 800d74a:	7830      	ldrb	r0, [r6, #0]
 800d74c:	9303      	str	r3, [sp, #12]
 800d74e:	f7ff fef3 	bl	800d538 <__hexdig_fun>
 800d752:	9b03      	ldr	r3, [sp, #12]
 800d754:	f000 000f 	and.w	r0, r0, #15
 800d758:	4098      	lsls	r0, r3
 800d75a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d75e:	3304      	adds	r3, #4
 800d760:	e7ae      	b.n	800d6c0 <__gethex+0x15c>
 800d762:	45b1      	cmp	r9, r6
 800d764:	d8ea      	bhi.n	800d73c <__gethex+0x1d8>
 800d766:	492b      	ldr	r1, [pc, #172]	@ (800d814 <__gethex+0x2b0>)
 800d768:	9303      	str	r3, [sp, #12]
 800d76a:	2201      	movs	r2, #1
 800d76c:	4630      	mov	r0, r6
 800d76e:	f7ff fe03 	bl	800d378 <strncmp>
 800d772:	9b03      	ldr	r3, [sp, #12]
 800d774:	2800      	cmp	r0, #0
 800d776:	d1e1      	bne.n	800d73c <__gethex+0x1d8>
 800d778:	e7a2      	b.n	800d6c0 <__gethex+0x15c>
 800d77a:	1ea9      	subs	r1, r5, #2
 800d77c:	4620      	mov	r0, r4
 800d77e:	f7fe fb94 	bl	800beaa <__any_on>
 800d782:	2800      	cmp	r0, #0
 800d784:	d0c2      	beq.n	800d70c <__gethex+0x1a8>
 800d786:	f04f 0903 	mov.w	r9, #3
 800d78a:	e7c1      	b.n	800d710 <__gethex+0x1ac>
 800d78c:	da09      	bge.n	800d7a2 <__gethex+0x23e>
 800d78e:	1b75      	subs	r5, r6, r5
 800d790:	4621      	mov	r1, r4
 800d792:	9801      	ldr	r0, [sp, #4]
 800d794:	462a      	mov	r2, r5
 800d796:	f7fe f94f 	bl	800ba38 <__lshift>
 800d79a:	1b7f      	subs	r7, r7, r5
 800d79c:	4604      	mov	r4, r0
 800d79e:	f100 0a14 	add.w	sl, r0, #20
 800d7a2:	f04f 0900 	mov.w	r9, #0
 800d7a6:	e7b8      	b.n	800d71a <__gethex+0x1b6>
 800d7a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d7ac:	42bd      	cmp	r5, r7
 800d7ae:	dd6f      	ble.n	800d890 <__gethex+0x32c>
 800d7b0:	1bed      	subs	r5, r5, r7
 800d7b2:	42ae      	cmp	r6, r5
 800d7b4:	dc34      	bgt.n	800d820 <__gethex+0x2bc>
 800d7b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d022      	beq.n	800d804 <__gethex+0x2a0>
 800d7be:	2b03      	cmp	r3, #3
 800d7c0:	d024      	beq.n	800d80c <__gethex+0x2a8>
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d115      	bne.n	800d7f2 <__gethex+0x28e>
 800d7c6:	42ae      	cmp	r6, r5
 800d7c8:	d113      	bne.n	800d7f2 <__gethex+0x28e>
 800d7ca:	2e01      	cmp	r6, #1
 800d7cc:	d10b      	bne.n	800d7e6 <__gethex+0x282>
 800d7ce:	9a02      	ldr	r2, [sp, #8]
 800d7d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7d4:	6013      	str	r3, [r2, #0]
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	6123      	str	r3, [r4, #16]
 800d7da:	f8ca 3000 	str.w	r3, [sl]
 800d7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7e0:	2562      	movs	r5, #98	@ 0x62
 800d7e2:	601c      	str	r4, [r3, #0]
 800d7e4:	e73a      	b.n	800d65c <__gethex+0xf8>
 800d7e6:	1e71      	subs	r1, r6, #1
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f7fe fb5e 	bl	800beaa <__any_on>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	d1ed      	bne.n	800d7ce <__gethex+0x26a>
 800d7f2:	9801      	ldr	r0, [sp, #4]
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	f7fd ff0f 	bl	800b618 <_Bfree>
 800d7fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	6013      	str	r3, [r2, #0]
 800d800:	2550      	movs	r5, #80	@ 0x50
 800d802:	e72b      	b.n	800d65c <__gethex+0xf8>
 800d804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1f3      	bne.n	800d7f2 <__gethex+0x28e>
 800d80a:	e7e0      	b.n	800d7ce <__gethex+0x26a>
 800d80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1dd      	bne.n	800d7ce <__gethex+0x26a>
 800d812:	e7ee      	b.n	800d7f2 <__gethex+0x28e>
 800d814:	0800e8e7 	.word	0x0800e8e7
 800d818:	0800e87d 	.word	0x0800e87d
 800d81c:	0800e93e 	.word	0x0800e93e
 800d820:	1e6f      	subs	r7, r5, #1
 800d822:	f1b9 0f00 	cmp.w	r9, #0
 800d826:	d130      	bne.n	800d88a <__gethex+0x326>
 800d828:	b127      	cbz	r7, 800d834 <__gethex+0x2d0>
 800d82a:	4639      	mov	r1, r7
 800d82c:	4620      	mov	r0, r4
 800d82e:	f7fe fb3c 	bl	800beaa <__any_on>
 800d832:	4681      	mov	r9, r0
 800d834:	117a      	asrs	r2, r7, #5
 800d836:	2301      	movs	r3, #1
 800d838:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d83c:	f007 071f 	and.w	r7, r7, #31
 800d840:	40bb      	lsls	r3, r7
 800d842:	4213      	tst	r3, r2
 800d844:	4629      	mov	r1, r5
 800d846:	4620      	mov	r0, r4
 800d848:	bf18      	it	ne
 800d84a:	f049 0902 	orrne.w	r9, r9, #2
 800d84e:	f7ff fe21 	bl	800d494 <rshift>
 800d852:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d856:	1b76      	subs	r6, r6, r5
 800d858:	2502      	movs	r5, #2
 800d85a:	f1b9 0f00 	cmp.w	r9, #0
 800d85e:	d047      	beq.n	800d8f0 <__gethex+0x38c>
 800d860:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d864:	2b02      	cmp	r3, #2
 800d866:	d015      	beq.n	800d894 <__gethex+0x330>
 800d868:	2b03      	cmp	r3, #3
 800d86a:	d017      	beq.n	800d89c <__gethex+0x338>
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d109      	bne.n	800d884 <__gethex+0x320>
 800d870:	f019 0f02 	tst.w	r9, #2
 800d874:	d006      	beq.n	800d884 <__gethex+0x320>
 800d876:	f8da 3000 	ldr.w	r3, [sl]
 800d87a:	ea49 0903 	orr.w	r9, r9, r3
 800d87e:	f019 0f01 	tst.w	r9, #1
 800d882:	d10e      	bne.n	800d8a2 <__gethex+0x33e>
 800d884:	f045 0510 	orr.w	r5, r5, #16
 800d888:	e032      	b.n	800d8f0 <__gethex+0x38c>
 800d88a:	f04f 0901 	mov.w	r9, #1
 800d88e:	e7d1      	b.n	800d834 <__gethex+0x2d0>
 800d890:	2501      	movs	r5, #1
 800d892:	e7e2      	b.n	800d85a <__gethex+0x2f6>
 800d894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d896:	f1c3 0301 	rsb	r3, r3, #1
 800d89a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d89c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d0f0      	beq.n	800d884 <__gethex+0x320>
 800d8a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d8a6:	f104 0314 	add.w	r3, r4, #20
 800d8aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d8ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d8b2:	f04f 0c00 	mov.w	ip, #0
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d8c0:	d01b      	beq.n	800d8fa <__gethex+0x396>
 800d8c2:	3201      	adds	r2, #1
 800d8c4:	6002      	str	r2, [r0, #0]
 800d8c6:	2d02      	cmp	r5, #2
 800d8c8:	f104 0314 	add.w	r3, r4, #20
 800d8cc:	d13c      	bne.n	800d948 <__gethex+0x3e4>
 800d8ce:	f8d8 2000 	ldr.w	r2, [r8]
 800d8d2:	3a01      	subs	r2, #1
 800d8d4:	42b2      	cmp	r2, r6
 800d8d6:	d109      	bne.n	800d8ec <__gethex+0x388>
 800d8d8:	1171      	asrs	r1, r6, #5
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d8e0:	f006 061f 	and.w	r6, r6, #31
 800d8e4:	fa02 f606 	lsl.w	r6, r2, r6
 800d8e8:	421e      	tst	r6, r3
 800d8ea:	d13a      	bne.n	800d962 <__gethex+0x3fe>
 800d8ec:	f045 0520 	orr.w	r5, r5, #32
 800d8f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8f2:	601c      	str	r4, [r3, #0]
 800d8f4:	9b02      	ldr	r3, [sp, #8]
 800d8f6:	601f      	str	r7, [r3, #0]
 800d8f8:	e6b0      	b.n	800d65c <__gethex+0xf8>
 800d8fa:	4299      	cmp	r1, r3
 800d8fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d900:	d8d9      	bhi.n	800d8b6 <__gethex+0x352>
 800d902:	68a3      	ldr	r3, [r4, #8]
 800d904:	459b      	cmp	fp, r3
 800d906:	db17      	blt.n	800d938 <__gethex+0x3d4>
 800d908:	6861      	ldr	r1, [r4, #4]
 800d90a:	9801      	ldr	r0, [sp, #4]
 800d90c:	3101      	adds	r1, #1
 800d90e:	f7fd fe43 	bl	800b598 <_Balloc>
 800d912:	4681      	mov	r9, r0
 800d914:	b918      	cbnz	r0, 800d91e <__gethex+0x3ba>
 800d916:	4b1a      	ldr	r3, [pc, #104]	@ (800d980 <__gethex+0x41c>)
 800d918:	4602      	mov	r2, r0
 800d91a:	2184      	movs	r1, #132	@ 0x84
 800d91c:	e6c5      	b.n	800d6aa <__gethex+0x146>
 800d91e:	6922      	ldr	r2, [r4, #16]
 800d920:	3202      	adds	r2, #2
 800d922:	f104 010c 	add.w	r1, r4, #12
 800d926:	0092      	lsls	r2, r2, #2
 800d928:	300c      	adds	r0, #12
 800d92a:	f7ff fd69 	bl	800d400 <memcpy>
 800d92e:	4621      	mov	r1, r4
 800d930:	9801      	ldr	r0, [sp, #4]
 800d932:	f7fd fe71 	bl	800b618 <_Bfree>
 800d936:	464c      	mov	r4, r9
 800d938:	6923      	ldr	r3, [r4, #16]
 800d93a:	1c5a      	adds	r2, r3, #1
 800d93c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d940:	6122      	str	r2, [r4, #16]
 800d942:	2201      	movs	r2, #1
 800d944:	615a      	str	r2, [r3, #20]
 800d946:	e7be      	b.n	800d8c6 <__gethex+0x362>
 800d948:	6922      	ldr	r2, [r4, #16]
 800d94a:	455a      	cmp	r2, fp
 800d94c:	dd0b      	ble.n	800d966 <__gethex+0x402>
 800d94e:	2101      	movs	r1, #1
 800d950:	4620      	mov	r0, r4
 800d952:	f7ff fd9f 	bl	800d494 <rshift>
 800d956:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d95a:	3701      	adds	r7, #1
 800d95c:	42bb      	cmp	r3, r7
 800d95e:	f6ff aee0 	blt.w	800d722 <__gethex+0x1be>
 800d962:	2501      	movs	r5, #1
 800d964:	e7c2      	b.n	800d8ec <__gethex+0x388>
 800d966:	f016 061f 	ands.w	r6, r6, #31
 800d96a:	d0fa      	beq.n	800d962 <__gethex+0x3fe>
 800d96c:	4453      	add	r3, sl
 800d96e:	f1c6 0620 	rsb	r6, r6, #32
 800d972:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d976:	f7fd ff01 	bl	800b77c <__hi0bits>
 800d97a:	42b0      	cmp	r0, r6
 800d97c:	dbe7      	blt.n	800d94e <__gethex+0x3ea>
 800d97e:	e7f0      	b.n	800d962 <__gethex+0x3fe>
 800d980:	0800e87d 	.word	0x0800e87d

0800d984 <L_shift>:
 800d984:	f1c2 0208 	rsb	r2, r2, #8
 800d988:	0092      	lsls	r2, r2, #2
 800d98a:	b570      	push	{r4, r5, r6, lr}
 800d98c:	f1c2 0620 	rsb	r6, r2, #32
 800d990:	6843      	ldr	r3, [r0, #4]
 800d992:	6804      	ldr	r4, [r0, #0]
 800d994:	fa03 f506 	lsl.w	r5, r3, r6
 800d998:	432c      	orrs	r4, r5
 800d99a:	40d3      	lsrs	r3, r2
 800d99c:	6004      	str	r4, [r0, #0]
 800d99e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9a2:	4288      	cmp	r0, r1
 800d9a4:	d3f4      	bcc.n	800d990 <L_shift+0xc>
 800d9a6:	bd70      	pop	{r4, r5, r6, pc}

0800d9a8 <__match>:
 800d9a8:	b530      	push	{r4, r5, lr}
 800d9aa:	6803      	ldr	r3, [r0, #0]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9b2:	b914      	cbnz	r4, 800d9ba <__match+0x12>
 800d9b4:	6003      	str	r3, [r0, #0]
 800d9b6:	2001      	movs	r0, #1
 800d9b8:	bd30      	pop	{r4, r5, pc}
 800d9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d9c2:	2d19      	cmp	r5, #25
 800d9c4:	bf98      	it	ls
 800d9c6:	3220      	addls	r2, #32
 800d9c8:	42a2      	cmp	r2, r4
 800d9ca:	d0f0      	beq.n	800d9ae <__match+0x6>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e7f3      	b.n	800d9b8 <__match+0x10>

0800d9d0 <__hexnan>:
 800d9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d4:	680b      	ldr	r3, [r1, #0]
 800d9d6:	6801      	ldr	r1, [r0, #0]
 800d9d8:	115e      	asrs	r6, r3, #5
 800d9da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d9de:	f013 031f 	ands.w	r3, r3, #31
 800d9e2:	b087      	sub	sp, #28
 800d9e4:	bf18      	it	ne
 800d9e6:	3604      	addne	r6, #4
 800d9e8:	2500      	movs	r5, #0
 800d9ea:	1f37      	subs	r7, r6, #4
 800d9ec:	4682      	mov	sl, r0
 800d9ee:	4690      	mov	r8, r2
 800d9f0:	9301      	str	r3, [sp, #4]
 800d9f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d9f6:	46b9      	mov	r9, r7
 800d9f8:	463c      	mov	r4, r7
 800d9fa:	9502      	str	r5, [sp, #8]
 800d9fc:	46ab      	mov	fp, r5
 800d9fe:	784a      	ldrb	r2, [r1, #1]
 800da00:	1c4b      	adds	r3, r1, #1
 800da02:	9303      	str	r3, [sp, #12]
 800da04:	b342      	cbz	r2, 800da58 <__hexnan+0x88>
 800da06:	4610      	mov	r0, r2
 800da08:	9105      	str	r1, [sp, #20]
 800da0a:	9204      	str	r2, [sp, #16]
 800da0c:	f7ff fd94 	bl	800d538 <__hexdig_fun>
 800da10:	2800      	cmp	r0, #0
 800da12:	d151      	bne.n	800dab8 <__hexnan+0xe8>
 800da14:	9a04      	ldr	r2, [sp, #16]
 800da16:	9905      	ldr	r1, [sp, #20]
 800da18:	2a20      	cmp	r2, #32
 800da1a:	d818      	bhi.n	800da4e <__hexnan+0x7e>
 800da1c:	9b02      	ldr	r3, [sp, #8]
 800da1e:	459b      	cmp	fp, r3
 800da20:	dd13      	ble.n	800da4a <__hexnan+0x7a>
 800da22:	454c      	cmp	r4, r9
 800da24:	d206      	bcs.n	800da34 <__hexnan+0x64>
 800da26:	2d07      	cmp	r5, #7
 800da28:	dc04      	bgt.n	800da34 <__hexnan+0x64>
 800da2a:	462a      	mov	r2, r5
 800da2c:	4649      	mov	r1, r9
 800da2e:	4620      	mov	r0, r4
 800da30:	f7ff ffa8 	bl	800d984 <L_shift>
 800da34:	4544      	cmp	r4, r8
 800da36:	d952      	bls.n	800dade <__hexnan+0x10e>
 800da38:	2300      	movs	r3, #0
 800da3a:	f1a4 0904 	sub.w	r9, r4, #4
 800da3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800da42:	f8cd b008 	str.w	fp, [sp, #8]
 800da46:	464c      	mov	r4, r9
 800da48:	461d      	mov	r5, r3
 800da4a:	9903      	ldr	r1, [sp, #12]
 800da4c:	e7d7      	b.n	800d9fe <__hexnan+0x2e>
 800da4e:	2a29      	cmp	r2, #41	@ 0x29
 800da50:	d157      	bne.n	800db02 <__hexnan+0x132>
 800da52:	3102      	adds	r1, #2
 800da54:	f8ca 1000 	str.w	r1, [sl]
 800da58:	f1bb 0f00 	cmp.w	fp, #0
 800da5c:	d051      	beq.n	800db02 <__hexnan+0x132>
 800da5e:	454c      	cmp	r4, r9
 800da60:	d206      	bcs.n	800da70 <__hexnan+0xa0>
 800da62:	2d07      	cmp	r5, #7
 800da64:	dc04      	bgt.n	800da70 <__hexnan+0xa0>
 800da66:	462a      	mov	r2, r5
 800da68:	4649      	mov	r1, r9
 800da6a:	4620      	mov	r0, r4
 800da6c:	f7ff ff8a 	bl	800d984 <L_shift>
 800da70:	4544      	cmp	r4, r8
 800da72:	d936      	bls.n	800dae2 <__hexnan+0x112>
 800da74:	f1a8 0204 	sub.w	r2, r8, #4
 800da78:	4623      	mov	r3, r4
 800da7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800da7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800da82:	429f      	cmp	r7, r3
 800da84:	d2f9      	bcs.n	800da7a <__hexnan+0xaa>
 800da86:	1b3b      	subs	r3, r7, r4
 800da88:	f023 0303 	bic.w	r3, r3, #3
 800da8c:	3304      	adds	r3, #4
 800da8e:	3401      	adds	r4, #1
 800da90:	3e03      	subs	r6, #3
 800da92:	42b4      	cmp	r4, r6
 800da94:	bf88      	it	hi
 800da96:	2304      	movhi	r3, #4
 800da98:	4443      	add	r3, r8
 800da9a:	2200      	movs	r2, #0
 800da9c:	f843 2b04 	str.w	r2, [r3], #4
 800daa0:	429f      	cmp	r7, r3
 800daa2:	d2fb      	bcs.n	800da9c <__hexnan+0xcc>
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	b91b      	cbnz	r3, 800dab0 <__hexnan+0xe0>
 800daa8:	4547      	cmp	r7, r8
 800daaa:	d128      	bne.n	800dafe <__hexnan+0x12e>
 800daac:	2301      	movs	r3, #1
 800daae:	603b      	str	r3, [r7, #0]
 800dab0:	2005      	movs	r0, #5
 800dab2:	b007      	add	sp, #28
 800dab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab8:	3501      	adds	r5, #1
 800daba:	2d08      	cmp	r5, #8
 800dabc:	f10b 0b01 	add.w	fp, fp, #1
 800dac0:	dd06      	ble.n	800dad0 <__hexnan+0x100>
 800dac2:	4544      	cmp	r4, r8
 800dac4:	d9c1      	bls.n	800da4a <__hexnan+0x7a>
 800dac6:	2300      	movs	r3, #0
 800dac8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dacc:	2501      	movs	r5, #1
 800dace:	3c04      	subs	r4, #4
 800dad0:	6822      	ldr	r2, [r4, #0]
 800dad2:	f000 000f 	and.w	r0, r0, #15
 800dad6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dada:	6020      	str	r0, [r4, #0]
 800dadc:	e7b5      	b.n	800da4a <__hexnan+0x7a>
 800dade:	2508      	movs	r5, #8
 800dae0:	e7b3      	b.n	800da4a <__hexnan+0x7a>
 800dae2:	9b01      	ldr	r3, [sp, #4]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d0dd      	beq.n	800daa4 <__hexnan+0xd4>
 800dae8:	f1c3 0320 	rsb	r3, r3, #32
 800daec:	f04f 32ff 	mov.w	r2, #4294967295
 800daf0:	40da      	lsrs	r2, r3
 800daf2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800daf6:	4013      	ands	r3, r2
 800daf8:	f846 3c04 	str.w	r3, [r6, #-4]
 800dafc:	e7d2      	b.n	800daa4 <__hexnan+0xd4>
 800dafe:	3f04      	subs	r7, #4
 800db00:	e7d0      	b.n	800daa4 <__hexnan+0xd4>
 800db02:	2004      	movs	r0, #4
 800db04:	e7d5      	b.n	800dab2 <__hexnan+0xe2>

0800db06 <__ascii_mbtowc>:
 800db06:	b082      	sub	sp, #8
 800db08:	b901      	cbnz	r1, 800db0c <__ascii_mbtowc+0x6>
 800db0a:	a901      	add	r1, sp, #4
 800db0c:	b142      	cbz	r2, 800db20 <__ascii_mbtowc+0x1a>
 800db0e:	b14b      	cbz	r3, 800db24 <__ascii_mbtowc+0x1e>
 800db10:	7813      	ldrb	r3, [r2, #0]
 800db12:	600b      	str	r3, [r1, #0]
 800db14:	7812      	ldrb	r2, [r2, #0]
 800db16:	1e10      	subs	r0, r2, #0
 800db18:	bf18      	it	ne
 800db1a:	2001      	movne	r0, #1
 800db1c:	b002      	add	sp, #8
 800db1e:	4770      	bx	lr
 800db20:	4610      	mov	r0, r2
 800db22:	e7fb      	b.n	800db1c <__ascii_mbtowc+0x16>
 800db24:	f06f 0001 	mvn.w	r0, #1
 800db28:	e7f8      	b.n	800db1c <__ascii_mbtowc+0x16>

0800db2a <_realloc_r>:
 800db2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db2e:	4607      	mov	r7, r0
 800db30:	4614      	mov	r4, r2
 800db32:	460d      	mov	r5, r1
 800db34:	b921      	cbnz	r1, 800db40 <_realloc_r+0x16>
 800db36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db3a:	4611      	mov	r1, r2
 800db3c:	f7fd bca0 	b.w	800b480 <_malloc_r>
 800db40:	b92a      	cbnz	r2, 800db4e <_realloc_r+0x24>
 800db42:	f7fd fc29 	bl	800b398 <_free_r>
 800db46:	4625      	mov	r5, r4
 800db48:	4628      	mov	r0, r5
 800db4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db4e:	f000 f840 	bl	800dbd2 <_malloc_usable_size_r>
 800db52:	4284      	cmp	r4, r0
 800db54:	4606      	mov	r6, r0
 800db56:	d802      	bhi.n	800db5e <_realloc_r+0x34>
 800db58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db5c:	d8f4      	bhi.n	800db48 <_realloc_r+0x1e>
 800db5e:	4621      	mov	r1, r4
 800db60:	4638      	mov	r0, r7
 800db62:	f7fd fc8d 	bl	800b480 <_malloc_r>
 800db66:	4680      	mov	r8, r0
 800db68:	b908      	cbnz	r0, 800db6e <_realloc_r+0x44>
 800db6a:	4645      	mov	r5, r8
 800db6c:	e7ec      	b.n	800db48 <_realloc_r+0x1e>
 800db6e:	42b4      	cmp	r4, r6
 800db70:	4622      	mov	r2, r4
 800db72:	4629      	mov	r1, r5
 800db74:	bf28      	it	cs
 800db76:	4632      	movcs	r2, r6
 800db78:	f7ff fc42 	bl	800d400 <memcpy>
 800db7c:	4629      	mov	r1, r5
 800db7e:	4638      	mov	r0, r7
 800db80:	f7fd fc0a 	bl	800b398 <_free_r>
 800db84:	e7f1      	b.n	800db6a <_realloc_r+0x40>

0800db86 <__ascii_wctomb>:
 800db86:	4603      	mov	r3, r0
 800db88:	4608      	mov	r0, r1
 800db8a:	b141      	cbz	r1, 800db9e <__ascii_wctomb+0x18>
 800db8c:	2aff      	cmp	r2, #255	@ 0xff
 800db8e:	d904      	bls.n	800db9a <__ascii_wctomb+0x14>
 800db90:	228a      	movs	r2, #138	@ 0x8a
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	f04f 30ff 	mov.w	r0, #4294967295
 800db98:	4770      	bx	lr
 800db9a:	700a      	strb	r2, [r1, #0]
 800db9c:	2001      	movs	r0, #1
 800db9e:	4770      	bx	lr

0800dba0 <fiprintf>:
 800dba0:	b40e      	push	{r1, r2, r3}
 800dba2:	b503      	push	{r0, r1, lr}
 800dba4:	4601      	mov	r1, r0
 800dba6:	ab03      	add	r3, sp, #12
 800dba8:	4805      	ldr	r0, [pc, #20]	@ (800dbc0 <fiprintf+0x20>)
 800dbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbae:	6800      	ldr	r0, [r0, #0]
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	f7ff f9a1 	bl	800cef8 <_vfiprintf_r>
 800dbb6:	b002      	add	sp, #8
 800dbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbbc:	b003      	add	sp, #12
 800dbbe:	4770      	bx	lr
 800dbc0:	2000001c 	.word	0x2000001c

0800dbc4 <abort>:
 800dbc4:	b508      	push	{r3, lr}
 800dbc6:	2006      	movs	r0, #6
 800dbc8:	f000 f834 	bl	800dc34 <raise>
 800dbcc:	2001      	movs	r0, #1
 800dbce:	f7f5 fa21 	bl	8003014 <_exit>

0800dbd2 <_malloc_usable_size_r>:
 800dbd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbd6:	1f18      	subs	r0, r3, #4
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	bfbc      	itt	lt
 800dbdc:	580b      	ldrlt	r3, [r1, r0]
 800dbde:	18c0      	addlt	r0, r0, r3
 800dbe0:	4770      	bx	lr

0800dbe2 <_raise_r>:
 800dbe2:	291f      	cmp	r1, #31
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	460c      	mov	r4, r1
 800dbea:	d904      	bls.n	800dbf6 <_raise_r+0x14>
 800dbec:	2316      	movs	r3, #22
 800dbee:	6003      	str	r3, [r0, #0]
 800dbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf4:	bd38      	pop	{r3, r4, r5, pc}
 800dbf6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbf8:	b112      	cbz	r2, 800dc00 <_raise_r+0x1e>
 800dbfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbfe:	b94b      	cbnz	r3, 800dc14 <_raise_r+0x32>
 800dc00:	4628      	mov	r0, r5
 800dc02:	f000 f831 	bl	800dc68 <_getpid_r>
 800dc06:	4622      	mov	r2, r4
 800dc08:	4601      	mov	r1, r0
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc10:	f000 b818 	b.w	800dc44 <_kill_r>
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d00a      	beq.n	800dc2e <_raise_r+0x4c>
 800dc18:	1c59      	adds	r1, r3, #1
 800dc1a:	d103      	bne.n	800dc24 <_raise_r+0x42>
 800dc1c:	2316      	movs	r3, #22
 800dc1e:	6003      	str	r3, [r0, #0]
 800dc20:	2001      	movs	r0, #1
 800dc22:	e7e7      	b.n	800dbf4 <_raise_r+0x12>
 800dc24:	2100      	movs	r1, #0
 800dc26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	4798      	blx	r3
 800dc2e:	2000      	movs	r0, #0
 800dc30:	e7e0      	b.n	800dbf4 <_raise_r+0x12>
	...

0800dc34 <raise>:
 800dc34:	4b02      	ldr	r3, [pc, #8]	@ (800dc40 <raise+0xc>)
 800dc36:	4601      	mov	r1, r0
 800dc38:	6818      	ldr	r0, [r3, #0]
 800dc3a:	f7ff bfd2 	b.w	800dbe2 <_raise_r>
 800dc3e:	bf00      	nop
 800dc40:	2000001c 	.word	0x2000001c

0800dc44 <_kill_r>:
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	4d07      	ldr	r5, [pc, #28]	@ (800dc64 <_kill_r+0x20>)
 800dc48:	2300      	movs	r3, #0
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	4608      	mov	r0, r1
 800dc4e:	4611      	mov	r1, r2
 800dc50:	602b      	str	r3, [r5, #0]
 800dc52:	f7f5 f9cf 	bl	8002ff4 <_kill>
 800dc56:	1c43      	adds	r3, r0, #1
 800dc58:	d102      	bne.n	800dc60 <_kill_r+0x1c>
 800dc5a:	682b      	ldr	r3, [r5, #0]
 800dc5c:	b103      	cbz	r3, 800dc60 <_kill_r+0x1c>
 800dc5e:	6023      	str	r3, [r4, #0]
 800dc60:	bd38      	pop	{r3, r4, r5, pc}
 800dc62:	bf00      	nop
 800dc64:	20000630 	.word	0x20000630

0800dc68 <_getpid_r>:
 800dc68:	f7f5 b9bc 	b.w	8002fe4 <_getpid>

0800dc6c <fmodf>:
 800dc6c:	b508      	push	{r3, lr}
 800dc6e:	ed2d 8b02 	vpush	{d8}
 800dc72:	eef0 8a40 	vmov.f32	s17, s0
 800dc76:	eeb0 8a60 	vmov.f32	s16, s1
 800dc7a:	f000 f86d 	bl	800dd58 <__ieee754_fmodf>
 800dc7e:	eef4 8a48 	vcmp.f32	s17, s16
 800dc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc86:	d60c      	bvs.n	800dca2 <fmodf+0x36>
 800dc88:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800dca8 <fmodf+0x3c>
 800dc8c:	eeb4 8a68 	vcmp.f32	s16, s17
 800dc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc94:	d105      	bne.n	800dca2 <fmodf+0x36>
 800dc96:	f7fc fcf1 	bl	800a67c <__errno>
 800dc9a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dc9e:	2321      	movs	r3, #33	@ 0x21
 800dca0:	6003      	str	r3, [r0, #0]
 800dca2:	ecbd 8b02 	vpop	{d8}
 800dca6:	bd08      	pop	{r3, pc}
 800dca8:	00000000 	.word	0x00000000

0800dcac <fmaxf>:
 800dcac:	b508      	push	{r3, lr}
 800dcae:	ed2d 8b02 	vpush	{d8}
 800dcb2:	eeb0 8a40 	vmov.f32	s16, s0
 800dcb6:	eef0 8a60 	vmov.f32	s17, s1
 800dcba:	f000 f831 	bl	800dd20 <__fpclassifyf>
 800dcbe:	b930      	cbnz	r0, 800dcce <fmaxf+0x22>
 800dcc0:	eeb0 8a68 	vmov.f32	s16, s17
 800dcc4:	eeb0 0a48 	vmov.f32	s0, s16
 800dcc8:	ecbd 8b02 	vpop	{d8}
 800dccc:	bd08      	pop	{r3, pc}
 800dcce:	eeb0 0a68 	vmov.f32	s0, s17
 800dcd2:	f000 f825 	bl	800dd20 <__fpclassifyf>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d0f4      	beq.n	800dcc4 <fmaxf+0x18>
 800dcda:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce2:	dded      	ble.n	800dcc0 <fmaxf+0x14>
 800dce4:	e7ee      	b.n	800dcc4 <fmaxf+0x18>

0800dce6 <fminf>:
 800dce6:	b508      	push	{r3, lr}
 800dce8:	ed2d 8b02 	vpush	{d8}
 800dcec:	eeb0 8a40 	vmov.f32	s16, s0
 800dcf0:	eef0 8a60 	vmov.f32	s17, s1
 800dcf4:	f000 f814 	bl	800dd20 <__fpclassifyf>
 800dcf8:	b930      	cbnz	r0, 800dd08 <fminf+0x22>
 800dcfa:	eeb0 8a68 	vmov.f32	s16, s17
 800dcfe:	eeb0 0a48 	vmov.f32	s0, s16
 800dd02:	ecbd 8b02 	vpop	{d8}
 800dd06:	bd08      	pop	{r3, pc}
 800dd08:	eeb0 0a68 	vmov.f32	s0, s17
 800dd0c:	f000 f808 	bl	800dd20 <__fpclassifyf>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	d0f4      	beq.n	800dcfe <fminf+0x18>
 800dd14:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd1c:	d5ed      	bpl.n	800dcfa <fminf+0x14>
 800dd1e:	e7ee      	b.n	800dcfe <fminf+0x18>

0800dd20 <__fpclassifyf>:
 800dd20:	ee10 3a10 	vmov	r3, s0
 800dd24:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800dd28:	d00d      	beq.n	800dd46 <__fpclassifyf+0x26>
 800dd2a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800dd2e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800dd32:	d30a      	bcc.n	800dd4a <__fpclassifyf+0x2a>
 800dd34:	4b07      	ldr	r3, [pc, #28]	@ (800dd54 <__fpclassifyf+0x34>)
 800dd36:	1e42      	subs	r2, r0, #1
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d908      	bls.n	800dd4e <__fpclassifyf+0x2e>
 800dd3c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800dd40:	4258      	negs	r0, r3
 800dd42:	4158      	adcs	r0, r3
 800dd44:	4770      	bx	lr
 800dd46:	2002      	movs	r0, #2
 800dd48:	4770      	bx	lr
 800dd4a:	2004      	movs	r0, #4
 800dd4c:	4770      	bx	lr
 800dd4e:	2003      	movs	r0, #3
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	007ffffe 	.word	0x007ffffe

0800dd58 <__ieee754_fmodf>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	ee10 6a90 	vmov	r6, s1
 800dd5e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800dd62:	1e5a      	subs	r2, r3, #1
 800dd64:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800dd68:	d206      	bcs.n	800dd78 <__ieee754_fmodf+0x20>
 800dd6a:	ee10 4a10 	vmov	r4, s0
 800dd6e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800dd72:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800dd76:	d304      	bcc.n	800dd82 <__ieee754_fmodf+0x2a>
 800dd78:	ee60 0a20 	vmul.f32	s1, s0, s1
 800dd7c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800dd80:	bd70      	pop	{r4, r5, r6, pc}
 800dd82:	4299      	cmp	r1, r3
 800dd84:	dbfc      	blt.n	800dd80 <__ieee754_fmodf+0x28>
 800dd86:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800dd8a:	d105      	bne.n	800dd98 <__ieee754_fmodf+0x40>
 800dd8c:	4b32      	ldr	r3, [pc, #200]	@ (800de58 <__ieee754_fmodf+0x100>)
 800dd8e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800dd92:	ed93 0a00 	vldr	s0, [r3]
 800dd96:	e7f3      	b.n	800dd80 <__ieee754_fmodf+0x28>
 800dd98:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800dd9c:	d146      	bne.n	800de2c <__ieee754_fmodf+0xd4>
 800dd9e:	020a      	lsls	r2, r1, #8
 800dda0:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800dda4:	2a00      	cmp	r2, #0
 800dda6:	dc3e      	bgt.n	800de26 <__ieee754_fmodf+0xce>
 800dda8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ddac:	bf01      	itttt	eq
 800ddae:	021a      	lsleq	r2, r3, #8
 800ddb0:	fab2 f282 	clzeq	r2, r2
 800ddb4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800ddb8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800ddbc:	bf16      	itet	ne
 800ddbe:	15da      	asrne	r2, r3, #23
 800ddc0:	3282      	addeq	r2, #130	@ 0x82
 800ddc2:	3a7f      	subne	r2, #127	@ 0x7f
 800ddc4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800ddc8:	bfbb      	ittet	lt
 800ddca:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800ddce:	1a24      	sublt	r4, r4, r0
 800ddd0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800ddd4:	40a1      	lsllt	r1, r4
 800ddd6:	bfa8      	it	ge
 800ddd8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800dddc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800dde0:	bfb5      	itete	lt
 800dde2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800dde6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800ddea:	1aa4      	sublt	r4, r4, r2
 800ddec:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800ddf0:	bfb8      	it	lt
 800ddf2:	fa03 f404 	lsllt.w	r4, r3, r4
 800ddf6:	1a80      	subs	r0, r0, r2
 800ddf8:	1b0b      	subs	r3, r1, r4
 800ddfa:	b9d0      	cbnz	r0, 800de32 <__ieee754_fmodf+0xda>
 800ddfc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800de00:	bf28      	it	cs
 800de02:	460b      	movcs	r3, r1
 800de04:	2b00      	cmp	r3, #0
 800de06:	d0c1      	beq.n	800dd8c <__ieee754_fmodf+0x34>
 800de08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800de0c:	db19      	blt.n	800de42 <__ieee754_fmodf+0xea>
 800de0e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800de12:	db19      	blt.n	800de48 <__ieee754_fmodf+0xf0>
 800de14:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800de18:	327f      	adds	r2, #127	@ 0x7f
 800de1a:	432b      	orrs	r3, r5
 800de1c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800de20:	ee00 3a10 	vmov	s0, r3
 800de24:	e7ac      	b.n	800dd80 <__ieee754_fmodf+0x28>
 800de26:	3801      	subs	r0, #1
 800de28:	0052      	lsls	r2, r2, #1
 800de2a:	e7bb      	b.n	800dda4 <__ieee754_fmodf+0x4c>
 800de2c:	15c8      	asrs	r0, r1, #23
 800de2e:	387f      	subs	r0, #127	@ 0x7f
 800de30:	e7ba      	b.n	800dda8 <__ieee754_fmodf+0x50>
 800de32:	2b00      	cmp	r3, #0
 800de34:	da02      	bge.n	800de3c <__ieee754_fmodf+0xe4>
 800de36:	0049      	lsls	r1, r1, #1
 800de38:	3801      	subs	r0, #1
 800de3a:	e7dd      	b.n	800ddf8 <__ieee754_fmodf+0xa0>
 800de3c:	d0a6      	beq.n	800dd8c <__ieee754_fmodf+0x34>
 800de3e:	0059      	lsls	r1, r3, #1
 800de40:	e7fa      	b.n	800de38 <__ieee754_fmodf+0xe0>
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	3a01      	subs	r2, #1
 800de46:	e7df      	b.n	800de08 <__ieee754_fmodf+0xb0>
 800de48:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800de4c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800de50:	3282      	adds	r2, #130	@ 0x82
 800de52:	4113      	asrs	r3, r2
 800de54:	432b      	orrs	r3, r5
 800de56:	e7e3      	b.n	800de20 <__ieee754_fmodf+0xc8>
 800de58:	0800ebf4 	.word	0x0800ebf4

0800de5c <_init>:
 800de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5e:	bf00      	nop
 800de60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de62:	bc08      	pop	{r3}
 800de64:	469e      	mov	lr, r3
 800de66:	4770      	bx	lr

0800de68 <_fini>:
 800de68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6a:	bf00      	nop
 800de6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de6e:	bc08      	pop	{r3}
 800de70:	469e      	mov	lr, r3
 800de72:	4770      	bx	lr
