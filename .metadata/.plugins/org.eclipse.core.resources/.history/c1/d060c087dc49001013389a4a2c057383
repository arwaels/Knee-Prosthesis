/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    main.c
  * @brief   Prosthetic‑Knee Controller – dual BNO055 (IMU‑plus) + UART debug
  ******************************************************************************
  * © 2025  (MIT licence – simplify / customise as you wish)
  ******************************************************************************
  */
/* USER CODE END Header */

/* -------------------------  Standard Includes  ---------------------------- */
#include "main.h"
#include <stdio.h>
#include <string.h>
#include <math.h>

/* ---------------------------  BNO055 Driver  ------------------------------ */
#include "bno055.h"

/* -------------------------  Private Typedefs  ----------------------------- */
typedef enum { SENSOR_OK = 0, SENSOR_COMM_ERR, SENSOR_NOT_CAL } SensorStatus;

/* ---------------------------  Private Macros  ----------------------------- */
#define CALIB_TIMEOUT_MS   30000UL        /* 30 s max */

#define THIGH_ADDR_DEFAULT 0x28
#define SHANK_ADDR_DEFAULT 0x29

/* -----------------------  Peripheral Handles  ----------------------------- */
I2C_HandleTypeDef  hi2c3;
UART_HandleTypeDef huart2;
WWDG_HandleTypeDef hwwdg;

/* -------------------------  BNO055 Instances  ----------------------------- */
static struct bno055_t thigh, shank;

/* -----------------------  Runtime‑status Variables  ----------------------- */
static uint8_t thigh_calib[4] = {0};
static uint8_t shank_calib[4] = {0};

static float knee_angle     = 0.0f;
static float knee_velocity  = 0.0f;
static float knee_angle_old = 0.0f;
static uint32_t last_ms     = 0;

/* ------------------------  Forward Declarations  -------------------------- */
static void  SystemClock_Config(void);
static void  MX_GPIO_Init(void);
static void  MX_I2C3_Init(void);
static void  MX_USART2_UART_Init(void);
static void  MX_WWDG_Init(void);

static void  scan_i2c_and_assign(void);
static void  bno055_init_dual(void);
static void  read_dual_calibration(void);
static void  read_knee_angle(void);
static void  reset_bno(struct bno055_t *dev);
static int   bno055_bus_read(u8, u8, u8 *, u8);
static int   bno055_bus_write(u8, u8, u8 *, u8);

/* -------------------------  Retarget printf()  ---------------------------- */
int _write(int file, char *ptr, int len)
{
  (void)file;
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
  return len;
}

/* ========================================================================== */
int main(void)
/* ========================================================================== */
{
  /* HAL / clock / pins ----------------------------------------------------- */
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C3_Init();
  MX_WWDG_Init();

  /* Disable stdio buffering so text appears instantly ---------------------- */
  setvbuf(stdout, NULL, _IONBF, 0);

  /* Power‑up banner -------------------------------------------------------- */
  printf("\r\n==== Prosthetic Knee Ctrl – build %s %s ====\r\n", __DATE__, __TIME__);

  /* Allow BNO055s to finish their internal reset -------------------------- */
  HAL_Delay(700);

  /* Discover sensors, then configure them --------------------------------- */
  scan_i2c_and_assign();
  bno055_init_dual();

  /* Block (max 30 s) for gyro calibration --------------------------------- */
  printf("Calibrating gyros …\r\n");
  uint32_t t0 = HAL_GetTick();
  while (HAL_GetTick() - t0 < CALIB_TIMEOUT_MS)
  {
    read_dual_calibration();
    if (thigh_calib[1] == 3 && shank_calib[1] == 3)
      break;
    HAL_Delay(250);
  }
  printf("Calibration SYS/GYRO: thigh %d/%d  shank %d/%d\r\n",
         thigh_calib[0], thigh_calib[1], shank_calib[0], shank_calib[1]);

  /* ------------------------------  Main Loop  ---------------------------- */
  last_ms = HAL_GetTick();
  while (1)
  {
    if (HAL_GetTick() - last_ms >= 10)          /* 100 Hz */
    {
      read_knee_angle();
      last_ms = HAL_GetTick();
    }
    /* TODO: motor‑FSM and safety WWDG reload here */
  }
}

/* ========================================================================== */
/*                    ■■■  HAL‑Init Functions  ■■■                            */
/* ========================================================================== */

static void SystemClock_Config(void)
{
  RCC_OscInitTypeDef osc = {0};
  RCC_ClkInitTypeDef clk = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  osc.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  osc.HSIState            = RCC_HSI_ON;
  osc.PLL.PLLState        = RCC_PLL_ON;
  osc.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  osc.PLL.PLLM            = 16;
  osc.PLL.PLLN            = 336;
  osc.PLL.PLLP            = RCC_PLLP_DIV4;
  osc.PLL.PLLQ            = 2;
  HAL_RCC_OscConfig(&osc);

  clk.ClockType           = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK
                          | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  clk.SYSCLKSource        = RCC_SYSCLKSOURCE_PLLCLK;
  clk.AHBCLKDivider       = RCC_SYSCLK_DIV1;
  clk.APB1CLKDivider      = RCC_HCLK_DIV2;   /* 42 MHz – USART2 */
  clk.APB2CLKDivider      = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&clk, FLASH_LATENCY_2);
}

static void MX_USART2_UART_Init(void)
{
  huart2.Instance          = USART2;
  huart2.Init.BaudRate     = 115200;
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
  huart2.Init.StopBits     = UART_STOPBITS_1;
  huart2.Init.Parity       = UART_PARITY_NONE;
  huart2.Init.Mode         = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)  Error_Handler();
}

static void MX_I2C3_Init(void)
{
  hi2c3.Instance             = I2C3;
  hi2c3.Init.ClockSpeed      = 100000;
  hi2c3.Init.DutyCycle       = I2C_DUTYCYCLE_2;
  hi2c3.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)  Error_Handler();

  /* Filters (CubeMX → I2C > Configuration) */
  HAL_I2CEx_ConfigAnalogFilter (&hi2c3, I2C_ANALOGFILTER_ENABLE);
  HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 3);
}

static void MX_WWDG_Init(void)
{
  hwwdg.Instance       = WWDG;
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;   /* ≈ 1 kHz */
  hwwdg.Init.Window    = 100;
  hwwdg.Init.Counter   = 100;
  HAL_WWDG_Init(&hwwdg);
}

static void MX_GPIO_Init(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  GPIO_InitTypeDef io = {0};
  io.Pin   = LD2_Pin;
  io.Mode  = GPIO_MODE_OUTPUT_PP;
  io.Pull  = GPIO_NOPULL;
  io.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &io);
}

/* ========================================================================== */
/*                       ■■■  BNO055 Support  ■■■                             */
/* ========================================================================== */

static int bno055_bus_read(u8 addr, u8 reg, u8 *data, u8 len)
{
  return (HAL_I2C_Mem_Read(&hi2c3, addr << 1, reg,
                           I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK) ? 0 : -1;
}

static int bno055_bus_write(u8 addr, u8 reg, u8 *data, u8 len)
{
  return (HAL_I2C_Mem_Write(&hi2c3, addr << 1, reg,
                            I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK) ? 0 : -1;
}

static void scan_i2c_and_assign(void)
{
  uint8_t found[2] = {0};
  uint8_t n = 0;

  printf("Scanning I2C3 …\r\n");
  for (uint8_t a = 0x08; a <= 0x78; a++)
    if (HAL_I2C_IsDeviceReady(&hi2c3, a << 1, 1, 20) == HAL_OK &&
       (a == 0x28 || a == 0x29))
      found[n++] = a;

  thigh.dev_addr = (n > 0) ? found[0] : THIGH_ADDR_DEFAULT;
  shank.dev_addr = (n > 1) ? found[1] : SHANK_ADDR_DEFAULT;

  printf("BNO055‑thigh  @0x%02X  |  BNO055‑shank @0x%02X\r\n",
         thigh.dev_addr, shank.dev_addr);
}

static void bno055_init_dual(void)
{
  struct bno055_t *devs[2] = { &thigh, &shank };

  for (int i = 0; i < 2; ++i)
  {
    devs[i]->bus_read   = bno055_bus_read;
    devs[i]->bus_write  = bno055_bus_write;
    devs[i]->delay_msec = (void (*)(u32))HAL_Delay;

    if (bno055_init(devs[i])                ||
        bno055_set_power_mode(BNO055_POWER_MODE_NORMAL) ||
        bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS))
      printf("Init ERR dev 0x%02X\r\n", devs[i]->dev_addr);
  }
}

static void read_dual_calibration(void)
{
  bno055_get_sys_calib_stat (&thigh_calib[0]);
  bno055_get_gyro_calib_stat(&thigh_calib[1]);

  bno055_get_sys_calib_stat (&shank_calib[0]);
  bno055_get_gyro_calib_stat(&shank_calib[1]);
}

static void read_knee_angle(void)
{
  struct bno055_euler_float_t t, s;
  if (bno055_convert_float_euler_hpr_deg(&t) ||
      bno055_convert_float_euler_hpr_deg(&s))
  {
    printf("I2C read error – attempting reset\r\n");
    reset_bno(&thigh); reset_bno(&shank);
    return;
  }

  /* Difference about heading -> sagittal knee flex‑ext angle */
  float a = s.h - t.h;
  while (a >  180.f) a -= 360.f;
  while (a < -180.f) a += 360.f;

  /* Simple velocity estimate */
  static uint32_t t_prev = 0;
  uint32_t t_now = HAL_GetTick();
  float dt = (t_now - t_prev) * 1e-3f;
  if (dt > 0)
  {
    knee_velocity = (a - knee_angle) / dt;
    knee_angle    = a;
    t_prev        = t_now;
    printf("Knee %.1f°  vel %.1f°/s\r\n", knee_angle, knee_velocity);
  }
}

static void reset_bno(struct bno055_t *dev)
{
  uint8_t cmd = 0x20;
  HAL_I2C_Mem_Write(&hi2c3, dev->dev_addr << 1,
                    BNO055_SYS_TRIGGER_ADDR, I2C_MEMADD_SIZE_8BIT,
                    &cmd, 1, 100);
  HAL_Delay(700);
  bno055_init_dual();                       /* Re‑init both – simplest path */
}

/* ========================================================================== */
void Error_Handler(void)
/* ========================================================================== */
{
  __disable_irq();
  while (1)
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin), HAL_Delay(100);
}

/* USER CODE END  */

/* ------------------------------- EOF -------------------------------------- */
