/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "bno055.h"
#include <stdio.h>
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {
  SENSOR_OK = 0,
  SENSOR_COMM_ERROR,
  SENSOR_NOT_CALIBRATED
} SensorStatus;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define CALIBRATION_TIMEOUT_MS 30000  // 30 seconds max
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c3;
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

WWDG_HandleTypeDef hwwdg;

/* USER CODE BEGIN PV */
struct bno055_t thigh_sensor, shank_sensor;
uint8_t thigh_calib[4] = {0}; // [sys, gyro, accel, mag]
uint8_t shank_calib[4] = {0};
SensorStatus thigh_status = SENSOR_NOT_CALIBRATED;
SensorStatus shank_status = SENSOR_NOT_CALIBRATED;

float knee_angle = 0.0f;
float knee_velocity = 0.0f;
float prev_knee_angle = 0.0f;
uint32_t last_update = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_WWDG_Init(void);
static void MX_I2C3_Init(void);
/* USER CODE BEGIN PFP */
void I2C_Scan_And_Assign(void);
void BNO055_Init_Dual(void);
void Read_Dual_Calibration(void);
void Read_Knee_Angle(void);
void Reset_BNO055(struct bno055_t *sensor);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    return ch;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_WWDG_Init();
  MX_I2C3_Init();
  /* USER CODE BEGIN 2 */

  printf("\r\nProsthetic Knee Controller Initializing...\r\n");

  /* Bus scan to discover both BNO055 IÂ²C addresses*/
  HAL_Delay(700);
  I2C_Scan_And_Assign();

  BNO055_Init_Dual();

  printf("Sensors initialized. Starting calibration...\r\n");

  uint32_t calib_start = HAL_GetTick();
  uint8_t calib_printed = 0;

  while(1) {
    Read_Dual_Calibration();

    if(HAL_GetTick() - calib_start > calib_printed * 1000) {
      printf("Calib: Thigh(SYS:%d G:%d) Shank(SYS:%d G:%d)\r\n",
             thigh_calib[0], thigh_calib[1],
             shank_calib[0], shank_calib[1]);
      calib_printed++;
    }

    if(thigh_calib[1] == 3 && shank_calib[1] == 3) {
      printf("Calibration complete!\r\n");
      break;
    }

    if(HAL_GetTick() - calib_start > CALIBRATION_TIMEOUT_MS) {
      printf("Calibration timeout! Using sensors anyway.\r\n");
      break;
    }
    HAL_Delay(100);
  }

  last_update = HAL_GetTick();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
       last_update = HAL_GetTick();
       while (1) {
          if(HAL_GetTick() - last_update >= 10) {
            Read_Knee_Angle();
            last_update = HAL_GetTick();
          }
          // Add motor control logic here
        }
      }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{

  /* USER CODE BEGIN WWDG_Init 0 */

  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
  hwwdg.Init.Window = 64;
  hwwdg.Init.Counter = 64;
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void I2C_Scan_And_Assign(void) {
  printf("Scanning I2C bus for BNO055 sensors...\r\n");
  uint8_t found_addr[2] = {0};
  uint8_t found_count = 0;

  for (uint8_t addr = 0x08; addr < 0x78; addr++) {
    if (HAL_I2C_IsDeviceReady(&hi2c3, addr << 1, 2, 10) == HAL_OK) {
      printf("Found device at 0x%02X\r\n", addr);
      if (addr == 0x28 || addr == 0x29) {
        found_addr[found_count++] = addr;
        if (found_count >= 2) break;
      }
    }
  }

  if (found_count < 2) {
    printf("Using default addresses: 0x28 and 0x29\r\n");
    found_addr[0] = 0x28;
    found_addr[1] = 0x29;
  }

  thigh_sensor.dev_addr = found_addr[0];
  shank_sensor.dev_addr = found_addr[1];
  printf("Thigh sensor: 0x%02X, Shank sensor: 0x%02X\r\n",
         thigh_sensor.dev_addr, shank_sensor.dev_addr);
}

s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt) {
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c3, dev_addr << 1,
                                              reg_addr, I2C_MEMADD_SIZE_8BIT,
                                              reg_data, cnt, 100);
  return (status == HAL_OK) ? 0 : -1;
}

s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt) {
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c3, dev_addr << 1,
                                               reg_addr, I2C_MEMADD_SIZE_8BIT,
                                               reg_data, cnt, 100);
  return (status == HAL_OK) ? 0 : -1;
}
// Initialization
void BNO055_Init_Dual(void) {
  thigh_sensor.bus_read = BNO055_I2C_bus_read;
  thigh_sensor.bus_write = BNO055_I2C_bus_write;
  thigh_sensor.delay_msec = (void (*)(u32))HAL_Delay;
  bno055_init(&thigh_sensor);
  bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS);
  bno055_set_power_mode(BNO055_POWER_MODE_NORMAL);

  shank_sensor.bus_read = BNO055_I2C_bus_read;
  shank_sensor.bus_write = BNO055_I2C_bus_write;
  shank_sensor.delay_msec = (void (*)(u32))HAL_Delay;
  bno055_init(&shank_sensor);
  bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS);
  bno055_set_power_mode(BNO055_POWER_MODE_NORMAL);
}


// Calibration
void Read_Dual_Calibration(void) {
  bno055_get_sys_calib_stat(&thigh_calib[0]);
  bno055_get_gyro_calib_stat(&thigh_calib[1]);
  bno055_get_accel_calib_stat(&thigh_calib[2]);
  bno055_get_mag_calib_stat(&thigh_calib[3]);

  bno055_get_sys_calib_stat(&shank_calib[0]);
  bno055_get_gyro_calib_stat(&shank_calib[1]);
  bno055_get_accel_calib_stat(&shank_calib[2]);
  bno055_get_mag_calib_stat(&shank_calib[3]);
}

void Read_Knee_Angle(void) {
  struct bno055_euler_float_t thigh_euler, shank_euler;

  if (bno055_convert_float_euler_hpr_deg(&thigh_euler)) {
    thigh_status = SENSOR_COMM_ERROR;
    Reset_BNO055(&thigh_sensor);
    return;
  } else {
    thigh_status = SENSOR_OK;
  }

  if (bno055_convert_float_euler_hpr_deg(&shank_euler)) {
    shank_status = SENSOR_COMM_ERROR;
    Reset_BNO055(&shank_sensor);
    return;
  } else {
    shank_status = SENSOR_OK;
  }

  if (thigh_status == SENSOR_OK && shank_status == SENSOR_OK) {
    float new_angle = shank_euler.h - thigh_euler.h;

    // Normalize angle to -180Â° to +180Â° range
    while (new_angle > 180.0f) new_angle -= 360.0f;
    while (new_angle < -180.0f) new_angle += 360.0f;

    prev_knee_angle = knee_angle;
    knee_angle = new_angle;

    uint32_t now = HAL_GetTick();
    float dt = (now - last_update) / 1000.0f;
    knee_velocity = (knee_angle - prev_knee_angle) / dt;

    printf("Knee: %.1fÂ°, Vel: %.1fÂ°/s\r\n", knee_angle, knee_velocity);
  }
}

void Reset_BNO055(struct bno055_t *sensor) {
  printf("Resetting sensor 0x%02X...\r\n", sensor->dev_addr);
  uint8_t reset_cmd = 0x20;
  HAL_I2C_Mem_Write(&hi2c3, sensor->dev_addr << 1,
                    BNO055_SYS_TRIGGER_ADDR, I2C_MEMADD_SIZE_8BIT,
                    &reset_cmd, 1, 100);
  HAL_Delay(700);

  // Reinitialize sensor
    sensor->bus_read = BNO055_I2C_bus_read;
    sensor->bus_write = BNO055_I2C_bus_write;
    sensor->delay_msec = (void (*)(u32))HAL_Delay;
    bno055_init(sensor);
    bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS);
    bno055_set_power_mode(BNO055_POWER_MODE_NORMAL);
  }

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
